_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x0084
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     0x0024
register11          EQU                     0x0026
register12          EQU                     0x0028
register13          EQU                     0x002A
fgbgColour          EQU                     register0 + 0x14
cursorXY            EQU                     register0 + 0x16
midiStreamPtr       EQU                     register0 + 0x18
midiDelay           EQU                     register0 + 0x1A
frameCountPrev      EQU                     register0 + 0x1C
miscFlags           EQU                     register0 + 0x1E

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_5                  EQU                     0x022f
_6                  EQU                     0x023d
_7                  EQU                     0x0241
_8                  EQU                     0x0247
_10                 EQU                     0x0250
_20                 EQU                     0x025c
_30                 EQU                     0x0264
_40                 EQU                     0x0289
_50                 EQU                     0x02ae
_60                 EQU                     0x02be
_70                 EQU                     0x02cf
_80                 EQU                     0x02df
_85                 EQU                     0x08a2
_90                 EQU                     0x08b5
_end_0x034a         EQU                     0x08ba
_page_0x08a0        EQU                     0x08a0

; Variables
_a                  EQU                     0x0030
_x                  EQU                     0x0032
_y                  EQU                     0x0034
_u                  EQU                     0x0036
_v                  EQU                     0x0038
_w                  EQU                     0x003a

; Strings

; Lookup Tables

; Code
_entryPoint_        Initialise              
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                                                ; INIT

_5                  LDWI                    153
                    STW                     register0
                    LDI                     0
                    POKE                    register0
                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC                        ; poke 153,0:cls

_6                  LDI                     61
                    STW                     _a                              ; a=61

_7                  LDW                     _a
                    SUBI                    1
                    STW                     _a                              ; a=a-1

_8                  LDWI                    153
                    STW                     register0
                    LD                      _a
                    POKE                    register0                       ; poke 153,a

_10                 LDI                     80
                    STW                     _x
                    LDI                     60
                    STW                     _y
                    LDW                     _a
                    STW                     _u                              ; x=80:y=60:u=a

_20                 LDI                     0
                    STW                     _v
                    LDI                     0
                    STW                     _w                              ; v=0:w=0

_30                 LDW                     _x
                    SUBW                    _u
                    ST                      cursorXY
                    LDW                     _y
                    SUBW                    _v
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC
                    LDW                     _u
                    ADDW                    _u
                    STW                     drawLine_x2
                    LDI                     0
                    STW                     drawLine_y2
                    AtLineCursor            
                    DrawLine                                                ; at x-u,y-v:line u+u,0

_40                 LDW                     _x
                    SUBW                    _u
                    ST                      cursorXY
                    LDW                     _y
                    ADDW                    _v
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC
                    LDW                     _u
                    ADDW                    _u
                    STW                     drawLine_x2
                    LDI                     0
                    STW                     drawLine_y2
                    AtLineCursor            
                    DrawLine                                                ; at x-u,y+v:line u+u,0

_50                 LDW                     _w
                    ADDW                    _v
                    ADDW                    _v
                    ADDI                    1
                    STW                     _w
                    LDW                     _v
                    ADDI                    1
                    STW                     _v                              ; w=w+v+v+1:v=v+1

_60                 LDW                     _w
                    CALL                    convertLtOpAddr
                    PageJumpBEQ             _70
                    LDWI                    _30
                    CALL                    giga_vAC                        ; if w<0 then goto 30

_70                 LDW                     _w
                    SUBW                    _u
                    SUBW                    _u
                    ADDI                    1
                    STW                     _w
                    LDW                     _u
                    SUBI                    1
                    STW                     _u                              ; w=w-u-u+1:u=u-1

_80                 LDW                     _u
                    CALL                    convertGtOpAddr
                    PageJumpBEQ             _85
                    LDWI                    _60
                    CALL                    giga_vAC                        ; if u>0 then goto 60

                    STW                     0x82
                    LDWI                    _page_0x08a0
                    CALL                    giga_vAC
_page_0x08a0        LDW                     0x82
_85                 LDW                     _a
                    SUBI                    2
                    CALL                    convertLtOpAddr
                    PageJumpBEQ             _90
                    LDWI                    _85
                    CALL                    giga_vAC                        ; if a<2 then goto 85

_90                 LDWI                    _7
                    CALL                    giga_vAC                        ; goto 7

_end_0x034a         BRA                     _end_0x034a                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY HERE, modifications must be made in the original include files                                       *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

convertEqOp         EQU     0x7fc3
convertNeOp         EQU     0x7fcc
convertLeOp         EQU     0x7fd5
convertGeOp         EQU     0x7fde
convertLtOp         EQU     0x7fe7
convertGtOp         EQU     0x7ff0
resetVideoTable     EQU     0x7ed8
initClearFuncs      EQU     0x7fa0
clearVertBlinds     EQU     0x7ea0
drawLine            EQU     0x7ca0
drawLineExt         EQU     0x7aa0
drawLineDelta1      EQU     0x79a0
atLineCursor        EQU     0x7ba0
atTextCursor        EQU     0x7da0
convertEqOpAddr     EQU     0x00d2
convertNeOpAddr     EQU     0x00d4
convertLeOpAddr     EQU     0x00d6
convertGeOpAddr     EQU     0x00d8
convertLtOpAddr     EQU     0x00da
convertGtOpAddr     EQU     0x00dc


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register4
top                 EQU     register5
bot                 EQU     register6
vramAddr            EQU     register7
evenAddr            EQU     register8
    
    
                    ; resets video table pointers
resetVideoTable     LDWI    0x0008
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
    
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres+8
                    BLT     resetVT_loop
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram                           ; top line
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



graphicsMode        EQU     register0
waitVBlankNum       EQU     register0
drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
    
    
drawLine            PUSH
                    LDI     1
                    STW     drawLine_dx1
                    STW     drawLine_dx2
                    STW     drawLine_dy1
                    LDI     0
                    STW     drawLine_dy2                
    
                    LDWI    0x8000
                    STW     drawLine_tmp
                    
                    LDW     drawLine_x2         ; sx = x2 - x1
                    SUBW    drawLine_x1
                    STW     drawLine_sx
                    ANDW    drawLine_tmp        
                    BEQ     drawL_dy
                    LDWI    -1
                    STW     drawLine_dx1        
                    STW     drawLine_dx2        ; dx1 = dx2 = (sx & 0x8000) ? -1 : 1
                    LDI     0                   ; sx = (sx & 0x8000) ? 0 - sx : sx
                    SUBW    drawLine_sx
                    STW     drawLine_sx                
                    
drawL_dy            LDW     drawLine_y2
                    SUBW    drawLine_y1
                    STW     drawLine_sy
                    STW     drawLine_h          ; h = sy
                    ANDW    drawLine_tmp
                    BEQ     drawL_ext
                    
                    LDWI    -1
                    STW     drawLine_dy1        ; dy1 = (sy & 0x8000) ? -1 : 1
                    LDI     0                   
                    SUBW    drawLine_sy
                    STW     drawLine_sy         ; sy = (sy & 0x8000) ? 0 - sy : sy
                    SUBW    drawLine_sx
                    BLE     drawL_ext           
                    LDW     drawLine_dy1
                    STW     drawLine_dy2        ; if(sx < sy) dy2 = -1
    
drawL_ext           LDWI    drawLineLoadXY
                    CALL    giga_vAC
                    LDWI    drawLineExt
                    CALL    giga_vAC



drawLineExt         LDW     drawLine_sy
                    SUBW    drawLine_sx
                    BLE     drawL_num
                    LDI     0
                    STW     drawLine_dx2        ; if(sx < sy) dx2 = 0
                    LDW     drawLine_sy       
                    STW     drawLine_tmp
                    LDW     drawLine_sx
                    STW     drawLine_sy
                    LDW     drawLine_tmp
                    STW     drawLine_sx         ; swap sx with sy
                    LDW     drawLine_h
                    BLE     drawL_num
                    LDI     1
                    STW     drawLine_dy2        ; if(h > 0) dy2 = 1
    
drawL_num           LDWI    SYS_LSRW1_48
                    STW     giga_sysFn          
                    LDW     drawLine_sx
                    SYS     0xF6                ; 0xF6 = 270-max(14,48/2)
                    STW     drawLine_num        ; numerator = sx>>1
                    STW     drawLine_count
                    INC     drawLine_count      ; for(count=sx>>1; counti>=0; --i)
                    
                    LDWI    drawLineLoadDXY
                    CALL    giga_vAC     
                    
drawL_loop          LD      fgbgColour + 1
                    POKE    drawLine_xy1        ; plot start pixel
                    POKE    drawLine_xy2        ; plot end pixel, (meet in middle)      
                    
                    LDW     drawLine_num        ; numerator += sy
                    ADDW    drawLine_sy
                    STW     drawLine_num
                    SUBW    drawLine_sx
                    BLE     drawL_flip          ; if(numerator <= sx) goto flip
                    
                    STW     drawLine_num        ; numerator -= sx
                    LDWI    drawLineDelta1      ; x1 += dx1, y1 += dx1, x2 -= dx1, y2 -= dx1
                    CALL    giga_vAC
                    BRA     drawL_count
                    
drawL_flip          LDWI    drawLineDelta2      ; x1 += dx2, y1 += dx2, x2 -= dx2, y2 -= dx2
                    CALL    giga_vAC
                    
drawL_count         LDW     drawLine_count
                    SUBI    0x01
                    STW     drawLine_count
                    BGT     drawL_loop
                    POP
                    RET


drawLineDelta1      LDW     drawLine_xy1
                    ADDW    drawLine_dxy1
                    STW     drawLine_xy1        ; xy1 += dxy1
                    
                    LDW     drawLine_xy2
                    SUBW    drawLine_dxy1
                    STW     drawLine_xy2        ; xy2 -= dxy1
                    RET
                    
drawLineDelta2      LDW     drawLine_xy1        
                    ADDW    drawLine_dxy2
                    STW     drawLine_xy1        ; xy1 += dxy2
                    
                    LDW     drawLine_xy2        
                    SUBW    drawLine_dxy2
                    STW     drawLine_xy2        ; xy2 -= dxy2
                    RET
                    
drawLineLoadXY      LD      drawLine_x1
                    ST      drawLine_xy1
                    LD      drawLine_y1
                    ADDI    8
                    ST      drawLine_xy1 + 1    ; xy1 = x1 | ((y1+8)<<8)
                    
                    LD      drawLine_x2
                    ST      drawLine_xy2
                    LD      drawLine_y2
                    ADDI    8
                    ST      drawLine_xy2 + 1    ; xy2 = x2 | ((y2+8)<<8)
                    RET
                    
drawLineLoadDXY     LDWI    SYS_LSLW8_24
                    STW     giga_sysFn          
                    LDW     drawLine_dy1
                    SYS     0x00                ; LSL 8, 0x00 = 270-max(14,24/2)
                    ADDW    drawLine_dx1
                    STW     drawLine_dxy1       ; dxy1 = dx1 + (dy1<<8)
    
                    LDW     drawLine_dy2
                    SYS     0x00                ; LSL 8, 0x00 = 270-max(14,24/2)
                    ADDW    drawLine_dx2
                    STW     drawLine_dxy2       ; dxy2 = dx2 + (dy2<<8)
                    RET


atLineCursor        LD      cursorXY
                    STW     drawLine_x1
                    SUBI    160
                    BLT     atLC_skip0
                    LDI     0
                    STW     drawLine_x1
                    
atLC_skip0          LDW     drawLine_x1
                    ADDW    drawLine_x2
                    STW     drawLine_x2
                    SUBI    160
                    BLT     atLC_skip1
                    LDI     0
                    STW     drawLine_x2
                    
atLC_skip1          LDW     drawLine_x2
                    ST      cursorXY
                    
                    LD      cursorXY + 1
                    STW     drawLine_y1
                    SUBI    120
                    BLT     atLC_skip2
                    LDI     119
                    STW     drawLine_y1
                    
atLC_skip2          LDW     drawLine_y1
                    ADDW    drawLine_y2
                    STW     drawLine_y2
                    SUBI    120
                    BLT     atLC_skip3
                    LDI     119
                    STW     drawLine_y2
                    
atLC_skip3          LDW     drawLine_y2            
                    ST      cursorXY + 1
                    RET


textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textFont            EQU     register2
textChr             EQU     register3
textHex             EQU     register4
textSlice           EQU     register5
scanLine            EQU     register6
digitMult           EQU     register7
digitIndex          EQU     register8
clearLoop           EQU     register9
    
    
atTextCursor        LD      cursorXY
                    SUBI    giga_xres - 5
                    BLT     atTC_skip0
                    LDI     0
                    STW     cursorXY
                    
atTC_skip0          LD      cursorXY + 1
                    SUBI    giga_yres - 7
                    BLT     atTC_skip1
                    LDI     giga_yres - 8
                    STW     cursorXY + 1
                    
atTC_skip1          LD      cursorXY + 1
                    SUBI    giga_yres - 8
                    BGE     atTC_skip2
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET
                    
atTC_skip2          LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET

