_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x00a0
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     0x0024
register11          EQU                     0x0026
register12          EQU                     0x0028
register13          EQU                     0x002A
fgbgColour          EQU                     register0 + 0x14
cursorXY            EQU                     register0 + 0x16
midiStreamPtr       EQU                     register0 + 0x18
midiDelay           EQU                     register0 + 0x1A
frameCountPrev      EQU                     register0 + 0x1C
miscFlags           EQU                     register0 + 0x1E

; Includes
%include            include/gigatron.i
%include            include/macros_CALLI.i

; Labels
_entryPoint_        EQU                     0x0200
_2                  EQU                     0x0241
_113                EQU                     0x0291
_50                 EQU                     0x02aa
_119                EQU                     0x02c3
_51                 EQU                     0x02dc
_101                EQU                     0x08a0
_114                EQU                     0x08b9
_53                 EQU                     0x08d2
_116                EQU                     0x08eb
_54                 EQU                     0x09ab
_121                EQU                     0x09c4
_55                 EQU                     0x09dd
_117                EQU                     0x09f6
_105                EQU                     0x0ab5
_57                 EQU                     0x0ace
_111                EQU                     0x0ae7
_48                 EQU                     0x0ba7
_112                EQU                     0x0bc0
_122                EQU                     0x0bd9
_198                EQU                     0x0ca0
_200                EQU                     0x0cb3
_206                EQU                     0x0db1
_207                EQU                     0x0dbc
_208                EQU                     0x0dc7
_209                EQU                     0x0dd2
_inverse            EQU                     0x0ddd
_normal             EQU                     0x0df9
_pchar              EQU                     0x0ebb
_end_0x056e         EQU                     0x0ed3
_if_0x0272          EQU                     0x0260
_if_0x0286          EQU                     0x0270
_page_0x09a0        EQU                     0x09a0
_page_0x0aa0        EQU                     0x0aa0
_page_0x0ba0        EQU                     0x0ba0
_if_0x0477          EQU                     0x0bf2
_next_0x0498        EQU                     0x0cb7
_page_0x0da0        EQU                     0x0da0
_page_0x0ea0        EQU                     0x0ea0

; Variables
_inv                EQU                     0x0030
_char               EQU                     0x0032
_posx               EQU                     0x0034
_posy               EQU                     0x0036
_fg                 EQU                     0x0038
_bg                 EQU                     0x003a
_a                  EQU                     0x003c
_b                  EQU                     0x003e
_p                  EQU                     0x0040
_z                  EQU                     0x0042
_k                  EQU                     0x0044
_c                  EQU                     0x0046

; Strings
str_0x7fa0          EQU                     0x7fa0
str_0x7fa0          DB                      18 ' 2 3   5 6 7   9 0'
str_0x7fb3          EQU                     0x7fb3
str_0x7fb3          DB                      19 'Q W E R T Y U I O P'
str_0x7fc7          EQU                     0x7fc7
str_0x7fc7          DB                      3 'Z: '
str_0x7fcb          EQU                     0x7fcb
str_0x7fcb          DB                      8 'Metallic'
str_0x7fd4          EQU                     0x7fd4
str_0x7fd4          DB                      8 'Triangle'
str_0x7fdd          EQU                     0x7fdd
str_0x7fdd          DB                      8 'Pulse   '
str_0x7fe6          EQU                     0x7fe6
str_0x7fe6          DB                      8 'Sawtooth'

; Lookup Tables
lut_numericLabs     EQU                     0x78a0
lut_numericLabs     DW                      2 113 50 119 51 101 114 53 116 54 121 55 117 105 57 111 48 112 122 198 200 206 207 208 209 -1
lut_numericAddrs    EQU                     0x77a0
lut_numericAddrs    DW                      0x0241 0x0291 0x02aa 0x02c3 0x02dc 0x08a0 0x08b9 0x08d2 0x08eb 0x09ab 0x09c4 0x09dd 0x09f6 0x0ab5 0x0ace 0x0ae7 0x0ba7 0x0bc0 0x0bd9 0x0ca0 0x0cb3 0x0db1 0x0dbc 0x0dc7 0x0dd2 

; Code
_entryPoint_        Initialise                                              ; INIT

                    LDI                     0
                    STW                     _inv
                    STW                     _char
                    STW                     _posx
                    STW                     _posy                           ; inv=0:char=inv:posx=char:posy=posx

                    LDI                     0xb4
                    PEEK                    
                    STW                     _fg
                    LDI                     0xb5
                    PEEK                    
                    STW                     _bg                             ; fg=peek(180) : bg=peek(181)

                    LDI                     0
                    STW                     _a
                    STW                     _b
                    LDWI                    508
                    STW                     _p
                    LDI                     2
                    STW                     graphicsMode
                    ScanlineMode            
                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC
                    LDI                     2
                    STW                     _z
                    CALLI                   _198                            ; a=0:b=a:p=256+252:mode 2:cls:z=2:gosub 198

_2                  LDI                     0x10
                    PEEK                    
                    STW                     _k                              ; k=peek(16)

                    LDI                     2
                    STW                     waitVBlankNum
                    WaitVBlank                                              ; wait 2

                    LDW                     _inv
                    SUBI                    1
                    CALLI                   convertEqOp
                    PageJumpBEQ             _if_0x0272
                    CALLI                   _normal
                    CALLI                   _2                              ; if inv=1 then gosub normal: goto 2

_if_0x0272          LDW                     _k
                    SUBI                    126
                    CALLI                   convertGtOp
                    PageJumpBEQ             _if_0x0286
                    CALLI                   _2                              ; if k>126 then goto 2

_if_0x0286          LDW                     _k
                    STW                     numericLabel
                    CALLI                   gosubNumericLabel               ; gosub k

                    LD                      _a
                    POKE                    _p
                    LDW                     _p
                    ADDI                    1
                    STW                     0xd0
                    LD                      _b
                    POKE                    0xd0                            ; poke p,a:poke p+1,b

                    LDWI                    44
                    STW                     register0
                    LDI                     30
                    POKE                    register0
                    CALLI                   _2                              ; poke 44,30:goto 2

_113                LDI                     73
                    STW                     _a
                    LDI                     8
                    STW                     _b
                    LDI                     81
                    STW                     _char
                    LDI                     2
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=73 :b=8 :char=81:posx=2  :posy=8:gosub inverse:return:'C

_50                 LDI                     11
                    STW                     _a
                    LDI                     9
                    STW                     _b
                    LDI                     50
                    STW                     _char
                    LDI                     8
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=11 :b=9 :char=50:posx=8  :posy=0:gosub inverse:return:'C#

_119                LDI                     80
                    STW                     _a
                    LDI                     9
                    STW                     _b
                    LDI                     87
                    STW                     _char
                    LDI                     14
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=80 :b=9 :char=87:posx=14 :posy=8:gosub inverse:return:'D

_51                 LDI                     25
                    STW                     _a
                    LDI                     10
                    STW                     _b
                    LDI                     51
                    STW                     _char
                    LDI                     20
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=25 :b=10:char=51:posx=20 :posy=0:gosub inverse:return:'D#

                    CALLI                    _101
_101                LDI                     103
                    STW                     _a
                    LDI                     10
                    STW                     _b
                    LDI                     69
                    STW                     _char
                    LDI                     26
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=103:b=10:char=69:posx=26 :posy=8:gosub inverse:return:'E

_114                LDI                     57
                    STW                     _a
                    LDI                     11
                    STW                     _b
                    LDI                     82
                    STW                     _char
                    LDI                     38
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=57 :b=11:char=82:posx=38 :posy=8:gosub inverse:return:'F

_53                 LDI                     16
                    STW                     _a
                    LDI                     12
                    STW                     _b
                    LDI                     53
                    STW                     _char
                    LDI                     44
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=16 :b=12:char=53:posx=44 :posy=0:gosub inverse:return:'F#

_116                LDI                     108
                    STW                     _a
                    LDI                     12
                    STW                     _b
                    LDI                     84
                    STW                     _char
                    LDI                     50
                    CALLI                   _page_0x09a0
_page_0x09a0        STW                     _posx
                    LDI                     8
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=108:b=12:char=84:posx=50 :posy=8:gosub inverse:return:'G

_54                 LDI                     78
                    STW                     _a
                    LDI                     13
                    STW                     _b
                    LDI                     54
                    STW                     _char
                    LDI                     56
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=78 :b=13:char=54:posx=56 :posy=0:gosub inverse:return:'G#

_121                LDI                     53
                    STW                     _a
                    LDI                     14
                    STW                     _b
                    LDI                     89
                    STW                     _char
                    LDI                     62
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=53 :b=14:char=89:posx=62 :posy=8:gosub inverse:return:'A

_55                 LDI                     35
                    STW                     _a
                    LDI                     15
                    STW                     _b
                    LDI                     55
                    STW                     _char
                    LDI                     68
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=35 :b=15:char=55:posx=68 :posy=0:gosub inverse:return:'A#

_117                LDI                     23
                    STW                     _a
                    CALLI                   _page_0x0aa0
_page_0x0aa0        LDI                     16
                    STW                     _b
                    LDI                     85
                    STW                     _char
                    LDI                     74
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=23 :b=16:char=85:posx=74 :posy=8:gosub inverse:return:'B

_105                LDI                     19
                    STW                     _a
                    LDI                     17
                    STW                     _b
                    LDI                     73
                    STW                     _char
                    LDI                     86
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=19 :b=17:char=73:posx=86 :posy=8:gosub inverse:return:'C

_57                 LDI                     21
                    STW                     _a
                    LDI                     18
                    STW                     _b
                    LDI                     57
                    STW                     _char
                    LDI                     92
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=21 :b=18:char=57:posx=92 :posy=0:gosub inverse:return:'C#

_111                LDI                     31
                    STW                     _a
                    LDI                     19
                    STW                     _b
                    LDI                     79
                    STW                     _char
                    LDI                     98
                    STW                     _posx
                    LDI                     8
                    CALLI                   _page_0x0ba0
_page_0x0ba0        STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=31 :b=19:char=79:posx=98 :posy=8:gosub inverse:return:'D

_48                 LDI                     50
                    STW                     _a
                    LDI                     20
                    STW                     _b
                    LDI                     48
                    STW                     _char
                    LDI                     104
                    STW                     _posx
                    LDI                     0
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=50 :b=20:char=48:posx=104:posy=0:gosub inverse:return:'D#

_112                LDI                     77
                    STW                     _a
                    LDI                     21
                    STW                     _b
                    LDI                     80
                    STW                     _char
                    LDI                     110
                    STW                     _posx
                    LDI                     8
                    STW                     _posy
                    CALLI                   _inverse
                    POP                     
                    RET                                                     ; a=77 :b=21:char=80:posx=110:posy=8:gosub inverse:return:'E

_122                LDI                     0x0f
                    PEEK                    
                    SUBI                    255
                    CALLI                   convertEqOp
                    PageJumpBEQ             _if_0x0477
                    LDW                     _z
                    ADDI                    1
                    ANDI                    3
                    STW                     _z
                    CALLI                   _200                            ; if peek(15)=255 then z=(z+1)AND3:goto 200

_if_0x0477          LDI                     0
                    STW                     _a
                    STW                     _b
                    POP                     
                    RET                                                     ; a=0:b=a:return

                    CALLI                    _198
_198                PUSH                    
                    PrintString             str_0x7fa0
                    CALLI                   newLineScroll                   ; print " 2 3   5 6 7   9 0"

                    PrintString             str_0x7fb3
                    CALLI                   newLineScroll                   ; print "Q W E R T Y U I O P"

_200                LDI                     1
                    STW                     _c                              ; for c=1 to 4

_next_0x0498        LDWI                    256
                    STW                     mathX
                    LDW                     _c
                    STW                     mathY
                    CALLI                   multiply16bit
                    ADDI                    252
                    STW                     _p
                    SUBI                    1
                    STW                     0xd2
                    LD                      _z
                    POKE                    0xd2                            ; p=256*c+252:poke p-1,z

                    LDI                     0
                    POKE                    _p
                    LDW                     _p
                    ADDI                    1
                    STW                     0xd0
                    LDI                     0
                    POKE                    0xd0                            ; poke p,0:poke p+1,0

                    ForNextLoopUp           _c _next_0x0498 4               ; next c

                    LDI                     2
                    ST                      cursorXY
                    LDI                     24
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALLI                   _page_0x0da0
_page_0x0da0        CALL                    giga_vAC
                    PrintString             str_0x7fc7                      ; at 2,24:print "Z: ";

                    LDI                     206
                    ADDW                    _z
                    STW                     numericLabel
                    CALLI                   gotoNumericLabel                ; goto 206+z

_206                PrintString             str_0x7fcb
                    CALLI                   newLineScroll
                    POP                     
                    RET                                                     ; print "Metallic":return

_207                PrintString             str_0x7fd4
                    CALLI                   newLineScroll
                    POP                     
                    RET                                                     ; print "Triangle":return

_208                PrintString             str_0x7fdd
                    CALLI                   newLineScroll
                    POP                     
                    RET                                                     ; print "Pulse   ":return

_209                PrintString             str_0x7fe6
                    CALLI                   newLineScroll
                    POP                     
                    RET                                                     ; print "Sawtooth":return

_inverse            PUSH                    
                    LDI                     1
                    STW                     _inv
                    LDWI                    180
                    STW                     register0
                    LD                      _bg
                    POKE                    register0
                    LDWI                    181
                    STW                     register0
                    LD                      _fg
                    POKE                    register0                       ; inv=1 : poke 180,bg : poke 181,fg

                    CALLI                   _pchar                          ; gosub pchar

                    POP                     
                    RET                                                     ; return

_normal             PUSH                    
                    CALLI                   _page_0x0ea0
_page_0x0ea0        LDI                     0
                    STW                     _inv
                    LDWI                    180
                    STW                     register0
                    LD                      _fg
                    POKE                    register0
                    LDWI                    181
                    STW                     register0
                    LD                      _bg
                    POKE                    register0                       ; inv=0 : poke 180,fg : poke 181,bg

                    CALLI                   _pchar                          ; gosub pchar

                    POP                     
                    RET                                                     ; return

_pchar              PUSH                    
                    LDW                     _posx
                    ST                      cursorXY
                    LDW                     _posy
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC                        ; at posx,posy

                    LDW                     _char
                    PrintAcChar             
                    CALLI                   newLineScroll                   ; print chr$(char)

                    POP                     
                    RET                                                     ; return

_end_0x056e         BRA                     _end_0x056e                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY HERE, modifications must be made in the original include files                                       *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

convertEqOp         EQU     0x7fef
convertNeOp         EQU     0x7ef5
convertLeOp         EQU     0x7def
convertGeOp         EQU     0x7cf5
convertLtOp         EQU     0x7bf7
convertGtOp         EQU     0x7eec
multiply16bit       EQU     0x7cd2
gotoNumericLabel    EQU     0x7acd
gosubNumericLabel   EQU     0x7ca0
scanlineMode        EQU     0x7ec1
waitVBlank          EQU     0x7ed5
resetVideoTable     EQU     0x78d4
initClearFuncs      EQU     0x7ea0
clearVertBlinds     EQU     0x7da0
clearCursorRow      EQU     0x76a0
printText           EQU     0x7dd6
printChar           EQU     0x79a0
atTextCursor        EQU     0x7aa0
newLineScroll       EQU     0x7ba0


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


mathX               EQU     register0
mathY               EQU     register1
mathSum             EQU     register2
mathMask            EQU     register3
mathRem             EQU     register4
mathSign            EQU     register5
mathScratch         EQU     register6
mathShift           EQU     register7
    
    
                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDI     1
    
multiply16_loop     STW     mathMask
                    ANDW    mathY
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum
                    
multiply16_skip     LDW     mathX
                    ADDW    mathX
                    STW     mathX
                    LDW     mathMask
                    ADDW    mathMask
                    BNE     multiply16_loop
                    
                    LDW     mathSum
                    RET


numericLabel        EQU     register0
lutLabs             EQU     register1
lutAddrs            EQU     register2
lutIndex            EQU     register3
lutLabel            EQU     register4


                    ; find numeric label and jump to it
gotoNumericLabel    LDWI    lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    lut_numericAddrs
                    STW     lutAddrs
                    
gotoNL_loop         LDW     lutIndex
                    DEEK
                    STW     lutLabel
                    LD      lutLabel + 1
                    ANDI    0x80                            ; check for -1
                    BEQ     gotoNL_cont
                    RET
                    
gotoNL_cont         LDW     lutLabel
                    SUBW    numericLabel
                    BEQ     gotoNL_found
                    INC     lutIndex
                    INC     lutIndex                        ; loop through lut until found or -1
                    BRA     gotoNL_loop
                    
gotoNL_found        LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and jump, (note we never return from here)


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   LDWI    lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    STW     lutLabel
                    LD      lutLabel + 1
                    ANDI    0x80                            ; check for -1
                    BEQ     gosubNL_cont
                    RET
                    
gosubNL_cont        LDW     lutLabel
                    SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex                        ; loop through lut until found or -1
                    BRA     gosubNL_loop
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    PUSH
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


graphicsMode        EQU     register0
waitVBlankNum       EQU     register0
drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
    
    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     0xE6                ; 270 - max(14,80/2)
                    RET


waitVBlank          LD      waitVBlankNum
                    SUBI    0x01
                    ST      waitVBlankNum
                    BGE     waitVB_start
                    RET
    
waitVB_start        LD      giga_frameCount
                    SUBW    frameCountPrev
                    BEQ     waitVB_start
                    LD      giga_frameCount
                    STW     frameCountPrev
                    BRA     waitVBlank



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register4
top                 EQU     register5
bot                 EQU     register6
vramAddr            EQU     register7
evenAddr            EQU     register8
    
    
                    ; resets video table pointers
resetVideoTable     LDWI    0x0008
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
    
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres+8
                    BLT     resetVT_loop
                    RET


initClearFuncs      PUSH
                    CALLI   resetVideoTable
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    CALLI   initClearFuncs

                    LDWI    giga_vram                           ; top line
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET


textStr             EQU     register0
textNum             EQU     register0
textScratch         EQU     register0
textLen             EQU     register1
textFont            EQU     register2
textChr             EQU     register3
textHex             EQU     register4
textSlice           EQU     register5
scanLine            EQU     register6
digitMult           EQU     register7
digitIndex          EQU     register8
clearLoop           EQU     register9
    
    
                    ; prints text string pointed to by the accumulator
printText           PUSH
                    STW     textStr             
                    PEEK
                    ST      textLen                         ; first byte is length
        
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    CALLI   printChar
                    LoopCounter textLen printT_char
                    POP
                    RET


                    ; prints char in the accumulator
printChar           PUSH
                    ST      textChr                         ; (char-32)*5 + 0x0700
                    SUBI    32
                    STW     textChr
                    STW     textFont
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    STW     textFont             
                    LDWI    giga_text32
                    ADDW    textFont
                    STW     textFont                        ; text font slice base address for chars 32-81
            
                    LDW     textChr
                    SUBI    50
                    BLT     printC_draw
                    LDW     textFont
                    ADDI    0x06
                    STW     textFont                        ; text font slice base address for chars 82+
            
printC_draw         LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LDWI    0x0800
                    ADDW    cursorXY
                    STW     giga_sysArg4                    ; xy position
            
                    LDI     0x05
                    ST      textSlice
            
printC_slice        LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2        
                    SYS     0xCB                            ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LoopCounter textSlice printC_slice
            
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    155                             ; 154 is last possible char in row
                    BLT     printC_exit
                    CALLI   newLineScroll ; next row, scroll at bottom
printC_exit         POP
                    RET


atTextCursor        LD      cursorXY
                    SUBI    155
                    BLT     drawTC_skip0
                    LDI     0
                    STW     cursorXY
                    
drawTC_skip0        LD      cursorXY + 1
                    SUBI    113
                    BLT     drawTC_skip1
                    LDI     112
                    STW     cursorXY + 1
                    
drawTC_skip1        LD      cursorXY + 1
                    SUBI    112
                    BGE     drawTC_skip2
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET
                    
drawTC_skip2        LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
                    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDI     8
                    ST      clearLoop
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
    
clearCR_loopy       LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    BGT     clearCR_loopx
    
                    INC     giga_sysArg4 + 1                ; next line                
                    LoopCounter clearLoop clearCR_loopy
                    RET


              ;     print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY+1
                    ADDI    8
                    ST      cursorXY+1
                    SUBI    120
                    BLT     newLS_exit
                            
newLS_cont1         CALLI   clearCursorRow
                            
                    LDWI    giga_videoTable
                    STW     scanLine
            
                    ; scroll all scan lines by 8 through 0x08 to 0x7F
newLS_scroll        LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scan line pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags     
                    
                    ; read scan line pointer for last char row, use this as cursor position
                    LDWI    giga_videoTable + 0x00E0
                    PEEK
                    SUBI    0x08                            ; corrected in printChar
                    ST      cursorXY+1
newLS_exit          POP
                    RET

