_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x00a0
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     0x0024
register11          EQU                     0x0026
register12          EQU                     0x0028
register13          EQU                     0x002A
fgbgColour          EQU                     register0 + 0x14
cursorXY            EQU                     register0 + 0x16
midiStreamPtr       EQU                     register0 + 0x18
midiDelay           EQU                     register0 + 0x1A
frameCountPrev      EQU                     register0 + 0x1C
miscFlags           EQU                     register0 + 0x1E

; Includes
%include            include/gigatron.i
%include            include/macros_CALLI.i

; Labels
_entryPoint_        EQU                     0x0200
_1                  EQU                     0x020f
_2                  EQU                     0x022f
_3                  EQU                     0x0235
_4                  EQU                     0x0245
_5                  EQU                     0x0248
_6                  EQU                     0x0256
_198                EQU                     0x0262
_199                EQU                     0x026c
_200                EQU                     0x0275
_201                EQU                     0x0279
_202                EQU                     0x0291
_203                EQU                     0x029f
_204                EQU                     0x02ab
_205                EQU                     0x02be
_206                EQU                     0x02ce
_207                EQU                     0x02d6
_208                EQU                     0x02de
_209                EQU                     0x02e6
_1000               EQU                     0x02ee
_1001               EQU                     0x08b3
_1002               EQU                     0x08ca
_1003               EQU                     0x08e1
_1004               EQU                     0x08f8
_1005               EQU                     0x09b5
_1006               EQU                     0x09cc
_1007               EQU                     0x09e3
_1008               EQU                     0x0aa0
_1009               EQU                     0x0ab7
_1010               EQU                     0x0ace
_1011               EQU                     0x0ae5
_1012               EQU                     0x0ba2
_1013               EQU                     0x0bb9
_1014               EQU                     0x0bd0
_1015               EQU                     0x0be7
_1016               EQU                     0x0ca4
_1017               EQU                     0x0cbb
_1018               EQU                     0x0cdc
_end_0x04fd         EQU                     0x0ce6
_if_0x024b          EQU                     0x0245
_next_0x027f        EQU                     0x0279
_page_0x08a0        EQU                     0x08a0
_if_0x0318          EQU                     0x08b3
_if_0x0333          EQU                     0x08ca
_if_0x034e          EQU                     0x08e1
_if_0x0369          EQU                     0x08f8
_page_0x09a0        EQU                     0x09a0
_if_0x0384          EQU                     0x09b5
_if_0x039f          EQU                     0x09cc
_if_0x03ba          EQU                     0x09e3
_if_0x03d5          EQU                     0x0aa0
_if_0x03f0          EQU                     0x0ab7
_if_0x040b          EQU                     0x0ace
_if_0x0426          EQU                     0x0ae5
_page_0x0ba0        EQU                     0x0ba0
_if_0x0441          EQU                     0x0ba2
_if_0x045c          EQU                     0x0bb9
_if_0x0477          EQU                     0x0bd0
_if_0x0492          EQU                     0x0be7
_page_0x0ca0        EQU                     0x0ca0
_if_0x04ad          EQU                     0x0ca4
_if_0x04c8          EQU                     0x0cbb
_if_0x04f3          EQU                     0x0cdc

; Variables
_a                  EQU                     0x0030
_b                  EQU                     0x0032
_p                  EQU                     0x0034
_z                  EQU                     0x0036
_k                  EQU                     0x0038
_c                  EQU                     0x003a

; Strings
str_0x7fa0          EQU                     0x7fa0
str_0x7fa0          DB                      18 ' 2 3   5 6 7   9 0'
str_0x7fb3          EQU                     0x7fb3
str_0x7fb3          DB                      19 'Q W E R T Y U I O P'
str_0x7fc7          EQU                     0x7fc7
str_0x7fc7          DB                      3 'Z: '
str_0x7fd3          EQU                     0x7fd3
str_0x7fd3          DB                      8 'Metallic'
str_0x7fdc          EQU                     0x7fdc
str_0x7fdc          DB                      8 'Triangle'
str_0x7fe5          EQU                     0x7fe5
str_0x7fe5          DB                      8 'Pulse   '
str_0x7fee          EQU                     0x7fee
str_0x7fee          DB                      8 'Sawtooth'

; Lookup Tables
lut_0x7fcb          EQU                     0x7fcb
lut_0x7fcb          DW                      0x02ce 0x02d6 0x02de 0x02e6 

; Code
_entryPoint_        Initialise                                              ; INIT

_1                  LDI                     0
                    STW                     _a
                    LDI                     0
                    STW                     _b
                    LDWI                    508
                    STW                     _p
                    LDI                     2
                    STW                     graphicsMode
                    ScanlineMode            
                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC
                    LDI                     2
                    STW                     _z
                    CALLI                   _198                            ; a=0:b=0:p=256+252:mode 2:cls:z=2:gosub 198

_2                  LDWI                    0x0010
                    PEEK                    
                    STW                     _k                              ; k=peek(16)

_3                  LDW                     _k
                    SUBI                    126
                    CALLI                   convertGtOp
                    PageJumpBEQ             _4                  
                    CALLI                   _2                              ; if k>126 then goto 2

_4                  CALLI                   _1000                           ; gosub 1000

_5                  LD                      _a
                    POKE                    _p
                    LDW                     _p
                    ADDI                    1
                    STW                     0xd0
                    LD                      _b
                    POKE                    0xd0                            ; poke p,a:poke p+1,b

_6                  LDWI                    44
                    STW                     register0
                    LDI                     30
                    POKE                    register0
                    CALLI                   _2                              ; poke 44,30:goto 2

_198                PUSH                    
                    PrintString             str_0x7fa0
                    CALLI                   newLineScroll                   ; print " 2 3   5 6 7   9 0"

_199                PrintString             str_0x7fb3
                    CALLI                   newLineScroll                   ; print "Q W E R T Y U I O P"

_200                LDI                     1
                    STW                     _c                              ; for c=1 to 4

_201                LDWI                    256
                    STW                     mathX
                    LDW                     _c
                    STW                     mathY
                    CALLI                   multiply16bit
                    ADDI                    252
                    STW                     _p
                    SUBI                    1
                    STW                     0xd2
                    LD                      _z
                    POKE                    0xd2                            ; p=256*c+252:poke p-1,z

_202                LDI                     0
                    POKE                    _p
                    LDW                     _p
                    ADDI                    1
                    STW                     0xd0
                    LDI                     0
                    POKE                    0xd0                            ; poke p,0:poke p+1,0

_203                ForNextLoopUp           _c _201                 4       ; next c

_204                LDI                     2
                    ST                      cursorXY
                    LDI                     24
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC
                    PrintString             str_0x7fc7                      ; at 2,24:print "Z: ";

_205                LDW                     _z
                    STW                     register0
                    ADDW                    register0
                    STW                     register0
                    LDWI                    lut_0x7fcb
                    ADDW                    register0
                    DEEK                    
                    CALL                    giga_vAC                        ; on z goto 206,207,208,209

_206                PrintString             str_0x7fd3
                    POP                     
                    RET                                                     ; print "Metallic";:return

_207                PrintString             str_0x7fdc
                    POP                     
                    RET                                                     ; print "Triangle";:return

_208                PrintString             str_0x7fe5
                    POP                     
                    RET                                                     ; print "Pulse   ";:return

_209                PrintString             str_0x7fee
                    POP                     
                    RET                                                     ; print "Sawtooth";:return

_1000               PUSH                    
                    LDW                     _k
                    SUBI                    113
                    CALLI                   _page_0x08a0
_page_0x08a0        CALLI                   convertEqOp
                    PageJumpBEQ             _1001               
                    LDI                     73
                    STW                     _a
                    LDI                     8
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=113 then a=73 :b=8 :return:'C

_1001               LDW                     _k
                    SUBI                    50
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1002               
                    LDI                     11
                    STW                     _a
                    LDI                     9
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=50  then a=11 :b=9 :return:'C#

_1002               LDW                     _k
                    SUBI                    119
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1003               
                    LDI                     80
                    STW                     _a
                    LDI                     9
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=119 then a=80 :b=9 :return:'D

_1003               LDW                     _k
                    SUBI                    51
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1004               
                    LDI                     25
                    STW                     _a
                    LDI                     10
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=51  then a=25 :b=10:return:'D#

_1004               LDW                     _k
                    CALLI                   _page_0x09a0
_page_0x09a0        SUBI                    101
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1005               
                    LDI                     103
                    STW                     _a
                    LDI                     10
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=101 then a=103:b=10:return:'E

_1005               LDW                     _k
                    SUBI                    114
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1006               
                    LDI                     57
                    STW                     _a
                    LDI                     11
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=114 then a=57 :b=11:return:'F

_1006               LDW                     _k
                    SUBI                    53
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1007               
                    LDI                     16
                    STW                     _a
                    LDI                     12
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=53  then a=16 :b=12:return:'F#

_1007               LDW                     _k
                    SUBI                    116
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1008               
                    LDI                     108
                    STW                     _a
                    LDI                     12
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=116 then a=108:b=12:return:'G

                    CALLI                    _1008
_1008               LDW                     _k
                    SUBI                    54
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1009               
                    LDI                     78
                    STW                     _a
                    LDI                     13
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=54  then a=78 :b=13:return:'G#

_1009               LDW                     _k
                    SUBI                    121
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1010               
                    LDI                     53
                    STW                     _a
                    LDI                     14
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=121 then a=53 :b=14:return:'A

_1010               LDW                     _k
                    SUBI                    55
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1011               
                    LDI                     35
                    STW                     _a
                    LDI                     15
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=55  then a=35 :b=15:return:'A#

_1011               LDW                     _k
                    SUBI                    117
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1012               
                    LDI                     23
                    STW                     _a
                    LDI                     16
                    STW                     _b
                    CALLI                   _page_0x0ba0
_page_0x0ba0        POP                     
                    RET                                                     ; if k=117 then a=23 :b=16:return:'B

_1012               LDW                     _k
                    SUBI                    105
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1013               
                    LDI                     19
                    STW                     _a
                    LDI                     17
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=105 then a=19 :b=17:return:'C

_1013               LDW                     _k
                    SUBI                    57
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1014               
                    LDI                     21
                    STW                     _a
                    LDI                     18
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=57  then a=21 :b=18:return:'C#

_1014               LDW                     _k
                    SUBI                    111
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1015               
                    LDI                     31
                    STW                     _a
                    LDI                     19
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=111 then a=31 :b=19:return:'D

_1015               LDW                     _k
                    SUBI                    48
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1016               
                    LDI                     50
                    STW                     _a
                    LDI                     20
                    CALLI                   _page_0x0ca0
_page_0x0ca0        STW                     _b
                    POP                     
                    RET                                                     ; if k=48  then a=50 :b=20:return:'D#

_1016               LDW                     _k
                    SUBI                    112
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1017               
                    LDI                     77
                    STW                     _a
                    LDI                     21
                    STW                     _b
                    POP                     
                    RET                                                     ; if k=112 then a=77 :b=21:return:'E

_1017               LDW                     _k
                    SUBI                    122
                    CALLI                   convertEqOp
                    PageJumpBEQ             _1018               
                    LDW                     _z
                    ADDI                    1
                    STW                     mathX
                    LDI                     4
                    STW                     mathY
                    CALLI                   divide16bit
                    LDW                     mathRem
                    STW                     _z
                    CALLI                   _200                            ; if k=122 then z=(z+1)%4:goto 200

_1018               LDI                     0
                    STW                     _a
                    LDI                     0
                    STW                     _b
                    POP                     
                    RET                                                     ; a=0:b=0:return

_end_0x04fd         BRA                     _end_0x04fd                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY HERE, modifications must be made in the original include files                                       *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

convertEqOp         EQU     0x7eee
convertNeOp         EQU     0x7ef7
convertLeOp         EQU     0x7cf7
convertGeOp         EQU     0x7bcd
convertLtOp         EQU     0x7bd6
convertGtOp         EQU     0x7ff7
multiply16bit       EQU     0x7dd6
divide16bit         EQU     0x7aa0
scanlineMode        EQU     0x7ec1
resetVideoTable     EQU     0x7bdf
initClearFuncs      EQU     0x7ea0
clearVertBlinds     EQU     0x7da0
clearCursorRow      EQU     0x79a0
printText           EQU     0x7ed5
printChar           EQU     0x78a0
atTextCursor        EQU     0x7ba0
newLineScroll       EQU     0x7ca0


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


mathX               EQU     register0
mathY               EQU     register1
mathSum             EQU     register2
mathMask            EQU     register3
mathRem             EQU     register4
mathSign            EQU     register5
mathScratch         EQU     register6
mathShift           EQU     register7
    
    
                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDI     1
    
multiply16_loop     STW     mathMask
                    ANDW    mathY
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum
                    
multiply16_skip     LDW     mathX
                    ADDW    mathX
                    STW     mathX
                    LDW     mathMask
                    ADDW    mathMask
                    BNE     multiply16_loop
                    
                    LDW     mathSum
                    RET


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_skip0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_skip0      LDW     mathY                     
                    BGE     divide16_skip1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_skip1      LDI     0
                    STW     mathRem
    
divide16_loop       STW     mathScratch
                    LDW     mathRem
                    ADDW    mathRem
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_skip3
                    INC     mathRem
                    
divide16_skip3      LDW     mathX
                    ADDW    mathX
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_skip4
                    STW     mathRem
                    INC     mathX
                    
divide16_skip4      LDW     mathScratch
                    ADDI    1
                    ANDI    0x0F
                    BNE     divide16_loop
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


graphicsMode    EQU     register0
waitVBlankNum   EQU     register0
drawLine_x1     EQU     register0
drawLine_y1     EQU     register1
drawLine_x2     EQU     register2
drawLine_y2     EQU     register3
drawLine_xy1    EQU     register0
drawLine_xy2    EQU     register1
drawLine_dxy1   EQU     register2
drawLine_dxy2   EQU     register3
drawLine_dx1    EQU     register4
drawLine_dy1    EQU     register5
drawLine_dx2    EQU     register6
drawLine_dy2    EQU     register7
drawLine_sx     EQU     register8
drawLine_sy     EQU     register9
drawLine_h      EQU     register10
drawLine_num    EQU     register11
drawLine_count  EQU     register12
drawLine_tmp    EQU     register13


scanlineMode    LDW     giga_romType
                ANDI    0xF8
                SUBI    romTypeValue_ROMv2
                BGE     scanlineM_cont
                RET

scanlineM_cont  LDWI    SYS_SetMode_v2_80
                STW     giga_sysFn
                LDW     graphicsMode
                SYS     0xE6                ; 270 - max(14,80/2)
                RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register4
top                 EQU     register5
bot                 EQU     register6
vramAddr            EQU     register7
evenAddr            EQU     register8
    
    
                    ; resets video table pointers
resetVideoTable     LDWI    0x0008
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
    
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres+8
                    BLT     resetVT_loop
                    RET


initClearFuncs      PUSH
                    CALLI   resetVideoTable
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    CALLI   initClearFuncs

                    LDWI    giga_vram                           ; top line
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



textStr             EQU     register0
textNum             EQU     register0
textScratch         EQU     register0
textLen             EQU     register1
textFont            EQU     register2
textChr             EQU     register3
textHex             EQU     register4
textSlice           EQU     register5
scanLine            EQU     register6
digitMult           EQU     register7
digitIndex          EQU     register8
clearLoop           EQU     register9
    
    
                    ; prints text string pointed to by the accumulator
printText           PUSH
                    STW     textStr             
                    PEEK
                    ST      textLen                         ; first byte is length
        
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    CALLI   printChar
                    LoopCounter textLen printT_char
                    POP
                    RET


                    ; prints char in the accumulator
printChar           PUSH
                    ST      textChr                         ; (char-32)*5 + 0x0700
                    SUBI    32
                    STW     textChr
                    STW     textFont
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    STW     textFont             
                    LDWI    giga_text32
                    ADDW    textFont
                    STW     textFont                        ; text font slice base address for chars 32-81
            
                    LDW     textChr
                    SUBI    50
                    BLT     printC_draw
                    LDW     textFont
                    ADDI    0x06
                    STW     textFont                        ; text font slice base address for chars 82+
            
printC_draw         LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LDWI    0x0800
                    ADDW    cursorXY
                    STW     giga_sysArg4                    ; xy position
            
                    LDI     0x05
                    ST      textSlice
            
printC_slice        LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2        
                    SYS     0xCB                            ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LoopCounter textSlice printC_slice
            
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    155                             ; 154 is last possible char in row
                    BLT     printC_exit
                    CALLI   newLineScroll ; next row, scroll at bottom
printC_exit         POP
                    RET


atTextCursor        LD      cursorXY
                    SUBI    155
                    BLT     drawTC_skip0
                    LDI     0
                    STW     cursorXY
                    
drawTC_skip0        LD      cursorXY + 1
                    SUBI    113
                    BLT     drawTC_skip1
                    LDI     112
                    STW     cursorXY + 1
                    
drawTC_skip1        LD      cursorXY + 1
                    SUBI    112
                    BGE     drawTC_skip2
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET
                    
drawTC_skip2        LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
                    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDI     8
                    ST      clearLoop
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
    
clearCR_loopy       LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    BGT     clearCR_loopx
    
                    INC     giga_sysArg4 + 1                ; next line                
                    LoopCounter clearLoop clearCR_loopy
                    RET


              ;     print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY+1
                    ADDI    8
                    ST      cursorXY+1
                    SUBI    120
                    BLT     newLS_exit
                            
newLS_cont1         CALLI   clearCursorRow
                            
                    LDWI    giga_videoTable
                    STW     scanLine
            
                    ; scroll all scan lines by 8 through 0x08 to 0x7F
newLS_scroll        LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scan line pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags     
                    
                    ; read scan line pointer for last char row, use this as cursor position
                    LDWI    giga_videoTable + 0x00E0
                    PEEK
                    SUBI    0x08                            ; corrected in printChar
                    ST      cursorXY+1
newLS_exit          POP
                    RET

