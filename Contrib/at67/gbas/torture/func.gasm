_startAddress_      EQU                     0x0200
convertEqOp         EQU                     0x7fa0
convertNeOp         EQU                     0x7fa9
convertLeOp         EQU                     0x7fb2
convertGeOp         EQU                     0x7fbb
convertLtOp         EQU                     0x7fc4
convertGtOp         EQU                     0x7fcd
multiply16bit       EQU                     0x7fd6
divide16bit         EQU                     0x7ea0
random16bit         EQU                     0x7ef6
shiftLeft4bit       EQU                     0x7da0
shiftLeft8bit       EQU                     0x7daa
shiftRight1bit      EQU                     0x7db4
shiftRight2bit      EQU                     0x7dbe
shiftRight3bit      EQU                     0x7dc8
shiftRight4bit      EQU                     0x7dd2
shiftRight5bit      EQU                     0x7ddc
shiftRight6bit      EQU                     0x7de6
shiftRight7bit      EQU                     0x7df0
shiftRight8bit      EQU                     0x7ca0
scanlineMode        EQU                     0x7caa
waitVBlank          EQU                     0x7cbe
resetVideoTable     EQU                     0x7ba0
clearScreen         EQU                     0x7aa0
clearRegion         EQU                     0x79a0
clearCursorRow      EQU                     0x78a0
drawLine            EQU                     0x77a0
drawLineExt         EQU                     0x76a0
drawLineDelta1      EQU                     0x75a0
drawLineCursor      EQU                     0x74a0
printText           EQU                     0x7cd5
printDigit          EQU                     0x7bdf
printInt16          EQU                     0x73a0
printChar           EQU                     0x72a0
printHexByte        EQU                     0x71a0
printHexWord        EQU                     0x7cee
printTextCursor     EQU                     0x71ca
newLineScroll       EQU                     0x70a0
resetAudio          EQU                     0x6fa0
playMidi            EQU                     0x6ea0
playMidiAsync       EQU                     0x79e6
midiStartNote       EQU                     0x6da0

; Internal variables
register0           EQU                     0x00a0
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     0x0024
register11          EQU                     0x0026
register12          EQU                     0x0028
register13          EQU                     0x002A
fgbgColour          EQU                     register0 + 0x14
cursorXY            EQU                     register0 + 0x16
midiStreamPtr       EQU                     register0 + 0x18
midiDelay           EQU                     register0 + 0x1A
frameCountPrev      EQU                     register0 + 0x1C
miscFlags           EQU                     register0 + 0x1E

; Includes
%include            include/gigatron.i
%include            include/math.i
%include            include/audio.i
%include            include/clear_screen.i
%include            include/conv_conds_CALLI.i
%include            include/graphics_CALLI.i
%include            include/print_text_CALLI.i
%include            include/macros_CALLI.i

; Labels
_entryPoint_        EQU                     0x0200
_10                 EQU                     0x020f
_blamo              EQU                     0x02f3
_end_0x0323         EQU                     0x02f1
_end_0x03a8         EQU                     0x09af
_page_0x08a0        EQU                     0x08a0
_next_0x0337        EQU                     0x08af
_page_0x09a0        EQU                     0x09a0

; Variables
_addr               EQU                     0x0030
_a                  EQU                     0x0032
_b                  EQU                     0x0034
_x                  EQU                     0x0036
_z                  EQU                     0x0038
_i                  EQU                     0x003a
_c                  EQU                     0x003c
_f                  EQU                     0x003e
_d                  EQU                     0x0040
_g                  EQU                     0x0042
_h                  EQU                     0x0044

; Strings
usrStr_0x7ff9       EQU                     0x7ff9
usrStr_0x7ff9       DB                      1 ' '
usrStr_0x7ffb       EQU                     0x7ffb
usrStr_0x7ffb       DB                      4 'test'
usrStr_0x7dfa       EQU                     0x7dfa
usrStr_0x7dfa       DB                      3 'dog'

; Code
_entryPoint_        Initialise                                              ; INIT

_10                 LDI                     33
                    STW                     _addr                           ; addr = &h21

                    LDWI                    0xffff
                    ANDW                    _addr
                    STW                     _addr                           ; addr = addr AND &hFFFF

                    LDWI                    -1
                    SUBW                    _addr
                    STW                     0xd0
                    LDWI                    0xf000
                    PEEK                    
                    STW                     0xd2
                    LDWI                    0x0fff
                    ORW                     0xd2
                    PEEK                    
                    STW                     0xd4
                    LDW                     _addr
                    ANDW                    0xd4
                    PEEK                    
                    STW                     0xd8
                    LDW                     0xd0
                    SUBW                    0xd8
                    ANDI                    252
                    STW                     0xd8
                    LDW                     _addr
                    ADDI                    1
                    PEEK                    
                    STW                     0xdc
                    LDW                     0xd8
                    ORW                     0xdc
                    ADDI                    23
                    XORI                    15
                    STW                     0xdc
                    LDWI                    -57
                    ADDW                    0xdc
                    STW                     0xdc
                    LDWI                    -1
                    SUBW                    _addr
                    ADDW                    0xdc
                    STW                     _a                              ; a = NOT addr - peek(addr AND pEeK(&h0FFF OR peek(&hF000))) AND &hFC OR peek(addr+1) + 23 XOR &B00001111 - NOT 56 + NOT addr

                    LDI                     131
                    STW                     _b                              ; b = 131

                    CALLI                   _blamo                          ; gosub blamo

                    LDW                     _a
                    PrintAcHexByte          
                    PrintString             usrStr_0x7ff9
                    LDW                     _b
                    PrintAcHexWord          
                    PrintString             usrStr_0x7ff9
                    LDWI                    13107
                    PrintAcHexWord          
                    CALLI                   newLineScroll                   ; print hex$(a);" ";hexw$(b);" ";hexw$(&h1111 OR &h2222)

                    PrintString             usrStr_0x7ffb
                    PrintString             usrStr_0x7ff9
                    PrintString             usrStr_0x7dfa
                    PrintString             usrStr_0x7ff9
                    PrintInt16              0x0064
                    PrintString             usrStr_0x7ff9
                    PrintVarInt16           _a
                    PrintString             usrStr_0x7ff9
                    LDWI                    0x0021
                    PEEK                    
                    ANDI                    252
                    PrintAcHexByte          
                    CALLI                   newLineScroll                   ; print "test";" ";"dog";" ";56+44;" ";a;" ";hex$(peek(&h21) AND &hFC)

                    LDI                     128
                    STW                     _x                              ; x = &h0080

                    LDW                     _x
                    ANDI                    63
                    STW                     mathShift
                    ShiftLeft8bit           
                    STW                     _z                              ; z = (x AND &h3F) LSL 8

                    LDW                     _x
                    ST                      cursorXY
                    LDW                     _z
                    ANDI                    63
                    ST                      cursorXY + 1
                    LDWI                    printTextCursor
                    CALL                    giga_vAC                        ; at x, (z AND &h3F)

                    LDW                     _x
                    PrintAcHexWord          
                    PrintString             usrStr_0x7ff9
                    LDW                     _z
                    PrintAcHexWord          
                    CALLI                   newLineScroll                   ; print hexw$(x);" ";hexw$(z)

_end_0x0323         BRA                     _end_0x0323                     ; END

_blamo              PUSH                    
                    CALLI                   _page_0x08a0
_page_0x08a0        LDWI                    23205
                    STW                     _b                              ; b = &haa55 XOR &hF0F0

                    LDW                     _b
                    XORW                    _a
                    STW                     _b                              ; b = b XOR a

                    LDI                     0
                    STW                     _i                              ; for i = 0 to 10

_next_0x0337        LDWI                    usrStr_0x7ff9
                    STW                     _c                              ; c = CHR$(32)

                    LDWI                    0x0000
                    PEEK                    
                    STW                     _f                              ; f = peek(0)

                    LDWI                    0xaa55
                    ANDW                    _c
                    ANDW                    _a
                    STW                     _d                              ; d = c AND &hAA55 AND a

                    LDW                     _a
                    ADDI                    5
                    ADDW                    _b
                    STW                     _z                              ; z = a + 5 + b

                    LDI                     0
                    SUBW                    _b
                    STW                     _b                              ; b = -b

                    PrintVarInt16           _i
                    PrintString             usrStr_0x7ff9
                    LDW                     _b
                    PrintAcHexWord          
                    CALLI                   newLineScroll                   ; print i; " " ; hexw$(b)

                    ForNextLoopUp           _i _next_0x0337 10              ; next i

                    LDWI                    -1
                    SUBW                    _g
                    STW                     0xd0
                    LDW                     _z
                    CALLI                   _page_0x09a0
_page_0x09a0        SUBW                    0xd0
                    STW                     _g                              ; g = z - NOT g

                    LDWI                    -1
                    SUBW                    _a
                    SUBW                    _d
                    STW                     _h                              ; h = NOT a - d

                    POP                     
                    RET                                                     ; return

_end_0x03a8         BRA                     _end_0x03a8                     ; END


