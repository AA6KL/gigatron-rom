_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x00a0
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     0x0024
register11          EQU                     0x0026
register12          EQU                     0x0028
register13          EQU                     0x002A
fgbgColour          EQU                     register0 + 0x14
cursorXY            EQU                     register0 + 0x16
midiStreamPtr       EQU                     register0 + 0x18
midiDelay           EQU                     register0 + 0x1A
frameCountPrev      EQU                     register0 + 0x1C
miscFlags           EQU                     register0 + 0x1E

; Includes
%include            include/gigatron.i
%include            include/macros_CALLI.i

; Labels
_entryPoint_        EQU                     0x0200
_10                 EQU                     0x0214
_blamo              EQU                     0x08a2
_end_0x0327         EQU                     0x08a0
_end_0x03ab         EQU                     0x09b1
_next_0x033b        EQU                     0x08b2
_page_0x09a0        EQU                     0x09a0

; Variables
_addr               EQU                     0x0030
_a                  EQU                     0x0032
_b                  EQU                     0x0034
_x                  EQU                     0x0036
_z                  EQU                     0x0038
_i                  EQU                     0x003a
_c                  EQU                     0x003c
_f                  EQU                     0x003e
_d                  EQU                     0x0040
_g                  EQU                     0x0042
_h                  EQU                     0x0044

; Strings
str_0x7fa0          EQU                     0x7fa0
str_0x7fa0          DB                      1 ' '
str_0x7fa2          EQU                     0x7fa2
str_0x7fa2          DB                      4 'test'
str_0x7fa7          EQU                     0x7fa7
str_0x7fa7          DB                      3 'dog'

; Lookup Tables

; Code
_entryPoint_        Initialise                                              ; INIT

                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC                        ; cls

_10                 LDI                     33
                    STW                     _addr                           ; addr = &h21

                    LDWI                    0xffff
                    ANDW                    _addr
                    STW                     _addr                           ; addr = addr AND &hFFFF

                    LDWI                    -1
                    SUBW                    _addr
                    STW                     0xd0
                    LDWI                    0xf000
                    PEEK                    
                    STW                     0xd2
                    LDWI                    0x0fff
                    ORW                     0xd2
                    PEEK                    
                    STW                     0xd4
                    LDW                     _addr
                    ANDW                    0xd4
                    PEEK                    
                    ANDI                    252
                    STW                     0xd8
                    LDW                     0xd0
                    SUBW                    0xd8
                    STW                     0xd8
                    LDW                     _addr
                    ADDI                    1
                    PEEK                    
                    STW                     0xdc
                    LDW                     0xd8
                    ORW                     0xdc
                    ADDI                    23
                    XORI                    15
                    STW                     0xdc
                    LDWI                    -57
                    ADDW                    0xdc
                    STW                     0xdc
                    LDWI                    -1
                    SUBW                    _addr
                    ADDW                    0xdc
                    STW                     _a                              ; a = NOT addr - peek(addr AND pEeK(&h0FFF OR peek(&hF000))) AND &hFC OR peek(addr+1) + 23 XOR &B00001111 - NOT 56 + NOT addr

                    LDI                     131
                    STW                     _b                              ; b = 131

                    CALLI                   _blamo                          ; gosub blamo

                    LDW                     _a
                    PrintAcHexByte          
                    PrintString             str_0x7fa0
                    LDW                     _b
                    PrintAcHexWord          
                    PrintString             str_0x7fa0
                    LDWI                    13107
                    PrintAcHexWord          
                    CALLI                   newLineScroll                   ; print hex$(a);" ";hexw$(b);" ";hexw$(&h1111 OR &h2222)

                    PrintString             str_0x7fa2
                    PrintString             str_0x7fa0
                    PrintString             str_0x7fa7
                    PrintString             str_0x7fa0
                    PrintInt16              0x0064
                    PrintString             str_0x7fa0
                    PrintVarInt16           _a
                    PrintString             str_0x7fa0
                    LDI                     0x21
                    PEEK                    
                    ANDI                    252
                    PrintAcHexByte          
                    CALLI                   newLineScroll                   ; print "test";" ";"dog";" ";56+44;" ";a;" ";hex$(peek(&h21) AND &hFC)

                    LDI                     128
                    STW                     _x                              ; x = &h0080

                    LDW                     _x
                    ANDI                    63
                    STW                     mathShift
                    ShiftLeft8bit           
                    STW                     _z                              ; z = (x AND &h3F) LSL 8

                    LDW                     _x
                    ST                      cursorXY
                    LDW                     _z
                    ANDI                    63
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC                        ; at x, (z AND &h3F)

                    LDW                     _x
                    PrintAcHexWord          
                    PrintString             str_0x7fa0
                    LDW                     _z
                    PrintAcHexWord          
                    CALLI                   newLineScroll                   ; print hexw$(x);" ";hexw$(z)

                    CALLI                    _end_0x0327
_end_0x0327         BRA                     _end_0x0327                     ; END

_blamo              PUSH                    
                    LDWI                    23205
                    STW                     _b                              ; b = &haa55 XOR &hF0F0

                    LDW                     _b
                    XORW                    _a
                    STW                     _b                              ; b = b XOR a

                    LDI                     0
                    STW                     _i                              ; for i = 0 to 10

_next_0x033b        LDWI                    str_0x7fa0
                    STW                     _c                              ; c = CHR$(32)

                    LDI                     0x00
                    PEEK                    
                    STW                     _f                              ; f = peek(0)

                    LDWI                    0xaa55
                    ANDW                    _c
                    ANDW                    _a
                    STW                     _d                              ; d = c AND &hAA55 AND a

                    LDW                     _a
                    ADDI                    5
                    ADDW                    _b
                    STW                     _z                              ; z = a + 5 + b

                    LDI                     0
                    SUBW                    _b
                    STW                     _b                              ; b = -b

                    PrintVarInt16           _i
                    PrintString             str_0x7fa0
                    LDW                     _b
                    PrintAcHexWord          
                    CALLI                   newLineScroll                   ; print i; " " ; hexw$(b)

                    ForNextLoopUp           _i _next_0x033b 10              ; next i

                    LDWI                    -1
                    SUBW                    _g
                    STW                     0xd0
                    CALLI                   _page_0x09a0
_page_0x09a0        LDW                     _z
                    SUBW                    0xd0
                    STW                     _g                              ; g = z - NOT g

                    LDWI                    -1
                    SUBW                    _a
                    SUBW                    _d
                    STW                     _h                              ; h = NOT a - d

                    POP                     
                    RET                                                     ; return

_end_0x03ab         BRA                     _end_0x03ab                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY HERE, modifications must be made in the original include files                                       *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

convertEqOp         EQU     0x7df7
convertNeOp         EQU     0x7cd9
convertLeOp         EQU     0x7ce2
convertGeOp         EQU     0x7ceb
convertLtOp         EQU     0x7cf4
convertGtOp         EQU     0x7bcd
shiftLeft8bit       EQU     0x7ff6
resetVideoTable     EQU     0x7bd6
initClearFuncs      EQU     0x7fab
clearVertBlinds     EQU     0x7ea0
clearCursorRow      EQU     0x7aa0
printText           EQU     0x7ed6
printDigit          EQU     0x79a0
printInt16          EQU     0x7ca0
printChar           EQU     0x78a0
printHexByte        EQU     0x7fcc
printHexWord        EQU     0x7eef
atTextCursor        EQU     0x7ba0
newLineScroll       EQU     0x7da0


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


mathX               EQU     register0
mathY               EQU     register1
mathSum             EQU     register2
mathMask            EQU     register3
mathRem             EQU     register4
mathSign            EQU     register5
mathScratch         EQU     register6
mathShift           EQU     register7
    
    
shiftLeft8bit       LDWI    SYS_LSLW8_24
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     0x00                ; 0x00 = 270-max(14,24/2)
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register4
top                 EQU     register5
bot                 EQU     register6
vramAddr            EQU     register7
evenAddr            EQU     register8
    
    
                    ; resets video table pointers
resetVideoTable     LDWI    0x0008
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
    
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres+8
                    BLT     resetVT_loop
                    RET


initClearFuncs      PUSH
                    CALLI   resetVideoTable
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    CALLI   initClearFuncs

                    LDWI    giga_vram                           ; top line
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



textStr             EQU     register0
textNum             EQU     register0
textScratch         EQU     register0
textLen             EQU     register1
textFont            EQU     register2
textChr             EQU     register3
textHex             EQU     register4
textSlice           EQU     register5
scanLine            EQU     register6
digitMult           EQU     register7
digitIndex          EQU     register8
clearLoop           EQU     register9
    
    
                    ; prints text string pointed to by the accumulator
printText           PUSH
                    STW     textStr             
                    PEEK
                    ST      textLen                         ; first byte is length
        
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    CALLI   printChar
                    LoopCounter textLen printT_char
                    POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    STW     digitMult
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
            
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    CALLI   printChar
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in the accumulator
printInt16          PUSH
                    STW     textNum
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    CALLI   printChar
                    LDWI    0
                    SUBW    textNum
printI16_pos        STW     textNum    
            
                    LDWI    10000
                    CALLI   printDigit
                    LDWI    1000
                    CALLI   printDigit
                    LDWI    100
                    CALLI   printDigit
                    LDWI    10
                    CALLI   printDigit
                    LD      textNum
                    ORI     0x30
                    CALLI   printChar
                    POP
                    RET


                    ; prints char in the accumulator
printChar           PUSH
                    ST      textChr                         ; (char-32)*5 + 0x0700
                    SUBI    32
                    STW     textChr
                    STW     textFont
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    STW     textFont             
                    LDWI    giga_text32
                    ADDW    textFont
                    STW     textFont                        ; text font slice base address for chars 32-81
            
                    LDW     textChr
                    SUBI    50
                    BLT     printC_draw
                    LDW     textFont
                    ADDI    0x06
                    STW     textFont                        ; text font slice base address for chars 82+
            
printC_draw         LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LDWI    0x0800
                    ADDW    cursorXY
                    STW     giga_sysArg4                    ; xy position
            
                    LDI     0x05
                    ST      textSlice
            
printC_slice        LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2        
                    SYS     0xCB                            ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LoopCounter textSlice printC_slice
            
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    155                             ; 154 is last possible char in row
                    BLT     printC_exit
                    CALLI   newLineScroll ; next row, scroll at bottom
printC_exit         POP
                    RET


                    ; print hex byte in the accumulator
printHexByte        PUSH
                    ST      textHex
                    LDWI    SYS_LSRW4_50                    ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LD      textHex
                    SYS     0xF5                            ; SYS_LSRW4_50, 270 - 50/2 = 0xF5
                    SUBI    10
                    BLT     printH_skip0
                    ADDI    7
printH_skip0        ADDI    0x3A
                    CALLI   printChar
                    LD      textHex
                    ANDI    0x0F
                    SUBI    10
                    BLT     printH_skip1
                    ADDI    7
printH_skip1        ADDI    0x3A
                    CALLI   printChar
                    POP
                    RET


                    ; print hex word in the accumulator
printHexWord        PUSH
                    STW     textScratch
                    LD      textScratch + 1
                    CALLI   printHexByte
                    LD      textScratch
                    CALLI   printHexByte
                    POP
                    RET


atTextCursor        LD      cursorXY
                    SUBI    155
                    BLT     drawTC_skip0
                    LDI     0
                    STW     cursorXY
                    
drawTC_skip0        LD      cursorXY + 1
                    SUBI    113
                    BLT     drawTC_skip1
                    LDI     112
                    STW     cursorXY + 1
                    
drawTC_skip1        LD      cursorXY + 1
                    SUBI    112
                    BGE     drawTC_skip2
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET
                    
drawTC_skip2        LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
                    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDI     8
                    ST      clearLoop
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
    
clearCR_loopy       LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    BGT     clearCR_loopx
    
                    INC     giga_sysArg4 + 1                ; next line                
                    LoopCounter clearLoop clearCR_loopy
                    RET


              ;     print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY+1
                    ADDI    8
                    ST      cursorXY+1
                    SUBI    120
                    BLT     newLS_exit
                            
newLS_cont1         CALLI   clearCursorRow
                            
                    LDWI    giga_videoTable
                    STW     scanLine
            
                    ; scroll all scan lines by 8 through 0x08 to 0x7F
newLS_scroll        LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scan line pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags     
                    
                    ; read scan line pointer for last char row, use this as cursor position
                    LDWI    giga_videoTable + 0x00E0
                    PEEK
                    SUBI    0x08                            ; corrected in printChar
                    ST      cursorXY+1
newLS_exit          POP
                    RET

