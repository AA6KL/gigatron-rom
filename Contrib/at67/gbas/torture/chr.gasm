_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x0084
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     0x0024
register11          EQU                     0x0026
register12          EQU                     0x0028
register13          EQU                     0x002A
fgbgColour          EQU                     register0 + 0x14
cursorXY            EQU                     register0 + 0x16
midiStream          EQU                     register0 + 0x18
midiDelay           EQU                     register0 + 0x1A
frameCountPrev      EQU                     register0 + 0x1C
miscFlags           EQU                     register0 + 0x1E

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_10                 EQU                     0x022f
_20                 EQU                     0x08d7
_end_0x0365         EQU                     0x08dc
_next_0x0237        EQU                     0x0237
_next_0x023b        EQU                     0x023b
_next_0x023f        EQU                     0x023f
_next_0x0275        EQU                     0x0275
_page_0x08a0        EQU                     0x08a0
_next_0x032b        EQU                     0x08a2

; Variables
_a                  EQU                     0x0030
_k                  EQU                     0x0032
_j                  EQU                     0x0034
_i                  EQU                     0x0036
_char               EQU                     0x0038

; Strings
str_0x7fa0          EQU                     0x7fa0
str_0x7fa0          DB                      28 'yahooowalllallllalalalwallla'
str_0x7fbd          EQU                     0x7fbd
str_0x7fbd          DB                      3 'yes'
str_0x7fc1          EQU                     0x7fc1
str_0x7fc1          DB                      1 ' '
str_0x7fc3          EQU                     0x7fc3
str_0x7fc3          DB                      34 'wooooooooooooooooooooooooooooow!!!'
str_0x7fe6          EQU                     0x7fe6
str_0x7fe6          DB                      3 'dog'

; Lookup Tables

; Code
_entryPoint_        Initialise              
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                                                ; INIT

_10                 LDI                     1
                    STW                     _a                              ; a =1

                    LDI                     0
                    STW                     _k                              ; for k = 0 to 1

_next_0x0237        LDI                     0
                    STW                     _j                              ; for j = 0 to 1

_next_0x023b        LDI                     0
                    STW                     _i                              ; for i = 0 to 1

_next_0x023f        PrintString             str_0x7fa0                      ; print "yahooowalllallllalalalwallla";

                    PrintString             str_0x7fbd
                    PrintString             str_0x7fc1                      ; print "yes";" ";

                    PrintInt16              0x003d
                    PrintString             str_0x7fc1                      ; print 20*3+1;" ";

                    LDI                     32
                    STW                     _char                           ; for char = 32 to 127

_next_0x0275        LDW                     _a
                    ADDI                    1
                    STW                     _a                              ; a = a + 1

                    LDW                     _char
                    ADDI                    1
                    ADDW                    _a
                    ADDW                    _a
                    ADDW                    _a
                    ADDI                    3
                    SUBW                    _a
                    SUBW                    _a
                    SUBW                    _a
                    SUBI                    4
                    STW                     0xc0
                    LDW                     _k
                    SUBW                    _k
                    ADDW                    0xc0
                    PrintAcChar                                             ; print chr$(char+1 +a+a+a - 32*0 + 50/0 + a/0 + 3 - a -a -a -4 + j*0 + (k-k));

                    ForNextLoopUp           _char _next_0x0275 127          ; next char

                    ForNextLoopUp           _i _next_0x023f 1               ; next i

                    ForNextLoopUp           _j _next_0x023b 1               ; next j

                    ForNextLoopUp           _k _next_0x0237 1               ; next k

                    PrintString             str_0x7fc3
                    LDWI                    newLineScroll
                    CALL                    giga_vAC                        ; print "wooooooooooooooooooooooooooooow!!!"

                    LDI                     0
                    STW                     _i                              ; for i = 0 to 6

                    STW                     0x82
                    LDWI                    _page_0x08a0
                    CALL                    giga_vAC
_page_0x08a0        LDW                     0x82
_next_0x032b        PrintString             str_0x7fe6
                    PrintString             str_0x7fc1
                    PrintVarInt16           _i
                    LDWI                    newLineScroll
                    CALL                    giga_vAC                        ; print "dog";" ";i

                    ForNextLoopUp           _i _next_0x032b 6               ; next i

                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC                        ; cls

_20                 LDWI                    _10
                    CALL                    giga_vAC                        ; goto 10

_end_0x0365         BRA                     _end_0x0365                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY HERE, modifications must be made in the original include files                                       *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

convertEqOp         EQU     0x7fea
convertNeOp         EQU     0x7ff3
convertLeOp         EQU     0x7ec3
convertGeOp         EQU     0x7ecc
convertLtOp         EQU     0x7ed5
convertGtOp         EQU     0x7ede
resetVideoTable     EQU     0x79a0
initClearFuncs      EQU     0x7ea0
clearVertBlinds     EQU     0x7dbd
clearCursorRow      EQU     0x79bc
printInit           EQU     0x7ee7
printText           EQU     0x7da0
printDigit          EQU     0x78a0
printInt16          EQU     0x7ca0
printChar           EQU     0x7ba0
newLineScroll       EQU     0x7aa0
convertEqOpAddr     EQU     0x00d2
convertNeOpAddr     EQU     0x00d4
convertLeOpAddr     EQU     0x00d6
convertGeOpAddr     EQU     0x00d8
convertLtOpAddr     EQU     0x00da
convertGtOpAddr     EQU     0x00dc


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register4
top                 EQU     register5
bot                 EQU     register6
vramAddr            EQU     register7
evenAddr            EQU     register8
    
    
                    ; resets video table pointers
resetVideoTable     LDWI    0x0008
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
    
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres+8
                    BLT     resetVT_loop
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram                           ; top line
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET


textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textFont            EQU     register2
textChr             EQU     register3
textHex             EQU     register4
textSlice           EQU     register5
scanLine            EQU     register6
digitMult           EQU     register7
digitIndex          EQU     register8
clearLoop           EQU     register9
    
    
                    ; prints text string pointed to by the accumulator
printText           PUSH
                    LDW     textStr             
                    PEEK
                    ST      textLen                         ; first byte is length
    
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
printT_loop         LoopCounter textLen printT_char
                    POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDWI    0
                    SUBW    textNum
printI16_pos        STW     textNum    
    
                    LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET



printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LDWI    0x0800
                    ADDW    cursorXY
                    STW     giga_sysArg4                    ; xy position
                    RET


                    ; prints char in textChr
printChar           PUSH
                    LD      textChr                         ; (char-32)*5 + 0x0700
                    SUBI    32
                    STW     textChr
                    STW     textFont
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    STW     textFont             
                    LDWI    giga_text32
                    ADDW    textFont
                    STW     textFont                        ; text font slice base address for chars 32-81
    
                    LDW     textChr
                    SUBI    50
                    BLT     printC_draw
                    LDW     textFont
                    ADDI    0x06
                    STW     textFont                        ; text font slice base address for chars 82+
    
printC_draw         LDWI    printInit
                    CALL    giga_vAC
                    LDI     0x05
                    ST      textSlice
    
printC_slice        LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     0xCB                            ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LoopCounter textSlice printC_slice
                    ST      giga_sysArg2                    ; result of loopCounter is always 0
                    SYS     0xCB                            ; draw last blank slice
    
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_exit
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
printC_exit         POP
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDI     8
                    ST      clearLoop
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
    
clearCR_loopy       LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    BGT     clearCR_loopx
    
                    INC     giga_sysArg4 + 1                ; next line                
                    LoopCounter clearLoop clearCR_loopy
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY+1
                    ADDI    8
                    ST      cursorXY+1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    
                    LDWI    giga_videoTable
                    STW     scanLine
    
                    ; scroll all scan lines by 8 through 0x08 to 0x7F
newLS_scroll        LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scan line pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
        
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
                    ; read scan line pointer for last char row, use this as cursor position
                    LDWI    giga_videoTable + 0x00E0
                    PEEK
                    SUBI    0x08                            ; corrected in printChar
                    ST      cursorXY+1
newLS_exit          POP
                    RET

