_startAddress_      EQU                     0x0200

; Internal variables
serialRawPrev       EQU                     0x0081
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
miscFlags           EQU                     register0 + 0x28
fontLutId           EQU                     0x00e0

; Internal Constants
ENABLE_SCROLL_BIT   EQU                     0x0001
ON_BOTTOM_ROW_BIT   EQU                     0x0002
ENABLE_SCROLL_MSK   EQU                     0xfffe
ON_BOTTOM_ROW_MSK   EQU                     0xfffd

; Internal buffers
textWorkArea        EQU                     0x7fa0

; Includes
%includePath        "../runtime"
%include            gigatron.i
%include            macros.i

; Labels
_entryPoint_        EQU                     0x0200
_loop               EQU                     0x027d
_midiOff            EQU                     0x02b1
_1                  EQU                     0x02b8
_2                  EQU                     0x02c5
_3                  EQU                     0x02d2
_4                  EQU                     0x02df
_49                 EQU                     0x031f
_50                 EQU                     0x032a
_51                 EQU                     0x0335
_52                 EQU                     0x0340
_vuMeter            EQU                     0x0347
_decay              EQU                     0x03b7
_siren              EQU                     0x4cc1
_crash              EQU                     0x4ea9
_beep               EQU                     0x4fea
_else_0x02a4        EQU                     0x029e
_page_0x0300        EQU                     0x0300
_else_0x0317        EQU                     0x0318
_endif_0x031c       EQU                     0x031d
_next_0x034b        EQU                     0x034c
_else_0x03c2        EQU                     0x0397
_endif_0x0407       EQU                     0x03ce
_page_0x04cf        EQU                     0x04cf
_page_0x08e0        EQU                     0x08e0
_page_0x09e0        EQU                     0x09e0
_endif_0x0486       EQU                     0x09ed
_page_0x4ca0        EQU                     0x4ca0
_page_0x4da0        EQU                     0x4da0
_page_0x4ea0        EQU                     0x4ea0
_endif_0x056e       EQU                     0x4ea7
_page_0x4fa0        EQU                     0x4fa0
_endif_0x0624       EQU                     0x4fe8
_page_0x50a0        EQU                     0x50a0
_endif_0x065c       EQU                     0x50c6
_end_0x065e         EQU                     0x50c8

; Variables
_t                  EQU                     0x0030
_volume_array       EQU                     0x7edf
_volume_array       DW                      0x007f 0x007f 0x007f 0x007f 0x007f 
_ypos_array         EQU                     0x7ed5
_ypos_array         DW                      0x0001 0x0001 0x0001 0x0001 0x0001 
_kk                 EQU                     0x0032
_state              EQU                     0x0034
_k                  EQU                     0x0036
_i                  EQU                     0x0038
_i8                 EQU                     0x003a
_v                  EQU                     0x003c
_vol                EQU                     0x003e
_y                  EQU                     0x0040
_i4                 EQU                     0x0042
_addr               EQU                     0x0044
_save               EQU                     0x0046
_v_lut              EQU                     0x0048
_f_lut              EQU                     0x004a
_d_lut              EQU                     0x004c

; Strings
_str_0x7ee9         EQU                     0x7ee9
_str_0x7ee9         DB                      21 'Keys: <1> <2> <3> <4>' 0

; Define Bytes
def_bytes_0x08a0    EQU                     0x08a0
def_bytes_0x08a0    DB                      8 8 9 9 10 11 13 14 16 18 20 23 25 28 30 33 36 38 41 43 46 48 51 53 55 57 58 60 61 62 62 63 63 63 62 62 61 60 58 57 55 53 51 48 46 43 41 38 36 33 30 28 25 23 20 18 16 14 13 11 10 9 9 8 
def_bytes_0x09a0    EQU                     0x09a0
def_bytes_0x09a0    DB                      63 61 59 57 54 53 51 49 47 45 44 42 40 39 37 36 35 33 32 31 30 29 27 26 25 24 23 23 22 21 20 19 19 18 17 17 16 15 15 14 14 13 13 12 12 11 11 11 10 10 10 10 9 9 9 9 8 8 8 8 8 8 8 7 
def_bytes_0x0aa0    EQU                     0x0aa0
def_bytes_0x0aa0    DB                      144 71 71 145 54 73 14 144 70 85 145 61 65 4 144 71 74 4 144 70 81 7 144 66 76 145 54 76 14 144 73 76 145 59 67 7 144 75 72 8 144 73 77 145 54 75 7 144 75 76 7 144 71 73 145 61 65 7 144 73 73 7 144 71 72 145 54 74 8 144 70 73 7 144 66 77 145 59 75 14 144 71 71 145 54 73 15 144 70 85 145 61 65 208 160 11 
def_bytes_0x0ba0    EQU                     0x0ba0
def_bytes_0x0ba0    DB                      4 144 71 74 5 144 70 81 5 144 66 76 145 54 76 14 144 73 76 145 59 67 8 144 75 72 7 144 73 77 145 54 75 146 66 64 144 73 64 147 38 64 145 54 64 7 144 75 76 7 144 71 73 145 61 65 7 144 73 73 8 144 69 72 145 54 74 7 144 68 73 7 146 66 77 144 59 75 129 14 145 69 71 144 54 73 130 15 145 68 85 208 160 12 
def_bytes_0x0ca0    EQU                     0x0ca0
def_bytes_0x0ca0    DB                      144 61 65 3 145 69 74 4 145 68 81 7 145 64 76 144 54 76 15 145 73 76 144 59 67 7 145 74 72 7 145 73 77 144 54 75 7 145 74 76 7 145 73 73 144 61 65 8 145 71 73 7 145 69 72 144 54 74 7 145 68 73 7 145 66 77 144 59 75 15 145 69 71 144 54 73 14 145 68 85 144 61 65 5 145 69 74 5 145 68 81 4 208 160 13 
def_bytes_0x0da0    EQU                     0x0da0
def_bytes_0x0da0    DB                      145 64 76 144 54 76 15 145 73 76 144 59 67 7 145 74 72 7 145 73 77 144 54 75 7 145 74 76 8 145 73 73 144 61 65 7 145 71 73 7 145 69 72 144 54 74 7 145 68 73 7 145 66 77 144 59 75 15 145 69 71 144 54 73 14 145 68 85 144 61 65 5 145 69 74 5 145 68 81 5 145 64 76 144 54 76 14 145 73 76 144 59 67 208 160 14 
def_bytes_0x0ea0    EQU                     0x0ea0
def_bytes_0x0ea0    DB                      7 145 74 72 7 145 73 77 144 54 75 8 145 74 76 7 145 73 73 144 61 65 7 145 71 73 7 145 69 72 144 54 74 7 145 68 73 4 146 76 90 4 145 66 77 144 59 75 146 81 89 3 146 76 86 4 146 81 83 3 146 76 78 146 78 89 4 144 81 70 146 78 70 144 80 86 145 76 86 130 4 145 76 65 144 80 65 144 78 83 145 81 83 208 160 15 
def_bytes_0x0fa0    EQU                     0x0fa0
def_bytes_0x0fa0    DB                      3 145 81 65 144 78 65 144 80 78 145 76 78 4 145 76 64 144 80 64 144 78 70 145 81 70 3 145 81 64 144 78 64 144 80 65 145 76 65 4 145 76 64 144 80 64 144 78 65 145 81 65 4 145 81 64 144 78 64 144 80 64 145 76 64 3 145 76 64 144 80 64 144 78 64 145 81 64 4 145 81 64 144 78 64 144 80 64 145 76 64 3 208 160 16 
def_bytes_0x10a0    EQU                     0x10a0
def_bytes_0x10a0    DB                      145 76 64 144 80 64 144 78 64 145 81 64 4 145 81 64 144 78 64 144 80 64 145 76 64 4 145 76 64 144 80 64 144 78 64 145 81 64 3 145 81 64 144 78 64 144 80 64 145 76 64 4 145 76 64 144 80 64 144 78 64 145 81 64 3 145 81 65 144 78 65 144 80 64 145 76 64 4 145 76 66 144 80 66 144 78 64 145 81 64 4 208 160 17 
def_bytes_0x11a0    EQU                     0x11a0
def_bytes_0x11a0    DB                      145 81 66 144 78 66 144 80 64 145 76 64 3 145 76 67 144 80 67 144 78 65 145 81 65 4 145 81 67 144 78 67 144 80 66 145 76 66 3 145 76 67 144 80 67 144 78 66 145 81 66 4 145 81 68 144 78 68 144 80 67 145 76 67 4 145 76 68 144 80 68 144 78 67 145 81 67 3 145 81 67 144 78 67 144 80 67 145 76 67 4 208 160 18 
def_bytes_0x12a0    EQU                     0x12a0
def_bytes_0x12a0    DB                      145 76 67 144 80 67 144 78 68 145 81 68 3 145 81 67 144 78 67 144 80 68 145 76 68 4 145 76 67 144 80 67 144 78 67 145 81 67 4 145 81 66 144 78 66 144 80 67 145 76 67 3 145 76 65 144 80 65 144 78 67 145 81 67 4 145 81 64 144 78 64 144 80 67 145 76 67 3 145 76 76 144 80 76 144 78 66 145 81 66 4 208 160 19 
def_bytes_0x13a0    EQU                     0x13a0
def_bytes_0x13a0    DB                      145 81 87 144 78 87 144 80 65 145 76 65 4 145 76 99 144 80 99 144 78 64 145 81 64 3 146 54 73 144 80 78 145 76 78 4 144 78 91 145 81 91 3 144 80 105 145 76 105 4 128 129 4 144 61 65 145 66 64 130 131 14 144 54 76 14 144 59 67 145 68 64 15 144 54 75 145 68 64 14 144 61 65 15 144 54 74 14 144 59 75 208 160 20 
def_bytes_0x14a0    EQU                     0x14a0
def_bytes_0x14a0    DB                      145 69 64 14 144 54 73 145 69 64 15 144 61 65 14 144 54 76 15 144 59 67 145 71 64 14 144 54 75 145 71 64 14 144 61 65 15 144 54 74 14 144 59 75 145 68 64 4 146 69 65 3 145 68 66 130 4 145 69 68 4 144 54 73 145 68 69 145 68 64 3 145 69 71 145 69 65 4 145 68 72 145 68 66 3 145 69 74 145 69 68 4 208 160 21 
def_bytes_0x15a0    EQU                     0x15a0
def_bytes_0x15a0    DB                      144 61 65 145 68 75 145 68 69 4 145 69 75 145 69 71 3 145 68 75 145 68 72 4 145 69 76 145 69 74 3 144 54 76 145 68 76 145 68 75 4 145 69 76 145 69 75 4 145 68 76 145 68 75 3 145 69 76 145 69 76 4 144 59 67 145 68 76 145 68 76 3 145 69 76 145 69 76 4 145 68 76 145 68 76 4 145 69 76 145 69 76 3 208 160 22 
def_bytes_0x16a0    EQU                     0x16a0
def_bytes_0x16a0    DB                      144 54 75 145 68 76 145 68 76 4 145 69 76 145 69 76 3 145 68 76 145 68 76 4 145 69 76 145 69 76 4 144 61 65 145 68 76 145 68 76 3 145 69 76 145 69 76 4 145 68 76 145 68 76 3 145 69 76 145 69 76 4 144 54 74 145 68 76 145 68 76 4 145 69 77 145 69 76 3 145 68 77 145 68 76 4 145 69 64 145 69 76 3 208 160 23 
def_bytes_0x17a0    EQU                     0x17a0
def_bytes_0x17a0    DB                      144 59 75 145 80 67 146 68 76 4 147 81 69 146 69 77 4 145 80 72 146 68 77 131 3 145 81 75 146 69 64 4 144 54 73 145 80 75 145 80 67 130 3 145 81 75 145 81 69 4 145 80 75 145 80 72 4 145 81 76 145 81 75 3 144 61 65 145 80 76 145 80 75 4 145 81 76 145 81 75 3 145 80 76 145 80 75 4 145 81 76 208 160 24 
def_bytes_0x18a0    EQU                     0x18a0
def_bytes_0x18a0    DB                      145 81 76 4 144 54 76 145 80 76 145 80 76 3 145 81 76 145 81 76 4 145 80 76 145 80 76 3 145 81 77 145 81 76 4 144 59 67 145 75 64 146 80 76 4 147 76 67 146 81 76 3 145 75 70 146 80 76 131 4 145 76 73 146 81 77 3 144 54 75 145 75 76 145 75 64 130 4 145 76 79 145 76 67 4 145 75 79 145 75 70 3 208 160 25 
def_bytes_0x19a0    EQU                     0x19a0
def_bytes_0x19a0    DB                      145 76 79 145 76 73 4 144 61 65 145 75 80 145 75 76 3 145 76 80 145 76 79 4 145 75 80 145 75 79 4 145 76 80 145 76 79 3 144 54 74 145 75 81 145 75 80 4 145 76 81 145 76 80 3 145 75 81 145 75 80 4 145 76 81 145 76 80 4 146 61 64 144 59 75 145 66 82 147 75 81 3 147 76 81 4 147 75 81 3 147 76 81 208 160 26 
def_bytes_0x1aa0    EQU                     0x1aa0
def_bytes_0x1aa0    DB                      4 144 54 73 145 66 82 131 14 146 61 65 128 15 144 54 76 130 14 146 69 64 144 59 67 145 68 64 15 144 54 75 145 68 64 14 144 61 65 14 144 54 74 15 146 64 64 144 59 75 145 69 64 14 144 54 73 145 69 64 15 144 61 65 14 144 54 76 14 146 63 64 144 59 67 145 71 64 15 144 54 75 145 71 64 14 144 61 65 15 144 54 74 208 160 27 
def_bytes_0x1ba0    EQU                     0x1ba0
def_bytes_0x1ba0    DB                      14 146 61 64 144 59 75 145 68 64 4 147 69 65 3 145 68 66 131 4 145 69 68 3 144 54 73 145 68 69 145 68 64 4 145 69 71 145 69 65 4 145 68 72 145 68 66 3 145 69 74 145 69 68 4 146 61 65 144 68 75 144 68 69 129 3 144 69 75 144 69 71 4 144 68 75 144 68 72 4 144 69 76 144 69 74 3 145 54 76 144 68 76 208 160 28 
def_bytes_0x1ca0    EQU                     0x1ca0
def_bytes_0x1ca0    DB                      144 68 75 130 4 144 69 76 144 69 75 3 144 68 76 144 68 75 4 144 69 76 144 69 76 4 144 69 64 145 59 67 144 68 76 144 68 76 3 144 69 76 144 69 76 4 144 68 76 144 68 76 3 144 69 76 144 69 76 4 145 54 75 144 68 76 144 68 76 4 144 69 76 144 69 76 3 144 68 76 144 68 76 4 144 69 76 144 69 76 3 208 160 29 
def_bytes_0x1da0    EQU                     0x1da0
def_bytes_0x1da0    DB                      145 61 65 144 68 76 144 68 76 4 144 69 76 144 69 76 4 144 68 76 144 68 76 3 144 69 76 144 69 76 4 145 54 74 144 68 76 144 68 76 3 144 69 77 144 69 76 4 144 68 77 144 68 76 4 144 69 64 144 69 76 3 144 64 64 145 59 75 146 80 67 147 68 76 4 147 69 77 3 146 80 72 147 68 77 4 146 81 75 147 69 64 4 208 160 30 
def_bytes_0x1ea0    EQU                     0x1ea0
def_bytes_0x1ea0    DB                      145 54 73 146 80 75 146 80 67 131 3 146 81 75 146 81 69 4 146 80 75 146 80 72 3 146 81 76 146 81 75 4 145 61 65 146 80 76 146 80 75 4 146 81 76 146 81 75 3 146 80 76 146 80 75 4 146 81 76 146 81 76 3 145 54 76 146 80 76 146 80 76 4 146 81 76 146 81 76 4 146 80 76 146 80 76 3 146 81 77 146 81 76 208 160 31 
def_bytes_0x1fa0    EQU                     0x1fa0
def_bytes_0x1fa0    DB                      4 144 63 64 145 59 67 146 75 64 147 80 76 3 147 81 76 4 146 75 70 147 80 76 4 146 76 73 147 81 77 3 145 54 75 146 75 76 146 75 64 131 4 146 76 79 146 76 67 3 146 75 79 146 75 70 4 146 76 79 146 76 73 4 145 61 65 146 75 80 146 75 76 3 146 76 80 146 76 79 4 146 75 80 146 75 79 3 146 76 80 208 160 32 
def_bytes_0x20a0    EQU                     0x20a0
def_bytes_0x20a0    DB                      146 76 79 4 145 54 74 146 75 81 146 75 80 4 146 76 81 146 76 80 3 146 75 81 146 75 80 4 146 76 81 146 76 80 3 144 68 70 145 59 75 146 75 81 147 30 64 147 30 64 4 146 76 81 4 146 75 81 3 146 76 81 4 145 54 73 130 14 144 61 65 129 15 145 66 76 144 54 76 14 145 69 64 144 59 67 146 42 64 146 42 64 208 160 33 
def_bytes_0x21a0    EQU                     0x21a0
def_bytes_0x21a0    DB                      131 7 145 68 74 7 145 66 78 144 54 75 15 145 64 64 144 61 65 7 145 63 74 7 144 61 77 144 54 74 145 33 64 145 33 64 130 15 146 71 64 144 59 75 145 35 64 145 35 64 7 146 69 71 7 146 68 78 144 54 73 145 37 64 145 37 64 14 146 64 71 144 61 65 145 40 64 145 40 64 15 146 66 76 144 54 76 14 146 68 75 208 160 34 
def_bytes_0x22a0    EQU                     0x22a0
def_bytes_0x22a0    DB                      144 59 67 15 146 69 71 144 54 75 145 33 64 145 33 64 14 146 71 67 144 61 65 145 35 64 145 35 64 14 146 73 68 144 54 74 145 37 64 145 37 64 15 146 68 70 144 59 75 145 30 64 145 30 64 14 144 54 73 15 144 61 65 130 14 146 66 76 144 54 76 14 146 69 64 144 59 67 145 42 64 145 42 64 8 146 68 74 7 146 66 78 208 160 35 
def_bytes_0x23a0    EQU                     0x23a0
def_bytes_0x23a0    DB                      144 54 75 14 146 64 64 144 61 65 7 146 63 74 8 144 61 77 144 54 74 145 33 64 145 33 64 130 14 146 71 64 144 59 75 145 35 64 145 35 64 7 146 69 71 7 146 68 78 144 54 73 145 37 64 145 37 64 15 146 64 71 144 61 65 145 40 64 145 40 64 14 146 66 76 144 54 76 15 146 68 75 144 59 67 14 146 69 71 144 54 75 208 160 36 
def_bytes_0x24a0    EQU                     0x24a0
def_bytes_0x24a0    DB                      145 33 64 145 33 64 14 146 71 67 144 61 65 145 35 64 145 35 64 15 146 73 68 144 54 74 145 37 64 145 37 64 14 146 68 70 144 59 75 145 30 64 145 30 64 15 144 54 73 147 62 64 144 54 64 7 147 62 64 144 54 64 7 144 61 65 130 14 146 66 76 144 54 76 145 42 64 145 42 64 15 146 69 64 144 59 67 7 146 68 74 7 208 160 37 
def_bytes_0x25a0    EQU                     0x25a0
def_bytes_0x25a0    DB                      146 66 78 144 54 75 15 146 64 64 144 61 65 145 40 64 145 40 64 7 146 63 74 7 144 61 77 144 54 74 130 14 146 71 64 144 59 75 8 146 69 71 7 146 68 78 144 54 73 145 37 64 145 37 64 14 146 64 71 144 61 65 145 40 64 145 40 64 15 146 66 76 144 54 76 145 37 64 145 37 64 14 146 68 75 144 59 67 145 42 64 208 160 38 
def_bytes_0x26a0    EQU                     0x26a0
def_bytes_0x26a0    DB                      145 42 64 14 146 69 71 144 54 75 145 37 64 145 37 64 15 146 71 67 144 61 65 145 40 64 145 40 64 14 146 73 68 144 54 74 145 37 64 145 37 64 15 146 68 70 144 59 75 145 30 64 145 30 64 14 144 54 73 14 144 61 65 130 15 146 66 76 144 54 76 145 42 64 145 42 64 14 146 69 64 144 59 67 7 146 68 74 8 146 66 78 208 160 39 
def_bytes_0x27a0    EQU                     0x27a0
def_bytes_0x27a0    DB                      144 54 75 14 146 64 64 144 61 65 145 40 64 145 40 64 7 146 63 74 7 144 61 77 144 54 74 130 15 146 71 64 144 59 75 7 146 69 71 7 146 68 78 144 54 73 145 37 64 145 37 64 15 146 64 71 144 61 65 145 40 64 145 40 64 14 146 66 76 144 54 76 145 37 64 145 37 64 14 146 68 75 144 59 67 145 42 64 145 42 64 15 208 160 40 
def_bytes_0x28a0    EQU                     0x28a0
def_bytes_0x28a0    DB                      146 69 71 144 54 75 145 37 64 145 37 64 14 146 71 67 144 61 65 145 40 64 145 40 64 15 146 73 68 144 54 74 145 37 64 145 37 64 14 146 64 76 144 59 75 145 30 64 145 30 64 14 144 54 73 128 131 15 144 61 65 7 129 7 144 54 76 145 30 64 145 30 64 130 15 146 64 77 147 69 64 144 59 67 145 32 64 145 32 64 7 208 160 41 
def_bytes_0x29a0    EQU                     0x29a0
def_bytes_0x29a0    DB                      146 63 79 147 68 74 7 146 61 82 147 66 78 144 54 75 145 30 64 145 30 64 14 146 59 77 147 64 64 144 61 65 129 8 145 57 80 146 63 74 131 7 144 61 83 145 56 83 144 54 74 146 33 64 146 33 64 14 145 66 78 147 71 64 144 59 75 146 30 64 146 30 64 7 145 64 80 147 69 71 8 145 63 82 147 68 78 144 54 73 130 14 208 160 42 
def_bytes_0x2aa0    EQU                     0x2aa0
def_bytes_0x2aa0    DB                      145 61 83 146 64 71 145 61 65 144 35 64 144 35 64 131 14 145 59 82 146 66 76 147 54 76 144 33 64 144 33 64 15 145 61 79 146 68 75 147 59 67 144 35 64 144 35 64 14 145 63 79 146 69 71 147 54 75 144 37 64 144 37 64 15 145 64 79 146 71 67 147 61 65 144 40 64 144 40 64 14 145 66 82 146 73 68 147 54 74 144 42 64 208 160 43 
def_bytes_0x2ba0    EQU                     0x2ba0
def_bytes_0x2ba0    DB                      144 42 64 14 145 64 80 146 68 64 147 59 75 144 30 64 144 30 64 15 147 54 73 14 147 61 65 7 128 8 144 54 76 145 30 64 145 30 64 130 131 14 146 64 77 147 69 64 144 59 67 145 32 64 145 32 64 7 146 63 79 147 68 74 7 146 61 82 147 66 78 144 54 75 145 30 64 145 30 64 15 146 59 77 147 64 64 144 61 65 129 7 208 160 44 
def_bytes_0x2ca0    EQU                     0x2ca0
def_bytes_0x2ca0    DB                      145 57 80 146 63 74 131 7 144 61 83 145 56 83 144 54 74 146 33 64 146 33 64 15 145 66 78 147 71 64 144 59 75 146 30 64 146 30 64 7 145 64 80 147 69 71 7 145 63 82 147 68 78 144 54 73 130 14 145 61 83 146 64 71 145 61 65 144 35 64 144 35 64 131 15 145 59 82 146 66 76 147 54 76 144 33 64 144 33 64 14 208 160 45 
def_bytes_0x2da0    EQU                     0x2da0
def_bytes_0x2da0    DB                      145 61 79 146 68 75 147 59 67 144 35 64 144 35 64 15 145 63 79 146 69 71 147 54 75 144 37 64 144 37 64 14 145 64 79 146 71 67 147 61 65 144 40 64 144 40 64 14 145 66 82 146 73 68 147 54 74 144 42 64 144 42 64 15 145 64 80 146 68 64 147 59 75 144 30 64 144 30 64 14 147 54 73 147 54 64 7 147 54 64 8 208 160 46 
def_bytes_0x2ea0    EQU                     0x2ea0
def_bytes_0x2ea0    DB                      147 61 65 14 145 66 76 146 54 76 144 42 64 144 42 64 131 14 145 69 64 146 59 67 8 145 68 74 7 145 66 78 146 54 75 14 145 64 64 146 61 65 144 40 64 144 40 64 7 145 63 74 8 146 61 77 145 54 74 130 14 146 71 64 145 59 75 7 146 69 71 7 146 68 78 145 54 73 144 37 64 144 37 64 15 146 64 71 145 61 65 208 160 47 
def_bytes_0x2fa0    EQU                     0x2fa0
def_bytes_0x2fa0    DB                      144 40 64 144 40 64 14 146 66 76 145 54 76 144 37 64 144 37 64 15 146 68 75 145 59 67 144 42 64 144 42 64 14 146 69 71 145 54 75 144 37 64 144 37 64 14 146 71 67 145 61 65 144 40 64 144 40 64 15 146 73 68 145 54 74 144 37 64 144 37 64 14 146 68 64 145 59 75 144 30 64 144 30 64 15 145 54 73 14 145 61 65 14 208 160 48 
def_bytes_0x30a0    EQU                     0x30a0
def_bytes_0x30a0    DB                      146 66 76 145 54 76 144 42 64 144 42 64 15 146 69 64 145 59 67 7 146 68 74 7 146 66 78 145 54 75 15 146 64 64 145 61 65 144 40 64 144 40 64 7 146 63 74 7 145 61 77 145 54 74 130 14 146 71 64 145 59 75 8 146 69 71 7 146 68 78 145 54 73 144 37 64 144 37 64 14 146 64 71 145 61 65 144 40 64 144 40 64 15 208 160 49 
def_bytes_0x31a0    EQU                     0x31a0
def_bytes_0x31a0    DB                      146 66 76 145 54 76 144 37 64 144 37 64 14 146 68 75 145 59 67 144 42 64 144 42 64 14 146 69 71 145 54 75 144 37 64 144 37 64 15 146 71 67 145 61 65 144 40 64 144 40 64 14 146 73 68 145 54 74 144 37 64 144 37 64 15 146 68 64 145 59 75 146 68 64 147 61 64 144 30 64 144 30 64 14 145 52 82 147 61 82 146 68 82 208 160 50 
def_bytes_0x32a0    EQU                     0x32a0
def_bytes_0x32a0    DB                      29 144 42 64 144 42 64 130 7 145 49 64 146 52 64 147 61 64 7 129 130 131 22 145 49 82 146 52 82 147 61 82 7 144 40 64 144 40 64 43 144 37 64 144 37 64 15 144 40 64 144 40 64 14 144 37 64 144 37 64 14 144 42 64 144 42 64 15 144 37 64 144 37 64 14 144 40 64 144 40 64 15 144 37 64 144 37 64 14 144 30 64 208 160 51 
def_bytes_0x33a0    EQU                     0x33a0
def_bytes_0x33a0    DB                      144 30 64 36 145 49 64 146 52 64 147 61 64 7 144 42 64 144 42 64 22 145 49 82 146 52 82 147 61 82 21 144 40 64 144 40 64 44 144 37 64 144 37 64 14 144 40 64 144 40 64 14 144 37 64 144 37 64 15 144 42 64 144 42 64 14 144 37 64 144 37 64 15 144 40 64 144 40 64 14 144 37 64 144 37 64 14 144 30 64 144 30 64 208 160 52 
def_bytes_0x34a0    EQU                     0x34a0
def_bytes_0x34a0    DB                      36 145 54 64 146 57 64 147 66 64 8 144 42 64 144 42 64 21 145 54 82 146 57 82 147 66 82 22 144 40 64 144 40 64 43 144 37 64 144 37 64 14 144 40 64 144 40 64 15 144 37 64 144 37 64 14 144 42 64 144 42 64 15 144 37 64 144 37 64 14 144 40 64 144 40 64 14 144 37 64 144 37 64 15 144 30 64 144 30 64 21 208 160 53 
def_bytes_0x35a0    EQU                     0x35a0
def_bytes_0x35a0    DB                      145 54 64 146 57 64 147 66 64 22 144 42 64 144 42 64 7 145 54 82 146 57 82 147 66 82 36 144 40 64 144 40 64 43 144 37 64 144 37 64 15 144 40 64 144 40 64 14 144 37 64 144 37 64 15 144 42 64 144 42 64 14 144 37 64 144 37 64 14 144 40 64 144 40 64 15 144 37 64 144 37 64 14 144 30 64 144 30 64 15 145 54 64 208 160 54 
def_bytes_0x36a0    EQU                     0x36a0
def_bytes_0x36a0    DB                      146 57 64 147 66 64 28 145 54 82 146 57 82 147 66 82 144 42 64 144 42 64 44 144 40 64 144 40 64 43 145 75 64 146 68 64 147 59 64 144 37 64 144 37 64 14 144 40 64 144 40 64 15 145 75 82 146 68 82 147 59 82 144 37 64 144 37 64 14 144 42 64 144 42 64 14 144 37 64 144 37 64 15 144 40 64 144 40 64 14 144 37 64 208 160 55 
def_bytes_0x37a0    EQU                     0x37a0
def_bytes_0x37a0    DB                      144 37 64 15 144 30 64 144 30 64 14 145 76 64 146 69 64 147 60 64 29 145 76 82 146 69 82 147 60 82 144 42 64 144 42 64 43 144 40 64 144 40 64 43 145 75 64 146 68 64 147 59 64 144 37 64 144 37 64 15 144 40 64 144 40 64 14 145 75 82 146 68 82 147 59 82 144 37 64 144 37 64 14 144 42 64 144 42 64 15 144 37 64 208 160 56 
def_bytes_0x38a0    EQU                     0x38a0
def_bytes_0x38a0    DB                      144 37 64 14 144 40 64 144 40 64 15 144 37 64 144 37 64 14 144 30 64 144 30 64 14 145 54 64 146 57 64 147 66 64 4 147 66 82 4 131 3 147 69 82 4 131 3 147 73 82 4 147 73 64 131 4 147 78 82 3 145 54 82 146 57 82 144 42 64 144 42 64 131 4 147 73 82 3 131 4 147 69 82 4 131 3 147 66 82 4 147 66 64 208 160 57 
def_bytes_0x39a0    EQU                     0x39a0
def_bytes_0x39a0    DB                      131 3 147 61 82 4 131 4 147 66 82 3 131 4 147 69 82 3 144 40 64 144 40 64 131 4 147 73 82 4 147 73 64 131 3 147 78 82 4 131 3 147 73 82 4 131 4 147 69 82 3 131 4 147 66 82 3 131 4 147 63 82 4 145 75 64 146 68 64 144 37 64 144 37 64 131 3 146 68 82 4 145 75 64 130 3 145 71 82 4 144 40 64 208 160 58 
def_bytes_0x3aa0    EQU                     0x3aa0
def_bytes_0x3aa0    DB                      144 40 64 146 80 64 129 4 145 75 82 130 3 145 75 64 129 4 145 80 82 3 146 75 82 147 68 82 144 37 64 144 37 64 129 4 146 75 82 4 147 68 64 130 3 145 71 82 131 4 144 42 64 144 42 64 146 63 64 129 3 145 68 82 130 4 145 68 64 129 4 145 63 82 3 144 37 64 144 37 64 146 71 64 129 4 145 68 82 130 3 208 160 59 
def_bytes_0x3ba0    EQU                     0x3ba0
def_bytes_0x3ba0    DB                      146 75 64 129 4 145 71 82 130 4 144 40 64 144 40 64 146 80 64 129 3 145 75 82 130 4 145 75 64 129 3 145 80 82 4 144 37 64 144 37 64 146 71 64 129 4 145 75 82 130 3 146 68 64 129 4 145 71 82 130 3 144 30 64 144 30 64 146 64 64 129 4 145 68 82 130 4 146 69 64 129 3 145 64 82 130 4 146 76 64 147 69 64 208 160 60 
def_bytes_0x3ca0    EQU                     0x3ca0
def_bytes_0x3ca0    DB                      129 3 147 69 82 4 146 76 64 131 4 145 72 82 130 3 146 81 64 129 4 145 76 82 130 3 145 76 64 129 4 145 81 82 4 146 76 82 147 69 82 144 42 64 144 42 64 129 3 146 76 82 4 147 69 64 130 3 145 72 82 131 4 146 64 64 129 4 145 69 82 130 3 145 69 64 129 4 145 64 82 3 146 72 64 129 4 145 69 82 130 4 208 160 61 
def_bytes_0x3da0    EQU                     0x3da0
def_bytes_0x3da0    DB                      146 76 64 129 3 145 72 82 130 4 144 40 64 144 40 64 146 81 64 129 3 145 76 82 130 4 145 76 64 129 4 145 81 82 3 146 72 64 129 4 145 76 82 130 3 146 69 64 129 4 145 72 82 130 4 146 63 64 129 3 145 69 82 130 4 146 68 64 129 3 145 63 82 130 4 146 75 64 147 68 64 144 37 64 144 37 64 129 4 147 68 82 3 208 160 62 
def_bytes_0x3ea0    EQU                     0x3ea0
def_bytes_0x3ea0    DB                      146 75 64 131 4 145 71 82 130 3 144 40 64 144 40 64 146 80 64 129 4 145 75 82 130 4 145 75 64 129 3 145 80 82 4 146 75 82 147 68 82 144 37 64 144 37 64 129 3 146 75 82 4 147 68 64 130 4 145 71 82 131 3 144 42 64 144 42 64 146 63 64 129 4 145 68 82 130 3 145 68 64 129 4 145 63 82 4 144 37 64 208 160 63 
def_bytes_0x3fa0    EQU                     0x3fa0
def_bytes_0x3fa0    DB                      144 37 64 146 71 64 129 3 145 68 82 130 4 146 75 64 129 3 145 71 82 130 4 144 40 64 144 40 64 146 80 64 129 4 145 75 82 130 3 145 75 64 129 4 145 80 82 3 144 37 64 144 37 64 146 71 64 129 4 145 75 82 130 4 146 68 64 129 3 145 71 82 130 4 144 30 64 144 30 64 146 61 64 129 3 145 68 82 130 4 146 66 64 208 160 64 
def_bytes_0x40a0    EQU                     0x40a0
def_bytes_0x40a0    DB                      129 4 145 61 82 130 3 146 54 64 147 57 64 129 4 145 66 82 3 129 4 145 69 82 4 129 3 145 73 82 4 145 73 64 129 3 145 78 82 4 146 54 82 147 57 82 144 42 64 144 42 64 129 4 145 73 82 3 129 4 145 69 82 3 129 4 145 66 82 4 145 66 64 129 3 145 61 82 4 129 3 145 66 82 4 129 4 145 69 82 3 208 160 65 
def_bytes_0x41a0    EQU                     0x41a0
def_bytes_0x41a0    DB                      144 40 64 144 40 64 129 4 145 73 82 3 145 73 64 129 4 145 78 82 4 129 3 145 73 82 4 129 3 145 69 82 4 129 4 145 66 82 3 129 4 145 63 82 3 146 75 64 147 68 64 144 37 64 144 37 64 129 4 147 68 82 4 146 75 64 131 3 145 71 82 130 4 144 40 64 144 40 64 146 80 64 129 3 145 75 82 130 4 145 75 64 208 160 66 
def_bytes_0x42a0    EQU                     0x42a0
def_bytes_0x42a0    DB                      129 4 145 80 82 3 146 75 82 147 68 82 144 37 64 144 37 64 129 4 146 75 82 3 147 68 64 130 4 145 71 82 131 4 144 42 64 144 42 64 146 63 64 129 3 145 68 82 130 4 145 68 64 129 3 145 63 82 4 144 37 64 144 37 64 146 71 64 129 4 145 68 82 130 3 146 75 64 129 4 145 71 82 130 3 144 40 64 144 40 64 208 160 67 
def_bytes_0x43a0    EQU                     0x43a0
def_bytes_0x43a0    DB                      146 80 64 129 4 145 75 82 130 4 145 75 64 129 3 145 80 82 4 144 37 64 144 37 64 146 71 64 129 3 145 75 82 130 4 146 68 64 129 4 145 71 82 130 3 144 30 64 144 30 64 146 64 64 129 4 145 68 82 130 3 146 69 64 129 4 145 64 82 130 4 146 76 64 147 69 64 129 3 147 69 82 4 146 76 64 131 3 145 72 82 130 4 208 160 68 
def_bytes_0x44a0    EQU                     0x44a0
def_bytes_0x44a0    DB                      146 81 64 129 4 145 76 82 130 3 145 76 64 129 4 145 81 82 3 146 76 82 147 69 82 144 42 64 144 42 64 129 4 146 76 82 4 147 69 64 130 3 145 72 82 131 4 146 64 64 129 3 145 69 82 130 4 145 69 64 129 4 145 64 82 3 146 72 64 129 4 145 69 82 130 3 146 76 64 129 4 145 72 82 130 4 144 40 64 144 40 64 208 160 69 
def_bytes_0x45a0    EQU                     0x45a0
def_bytes_0x45a0    DB                      146 81 64 129 3 145 76 82 130 4 145 76 64 129 3 145 81 82 4 146 72 64 129 4 145 76 82 130 3 146 69 64 129 4 145 72 82 130 3 146 63 64 129 4 145 69 82 130 4 146 68 64 129 3 145 63 82 130 4 146 75 64 147 68 64 144 37 64 144 37 64 129 3 147 68 82 4 146 75 64 131 4 145 71 82 130 3 144 40 64 144 40 64 208 160 70 
def_bytes_0x46a0    EQU                     0x46a0
def_bytes_0x46a0    DB                      146 80 64 129 4 145 75 82 130 3 145 75 64 129 4 145 80 82 4 146 75 82 147 68 82 144 37 64 144 37 64 129 3 146 75 82 4 147 68 64 130 3 145 71 82 131 4 144 42 64 144 42 64 146 63 64 129 4 145 68 82 130 3 145 68 64 129 4 145 63 82 3 144 37 64 144 37 64 146 71 64 129 4 145 68 82 130 4 146 75 64 129 3 208 160 71 
def_bytes_0x47a0    EQU                     0x47a0
def_bytes_0x47a0    DB                      145 71 82 130 4 144 40 64 144 40 64 146 80 64 129 3 145 75 82 130 4 145 75 64 129 4 145 80 82 3 144 37 64 144 37 64 146 71 64 129 4 145 75 82 130 3 146 68 64 129 4 145 71 82 130 4 144 30 64 144 30 64 146 61 64 129 3 145 68 82 130 4 146 66 64 129 3 145 61 82 130 4 146 54 64 147 57 64 129 4 145 66 83 208 160 72 
def_bytes_0x48a0    EQU                     0x48a0
def_bytes_0x48a0    DB                      3 129 4 145 69 83 3 129 4 145 73 84 4 145 73 66 129 3 145 78 85 4 146 54 82 147 57 82 129 3 145 73 85 4 129 4 145 69 86 3 129 4 145 66 87 3 145 66 69 129 4 145 61 87 4 129 3 145 66 88 4 129 3 145 69 89 4 129 4 145 73 90 3 145 73 72 129 4 145 78 90 3 129 4 145 73 91 4 129 3 145 69 92 208 160 73 
def_bytes_0x49a0    EQU                     0x49a0
def_bytes_0x49a0    DB                      4 129 3 145 66 92 4 145 66 76 129 4 145 61 93 3 129 4 145 66 94 3 129 4 145 69 94 4 129 3 145 73 95 4 145 73 79 129 3 145 78 96 4 129 4 145 73 96 3 129 4 145 69 97 3 129 4 145 66 98 4 145 66 82 129 3 145 61 98 4 129 3 145 66 99 4 129 4 145 69 100 3 129 4 145 73 100 3 145 73 85 129 4 208 160 74 
def_bytes_0x4aa0    EQU                     0x4aa0
def_bytes_0x4aa0    DB                      145 78 101 4 129 3 145 73 102 4 129 3 145 69 102 4 129 4 145 66 103 3 145 66 88 129 4 145 61 104 3 144 69 89 129 4 144 66 105 4 145 73 90 128 3 144 69 105 129 4 145 78 91 128 3 144 73 106 129 4 144 73 92 128 4 144 78 107 3 145 69 92 128 4 144 73 107 129 3 145 66 93 128 4 144 69 108 129 4 145 61 94 208 160 75 
def_bytes_0x4ba0    EQU                     0x4ba0
def_bytes_0x4ba0    DB                      128 3 144 66 109 129 4 144 66 95 128 3 144 61 109 4 145 69 96 128 4 144 66 110 129 3 145 73 96 128 4 144 69 111 129 3 145 78 97 128 4 144 73 111 129 4 144 73 98 128 3 144 78 112 4 145 69 99 128 3 144 73 113 129 4 145 66 100 128 4 144 69 113 129 3 145 61 100 128 4 144 66 114 129 3 144 66 101 128 4 144 61 115 208 160 10 

; Define Words
def_words_0x0500    EQU                     0x0500
def_words_0x0500    DW                      5000 5049 5098 5147 5196 5245 5293 5342 5390 5438 5486 5533 5581 5627 5674 5720 5765 5810 5855 5899 5943 5986 6028 6070 6111 6152 6191 6230 6269 6306 6343 6379 6414 6448 6482 6514 6546 6577 6606 6635 6663 6690 6715 6740 6764 6786 6808 6828 6848 6866 6883 6899 6914 6928 6940 6951 6962 6971 6978 6985 6990 6995 6998 6999 7000 6999 6998 6995 6990 6985 6978 6971 6962 6951 6940 6928 6914 6899 6883 6866 6848 6828 6808 6786 6764 6740 6715 6690 6663 6635 6606 6577 6546 6514 6482 6448 6414 6379 6343 6306 6269 6230 6191 6152 6111 6070 6028 5986 5943 5899 5855 5810 5765 5720 5674 5627 5581 5533 5486 5438 5390 5342 5293 5245 5196 5147 5098 5049 5000 4951 4902 4853 4804 4755 4707 4658 4610 4562 4514 4467 4419 4373 4326 4280 4235 4190 4145 4101 4057 4014 3972 3930 3889 3848 3809 3770 3731 3694 3657 3621 3586 3552 3518 3486 3454 3423 3394 3365 3337 3310 3285 3260 3236 3214 3192 3172 3152 3134 3117 3101 3086 3072 3060 3049 3038 3029 3022 3015 3010 3005 3002 3001 3000 3001 3002 3005 3010 3015 3022 3029 3038 3049 3060 3072 3086 3101 3117 3134 3152 3172 3192 3214 3236 3260 3285 3310 3337 3365 3394 3423 3454 3486 3518 3552 3586 3621 3657 3694 3731 3770 3809 3848 3889 3930 3972 4014 4057 4101 4145 4190 4235 4280 4326 4373 4419 4467 4514 4562 4610 4658 4707 4755 4804 4853 4902 4951 

; Define Images

; Define Sprites
def_sprites_0x0400  EQU                     0x0400
def_sprites_0x0400  DB                      0 0 0 0 0 0 255 
def_sprites_0x0407  EQU                     0x0407
def_sprites_0x0407  DB                      0 0 0 0 0 0 255 
def_sprites_0x040e  EQU                     0x040e
def_sprites_0x040e  DB                      4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 224 

; Define Fonts

; Lookup Tables
_lut_numericLabs    EQU                     0x7aae
_lut_numericLabs    DW                      1 2 3 4 49 50 51 52 0x0000
_lut_numericAddrs   EQU                     0x77f0
_lut_numericAddrs   DW                      0x02b8 0x02c5 0x02d2 0x02df 0x031f 0x032a 0x0335 0x0340 
_spriteLut_0x7aa4   EQU                     0x7aa4
_spriteLut_0x7aa4   DW                      0x0400 0x0000 0x0407 0x0006 0x0000
_spriteLut_0x7ca1   EQU                     0x7ca1
_spriteLut_0x7ca1   DW                      0x040e 0x1f00 0x0000
_spritesLut_        EQU                     0x7aa0
_spritesLut_        DW                      0x7aa4 0x7ca1 

; Code
_entryPoint_        LDI                     0x28
                    STW                     romType
                    RomCheck                
                    InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    LDI                     0
                    STW                     _t                              ; t = 0

                    SoundAllOff                                             ; sound off

                    LDWI                    15360
                    STW                     fgbgColour                      ; set FGBGCOLOUR, &h3C00

                    ClearVertBlinds                                         ; cls

                    LDI                     1
                    STW                     graphicsMode
                    ScanlineMode                                            ; mode 1

                    LDI                     18
                    ST                      cursorXY
                    LDI                     2
                    ST                      cursorXY + 1
                    AtTextCursor                                            ; at 18,2

                    PrintString             _str_0x7ee9                     ; print "Keys: <1> <2> <3> <4>";

                    LDI                     255
                    STW                     _kk                             ; kk = 255

                    LDI                     0
                    STW                     _state                          ; state = 0

_loop               LDI                     5
                    ST                      giga_soundTimer                 ; set SOUNDTIMER, 5

                    LDWI                    _vuMeter
                    CALL                    giga_vAC                        ; gosub vuMeter

                    LD                      giga_serialRaw
                    STW                     _k                              ; k = get("SERIALRAW")

                    LDW                     _kk
                    SUBI                    255
                    BNE                     _else_0x02a4
                    LDW                     _k
                    STW                     numericLabel
                    LDI                     0
                    STW                     defaultLabel
                    GosubNumeric                                            ; if kk &&= 255 then gosub k

_else_0x02a4        LDW                     _state
                    STW                     numericLabel
                    LDI                     0
                    STW                     defaultLabel
                    GosubNumeric                                            ; gosub state

                    LDW                     _k
                    STW                     _kk                             ; kk = k

                    BRA                     _loop                           ; goto &loop

_midiOff            PUSH                    
                    LDI                     0
                    STW                     midiStream                      ; set MIDISTREAM, &h0000

                    Return                                                  ; return

_1                  PUSH                    
                    LDWI                    _midiOff
                    CALL                    giga_vAC                        ; gosub midiOff

                    LDWI                    _siren
                    CALL                    giga_vAC                        ; gosub siren

                    Return                                                  ; return

_2                  PUSH                    
                    LDWI                    _midiOff
                    CALL                    giga_vAC                        ; gosub midiOff

                    LDWI                    _crash
                    CALL                    giga_vAC                        ; gosub crash

                    Return                                                  ; return

_3                  PUSH                    
                    LDWI                    _midiOff
                    CALL                    giga_vAC                        ; gosub midiOff

                    LDWI                    _beep
                    CALL                    giga_vAC                        ; gosub beep

                    Return                                                  ; return

_4                  PUSH                    
                    LDW                     midiStream
                    JumpEQ                  _else_0x0317 1                  ; if get("MIDISTREAM") &= &h0000

                    LDI                     2
                    ST                      waveType
                    LDWI                    2720
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    PlayMidiV               
                    LDWI                    _endif_0x031c
                    CALL                    giga_vAC                        ; play midiv, &h0AA0, 2

_else_0x0317        TickMidiV                                               ; play midiv

_endif_0x031c       Return                                                  ; return

_49                 PUSH                    
                    LDI                     0
                    STW                     _t                              ; t = 0

                    LDI                     1
                    STW                     _state                          ; state = 1

                    Return                                                  ; return

_50                 PUSH                    
                    LDI                     0
                    STW                     _t                              ; t = 0

                    LDI                     2
                    STW                     _state                          ; state = 2

                    Return                                                  ; return

_51                 PUSH                    
                    LDI                     0
                    STW                     _t                              ; t = 0

                    LDI                     3
                    STW                     _state                          ; state = 3

                    Return                                                  ; return

_52                 PUSH                    
                    LDI                     4
                    STW                     _state                          ; state = 4

                    Return                                                  ; return

_vuMeter            PUSH                    
                    LDI                     1
                    STW                     _i                              ; for i=1 to 4

_next_0x034b        LD                      _i
                    ST                      giga_vAC + 1
                    ORI                     0xFF
                    XORI                    0xFF
                    STW                     _i8                             ; i8 = i LSL 8

                    LDW                     _i8
                    ADDI                    250
                    PEEK                    
                    STW                     _v                              ; v = peek(i8 + &h00FA)

                    LDWI                    0x7edf
                    ADDW                    _i
                    ADDW                    _i
                    DEEK                    
                    STW                     _vol                            ; vol = volume(i)

                    LDWI                    0x7ed5
                    ADDW                    _i
                    ADDW                    _i
                    DEEK                    
                    STW                     _y                              ; y = ypos(i)

                    LDW                     _v
                    SUBI                    64
                    JumpGE                  _endif_0x0486 7                 ; if v &>= VU_LEVELS

                    LDW                     _i
                    STW                     mathShift
                    ShiftLeft4bit           
                    ADDI                    34
                    STW                     _i4                             ; i4 = (i LSL 4) + X_POS

                    LDW                     _i8
                    ADDI                    252
                    DEEK                    
                    BNE                     _else_0x03c2
                    LDWI                    _decay
                    CALL                    giga_vAC                        ; if deek(i8 + &h00FC) &&= 0 then goto decay 'if frequency is 0, (i.e. note off), then decay

_else_0x03c2        LDW                     _v
                    SUBW                    _vol
                    BGE                     _decay                          ; if v &&< vol

                    LDW                     _v
                    SUBI                    64
                    STW                     0xc0
                    LDI                     63
                    SUBW                    0xc0
                    STW                     mathShift
                    ShiftRight1bit          
                    STW                     _y                              ; y = ((VU_LEVELS-1) - (v - VU_LEVELS)) LSR 1 'transform 127->64 to 0->63

                    LDW                     _v
                    STW                     _vol
                    BRA                     _endif_0x0407                   ; vol = v

_decay              LDW                     _y
                    SUBI                    1
                    STW                     _y                              ; dec y

                    INC                     _vol                            ; inc vol

                    LDW                     _y
                    SUBI                    1
                    BGE                     _endif_0x0407                   ; if y &&< 1

                    INC                     _y                              ; inc y

                    LDW                     _vol
                    SUBI                    1
                    STW                     _vol                            ; dec vol

_endif_0x0407       LDI                     0
                    STW                     spriteId
                    LDW                     _i4
                    ST                      spriteXY
                    LDW                     _y
                    ADDI                    1
                    STW                     0xc0
                    LDI                     78
                    SUBW                    0xc0
                    ADDI                    8
                    ST                      spriteXY + 1
                    DrawSprite                                              ; sprite noFlip, 0, i4, (Y_POS + 32) - (y + 1)

                    LDW                     _y
                    LSLW                    
                    LSLW                    
                    ADDW                    _y
                    ADDW                    _y
                    STW                     0xc4
                    STW                     0xde
                    LDWI                    _page_0x04cf
                    CALL                    giga_vAC
_page_0x04cf        LDW                     0xde
                    LDI                     0x01
                    STW                     spriteId
                    GetSpriteLUT            
                    ADDW                    0xc4
                    STW                     _addr                           ; addr = (y LSL 2) + y + y + get("SPRITELUT", 1)

                    LDW                     _addr
                    PEEK                    
                    STW                     _save                           ; save = peek(addr)

                    LDI                     -1
                    POKE                    _addr                           ; poke addr, -1

                    LDI                     1
                    STW                     spriteId
                    LDW                     _i4
                    ST                      spriteXY
                    LDI                     46
                    ADDI                    8
                    STW                     0xde
                    LDWI                    _page_0x08e0
                    CALL                    giga_vAC
_page_0x08e0        LDW                     0xde
                    ST                      spriteXY + 1
                    DrawSpriteY                                             ; sprite flipY, 1, i4, Y_POS

                    LDI                     1
                    STW                     spriteId
                    LDW                     _i4
                    ADDI                    6
                    ST                      spriteXY
                    LDI                     46
                    ADDI                    8
                    STW                     0xde
                    LDWI                    _page_0x09e0
                    CALL                    giga_vAC
_page_0x09e0        LDW                     0xde
                    ST                      spriteXY + 1
                    DrawSpriteY                                             ; sprite flipY, 1, i4 + 6, Y_POS

                    LDW                     _save
                    POKE                    _addr                           ; poke addr, save

_endif_0x0486       LDWI                    0x7edf
                    ADDW                    _i
                    ADDW                    _i
                    STW                     register1
                    LDW                     _vol
                    STW                     0xde
                    LDWI                    _page_0x4ca0
                    CALL                    giga_vAC
_page_0x4ca0        LDW                     0xde
                    DOKE                    register1                       ; volume(i) = vol

                    LDWI                    0x7ed5
                    ADDW                    _i
                    ADDW                    _i
                    STW                     register1
                    LDW                     _y
                    DOKE                    register1                       ; ypos(i) = y

                    ForNextFarInc           _i _next_0x034b 4               ; next i

                    Return                                                  ; return

_siren              PUSH                    
                    LDW                     _t
                    ANDI                    63
                    STW                     0xc0
                    LDWI                    2208
                    ADDW                    0xc0
                    PEEK                    
                    STW                     _v_lut                          ; v_lut = peek(V_LUT + (t AND (V_SIZ - 1)))

                    LDW                     _t
                    LSLW                    
                    STW                     0xc2
                    LDWI                    1280
                    ADDW                    0xc2
                    DEEK                    
                    STW                     _f_lut                          ; f_lut = deek(F_LUT + (t LSL 1))

                    LDI                     1
                    ST                      sndChannel + 1
                    LDW                     _f_lut
                    STW                     sndFrequency
                    LDW                     _v_lut
                    STW                     sndVolume
                    LDI                     2
                    STW                     sndWaveType
                    SoundOnV                                                ; sound on, 1, f_lut    , v_lut, 2

                    LDI                     2
                    ST                      sndChannel + 1
                    LDW                     _f_lut
                    STW                     0xde
                    LDWI                    _page_0x4da0
                    CALL                    giga_vAC
_page_0x4da0        LDW                     0xde
                    ADDI                    100
                    STW                     sndFrequency
                    LDW                     _v_lut
                    STW                     sndVolume
                    LDI                     2
                    STW                     sndWaveType
                    SoundOnV                                                ; sound on, 2, f_lut+100, v_lut, 2

                    LDI                     3
                    ST                      sndChannel + 1
                    LDW                     _f_lut
                    ADDI                    200
                    STW                     sndFrequency
                    LDW                     _v_lut
                    STW                     sndVolume
                    LDI                     2
                    STW                     sndWaveType
                    SoundOnV                                                ; sound on, 3, f_lut+200, v_lut, 2

                    LDI                     4
                    ST                      sndChannel + 1
                    LDWI                    300
                    ADDW                    _f_lut
                    STW                     sndFrequency
                    LDW                     _v_lut
                    STW                     sndVolume
                    LDI                     2
                    STW                     sndWaveType
                    SoundOnV                                                ; sound on, 4, f_lut+300, v_lut, 2

                    INC                     _t                              ; inc t

                    LDW                     _t
                    SUBI                    64
                    JumpEQ                  _endif_0x056e 8                 ; if t &= 64

                    LDI                     0
                    STW                     _t                              ; t = 0

                    LDI                     0
                    STW                     _state                          ; state = 0

                    STW                     0xde
                    LDWI                    _page_0x4ea0
                    CALL                    giga_vAC
_page_0x4ea0        LDW                     0xde
                    SoundAllOff                                             ; sound off

_endif_0x056e       Return                                                  ; return

_crash              PUSH                    
                    LDW                     _t
                    ANDI                    63
                    STW                     0xc0
                    LDWI                    2464
                    ADDW                    0xc0
                    PEEK                    
                    STW                     _d_lut                          ; d_lut = peek(D_LUT + (t AND (D_SIZ - 1)))

                    LDW                     _t
                    ANDI                    1
                    LSLW                    
                    STW                     0xc2
                    LDWI                    1280
                    ADDW                    0xc2
                    DEEK                    
                    STW                     _f_lut                          ; f_lut = deek(F_LUT + ((t AND 1) LSL 1))

                    LDI                     1
                    ST                      sndChannel + 1
                    LDW                     _f_lut
                    STW                     sndFrequency
                    LDW                     _d_lut
                    STW                     sndVolume
                    LDI                     0
                    STW                     sndWaveType
                    SoundOnV                                                ; sound on, 1, f_lut    , d_lut, 0

                    LDI                     2
                    ST                      sndChannel + 1
                    LDW                     _f_lut
                    ADDI                    100
                    STW                     sndFrequency
                    LDW                     _d_lut
                    STW                     sndVolume
                    LDI                     0
                    STW                     sndWaveType
                    SoundOnV                                                ; sound on, 2, f_lut+100, d_lut, 0

                    LDI                     3
                    ST                      sndChannel + 1
                    STW                     0xde
                    LDWI                    _page_0x4fa0
                    CALL                    giga_vAC
_page_0x4fa0        LDW                     0xde
                    LDW                     _f_lut
                    ADDI                    200
                    STW                     sndFrequency
                    LDW                     _d_lut
                    STW                     sndVolume
                    LDI                     0
                    STW                     sndWaveType
                    SoundOnV                                                ; sound on, 3, f_lut+200, d_lut, 0

                    LDI                     4
                    ST                      sndChannel + 1
                    LDWI                    300
                    ADDW                    _f_lut
                    STW                     sndFrequency
                    LDW                     _d_lut
                    STW                     sndVolume
                    LDI                     0
                    STW                     sndWaveType
                    SoundOnV                                                ; sound on, 4, f_lut+300, d_lut, 0

                    INC                     _t                              ; inc t

                    LDW                     _t
                    SUBI                    64
                    JumpEQ                  _endif_0x0624 9                 ; if t &= 64

                    LDI                     0
                    STW                     _t                              ; t = 0

                    LDI                     0
                    STW                     _state                          ; state = 0

                    SoundAllOff                                             ; sound off

_endif_0x0624       Return                                                  ; return

_beep               PUSH                    
                    LDI                     1
                    ST                      sndChannel + 1
                    LDWI                    8000
                    STW                     sndFrequency
                    LDI                     63
                    STW                     sndVolume
                    STW                     0xde
                    LDWI                    _page_0x50a0
                    CALL                    giga_vAC
_page_0x50a0        LDW                     0xde
                    LDI                     1
                    STW                     sndWaveType
                    SoundOnV                                                ; sound on, 1, 8000, 63, 1

                    INC                     _t                              ; inc t

                    LDW                     _t
                    SUBI                    3
                    JumpEQ                  _endif_0x065c 10                ; if t &= 3

                    LDI                     0
                    STW                     _t                              ; t = 0

                    LDI                     0
                    STW                     _state                          ; state = 0

                    SoundAllOff                                             ; sound off

_endif_0x065c       Return                                                  ; return

_end_0x065e         BRA                     _end_0x065e                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck            EQU     0x7ebe
realTimeProc        EQU     0x7eb5
convertEqOp         EQU     0x7eac
convertNeOp         EQU     0x7ea3
convertLeOp         EQU     0x7df6
convertGeOp         EQU     0x7ded
convertLtOp         EQU     0x7de4
convertGtOp         EQU     0x7ddb
shiftLeft4bit       EQU     0x7da3
shiftRight1bit      EQU     0x7ca7
gosubNumericLabel   EQU     0x7acd
scanlineMode        EQU     0x7cb1
resetVideoTable     EQU     0x77d1
initClearFuncs      EQU     0x7dc3
clearVertBlinds     EQU     0x7cc5
clearCursorRow      EQU     0x77a1
draw_sprite         EQU     0x76d7
drawSprite          EQU     0x7bad
drawSpriteY         EQU     0x7ac0
getSpriteLUT        EQU     0x7ba3
resetAudio          EQU     0x79ca
playMidiVol         EQU     0x78aa
midiStartNote       EQU     0x75b3
soundAllOff         EQU     0x7dad
soundOnV            EQU     0x79a2
printInit           EQU     0x76c1
printText           EQU     0x7bba
printChar           EQU     0x74a7
atTextCursor        EQU     0x7bd3
newLineScroll       EQU     0x73a4
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI routine
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


shiftLeft4bit       LDWI    SYS_LSLW4_46
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     46
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_addr       EQU     register15

    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDI     0x02                                ; starting cursor position
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
    
                    LDWI    SYS_SetMemory_v2_54                 ; setup fill memory SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LD      fgbgColour
                    ST      giga_sysArg1                        ; fill value
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LD      top
                    ST      giga_sysArg3                        ; top line
                    SYS     54                                  ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        ; bottom line
                    SYS     54                                  ; fill memory
                    INC     top                                 ; next top line
                    
                    CALL    realTimeProcAddr
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
spriteId            EQU     register0
spriteXY            EQU     register1
spriteAddrs         EQU     register2

    
draw_sprite         PUSH
                    LDWI    _spritesLut_
                    ADDW    spriteId
                    ADDW    spriteId
                    DEEK
                    STW     spriteAddrs                     ; get sprite address table
                    
draw_s_loop         LDW     spriteAddrs
                    DEEK                                    ; get source address
                    BEQ     draw_s_exit
                    STW     giga_sysArg0
                    INC     spriteAddrs
                    INC     spriteAddrs
                    LDW     spriteAddrs
                    DEEK                                    ; get stripe destination offset
                    ADDW    spriteXY
                    SYS     64
                    INC     spriteAddrs
                    INC     spriteAddrs
                    CALL    realTimeProcAddr
                    BRA     draw_s_loop
                    
draw_s_exit         POP
                    RET


drawSprite          PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    LDWI    draw_sprite
                    CALL    giga_vAC
                    POP
                    RET


drawSpriteY         PUSH
                    LDWI    SYS_Sprite6y_v3_64
                    STW     giga_sysFn
                    LDWI    draw_sprite
                    CALL    giga_vAC
                    POP
                    RET


getSpriteLUT        LDWI    _spritesLut_
                    ADDW    spriteId
                    ADDW    spriteId
                    DEEK
                    DEEK
                    RET


audioAddr           EQU     register1
waveType            EQU     register2
midiNote            EQU     register4                       ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11


resetAudio          LD      giga_frameCount
                    ADDI    1
                    STW     midiDelay                       ; instant MIDI startup
                    LDWI    giga_soundChan1
                    STW     audioAddr
                    LD      waveType
                    ANDI    0x03
                    ST      waveType + 1
                    LDI     0x00
                    ST      waveType                        ; waveform type

resetA_loop         LDI     giga_soundChan1
                    ST      audioAddr                       ; reset low byte
                    LDW     waveType
                    DOKE    audioAddr                       ; wavA and wavX
                    INC     audioAddr
                    INC     audioAddr    
                    LDI     0
                    DOKE    audioAddr                       ; keyL and keyH
                    INC     audioAddr
                    INC     audioAddr
                    DOKE    audioAddr                       ; oscL and oscH
                    INC     audioAddr + 1                   ; increment high byte
                    
                    LD      audioAddr + 1
                    SUBI    4
                    BLE     resetA_loop
                    RET



playMidiVol         LDW     midiStream
                    BEQ     playM_exit0                     ; 0x0000 = stop
                    LDI     0x08                            ; keep pumping soundTimer
                    ST      giga_soundTimer
                    LD      giga_frameCount
                    SUBW    midiDelay
                    BEQ     playM_start
playM_exit0         RET

playM_start         PUSH
playM_process       LDW     midiStream
                    PEEK                                    ; get midi stream byte
                    STW     midiCommand
                    LDW     midiStream
                    ADDI    0x01
                    STW     midiStream
                    LDI     0xF0
                    ANDW    midiCommand
                    XORI    0x90                            ; check for start note
                    BNE     playM_endnote
    
                    LDWI    midiStartNote
                    CALL    giga_vAC                        ; start note
                    LDWI    midiSetVolume
                    CALL    giga_vAC                        ; set note volume
                    BRA     playM_process
                    
playM_endnote       XORI    0x10                            ; check for end note
                    BNE     playM_segment
    
                    LDWI    midiEndNote                     ; end note
                    CALL    giga_vAC
                    BRA     playM_process

playM_segment       XORI    0x50                            ; check for new segment
                    BNE     playM_delay
    
                    LDW     midiStream                      ; midi score
                    DEEK
                    STW     midiStream                      ; 0xD0 new midi segment address
                    BEQ     playM_exit1                     ; 0x0000 = stop
                    BRA     playM_process
    
playM_delay         LD      giga_frameCount                 ; midiDelay = (midiCommand + peek(frameCount)) & 0x00FF 
                    ADDW    midiCommand
                    ST      midiDelay
playM_exit1         POP
                    RET


midiStartNote       LDWI    giga_notesTable                 ; note table in ROM
                    STW     midiPtr
                    LDW     midiStream                      ; midi note
                    PEEK
                    SUBI    11
                    LSLW
                    ADDW    midiPtr
                    STW     midiPtr
                    LUP     0x00                            ; get ROM midi note low byte
                    ST      midiNote
                    LDW     midiPtr
                    LUP     0x01                            ; get ROM midi note high byte
                    ST      midiNote + 1
                    LDW     midiCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr                         ; note address 0x01FC <-> 0x04FC
                    LDW     midiNote
                    DOKE    midiPtr                         ; set note
                    
midiSN_exit         LDW     midiStream
                    ADDI    0x01                            ; midiStream++
                    STW     midiStream
                    RET

midiSetVolume       LDI     0xFA
                    ST      midiPtr                         ; wavA address 0x01FA <-> 0x04FA, (midiPtr is still valid from midiStartNote)
                    LDW     midiStream                      ; midi volume
                    PEEK
                    POKE    midiPtr
                    BRA     midiSN_exit                     ; save a few bytes by using midiStartNote's epilogue
                    
midiEndNote         LDW     midiCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr                         ; channels address 0x01FC <-> 0x04FC
                    LDI     0
                    DOKE    midiPtr                         ; end note
                    RET


soundAllOff         LDWI    0x01FC
                    STW     sndChannel
                    LDI     0
                    DOKE    sndChannel                      ; turn off channel 0
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 1
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 2
                    INC     sndChannel + 1      
                    DOKE    sndChannel                      ; turn off channel 3
                    RET


soundOnV            LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDI     0xFC
                    ST      sndChannel
                    LD      sndFrequency
                    SYS     48
                    ST      sndFrequency                    ; right shift low byte of sndFrequency by 1
                    LDW     sndFrequency                    ; format = high:8 low:07, (bit 7 of low byte = 0)
                    DOKE    sndChannel                      ; turn on channel
                    LDI     0xFA
                    ST      sndChannel                      ; still pointing to the correct channel
                    LDI     63
                    SUBW    sndVolume
                    ADDI    64
                    POKE    sndChannel                      ; 0 -> 63 maps to 127 -> 64
                    INC     sndChannel
                    LD      sndWaveType
                    ANDI    3
                    POKE    sndChannel                      ; wave type in wave X
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres
                    BLT     atTC_skip0
                    LDI     0
                    ST      cursorXY
                    
atTC_skip0          LD      cursorXY + 1
                    SUBI    giga_yres
                    BLT     atTC_skip1
                    LDI     giga_yres - 1
                    ST      cursorXY + 1
                    
atTC_skip1          LD      cursorXY + 1
                    SUBI    giga_yres - 8
                    BGE     atTC_skip2
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET
                    
atTC_skip2          LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     8

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
                    CALL    realTimeProcAddr
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

