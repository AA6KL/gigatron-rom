_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x00a0
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     0x0024
register11          EQU                     0x0026
register12          EQU                     0x0028
register13          EQU                     0x002A
fgbgColour          EQU                     register0 + 0x14
cursorXY            EQU                     register0 + 0x16
midiStreamPtr       EQU                     register0 + 0x18
midiDelay           EQU                     register0 + 0x1A
frameCountPrev      EQU                     register0 + 0x1C
miscFlags           EQU                     register0 + 0x1E

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_1                  EQU                     0x022f
_2                  EQU                     0x023d
_3                  EQU                     0x0267
_4                  EQU                     0x0291
_5                  EQU                     0x02a6
_6                  EQU                     0x02c2
_7                  EQU                     0x02df
_8                  EQU                     0x08ac
_9                  EQU                     0x08c4
_10                 EQU                     0x08d6
_11                 EQU                     0x08e6
_12                 EQU                     0x09ae
_end_0x03e9         EQU                     0x09c9
_if_0x0316          EQU                     0x02c2
_if_0x033d          EQU                     0x02df
_page_0x08a0        EQU                     0x08a0
_if_0x0362          EQU                     0x08ac
_next_0x039e        EQU                     0x08e2
_page_0x09a0        EQU                     0x09a0
_if_0x03cc          EQU                     0x09ae

; Variables
_a                  EQU                     0x0030
_b                  EQU                     0x0032
_c                  EQU                     0x0034
_d                  EQU                     0x0036
_x                  EQU                     0x0038
_y                  EQU                     0x003a
_q                  EQU                     0x003c
_u                  EQU                     0x003e
_v                  EQU                     0x0040
_p                  EQU                     0x0042
_t                  EQU                     0x0044

; Strings

; Code
_entryPoint_        Initialise              
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                                                ; INIT

_1                  LDWI                    180
                    STW                     register0
                    LDI                     63
                    POKE                    register0
                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC                        ; poke 180,63:cls:rem Lines demo

_2                  Random                  
                    ANDI                    127
                    STW                     0xd0
                    Random                  
                    ANDI                    31
                    ADDW                    0xd0
                    STW                     _a
                    Random                  
                    ANDI                    63
                    STW                     0xd4
                    Random                  
                    ANDI                    63
                    ADDW                    0xd4
                    ORI                     8
                    STW                     _b                              ; a=(rnd AND &h7F) + (rnd AND &h1F) : b=(rnd AND &h3F) + (rnd AND &h3F) OR 8

_3                  Random                  
                    ANDI                    127
                    STW                     0xd0
                    Random                  
                    ANDI                    31
                    ADDW                    0xd0
                    STW                     _c
                    Random                  
                    ANDI                    63
                    STW                     0xd4
                    Random                  
                    ANDI                    63
                    ADDW                    0xd4
                    ORI                     8
                    STW                     _d                              ; c=(rnd AND &h7F) + (rnd AND &h1F) : d=(rnd AND &h3F) + (rnd AND &h3F) OR 8

_4                  LDW                     _c
                    SUBW                    _a
                    STW                     _x
                    LDW                     _d
                    SUBW                    _b
                    STW                     _y
                    Random                  
                    ANDI                    63
                    STW                     _q                              ; x=c-a:y=d-b:q=rnd AND &h3F

_5                  LDI                     1
                    STW                     _u
                    LDW                     _x
                    CALL                    convertLtOpAddr
                    PageJumpBEQ             _6                  
                    LDI                     0
                    SUBW                    _x
                    STW                     _x
                    LDI                     0
                    SUBW                    _u
                    STW                     _u                              ; u=1  :if x<0 then x=-x:u=-u

_6                  LDWI                    256
                    STW                     _v
                    LDW                     _y
                    CALL                    convertLtOpAddr
                    PageJumpBEQ             _7                  
                    LDI                     0
                    SUBW                    _y
                    STW                     _y
                    LDI                     0
                    SUBW                    _v
                    STW                     _v                              ; v=256:if y<0 then y=-y:v=-v

_7                  LDW                     _b
                    STW                     mathShift
                    ShiftLeft8bit           
                    ADDW                    _a
                    STW                     _p
                    LDW                     _y
                    SUBW                    _x
                    STW                     0xe0
                    LDWI                    _page_0x08a0
                    CALL                    giga_vAC
_page_0x08a0        LDW                     0xe0
                    CALL                    convertLtOpAddr
                    PageJumpBEQ             _8                              ; p= a + (b LSL 8):if y< x then goto9

_8                  LDW                     _x
                    STW                     _t
                    LDW                     _y
                    STW                     _x
                    LDW                     _t
                    STW                     _y
                    LDW                     _u
                    STW                     _t
                    LDW                     _v
                    STW                     _u
                    LDW                     _t
                    STW                     _v                              ; t=x:x=y:y=t:t=u:u=v:v=t

_9                  LDI                     0
                    SUBW                    _x
                    STW                     _d
                    LDW                     _x
                    ADDW                    _x
                    STW                     _x
                    LDW                     _y
                    ADDW                    _y
                    STW                     _y                              ; d=-x:x=x+x:y=y+y

_10                 LDW                     _d
                    STW                     _t
                    LDI                     0
                    STW                     0xc0
                    LDI                     1
                    STW                     0xc2
_next_0x039e        LD                      _q
                    POKE                    _p                              ; for t=d to 0:poke p,q

_11                 LDW                     _d
                    ADDW                    _y
                    STW                     _d
                    CALL                    convertGtOpAddr
                    PageJumpBEQ             _12                 
                    STW                     0xe0
                    LDWI                    _page_0x09a0
                    CALL                    giga_vAC
_page_0x09a0        LDW                     0xe0
                    LDW                     _d
                    SUBW                    _x
                    STW                     _d
                    LDW                     _p
                    ADDW                    _v
                    STW                     _p                              ; d=d+y:if d>0 then d=d-x:p=p+v

_12                 LDW                     _p
                    ADDW                    _u
                    STW                     _p
                    ForNextLoopStepUp       _t _next_0x039e 0xc0 0xc2
                    LDWI                    _2
                    CALL                    giga_vAC                        ; p=p+u:next t:goto 2

_end_0x03e9         BRA                     _end_0x03e9                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY HERE, modifications must be made in the original include files                                       *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

convertEqOp         EQU     0x7fc3
convertNeOp         EQU     0x7fcc
convertLeOp         EQU     0x7fd5
convertGeOp         EQU     0x7fde
convertLtOp         EQU     0x7fe7
convertGtOp         EQU     0x7ff0
random16bit         EQU     0x7ed8
shiftLeft8bit       EQU     0x7ee0
resetVideoTable     EQU     0x7da0
initClearFuncs      EQU     0x7fa0
clearVertBlinds     EQU     0x7ea0
convertEqOpAddr     EQU     0x00e2
convertNeOpAddr     EQU     0x00e4
convertLeOpAddr     EQU     0x00e6
convertGeOpAddr     EQU     0x00e8
convertLtOpAddr     EQU     0x00ea
convertGtOpAddr     EQU     0x00ec


onGgVar             EQU     register0
onGgAddr            EQU     register1


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


mathX               EQU     register0
mathY               EQU     register1
mathSum             EQU     register2
mathMask            EQU     register3
mathRem             EQU     register4
mathSign            EQU     register5
mathScratch         EQU     register6
mathShift           EQU     register7
    
    
random16bit         LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     0xFD
                    RET


shiftLeft8bit       LDWI    SYS_LSLW8_24
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     0x00                ; 0x00 = 270-max(14,24/2)
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register4
top                 EQU     register5
bot                 EQU     register6
vramAddr            EQU     register7
evenAddr            EQU     register8
    
    
                    ; resets video table pointers
resetVideoTable     LDWI    0x0008
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
    
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres+8
                    BLT     resetVT_loop
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram                           ; top line
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET

