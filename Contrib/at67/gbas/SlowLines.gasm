_startAddress_      EQU                     0x0200
convertEqOp         EQU                     0x7fa0
convertNeOp         EQU                     0x7fa9
convertLeOp         EQU                     0x7fb2
convertGeOp         EQU                     0x7fbb
convertLtOp         EQU                     0x7fc4
convertGtOp         EQU                     0x7fcd
multiply16bit       EQU                     0x7fd6
divide16bit         EQU                     0x7ea0
random16bit         EQU                     0x7ef6
shiftLeft4bit       EQU                     0x7da0
shiftLeft8bit       EQU                     0x7daa
shiftRight1bit      EQU                     0x7db4
shiftRight2bit      EQU                     0x7dbe
shiftRight3bit      EQU                     0x7dc8
shiftRight4bit      EQU                     0x7dd2
shiftRight5bit      EQU                     0x7ddc
shiftRight6bit      EQU                     0x7de6
shiftRight7bit      EQU                     0x7df0
shiftRight8bit      EQU                     0x7ca0
resetVideoTable     EQU                     0x7caa
scanlineMode        EQU                     0x7cc6
waitVBlank          EQU                     0x7cda
clearRegion         EQU                     0x7ba0
clearCursorRow      EQU                     0x7aa0
drawLine            EQU                     0x79a0
drawLineExt         EQU                     0x78a0
drawLineDelta1      EQU                     0x77a0
printText           EQU                     0x7adf
printDigit          EQU                     0x76a0
printInt16          EQU                     0x75a0
printChar           EQU                     0x74a0
printHexByte        EQU                     0x76c2
printHexWord        EQU                     0x77e5
newLineScroll       EQU                     0x73a0
resetAudio          EQU                     0x72a0
playMidi            EQU                     0x71a0
playMidiAsync       EQU                     0x7beb
midiStartNote       EQU                     0x70a0
convertEqOpAddr     EQU                     0x00E2
convertNeOpAddr     EQU                     0x00E4
convertLeOpAddr     EQU                     0x00E6
convertGeOpAddr     EQU                     0x00E8
convertLtOpAddr     EQU                     0x00EA
convertGtOpAddr     EQU                     0x00EC

; Internal variables
register0           EQU                     0x00a0
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     0x0024
register11          EQU                     0x0026
register12          EQU                     0x0028
register13          EQU                     0x002A
fgbgColour          EQU                     register0 + 0x14
cursorXY            EQU                     register0 + 0x16
midiStreamPtr       EQU                     register0 + 0x18
midiDelay           EQU                     register0 + 0x1A
frameCountPrev      EQU                     register0 + 0x1C
textScroll          EQU                     register0 + 0x1E

; Includes
%include            include/gigatron.i
%include            include/math.i
%include            include/conv_conds.i
%include            include/audio.i
%include            include/clear_screen.i
%include            include/graphics.i
%include            include/print_text.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_1                  EQU                     0x0253
_2                  EQU                     0x0288
_3                  EQU                     0x02b2
_4                  EQU                     0x02dc
_5                  EQU                     0x08a2
_6                  EQU                     0x08b9
_7                  EQU                     0x08d1
_8                  EQU                     0x08e7
_9                  EQU                     0x09ac
_10                 EQU                     0x09be
_11                 EQU                     0x09ce
_12                 EQU                     0x09e5
_end_0x0420         EQU                     0x0ab9
_page_0x08a0        EQU                     0x08a0
_if_0x035c          EQU                     0x08b9
_if_0x037e          EQU                     0x08d1
_if_0x039e          EQU                     0x08e7
_page_0x09a0        EQU                     0x09a0
_next_0x03da        EQU                     0x09ca
_if_0x0403          EQU                     0x09e5
_page_0x0aa0        EQU                     0x0aa0

; Variables
_a                  EQU                     0x0030
_b                  EQU                     0x0032
_c                  EQU                     0x0034
_d                  EQU                     0x0036
_x                  EQU                     0x0038
_y                  EQU                     0x003a
_q                  EQU                     0x003c
_u                  EQU                     0x003e
_v                  EQU                     0x0040
_p                  EQU                     0x0042
_t                  EQU                     0x0044

; Strings

; Code
_entryPoint_        Initialise              
                    InitialiseCcOps                                         ; INIT

_1                  Initialise                                              ; cls:rem Lines demo

_2                  Random                  
                    ANDI                    127
                    STW                     0xd0
                    Random                  
                    ANDI                    31
                    ADDW                    0xd0
                    STW                     _a
                    Random                  
                    ANDI                    63
                    STW                     0xd4
                    Random                  
                    ANDI                    63
                    ADDW                    0xd4
                    ORI                     8
                    STW                     _b                              ; a=(rnd AND &h7F) + (rnd AND &h1F) : b=(rnd AND &h3F) + (rnd AND &h3F) OR 8

_3                  Random                  
                    ANDI                    127
                    STW                     0xd0
                    Random                  
                    ANDI                    31
                    ADDW                    0xd0
                    STW                     _c
                    Random                  
                    ANDI                    63
                    STW                     0xd4
                    Random                  
                    ANDI                    63
                    ADDW                    0xd4
                    ORI                     8
                    STW                     _d                              ; c=(rnd AND &h7F) + (rnd AND &h1F) : d=(rnd AND &h3F) + (rnd AND &h3F) OR 8

_4                  LDW                     _c
                    SUBW                    _a
                    STW                     _x
                    LDW                     _d
                    SUBW                    _b
                    STW                     _y
                    Random                  
                    ANDI                    63
                    STW                     _q                              ; x=c-a:y=d-b:q=rnd AND &h3F

                    STW                     0xe0
                    LDWI                    _page_0x08a0
                    CALL                    giga_vAC
_page_0x08a0        LDW                     0xe0
_5                  LDI                     1
                    STW                     _u
                    LDW                     _x
                    CALL                    convertLtOpAddr
                    BEQ                     _6                  
                    LDI                     0
                    SUBW                    _x
                    STW                     _x
                    LDI                     0
                    SUBW                    _u
                    STW                     _u                              ; u=1  :if x<0 then x=-x:u=-u

_6                  LDWI                    256
                    STW                     _v
                    LDW                     _y
                    CALL                    convertLtOpAddr
                    BEQ                     _7                  
                    LDI                     0
                    SUBW                    _y
                    STW                     _y
                    LDI                     0
                    SUBW                    _v
                    STW                     _v                              ; v=256:if y<0 then y=-y:v=-v

_7                  LDW                     _b
                    STW                     mathShift
                    ShiftLeft8bit           
                    ADDW                    _a
                    STW                     _p
                    LDW                     _y
                    SUBW                    _x
                    CALL                    convertLtOpAddr
                    BEQ                     _8                              ; p= a + (b LSL 8):if y< x then goto9

_8                  LDW                     _x
                    STW                     _t
                    LDW                     _y
                    STW                     _x
                    LDW                     _t
                    STW                     _y
                    LDW                     _u
                    STW                     0xe0
                    LDWI                    _page_0x09a0
                    CALL                    giga_vAC
_page_0x09a0        LDW                     0xe0
                    STW                     _t
                    LDW                     _v
                    STW                     _u
                    LDW                     _t
                    STW                     _v                              ; t=x:x=y:y=t:t=u:u=v:v=t

_9                  LDI                     0
                    SUBW                    _x
                    STW                     _d
                    LDW                     _x
                    ADDW                    _x
                    STW                     _x
                    LDW                     _y
                    ADDW                    _y
                    STW                     _y                              ; d=-x:x=x+x:y=y+y

_10                 LDW                     _d
                    STW                     _t
                    LDI                     0
                    STW                     0xc0
                    LDI                     1
                    STW                     0xc2
_next_0x03da        LD                      _q
                    POKE                    _p                              ; for t=d to 0:poke p,q

_11                 LDW                     _d
                    ADDW                    _y
                    STW                     _d
                    CALL                    convertGtOpAddr
                    BEQ                     _12                 
                    LDW                     _d
                    SUBW                    _x
                    STW                     _d
                    LDW                     _p
                    ADDW                    _v
                    STW                     _p                              ; d=d+y:if d>0 then d=d-x:p=p+v

_12                 LDW                     _p
                    ADDW                    _u
                    STW                     0xe0
                    LDWI                    _page_0x0aa0
                    CALL                    giga_vAC
_page_0x0aa0        LDW                     0xe0
                    STW                     _p
                    ForNextLoopStepUp       _t _next_0x03da 0xc0 0xc2
                    LDWI                    _2
                    CALL                    giga_vAC                        ; p=p+u:next t:goto 2

_end_0x0420         BRA                     _end_0x0420                     ; END


