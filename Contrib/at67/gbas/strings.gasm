_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
frameCountPrev      EQU                     register0 + 0x28
miscFlags           EQU                     register0 + 0x2A
highByteMask        EQU                     register0 + 0x2C

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_page_0x0300        EQU                     0x0300
_page_0x0400        EQU                     0x0400
_end_0x03ee         EQU                     0x0422
_end_0x03f0         EQU                     0x0424

; Variables
_a                  EQU                     0x0030

; Strings
_str_0xff00          EQU                     0xff00
_str_0xff00          DB                      1 'A'
_str_0xff02          EQU                     0xff02
_str_0xff02          DB                      2 '0F'
_str_0xff05          EQU                     0xff05
_str_0xff05          DB                      4 'B00B'
_str_0xff0a          EQU                     0xff0a
_str_0xff0a          DB                      4 'yes '
_str_0xff0f          EQU                     0xff0f
_str_0xff0f          DB                      2 'no'
_str_0xff12          EQU                     0xff12
_str_0xff12          DB                      16 'hello test world'
_c$                  EQU                     0x7ea0
_c$                  DB                      0 ''
_d$                  EQU                     0x7da0
_d$                  DB                      0 ''
_e$                  EQU                     0x7ca0
_e$                  DB                      0 ''
_f$                  EQU                     0x7ba0
_f$                  DB                      0 ''
_g$                  EQU                     0x7aa0
_g$                  DB                      0 ''
_str_0xff23          EQU                     0xff23
_str_0xff23          DB                      1 ' '

; Define Bytes

; Lookup Tables

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC                        ; cls

                    LDWI                    0xff12
                    STW                     strSrcAddr
                    LDI                     5
                    STW                     strLength
                    LDWI                    0x7ea0
                    STW                     strDstAddr
                    StringLeft                                              ; c$=left$(b$, 5)

                    LDWI                    0xff12
                    STW                     strSrcAddr
                    LDI                     5
                    STW                     strLength
                    LDWI                    0x7da0
                    STW                     strDstAddr
                    StringRight                                             ; d$ = right$ (b$,5)

                    LDWI                    0xff12
                    STW                     strSrcAddr
                    LDI                     6
                    STW                     strOffset
                    LDI                     4
                    STW                     strLength
                    LDWI                    0x7ca0
                    STW                     strDstAddr
                    StringMid                                               ; e$=mid$(b$, 6, 4)

                    LDWI                    0xff12
                    STW                     strSrcAddr
                    LDWI                    0xff12
                    STW                     strSrcAddr2
                    LDWI                    0x7fa0
                    STW                     strDstAddr
                    StringAdd               
                    LDWI                    0x7ba0
                    STW                     strDstAddr
                    LDWI                    0x7fa0
                    STW                     strSrcAddr
                    StringCopy                                              ; f$ = add$(b$, b$);

                    LDWI                    0x7ba0
                    STW                     strSrcAddr
                    LDWI                    0x7ba0
                    STW                     strSrcAddr2
                    LDWI                    0x7fa0
                    STW                     strDstAddr
                    StringAdd               
                    LDWI                    0x7ba0
                    STW                     strDstAddr
                    LDWI                    0x7fa0
                    STW                     strSrcAddr
                    StringCopy                                              ; f$ = add$(f$, f$);

                    LDWI                    0x7ba0
                    STW                     strSrcAddr
                    LDWI                    0x7ba0
                    STW                     strSrcAddr2
                    LDWI                    0x7fa0
                    STW                     strDstAddr
                    StringAdd               
                    LDWI                    0x7ba0
                    STW                     strDstAddr
                    LDWI                    0x7fa0
                    STW                     strSrcAddr
                    StringCopy                                              ; f$ = add$(f$, f$);

                    LDWI                    0x7ba0
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    STW                     strSrcAddr
                    LDWI                    0x7aa0
                    STW                     strDstAddr
                    StringCopy                                              ; g$ = copy$(f$)

                    LDI                     65
                    STW                     _a                              ; a = 65

                    PrintString             _str_0xff0a
                    PrintString             _str_0xff23
                    PrintString             _str_0xff12
                    PrintString             _str_0xff23
                    LDWI                    newLineScroll
                    CALL                    giga_vAC                        ; print a$;" ";b$;" "

                    PrintString             _c$
                    PrintString             _str_0xff23
                    PrintString             _d$
                    PrintString             _str_0xff23
                    PrintString             _e$
                    LDWI                    newLineScroll
                    CALL                    giga_vAC                        ; print c$;" ";d$;" ";e$

                    PrintString             _f$
                    LDWI                    newLineScroll
                    CALL                    giga_vAC                        ; print f$

                    PrintString             _g$
                    LDWI                    newLineScroll
                    CALL                    giga_vAC                        ; print g$

                    PrintString             _str_0xff00
                    PrintString             _str_0xff23
                    PrintString             _str_0xff02
                    PrintString             _str_0xff23
                    PrintString             _str_0xff05
                    LDWI                    newLineScroll
                    CALL                    giga_vAC                        ; print ch$;" ";hb$;" ";hw$

                    LDW                     _a
                    PrintAcChar             
                    PrintString             _str_0xff23
                    LDI                     15
                    STW                     0xde
                    LDWI                    _page_0x0400
                    CALL                    giga_vAC
_page_0x0400        LDW                     0xde
                    PrintAcHexByte          
                    PrintString             _str_0xff23
                    LDWI                    -20469
                    PrintAcHexWord          
                    LDWI                    newLineScroll
                    CALL                    giga_vAC                        ; print chr$(a);" ";hex$(15);" ";hexw$(&hb00b)

_end_0x03ee         BRA                     _end_0x03ee                     ; end

_end_0x03f0         BRA                     _end_0x03f0                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0xff25
convertEqOp         EQU     0xff2e
convertNeOp         EQU     0xff37
convertLeOp         EQU     0xff40
convertGeOp         EQU     0xff49
convertLtOp         EQU     0xff52
convertGtOp         EQU     0xff5b
resetVideoTable     EQU     0xfdad
initClearFuncs      EQU     0xff64
clearVertBlinds     EQU     0xff87
clearCursorRow      EQU     0xfc00
printInit           EQU     0xfdd5
printText           EQU     0xfecb
printChr            EQU     0xffef
printChar           EQU     0xfc49
printHexByte        EQU     0xfd5f
printHexWord        EQU     0xfd94
newLineScroll       EQU     0xfd00
stringCopy          EQU     0xfeb1
stringAdd           EQU     0xfe68
stringMid           EQU     0xfe32
stringLeft          EQU     0xffc1
stringRight         EQU     0xfe00
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
lutLabel            EQU     register9


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
videoTop            EQU     register11
evenAddr            EQU     register12
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    
                    LDWI    giga_videoTop
                    STW     videoTop
                    LDI     0
                    POKE    videoTop                            ; restore full video output
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram                           ; top line
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textFont            EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textSlice           EQU     register9
scanLine            EQU     register10
digitMult           EQU     register11
digitIndex          EQU     register12
clearLoop           EQU     register13
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    
                    LDWI    giga_videoTable
                    STW     giga_sysArg4
                    LD      cursorXY + 1
                    LSLW
                    ADDW    giga_sysArg4
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by the accumulator
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDW     textStr             
                    PEEK                                    ; first byte is length
    
printT_char         ST      textLen
                    INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC

                    LD      textLen
                    SUBI    1
                    BNE     printT_char
                    POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     0xCB                            ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     0xCB                            ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
printC_pop          POP

printC_exit         RET


                    ; print hex byte in textHex
printHexByte        PUSH
                    LDWI    SYS_LSRW4_50                    ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LD      textHex
                    SYS     0xF5                            ; SYS_LSRW4_50, 270 - 50/2 = 0xF5
                    SUBI    10
                    BLT     printH_skip0
                    ADDI    7
printH_skip0        ADDI    0x3A
                    ST      textChr
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    LD      textHex
                    ANDI    0x0F
                    SUBI    10
                    BLT     printH_skip1
                    ADDI    7
printH_skip1        ADDI    0x3A
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; print hex word in textHex
printHexWord        PUSH
                    LD      textHex
                    ST      textBak
                    LD      textHex + 1
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    LD      textBak
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    POP
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     8

clearCR_loopy       ST      clearLoop
                    CALL    realTimeProcAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
                    LDWI    printInit
                    CALL    giga_vAC                       ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      giga_sysArg4 + 1                ; need to do this here as printInit
                    ADDI    8                               ; is only called at the start of a string
                    ST      giga_sysArg4 + 1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
newLS_exit          POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
strChr              EQU     register0
strHex              EQU     register1
strLength           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strSrcFin           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strSrcLen2          EQU     register10
strSrcFin2          EQU     register10


                    ; copy one string to another
stringCopy          LDW     strSrcAddr
                    PEEK                                        ; get source length
                    POKE    strDstAddr                          ; set destination buffer length
                    ADDW    strSrcAddr
                    STW     strSrcFin                           ; end source address
                    
stringC_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strSrcFin
                    BLT     stringC_loop                        ; until finished
                    RET


                    ; concatenates two strings together
stringAdd           LDW     strSrcAddr
                    PEEK
                    STW     strSrcLen                           ; get source length
                    LDW     strSrcAddr2
                    PEEK
                    STW     strSrcLen2                          ; get source length2
                    ADDW    strSrcLen
                    POKE    strDstAddr                          ; set destination buffer length
                    SUBI    95
                    BLE     stringA_skip0
                    LDI     95
                    POKE    strDstAddr                          ; cap destination buffer length
             
stringA_skip0       LDW     strSrcAddr
                    ADDW    strSrcLen
                    STW     strSrcFin                           ; end source address
                    
stringA_loop0       INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strSrcFin
                    BLT     stringA_loop0                       ; until finished
                    
                    LDW     strSrcAddr2
                    ADDW    strSrcLen2
                    STW     strSrcFin2                          ; end source2 address

stringA_loop1       INC     strSrcAddr2                         ; skip lengths the first time in
                    INC     strDstAddr
                    LD      strDstAddr                          ; relies on strings being stored in A0 to FF segments
                    BEQ     stringA_exit                        ; don't overflow destination                    
                    LDW     strSrcAddr2
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr2
                    SUBW    strSrcFin2
                    BLT     stringA_loop1                       ; until finished

stringA_exit        RET


                    ; copies length sub string from source offset to destination string
stringMid           LD      strLength
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringM_exit                        ; exit if right length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strOffset                           
                    SUBW    strLength
                    BGE     stringM_skip                        ; length + offset <= srcLength
                    LD      strSrcLen
                    SUBW    strOffset
                    STW     strLength
                    POKE    strDstAddr                          ; new destination length
                    
stringM_skip        LDW     strSrcAddr
                    ADDW    strOffset
                    STW     strSrcAddr                          ; copy from (source address + (source length - right length)) to destination address
                    ADDW    strLength
                    STW     strFinish                           ; end source address

stringM_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringM_loop                        ; until finished
                    
stringM_exit        RET


                    ; copies sub string from left hand side of source string to destination string
stringLeft          LD      strLength
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringL_exit                        ; exit if left length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strLength
                    BGE     stringL_skip                        ; is left length <= source length
                    LD      strSrcLen
                    STW     strLength
                    POKE    strDstAddr                          ; new destination length
                    
stringL_skip        LDW     strSrcAddr
                    ADDW    strLength
                    STW     strFinish                           ; end source address
                    
stringL_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringL_loop                        ; until finished
                    
stringL_exit        RET


                    ; copies sub string from right hand side of source string to destination string
stringRight         LD      strLength
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringR_exit                        ; exit if right length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strLength
                    BGE     stringR_skip                        ; length <= srcLength
                    LD      strSrcLen
                    STW     strLength
                    POKE    strDstAddr                          ; new destination length
                    LDI     0
                    
stringR_skip        ADDW    strSrcAddr
                    STW     strSrcAddr                          ; copy from (source address + (source length - right length)) to destination address
                    ADDW    strLength
                    STW     strFinish                           ; end source address

stringR_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringR_loop                        ; until finished
                    
stringR_exit        RET

