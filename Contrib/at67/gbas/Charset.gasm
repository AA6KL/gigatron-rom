_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x0084
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
frameCountPrev      EQU                     register0 + 0x28
miscFlags           EQU                     register0 + 0x2A

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_1                  EQU                     0x023d
_10                 EQU                     0x023d
_20                 EQU                     0x0241
_30                 EQU                     0x0254
_40                 EQU                     0x0269
_50                 EQU                     0x0282
_end_0x029b         EQU                     0x0295

; Variables
_Y                  EQU                     0x0030
_D                  EQU                     0x0032
_E                  EQU                     0x0034
_C                  EQU                     0x0036

; Strings

; Define Bytes

; Lookup Tables

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

_10                 LDI                     2
                    STW                     _Y                              ; FOR Y=2 TO 7

_20                 LDW                     _Y
                    STW                     mathX
                    LDI                     16
                    STW                     mathY
                    LDWI                    multiply16bit
                    CALL                    giga_vAC
                    STW                     _D
                    ADDI                    15
                    STW                     _E                              ; D=Y*16: E=D+15

_30                 LDI                     32
                    ST                      cursorXY
                    LDWI                    atTextCursor
                    CALL                    giga_vAC
                    LDW                     _D
                    STW                     _C
                    LDW                     _E
                    STW                     0xb4
                    LDI                     1
                    STW                     0xb6                            ; AT 32: FOR C=D TO E

_40                 LDW                     _C
                    PrintAcChar             
                    ForNextLoopStepUp       _C _40 0xb4 0xb6                ; PUT C: NEXT C

_50                 LDWI                    newLineScroll
                    CALL                    giga_vAC
                    ForNextLoopUp           _Y _20 7                        ; PRINT: NEXT Y

_end_0x029b         BRA                     _end_0x029b                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0x7fa0
convertEqOp         EQU     0x7fa9
convertNeOp         EQU     0x7fb2
convertLeOp         EQU     0x7fbb
convertGeOp         EQU     0x7fc4
convertLtOp         EQU     0x7fcd
convertGtOp         EQU     0x7fd6
multiply16bit       EQU     0x7ec3
resetVideoTable     EQU     0x7fdf
initClearFuncs      EQU     0x7ea0
clearCursorRow      EQU     0x7aa0
printInit           EQU     0x7eea
printChar           EQU     0x7ca0
atTextCursor        EQU     0x7da0
newLineScroll       EQU     0x7ba0
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
lutLabel            EQU     register9


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register0
mathY               EQU     register1
mathSum             EQU     register2
mathMask            EQU     register3
mathRem             EQU     register8
mathSign            EQU     register9
mathScratch         EQU     register10
mathShift           EQU     register11
    
    
                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDI     1
    
multiply16_loop     STW     mathMask
                    ANDW    mathY
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum
                    
multiply16_skip     LDW     mathX
                    ADDW    mathX
                    STW     mathX
                    LDW     mathMask
                    ADDW    mathMask
                    BNE     multiply16_loop
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathSum
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDWI    0x0008
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
    
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres+8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textFont            EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textSlice           EQU     register9
scanLine            EQU     register10
digitMult           EQU     register11
digitIndex          EQU     register12
clearLoop           EQU     register13
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LDWI    0x0800
                    ADDW    cursorXY
                    STW     giga_sysArg4                    ; xy position
                    RET


                    ; prints char in textChr
printChar           PUSH
                    LD      textChr                         ; (char-32)*5 + 0x0700
                    SUBI    32
                    STW     textChr
                    STW     textFont
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    STW     textFont             
                    LDWI    giga_text32
                    ADDW    textFont
                    STW     textFont                        ; text font slice base address for chars 32-81
    
                    LDW     textChr
                    SUBI    50
                    BLT     printC_draw
                    LDW     textFont
                    ADDI    0x06
                    STW     textFont                        ; text font slice base address for chars 82+
    
printC_draw         LDWI    printInit
                    CALL    giga_vAC
                    LDI     0x05
                    ST      textSlice
    
printC_slice        LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     0xCB                            ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LoopCounter textSlice printC_slice
                    ST      giga_sysArg2                    ; result of loopCounter is always 0
                    SYS     0xCB                            ; draw last blank slice
                    CALL    realTimeProcAddr
    
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_exit
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
printC_exit         POP
                    RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres - 5
                    BLT     atTC_skip0
                    LDI     0
                    STW     cursorXY
                    
atTC_skip0          LD      cursorXY + 1
                    SUBI    giga_yres - 7
                    BLT     atTC_skip1
                    LDI     giga_yres - 8
                    STW     cursorXY + 1
                    
atTC_skip1          LD      cursorXY + 1
                    SUBI    giga_yres - 8
                    BGE     atTC_skip2
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET
                    
atTC_skip2          LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDI     8
                    ST      clearLoop
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
    
clearCR_loopy       CALL    realTimeProcAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    BGT     clearCR_loopx
    
                    INC     giga_sysArg4 + 1                ; next line
                    LoopCounter clearLoop clearCR_loopy
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY+1
                    ADDI    8
                    ST      cursorXY+1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    
                    LDWI    giga_videoTable
                    STW     scanLine
    
                    ; scroll all scan lines by 8 through 0x08 to 0x7F
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scan line pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
        
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
                    ; read scan line pointer for last char row, use this as cursor position
                    LDWI    giga_videoTable + 0x00E0
                    PEEK
                    SUBI    0x08                            ; corrected in printChar
                    ST      cursorXY+1
newLS_exit          POP
                    RET

