_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0x7fa0

; Includes
%includePath                  "../runtime"
%include                      util.i
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_init                         EQU                               0x0257
_div5                         EQU                               0x02d9
_mod5                         EQU                               0x033f
_initVars                     EQU                               0x03ce
_drawPucMon                   EQU                               0x043b
_drawGhosts                   EQU                               0x04f0
_drawNextGhost                EQU                               0x059b
_drawNormalGhost              EQU                               0x05ab
_drawScaredGhost              EQU                               0x0657
_drawEyesGhost                EQU                               0x09cb
_drawPills                    EQU                               0x0bab
_movePucMon                   EQU                               0x0da9
_moveGhosts                   EQU                               0x0fe6
_nextGhost                    EQU                               0x17df
_getGhostVars                 EQU                               0x18b2
_setGhostVars                 EQU                               0x18e5
_getGhostDir                  EQU                               0x19c6
_setGhostsMode                EQU                               0x19e1
_getBlinkyTarget              EQU                               0x1aec
_getPinkyTarget               EQU                               0x1bc0
_getInkyTarget                EQU                               0x1bf1
_getClydeTarget               EQU                               0x1cde
_getJuncDir                   EQU                               0x1dd6
_getWallDir                   EQU                               0x21ce
_replaceDot                   EQU                               0x23d2
_coordsPucMon                 EQU                               0x24b8
_handleInput                  EQU                               0x24d8
_253                          EQU                               0x25a9
_254                          EQU                               0x25c0
_247                          EQU                               0x25d7
_251                          EQU                               0x25ee
_drawScore                    EQU                               0x26b4
_drawDeath                    EQU                               0x27b2
_drawMaze                     EQU                               0x27d1
_drawDots                     EQU                               0x28d2
_repeat_0x0256                EQU                               0x025c
_else_0x0272                  EQU                               0x0274
_endif_0x027c                 EQU                               0x027e
_endif_0x0295                 EQU                               0x0293
_page_0x0300                  EQU                               0x0300
_elseif_0x038d                EQU                               0x036a
_elseif_0x03a2                EQU                               0x0379
_endif_0x03b5                 EQU                               0x0386
_elseif_0x03ef                EQU                               0x03b0
_elseif_0x0404                EQU                               0x03bf
_endif_0x0417                 EQU                               0x03cc
_page_0x0400                  EQU                               0x0400
_next_0x0467                  EQU                               0x0411
_endif_0x04c0                 EQU                               0x0458
_elseif_0x050c                EQU                               0x0490
_elseif_0x0533                EQU                               0x04af
_else_0x0559                  EQU                               0x04cd
_endif_0x0572                 EQU                               0x04e2
_page_0x0500                  EQU                               0x0500
_next_0x0589                  EQU                               0x0504
_endif_0x05b6                 EQU                               0x052d
_elseif_0x05f6                EQU                               0x055d
_else_0x0618                  EQU                               0x0577
_else_0x0639                  EQU                               0x058c
_endif_0x063e                 EQU                               0x0591
_else_0x0643                  EQU                               0x0596
_elseif_0x069b                EQU                               0x05dc
_page_0x0600                  EQU                               0x0600
_elseif_0x06d6                EQU                               0x0612
_else_0x0710                  EQU                               0x063c
_endif_0x0735                 EQU                               0x0655
_page_0x08a0                  EQU                               0x08a0
_elseif_0x0766                EQU                               0x08bc
_elseif_0x0795                EQU                               0x08e3
_page_0x09a0                  EQU                               0x09a0
_else_0x07c3                  EQU                               0x09b4
_endif_0x07dc                 EQU                               0x09c9
_elseif_0x0813                EQU                               0x09f2
_page_0x0aa0                  EQU                               0x0aa0
_elseif_0x0848                EQU                               0x0ac4
_else_0x087c                  EQU                               0x0aea
_page_0x0ba0                  EQU                               0x0ba0
_endif_0x089b                 EQU                               0x0ba9
_else_0x08f3                  EQU                               0x0be9
_page_0x0ca0                  EQU                               0x0ca0
_else_0x0922                  EQU                               0x0cb7
_else_0x0951                  EQU                               0x0cda
_page_0x0da0                  EQU                               0x0da0
_endif_0x0980                 EQU                               0x0da7
_page_0x0ea0                  EQU                               0x0ea0
_elseif_0x09f1                EQU                               0x0eb3
_page_0x0fa0                  EQU                               0x0fa0
_elseif_0x0a3e                EQU                               0x0fa4
_elseif_0x0a72                EQU                               0x0fd2
_endif_0x0a8a                 EQU                               0x0fe4
_next_0x0a91                  EQU                               0x0feb
_page_0x10a0                  EQU                               0x10a0
_endif_0x0adc                 EQU                               0x10ce
_page_0x11a0                  EQU                               0x11a0
_page_0x12a0                  EQU                               0x12a0
_else_0x0b98                  EQU                               0x12b7
_endif_0x0b9c                 EQU                               0x12bb
_endif_0x0bdc                 EQU                               0x12eb
_page_0x13a0                  EQU                               0x13a0
_else_0x0bfe                  EQU                               0x13b3
_else_0x0c13                  EQU                               0x13c4
_page_0x14a0                  EQU                               0x14a0
_else_0x0c9f                  EQU                               0x14c9
_page_0x15a0                  EQU                               0x15a0
_endif_0x0ce8                 EQU                               0x15b3
_endif_0x0d2f                 EQU                               0x15ec
_page_0x16a0                  EQU                               0x16a0
_endif_0x0d47                 EQU                               0x16aa
_elseif_0x0d78                EQU                               0x16d5
_else_0x0d95                  EQU                               0x16ec
_page_0x17a0                  EQU                               0x17a0
_page_0x18a0                  EQU                               0x18a0
_endif_0x0e08                 EQU                               0x18a2
_page_0x19a0                  EQU                               0x19a0
_else_0x0f06                  EQU                               0x19f0
_page_0x1aa0                  EQU                               0x1aa0
_endif_0x0f34                 EQU                               0x1ac2
_endif_0x0f36                 EQU                               0x1ac4
_endif_0x0f50                 EQU                               0x1ada
_endif_0x0f64                 EQU                               0x1aea
_page_0x1ba0                  EQU                               0x1ba0
_endif_0x0f89                 EQU                               0x1bb6
_endif_0x0fda                 EQU                               0x1be7
_page_0x1ca0                  EQU                               0x1ca0
_endif_0x1033                 EQU                               0x1cd4
_page_0x1da0                  EQU                               0x1da0
_endif_0x1094                 EQU                               0x1dcc
_page_0x1ea0                  EQU                               0x1ea0
_endif_0x1115                 EQU                               0x1ee0
_page_0x1fa0                  EQU                               0x1fa0
_endif_0x1151                 EQU                               0x1fbc
_else_0x1156                  EQU                               0x1fc1
_page_0x20a0                  EQU                               0x20a0
_endif_0x119c                 EQU                               0x20ac
_endif_0x11d8                 EQU                               0x20dc
_elseif_0x11f1                EQU                               0x20f1
_page_0x21a0                  EQU                               0x21a0
_elseif_0x120b                EQU                               0x21b3
_else_0x1224                  EQU                               0x21c8
_endif_0x1228                 EQU                               0x21cc
_page_0x22a0                  EQU                               0x22a0
_endif_0x1271                 EQU                               0x22b0
_else_0x129b                  EQU                               0x22ce
_else_0x12a0                  EQU                               0x22d3
_page_0x23a0                  EQU                               0x23a0
_endif_0x12dc                 EQU                               0x23ae
_endif_0x1306                 EQU                               0x23d0
_page_0x24a0                  EQU                               0x24a0
_endif_0x1361                 EQU                               0x24b6
_page_0x25a0                  EQU                               0x25a0
_else_0x13e5                  EQU                               0x25be
_else_0x1404                  EQU                               0x25d5
_else_0x1423                  EQU                               0x25ec
_page_0x26a0                  EQU                               0x26a0
_else_0x1442                  EQU                               0x26b2
_next_0x1460                  EQU                               0x26d0
_page_0x27a0                  EQU                               0x27a0
_next_0x14c5                  EQU                               0x27da
_page_0x28a0                  EQU                               0x28a0
_next_0x1543                  EQU                               0x28db
_next_0x1547                  EQU                               0x28df
_page_0x29a0                  EQU                               0x29a0
_endif_0x15a0                 EQU                               0x29c3
_end_0x15be                   EQU                               0x29e1

; Variables
_gmode                        EQU                               0x0030
_frame                        EQU                               0x0032
_dead                         EQU                               0x0034
_points                       EQU                               0x0036
_ci                           EQU                               0x0038
_zi                           EQU                               0x003a
_cj                           EQU                               0x003c
_zj                           EQU                               0x003e
_mx                           EQU                               0x0040
_my                           EQU                               0x0042
_gx                           EQU                               0x0044
_gy                           EQU                               0x0046
_gxd                          EQU                               0x0048
_gyd                          EQU                               0x004a
_mz                           EQU                               0x004c
_pyd                          EQU                               0x004e
_oxd                          EQU                               0x0050
_oyd                          EQU                               0x0052
_puci                         EQU                               0x0054
_pucj                         EQU                               0x0056
_ti                           EQU                               0x0058
_tj                           EQU                               0x005a
_time                         EQU                               0x005c
_flags                        EQU                               0x005e
_px                           EQU                               0x0060
_py                           EQU                               0x0062
_bonus                        EQU                               0x0064
_pxd                          EQU                               0x0066
_gidx                         EQU                               0x0068
_i                            EQU                               0x006a
_xf                           EQU                               0x006c
_yf                           EQU                               0x006e
_slowed                       EQU                               0x0070
_di                           EQU                               0x0072
_dj                           EQU                               0x0074
_gi                           EQU                               0x0076
_gj                           EQU                               0x0078
_bi                           EQU                               0x007a
_bj                           EQU                               0x007c

; Arrays
_maze_array                   EQU                               0x34d0
_maze_array                   DW                                0x71ad 0x70ad 0x6fad 0x6ead 0x6dad 0x6cad 0x6bad 0x6aad 0x69ad 0x68ad 0x67ad 0x66ad 0x65ad 0x64ad 0x63ad 0x62ad 0x61ad 0x60ad 0x5fad 0x5ead 0x5dad 0x5cad 0x5bad 0x5aad 
_maze_0x71ad                  EQU                               0x71ad
_maze_0x71ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x70ad                  EQU                               0x70ad
_maze_0x70ad                  DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x6fad                  EQU                               0x6fad
_maze_0x6fad                  DB                                0xf0 0x02 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x02 0xf0 
_maze_0x6ead                  EQU                               0x6ead
_maze_0x6ead                  DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x6dad                  EQU                               0x6dad
_maze_0x6dad                  DB                                0xf0 0xd1 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0xd1 0xf0 
_maze_0x6cad                  EQU                               0x6cad
_maze_0x6cad                  DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x6bad                  EQU                               0x6bad
_maze_0x6bad                  DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x6aad                  EQU                               0x6aad
_maze_0x6aad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x69ad                  EQU                               0x69ad
_maze_0x69ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0x00 0x00 0xd0 0xb0 0x00 0xd0 0x00 0x00 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x68ad                  EQU                               0x68ad
_maze_0x68ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xe0 0xe0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x67ad                  EQU                               0x67ad
_maze_0x67ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0x00 0x00 0xc0 0x00 0x00 0x00 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x66ad                  EQU                               0x66ad
_maze_0x66ad                  DB                                0xa0 0x90 0x90 0x90 0x00 0x00 0xd1 0x00 0x00 0xd0 0xf0 0x00 0x00 0x00 0x00 0x00 0x00 0xf0 0xd0 0x00 0x00 0xd1 0x00 0x00 0x90 0x90 0x90 0xa0 
_maze_0x65ad                  EQU                               0x65ad
_maze_0x65ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0x00 0x00 0x00 0x00 0x00 0x00 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x64ad                  EQU                               0x64ad
_maze_0x64ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x63ad                  EQU                               0x63ad
_maze_0x63ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xd0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xd0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x62ad                  EQU                               0x62ad
_maze_0x62ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x61ad                  EQU                               0x61ad
_maze_0x61ad                  DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x60ad                  EQU                               0x60ad
_maze_0x60ad                  DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x5fad                  EQU                               0x5fad
_maze_0x5fad                  DB                                0xf0 0x02 0x01 0x01 0xf0 0xf0 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0xf0 0xf0 0x01 0x01 0x02 0xf0 
_maze_0x5ead                  EQU                               0x5ead
_maze_0x5ead                  DB                                0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 
_maze_0x5dad                  EQU                               0x5dad
_maze_0x5dad                  DB                                0xf0 0x01 0x01 0xd1 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0xd1 0x01 0x01 0xf0 
_maze_0x5cad                  EQU                               0x5cad
_maze_0x5cad                  DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x5bad                  EQU                               0x5bad
_maze_0x5bad                  DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x5aad                  EQU                               0x5aad
_maze_0x5aad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_MAZE_BORDER_array            EQU                               0x59bb
_MAZE_BORDER_array            DW                                0xffb1 0x0000 0x0000 0x0077 0x004f 0x0000 0x00ff 
_MAZE_OUTER_T_array           EQU                               0x58ab
_MAZE_OUTER_T_array           DW                                0x0019 0x0000 0x0000 0xfff1 0xffe7 0x0000 0x0000 0xffdd 0x0041 0x0000 0x0000 0x000f 0x0002 0x0000 0x00ff 
_MAZE_OUTER_B_array           EQU                               0x57a7
_MAZE_OUTER_B_array           DW                                0xffbc 0x0000 0x0000 0xffec 0x0009 0x0000 0xfff7 0x0000 0x0000 0xffec 0x0019 0x0000 0x0000 0xfff1 0xffe7 0x0000 0x00ff 
_MAZE_TJUNC_0_array           EQU                               0x59a5
_MAZE_TJUNC_0_array           DW                                0x0019 0x0000 0x0000 0xfff6 0x0005 0x0000 0x0000 0x000a 0x000f 0x0000 0x00ff 
_MAZE_TJUNC_1_array           EQU                               0x56bb
_MAZE_TJUNC_1_array           DW                                0xfffe 0x0000 0x0000 0xfff6 0xfff1 0x0000 0x00ff 
_MAZE_CAGE_array              EQU                               0x56ad
_MAZE_CAGE_array              DW                                0xfff6 0x0000 0x0000 0x0014 0x0011 0x0000 0x00ff 
_MAZE_VERT_0_array            EQU                               0x55b7
_MAZE_VERT_0_array            DW                                0x0000 0x000f 0xfffb 0x0000 0x0000 0xfff1 0x0005 0x0000 0x00ff 
_MAZE_VERT_1_array            EQU                               0x55a5
_MAZE_VERT_1_array            DW                                0x0005 0x0000 0x0000 0x0019 0xfffb 0x0000 0x0000 0xffe7 0x00ff 
_MAZE_CORNER_array            EQU                               0x54b7
_MAZE_CORNER_array            DW                                0x000a 0x0000 0x0000 0x000a 0x0005 0x0000 0x0000 0xfff6 0x00ff 
_MAZE_HORIZ_0_array           EQU                               0x54a5
_MAZE_HORIZ_0_array           DW                                0x000f 0x0000 0x0000 0x0005 0xfff1 0x0000 0x0000 0xfffb 0x00ff 
_MAZE_HORIZ_1_array           EQU                               0x53b7
_MAZE_HORIZ_1_array           DW                                0x0014 0x0000 0x0000 0x0005 0xffec 0x0000 0x0000 0xfffb 0x00ff 
_MAZE_LINE_0_array            EQU                               0x71a7
_MAZE_LINE_0_array            DW                                0x000f 0x0000 0x00ff 
_MAZE_LINE_1_array            EQU                               0x71a1
_MAZE_LINE_1_array            DW                                0x0014 0x0000 0x00ff 
_MAZE_PIECES_array            EQU                               0x33c0
_MAZE_PIECES_array            DW                                0x004f 0x0050 0x3402 0x3489 0x7546 0x7545 0x6b0c 0x6b7f 0x6b45 0x6b46 0x5745 0x5746 0x2545 0x2546 0x2f3e 0x2f4d 0x3e2a 0x3e61 0x1b25 0x1b66 0x570c 0x577f 0x0c0c 0x0c7f 0x0c25 0x0c66 0x252a 0x2561 0x5725 0x5766 0x1b0c 0x1b7f 
_MAZE_ADDRS_array             EQU                               0x32c0
_MAZE_ADDRS_array             DW                                0x59bb 0x59bb 0x58ab 0x58ab 0x57a7 0x57a7 0x59a5 0x59a5 0x56bb 0x56bb 0x56bb 0x56bb 0x56bb 0x56bb 0x56ad 0x56ad 0x55b7 0x55b7 0x55a5 0x55a5 0x54b7 0x54b7 0x54a5 0x54a5 0x53b7 0x53b7 0x71a7 0x71a7 0x71a1 0x71a1 0x71a7 0x71a7 
_GHOST_DIRS_array             EQU                               0x53a7
_GHOST_DIRS_array             DW                                0x0001 0x0000 0x0000 0x0001 0xffff 0x0000 0x0000 0xffff 
_gframes_array                EQU                               0x52b9
_gframes_array                DB                                0x06 0x04 0x02 0x00 0x0e 0x0c 0x0a 0x08 0x16 0x14 0x12 0x10 0x1e 0x1c 0x1a 0x18 
_ghostsXr_array               EQU                               0x70a5
_ghostsXr_array               DW                                0x0042 0x003f 0x003f 0x0049 
_ghostsYr_array               EQU                               0x6fa5
_ghostsYr_array               DW                                0x0026 0x0035 0x003a 0x0035 
_ghostsX_array                EQU                               0x6ea5
_ghostsX_array                DW                                0x0042 0x003f 0x003f 0x0049 
_ghostsY_array                EQU                               0x6da5
_ghostsY_array                DW                                0x0026 0x0035 0x003a 0x0035 
_ghostsXd_array               EQU                               0x6ca5
_ghostsXd_array               DW                                0xffff 0xffff 0xffff 0xffff 
_ghostsYd_array               EQU                               0x6ba5
_ghostsYd_array               DW                                0x0000 0x0000 0x0000 0x0000 
_ghostsFlags_array            EQU                               0x7da0
_ghostsFlags_array            DB                                0x00 0x00 0x00 0x00 
_scoreBCD_array               EQU                               0x6aa6
_scoreBCD_array               DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_pointsBCD_array              EQU                               0x69a6
_pointsBCD_array              DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 

; Strings

; Constant Strings

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Sprites
def_sprites_0x7ec9            EQU                               0x7ec9
def_sprites_0x7ec9            DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 56 0 0 0 3 63 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7dc9            EQU                               0x7dc9
def_sprites_0x7dc9            DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 56 63 3 0 3 3 63 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 0 0 0 0 0 0 247 
def_sprites_0x7cc9            EQU                               0x7cc9
def_sprites_0x7cc9            DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 56 0 0 0 3 63 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7bc9            EQU                               0x7bc9
def_sprites_0x7bc9            DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 56 63 3 0 3 3 63 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 3 0 3 0 3 0 0 0 0 0 0 0 247 
def_sprites_0x7ac9            EQU                               0x7ac9
def_sprites_0x7ac9            DB                                0 0 0 0 0 0 0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 63 56 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 247 
def_sprites_0x79c9            EQU                               0x79c9
def_sprites_0x79c9            DB                                0 0 0 0 0 0 3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 247 
def_sprites_0x78c9            EQU                               0x78c9
def_sprites_0x78c9            DB                                0 0 0 0 0 0 0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 63 56 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 0 3 0 0 0 0 247 
def_sprites_0x77c9            EQU                               0x77c9
def_sprites_0x77c9            DB                                0 0 0 0 0 0 3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 3 0 3 0 3 0 247 
def_sprites_0x76c9            EQU                               0x76c9
def_sprites_0x76c9            DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 56 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x75c9            EQU                               0x75c9
def_sprites_0x75c9            DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 0 0 0 0 0 0 247 
def_sprites_0x74c9            EQU                               0x74c9
def_sprites_0x74c9            DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 56 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x73c9            EQU                               0x73c9
def_sprites_0x73c9            DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 3 0 3 0 3 0 0 0 0 0 0 0 247 
def_sprites_0x72c9            EQU                               0x72c9
def_sprites_0x72c9            DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 56 0 0 0 59 63 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x71c9            EQU                               0x71c9
def_sprites_0x71c9            DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 56 63 59 0 59 59 63 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 0 0 0 0 0 0 247 
def_sprites_0x70c9            EQU                               0x70c9
def_sprites_0x70c9            DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 56 0 0 0 59 63 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 0 59 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x6fc9            EQU                               0x6fc9
def_sprites_0x6fc9            DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 56 63 59 0 59 59 63 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 59 0 59 0 59 0 0 0 0 0 0 0 247 
def_sprites_0x6ec9            EQU                               0x6ec9
def_sprites_0x6ec9            DB                                0 0 0 0 0 0 0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 63 56 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 247 
def_sprites_0x6dc9            EQU                               0x6dc9
def_sprites_0x6dc9            DB                                0 0 0 0 0 0 59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 247 
def_sprites_0x6cc9            EQU                               0x6cc9
def_sprites_0x6cc9            DB                                0 0 0 0 0 0 0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 63 56 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 0 59 0 0 0 0 247 
def_sprites_0x6bc9            EQU                               0x6bc9
def_sprites_0x6bc9            DB                                0 0 0 0 0 0 59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 59 0 59 0 59 0 247 
def_sprites_0x6ac9            EQU                               0x6ac9
def_sprites_0x6ac9            DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 56 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x69c9            EQU                               0x69c9
def_sprites_0x69c9            DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 0 0 0 0 0 0 247 
def_sprites_0x68c9            EQU                               0x68c9
def_sprites_0x68c9            DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 56 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 0 59 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x67c9            EQU                               0x67c9
def_sprites_0x67c9            DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 59 0 59 0 59 0 0 0 0 0 0 0 247 
def_sprites_0x66c9            EQU                               0x66c9
def_sprites_0x66c9            DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 56 0 0 0 61 63 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x65c9            EQU                               0x65c9
def_sprites_0x65c9            DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 56 63 61 0 61 61 63 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 0 0 0 0 0 0 247 
def_sprites_0x64c9            EQU                               0x64c9
def_sprites_0x64c9            DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 56 0 0 0 61 63 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 0 61 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x63c9            EQU                               0x63c9
def_sprites_0x63c9            DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 56 63 61 0 61 61 63 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 61 0 61 0 61 0 0 0 0 0 0 0 247 
def_sprites_0x62c9            EQU                               0x62c9
def_sprites_0x62c9            DB                                0 0 0 0 0 0 0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 63 56 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 247 
def_sprites_0x61c9            EQU                               0x61c9
def_sprites_0x61c9            DB                                0 0 0 0 0 0 61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 247 
def_sprites_0x60c9            EQU                               0x60c9
def_sprites_0x60c9            DB                                0 0 0 0 0 0 0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 63 56 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 0 61 0 0 0 0 247 
def_sprites_0x5fc9            EQU                               0x5fc9
def_sprites_0x5fc9            DB                                0 0 0 0 0 0 61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 61 0 61 0 61 0 247 
def_sprites_0x5ec9            EQU                               0x5ec9
def_sprites_0x5ec9            DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 56 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x5dc9            EQU                               0x5dc9
def_sprites_0x5dc9            DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 0 0 0 0 0 0 247 
def_sprites_0x5cc9            EQU                               0x5cc9
def_sprites_0x5cc9            DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 56 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 0 61 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x5bc9            EQU                               0x5bc9
def_sprites_0x5bc9            DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 61 0 61 0 61 0 0 0 0 0 0 0 247 
def_sprites_0x5ac9            EQU                               0x5ac9
def_sprites_0x5ac9            DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 56 0 0 0 11 63 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x59c9            EQU                               0x59c9
def_sprites_0x59c9            DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 56 63 11 0 11 11 63 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 0 0 0 0 0 0 247 
def_sprites_0x58c9            EQU                               0x58c9
def_sprites_0x58c9            DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 56 0 0 0 11 63 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 0 11 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x57c9            EQU                               0x57c9
def_sprites_0x57c9            DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 56 63 11 0 11 11 63 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 11 0 11 0 11 0 0 0 0 0 0 0 247 
def_sprites_0x56c9            EQU                               0x56c9
def_sprites_0x56c9            DB                                0 0 0 0 0 0 0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 63 56 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 247 
def_sprites_0x55c9            EQU                               0x55c9
def_sprites_0x55c9            DB                                0 0 0 0 0 0 11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 247 
def_sprites_0x54c9            EQU                               0x54c9
def_sprites_0x54c9            DB                                0 0 0 0 0 0 0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 63 56 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 0 11 0 0 0 0 247 
def_sprites_0x53c9            EQU                               0x53c9
def_sprites_0x53c9            DB                                0 0 0 0 0 0 11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 11 0 11 0 11 0 247 
def_sprites_0x52c9            EQU                               0x52c9
def_sprites_0x52c9            DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 56 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x51c9            EQU                               0x51c9
def_sprites_0x51c9            DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 0 0 0 0 0 0 247 
def_sprites_0x50c9            EQU                               0x50c9
def_sprites_0x50c9            DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 56 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 0 11 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4fc9            EQU                               0x4fc9
def_sprites_0x4fc9            DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 11 0 11 0 11 0 0 0 0 0 0 0 247 
def_sprites_0x4ec9            EQU                               0x4ec9
def_sprites_0x4ec9            DB                                0 0 0 0 0 0 0 15 0 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4dc9            EQU                               0x4dc9
def_sprites_0x4dc9            DB                                0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 15 15 0 0 0 15 15 15 0 15 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4cc9            EQU                               0x4cc9
def_sprites_0x4cc9            DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4bc9            EQU                               0x4bc9
def_sprites_0x4bc9            DB                                0 0 15 0 0 0 0 0 15 15 0 0 15 0 15 15 15 0 15 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4ac9            EQU                               0x4ac9
def_sprites_0x4ac9            DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x49c9            EQU                               0x49c9
def_sprites_0x49c9            DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x48c9            EQU                               0x48c9
def_sprites_0x48c9            DB                                0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 15 15 0 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x47c9            EQU                               0x47c9
def_sprites_0x47c9            DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x46c9            EQU                               0x46c9
def_sprites_0x46c9            DB                                0 0 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x45c9            EQU                               0x45c9
def_sprites_0x45c9            DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 0 15 15 15 15 0 0 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x44c9            EQU                               0x44c9
def_sprites_0x44c9            DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x43c9            EQU                               0x43c9
def_sprites_0x43c9            DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 0 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x42c9            EQU                               0x42c9
def_sprites_0x42c9            DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x41c9            EQU                               0x41c9
def_sprites_0x41c9            DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x40c9            EQU                               0x40c9
def_sprites_0x40c9            DB                                0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x3fc9            EQU                               0x3fc9
def_sprites_0x3fc9            DB                                15 15 15 0 0 0 15 15 15 15 0 0 0 15 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x3ec9            EQU                               0x3ec9
def_sprites_0x3ec9            DB                                0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 43 52 0 0 0 52 52 43 0 0 0 52 0 52 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x3dc9            EQU                               0x3dc9
def_sprites_0x3dc9            DB                                52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 43 52 43 52 52 0 52 43 52 43 52 0 0 52 0 52 0 0 0 0 0 0 0 0 247 
def_sprites_0x3cc9            EQU                               0x3cc9
def_sprites_0x3cc9            DB                                0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 43 52 0 0 0 0 52 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x3bc9            EQU                               0x3bc9
def_sprites_0x3bc9            DB                                52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 52 43 52 43 52 0 43 52 43 52 52 0 52 0 52 0 52 0 0 0 0 0 0 0 247 
def_sprites_0x3ac9            EQU                               0x3ac9
def_sprites_0x3ac9            DB                                0 0 0 0 0 0 0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 43 52 0 0 0 52 52 43 0 0 0 52 0 52 0 0 0 247 
def_sprites_0x39c9            EQU                               0x39c9
def_sprites_0x39c9            DB                                0 0 0 0 0 0 52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 43 52 43 52 52 0 52 43 52 43 52 0 0 52 0 52 0 0 247 
def_sprites_0x38c9            EQU                               0x38c9
def_sprites_0x38c9            DB                                0 0 0 0 0 0 0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 43 52 0 0 0 0 52 0 0 0 0 247 
def_sprites_0x37c9            EQU                               0x37c9
def_sprites_0x37c9            DB                                0 0 0 0 0 0 52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 52 43 52 43 52 0 43 52 43 52 52 0 52 0 52 0 52 0 247 
def_sprites_0x7eb6            EQU                               0x7eb6
def_sprites_0x7eb6            DB                                0 0 0 0 0 0 63 63 0 63 63 0 63 56 0 56 63 0 253 
def_sprites_0x7ea3            EQU                               0x7ea3
def_sprites_0x7ea3            DB                                63 63 0 63 63 0 56 63 0 56 63 0 0 0 0 0 0 0 253 
def_sprites_0x36c9            EQU                               0x36c9
def_sprites_0x36c9            DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x35c9            EQU                               0x35c9
def_sprites_0x35c9            DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7da4            EQU                               0x7da4
def_sprites_0x7da4            DB                                0 0 0 0 0 0 0 43 43 43 0 0 43 43 43 43 43 0 43 43 43 43 43 0 43 43 43 43 43 0 0 43 43 43 0 0 250 
def_sprites_0x7ca4            EQU                               0x7ca4
def_sprites_0x7ca4            DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 250 
def_sprites_0x7ba4            EQU                               0x7ba4
def_sprites_0x7ba4            DB                                0 63 63 63 0 0 63 63 0 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 0 63 63 0 0 63 63 63 0 0 250 
def_sprites_0x7aa4            EQU                               0x7aa4
def_sprites_0x7aa4            DB                                0 0 63 0 0 0 0 63 63 0 0 0 63 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x79a4            EQU                               0x79a4
def_sprites_0x79a4            DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x78a4            EQU                               0x78a4
def_sprites_0x78a4            DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 0 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x77a4            EQU                               0x77a4
def_sprites_0x77a4            DB                                0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 63 63 63 63 0 0 0 0 63 0 0 0 0 0 63 0 0 250 
def_sprites_0x76a4            EQU                               0x76a4
def_sprites_0x76a4            DB                                63 63 63 63 63 0 63 0 0 0 0 0 0 63 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x75a4            EQU                               0x75a4
def_sprites_0x75a4            DB                                0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x74a4            EQU                               0x74a4
def_sprites_0x74a4            DB                                63 63 63 63 63 0 63 0 0 0 63 0 0 0 0 63 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 250 
def_sprites_0x73a4            EQU                               0x73a4
def_sprites_0x73a4            DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x72a4            EQU                               0x72a4
def_sprites_0x72a4            DB                                0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 63 0 0 0 0 0 63 0 0 63 63 63 0 0 250 

; Define Fonts

; Lookup Tables
_lut_numericLabs              EQU                               0x5aa3
_lut_numericLabs              DW                                253 254 247 251 0x0000
_lut_numericAddrs             EQU                               0x58a3
_lut_numericAddrs             DW                                0x25a9 0x25c0 0x25d7 0x25ee 
lut_0x68a5                    EQU                               0x68a5
lut_0x68a5                    DW                                0x1aec 0x1bc0 0x1bf1 0x1cde 
_spriteLut_0x56a3             EQU                               0x56a3
_spriteLut_0x56a3             DW                                0x7ec9 0x0000 0x7dc9 0x0003 0x0000
_spriteLut_0x50bf             EQU                               0x50bf
_spriteLut_0x50bf             DW                                0x7cc9 0x0000 0x7bc9 0x0003 0x0000
_spriteLut_0x50b5             EQU                               0x50b5
_spriteLut_0x50b5             DW                                0x7ac9 0x0000 0x79c9 0x0003 0x0000
_spriteLut_0x50ab             EQU                               0x50ab
_spriteLut_0x50ab             DW                                0x78c9 0x0000 0x77c9 0x0003 0x0000
_spriteLut_0x50a1             EQU                               0x50a1
_spriteLut_0x50a1             DW                                0x76c9 0x0000 0x75c9 0x0003 0x0000
_spriteLut_0x4fbf             EQU                               0x4fbf
_spriteLut_0x4fbf             DW                                0x74c9 0x0000 0x73c9 0x0003 0x0000
_spriteLut_0x4fb5             EQU                               0x4fb5
_spriteLut_0x4fb5             DW                                0x76c9 0x0003 0x75c9 0x0000 0x0000
_spriteLut_0x4fab             EQU                               0x4fab
_spriteLut_0x4fab             DW                                0x74c9 0x0003 0x73c9 0x0000 0x0000
_spriteLut_0x4fa1             EQU                               0x4fa1
_spriteLut_0x4fa1             DW                                0x72c9 0x0000 0x71c9 0x0003 0x0000
_spriteLut_0x4ebf             EQU                               0x4ebf
_spriteLut_0x4ebf             DW                                0x70c9 0x0000 0x6fc9 0x0003 0x0000
_spriteLut_0x4eb5             EQU                               0x4eb5
_spriteLut_0x4eb5             DW                                0x6ec9 0x0000 0x6dc9 0x0003 0x0000
_spriteLut_0x4eab             EQU                               0x4eab
_spriteLut_0x4eab             DW                                0x6cc9 0x0000 0x6bc9 0x0003 0x0000
_spriteLut_0x4ea1             EQU                               0x4ea1
_spriteLut_0x4ea1             DW                                0x6ac9 0x0000 0x69c9 0x0003 0x0000
_spriteLut_0x4dbf             EQU                               0x4dbf
_spriteLut_0x4dbf             DW                                0x68c9 0x0000 0x67c9 0x0003 0x0000
_spriteLut_0x4db5             EQU                               0x4db5
_spriteLut_0x4db5             DW                                0x6ac9 0x0003 0x69c9 0x0000 0x0000
_spriteLut_0x4dab             EQU                               0x4dab
_spriteLut_0x4dab             DW                                0x68c9 0x0003 0x67c9 0x0000 0x0000
_spriteLut_0x4da1             EQU                               0x4da1
_spriteLut_0x4da1             DW                                0x66c9 0x0000 0x65c9 0x0003 0x0000
_spriteLut_0x4cbf             EQU                               0x4cbf
_spriteLut_0x4cbf             DW                                0x64c9 0x0000 0x63c9 0x0003 0x0000
_spriteLut_0x4cb5             EQU                               0x4cb5
_spriteLut_0x4cb5             DW                                0x62c9 0x0000 0x61c9 0x0003 0x0000
_spriteLut_0x4cab             EQU                               0x4cab
_spriteLut_0x4cab             DW                                0x60c9 0x0000 0x5fc9 0x0003 0x0000
_spriteLut_0x4ca1             EQU                               0x4ca1
_spriteLut_0x4ca1             DW                                0x5ec9 0x0000 0x5dc9 0x0003 0x0000
_spriteLut_0x4bbf             EQU                               0x4bbf
_spriteLut_0x4bbf             DW                                0x5cc9 0x0000 0x5bc9 0x0003 0x0000
_spriteLut_0x4bb5             EQU                               0x4bb5
_spriteLut_0x4bb5             DW                                0x5ec9 0x0003 0x5dc9 0x0000 0x0000
_spriteLut_0x4bab             EQU                               0x4bab
_spriteLut_0x4bab             DW                                0x5cc9 0x0003 0x5bc9 0x0000 0x0000
_spriteLut_0x4ba1             EQU                               0x4ba1
_spriteLut_0x4ba1             DW                                0x5ac9 0x0000 0x59c9 0x0003 0x0000
_spriteLut_0x4abf             EQU                               0x4abf
_spriteLut_0x4abf             DW                                0x58c9 0x0000 0x57c9 0x0003 0x0000
_spriteLut_0x4ab5             EQU                               0x4ab5
_spriteLut_0x4ab5             DW                                0x56c9 0x0000 0x55c9 0x0003 0x0000
_spriteLut_0x4aab             EQU                               0x4aab
_spriteLut_0x4aab             DW                                0x54c9 0x0000 0x53c9 0x0003 0x0000
_spriteLut_0x4aa1             EQU                               0x4aa1
_spriteLut_0x4aa1             DW                                0x52c9 0x0000 0x51c9 0x0003 0x0000
_spriteLut_0x49bf             EQU                               0x49bf
_spriteLut_0x49bf             DW                                0x50c9 0x0000 0x4fc9 0x0003 0x0000
_spriteLut_0x49b5             EQU                               0x49b5
_spriteLut_0x49b5             DW                                0x52c9 0x0003 0x51c9 0x0000 0x0000
_spriteLut_0x49ab             EQU                               0x49ab
_spriteLut_0x49ab             DW                                0x50c9 0x0003 0x4fc9 0x0000 0x0000
_spriteLut_0x49a1             EQU                               0x49a1
_spriteLut_0x49a1             DW                                0x4ec9 0x0000 0x4dc9 0x0003 0x0000
_spriteLut_0x48bf             EQU                               0x48bf
_spriteLut_0x48bf             DW                                0x4cc9 0x0000 0x4bc9 0x0003 0x0000
_spriteLut_0x48b5             EQU                               0x48b5
_spriteLut_0x48b5             DW                                0x4ac9 0x0000 0x49c9 0x0003 0x0000
_spriteLut_0x48ab             EQU                               0x48ab
_spriteLut_0x48ab             DW                                0x48c9 0x0000 0x47c9 0x0003 0x0000
_spriteLut_0x48a1             EQU                               0x48a1
_spriteLut_0x48a1             DW                                0x4ec9 0x0800 0x4dc9 0x0803 0x0000
_spriteLut_0x47bf             EQU                               0x47bf
_spriteLut_0x47bf             DW                                0x4cc9 0x0800 0x4bc9 0x0803 0x0000
_spriteLut_0x47b5             EQU                               0x47b5
_spriteLut_0x47b5             DW                                0x4ac9 0x0800 0x49c9 0x0803 0x0000
_spriteLut_0x47ab             EQU                               0x47ab
_spriteLut_0x47ab             DW                                0x48c9 0x0800 0x47c9 0x0803 0x0000
_spriteLut_0x47a1             EQU                               0x47a1
_spriteLut_0x47a1             DW                                0x46c9 0x0000 0x45c9 0x0003 0x0000
_spriteLut_0x46bf             EQU                               0x46bf
_spriteLut_0x46bf             DW                                0x44c9 0x0000 0x43c9 0x0003 0x0000
_spriteLut_0x46b5             EQU                               0x46b5
_spriteLut_0x46b5             DW                                0x42c9 0x0000 0x41c9 0x0003 0x0000
_spriteLut_0x46ab             EQU                               0x46ab
_spriteLut_0x46ab             DW                                0x40c9 0x0000 0x3fc9 0x0003 0x0000
_spriteLut_0x46a1             EQU                               0x46a1
_spriteLut_0x46a1             DW                                0x46c9 0x0003 0x45c9 0x0000 0x0000
_spriteLut_0x45bf             EQU                               0x45bf
_spriteLut_0x45bf             DW                                0x44c9 0x0003 0x43c9 0x0000 0x0000
_spriteLut_0x45b5             EQU                               0x45b5
_spriteLut_0x45b5             DW                                0x42c9 0x0003 0x41c9 0x0000 0x0000
_spriteLut_0x45ab             EQU                               0x45ab
_spriteLut_0x45ab             DW                                0x40c9 0x0003 0x3fc9 0x0000 0x0000
_spriteLut_0x45a1             EQU                               0x45a1
_spriteLut_0x45a1             DW                                0x3ec9 0x0000 0x3dc9 0x0003 0x0000
_spriteLut_0x44bf             EQU                               0x44bf
_spriteLut_0x44bf             DW                                0x3cc9 0x0000 0x3bc9 0x0003 0x0000
_spriteLut_0x44b5             EQU                               0x44b5
_spriteLut_0x44b5             DW                                0x3ac9 0x0000 0x39c9 0x0003 0x0000
_spriteLut_0x44ab             EQU                               0x44ab
_spriteLut_0x44ab             DW                                0x38c9 0x0000 0x37c9 0x0003 0x0000
_spriteLut_0x44a1             EQU                               0x44a1
_spriteLut_0x44a1             DW                                0x3ec9 0x0000 0x3dc9 0x0003 0x0000
_spriteLut_0x43bf             EQU                               0x43bf
_spriteLut_0x43bf             DW                                0x3cc9 0x0000 0x3bc9 0x0003 0x0000
_spriteLut_0x43b5             EQU                               0x43b5
_spriteLut_0x43b5             DW                                0x3ec9 0x0003 0x3dc9 0x0000 0x0000
_spriteLut_0x43ab             EQU                               0x43ab
_spriteLut_0x43ab             DW                                0x3cc9 0x0003 0x3bc9 0x0000 0x0000
_spriteLut_0x6aa0             EQU                               0x6aa0
_spriteLut_0x6aa0             DW                                0x7eb6 0x0200 0x0000
_spriteLut_0x69a0             EQU                               0x69a0
_spriteLut_0x69a0             DW                                0x7eb6 0x0000 0x0000
_spriteLut_0x57a1             EQU                               0x57a1
_spriteLut_0x57a1             DW                                0x7ea3 0x0000 0x0000
_spriteLut_0x53a1             EQU                               0x53a1
_spriteLut_0x53a1             DW                                0x7ea3 0x0000 0x0000
_spriteLut_0x43a1             EQU                               0x43a1
_spriteLut_0x43a1             DW                                0x36c9 0x0000 0x35c9 0x0006 0x0000
_spriteLut_0x42c3             EQU                               0x42c3
_spriteLut_0x42c3             DW                                0x7da4 0x0000 0x0000
_spriteLut_0x42bd             EQU                               0x42bd
_spriteLut_0x42bd             DW                                0x7ca4 0x0000 0x0000
_spriteLut_0x42b3             EQU                               0x42b3
_spriteLut_0x42b3             DW                                0x36c9 0x0000 0x35c9 0x0003 0x0000
_spriteLut_0x42ad             EQU                               0x42ad
_spriteLut_0x42ad             DW                                0x7ba4 0x0000 0x0000
_spriteLut_0x42a7             EQU                               0x42a7
_spriteLut_0x42a7             DW                                0x7aa4 0x0000 0x0000
_spriteLut_0x42a1             EQU                               0x42a1
_spriteLut_0x42a1             DW                                0x79a4 0x0000 0x0000
_spriteLut_0x41c3             EQU                               0x41c3
_spriteLut_0x41c3             DW                                0x78a4 0x0000 0x0000
_spriteLut_0x41bd             EQU                               0x41bd
_spriteLut_0x41bd             DW                                0x77a4 0x0000 0x0000
_spriteLut_0x41b7             EQU                               0x41b7
_spriteLut_0x41b7             DW                                0x76a4 0x0000 0x0000
_spriteLut_0x41b1             EQU                               0x41b1
_spriteLut_0x41b1             DW                                0x75a4 0x0000 0x0000
_spriteLut_0x41ab             EQU                               0x41ab
_spriteLut_0x41ab             DW                                0x74a4 0x0000 0x0000
_spriteLut_0x41a5             EQU                               0x41a5
_spriteLut_0x41a5             DW                                0x73a4 0x0000 0x0000
_spriteLut_0x40c3             EQU                               0x40c3
_spriteLut_0x40c3             DW                                0x72a4 0x0000 0x0000
_spritesLut_                  EQU                               0x066c
_spritesLut_                  DW                                0x56a3 0x50bf 0x50b5 0x50ab 0x50a1 0x4fbf 0x4fb5 0x4fab 0x4fa1 0x4ebf 0x4eb5 0x4eab 0x4ea1 0x4dbf 0x4db5 0x4dab 0x4da1 0x4cbf 0x4cb5 0x4cab 0x4ca1 0x4bbf 0x4bb5 0x4bab 0x4ba1 0x4abf 0x4ab5 0x4aab 0x4aa1 0x49bf 0x49b5 0x49ab 0x49a1 0x48bf 0x48b5 0x48ab 0x48a1 0x47bf 0x47b5 0x47ab 0x47a1 0x46bf 0x46b5 0x46ab 0x46a1 0x45bf 0x45b5 0x45ab 0x45a1 0x44bf 0x44b5 0x44ab 0x44a1 0x43bf 0x43b5 0x43ab 0x6aa0 0x69a0 0x57a1 0x53a1 0x43a1 0x42c3 0x42bd 0x42b3 0x42ad 0x42a7 0x42a1 0x41c3 0x41bd 0x41b7 0x41b1 0x41ab 0x41a5 0x40c3 

; Code
_entryPoint_                  LDI                               0x28
                              STW                               romType
                              RomCheck                          
                              Initialise                        
                              InitEqOp                        
                              Init8Array2d                    
                              InitRealTimeStub                                                  ; INIT

                              LDI                               0
                              STW                               fgbgColour                      ; set FGBG_COLOUR, 0

                              LDI                               2
                              STW                               graphicsMode
                              ScanlineMode                      
                              ClearVertBlinds                                                   ; mode 2 : cls

                              LDI                               0
                              STW                               _gmode                          ; gmode = CHASE_MODE

                              LDI                               0
                              STW                               _frame
                              STW                               _dead
                              STW                               _points                         ; frame = 0 : dead = frame : points = dead

                              LDWI                              _drawMaze
                              CALL                              giga_vAC                        ; gosub drawMaze

                              LDWI                              _drawDots
                              CALL                              giga_vAC                        ; gosub drawDots

                              LDWI                              _drawScore
                              CALL                              giga_vAC                        ; gosub drawScore

_init                         LDWI                              _initVars
                              CALL                              giga_vAC                        ; gosub initVars

_repeat_0x0256                WaitVBlank                                                        ; wait

                              LDW                               _gmode
                              XORI                              1
                              BNE                               _else_0x0272                    ; if gmode &&= SCARED_MODE

                              LDWI                              _drawGhosts
                              CALL                              giga_vAC                        ; gosub drawGhosts

                              LDWI                              _drawPucMon
                              CALL                              giga_vAC
                              BRA                               _endif_0x027c                   ; gosub drawPucMon

_else_0x0272                  LDWI                              _drawPucMon
                              CALL                              giga_vAC                        ; gosub drawPucMon

                              LDWI                              _drawGhosts
                              CALL                              giga_vAC                        ; gosub drawGhosts

_endif_0x027c                 LDW                               _dead
                              XORI                              1
                              BNE                               _endif_0x0295                   ; if dead &&=1

                              LDI                               0
                              STW                               _dead                           ; dead = 0

                              LDWI                              _drawDeath
                              CALL                              giga_vAC                        ; gosub drawDeath

                              LDWI                              _init
                              CALL                              giga_vAC                        ; goto init

_endif_0x0295                 LDI                               60
                              STW                               spriteId
                              LDI                               2
                              ST                                spriteXY
                              LDI                               53
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Tunnel, ORIGIN_X,       (51+ORIGIN_Y)

                              LDI                               60
                              STW                               spriteId
                              LDI                               126
                              ST                                spriteXY
                              LDI                               53
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Tunnel, (124+ORIGIN_X), (51+ORIGIN_Y)

                              LDWI                              _drawPills
                              CALL                              giga_vAC                        ; gosub drawPills

                              LDWI                              _setGhostsMode
                              CALL                              giga_vAC                        ; gosub setGhostsMode

                              LDWI                              _moveGhosts
                              CALL                              giga_vAC                        ; gosub moveGhosts

                              LDWI                              _handleInput
                              CALL                              giga_vAC                        ; gosub handleInput

                              LDWI                              _movePucMon
                              CALL                              giga_vAC                        ; gosub movePucMon

                              INC                               _frame                          ; inc frame

                              LDWI                              _repeat_0x0256
                              CALL                              giga_vAC                        ; forever

_div5                         PUSH                              
                              LDW                               _ci
                              STW                               mathShift
                              ShiftRight6bit                    
                              STW                               0xc2
                              LDW                               _ci
                              SUBW                              0xc2
                              STW                               _ci                             ; ci = ci - (ci >>6)                           'error term

                              LDW                               _ci
                              LSLW                              
                              LSLW                              
                              LSLW                              
                              LSLW                              
                              STW                               _zi
                              STW                               0xde
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xde
                              LSLW                              
                              ADDW                              _zi
                              STW                               0xc6
                              LDW                               _ci
                              LSLW                              
                              LSLW                              
                              ADDW                              0xc6
                              STW                               _ci                             ; zi = ci <<4 : ci = (zi <<1) + zi + (ci <<2)  'multiply by 52

                              LD                                _ci + 1
                              STW                               _ci                             ; ci = ci.hi                                   'divide by 256

                              LDW                               _cj
                              STW                               mathShift
                              ShiftRight6bit                    
                              STW                               0xc2
                              LDW                               _cj
                              SUBW                              0xc2
                              STW                               _cj                             ; cj = cj - (cj >>6)                           'error term

                              LDW                               _cj
                              LSLW                              
                              LSLW                              
                              LSLW                              
                              LSLW                              
                              STW                               _zj
                              LSLW                              
                              ADDW                              _zj
                              STW                               0xc6
                              LDW                               _cj
                              LSLW                              
                              LSLW                              
                              ADDW                              0xc6
                              STW                               _cj                             ; zj = cj <<4 : cj = (zj <<1) + zj + (cj <<2)  'multiply by 52

                              LD                                _cj + 1
                              STW                               _cj                             ; cj = cj.hi                                   'divide by 256

                              Return                                                            ; return

_mod5                         PUSH                              
                              LD                                _mx + 1
                              STW                               0xc2
                              LD                                _mx
                              ADDW                              0xc2
                              STW                               _mx
                              STW                               mathShift
                              ShiftRight4bit                    
                              STW                               0xc6
                              LDW                               _mx
                              ANDI                              15
                              ADDW                              0xc6
                              STW                               _mx                             ; mx = mx.hi + mx.lo : mx = (mx >>4) + (mx AND &h000F)

                              LDW                               _mx
                              SUBI                              14
                              BLE                               _elseif_0x038d                  ; if mx &&> 14

                              LDW                               _mx
                              SUBI                              15
                              STW                               _mx
                              BRA                               _endif_0x03b5                   ; mx = mx - 15

_elseif_0x038d                LDW                               _mx
                              SUBI                              9
                              BLE                               _elseif_0x03a2                  ; elseif mx &&> 9

                              LDW                               _mx
                              SUBI                              10
                              STW                               _mx
                              BRA                               _endif_0x03b5                   ; mx = mx - 10

_elseif_0x03a2                LDW                               _mx
                              SUBI                              4
                              BLE                               _endif_0x03b5                   ; elseif mx &&> 4

                              LDW                               _mx
                              SUBI                              5
                              STW                               _mx                             ; mx = mx - 5

_endif_0x03b5                 LD                                _my + 1
                              STW                               0xc2
                              LD                                _my
                              ADDW                              0xc2
                              STW                               _my
                              STW                               mathShift
                              ShiftRight4bit                    
                              STW                               0xc6
                              LDW                               _my
                              ANDI                              15
                              ADDW                              0xc6
                              STW                               _my                             ; my = my.hi + my.lo : my = (my >>4) + (my AND &h000F)

                              LDW                               _my
                              SUBI                              14
                              BLE                               _elseif_0x03ef                  ; if my &&> 14

                              LDW                               _my
                              SUBI                              15
                              STW                               _my
                              BRA                               _endif_0x0417                   ; my = my - 15

_elseif_0x03ef                LDW                               _my
                              SUBI                              9
                              BLE                               _elseif_0x0404                  ; elseif my &&> 9

                              LDW                               _my
                              SUBI                              10
                              STW                               _my
                              BRA                               _endif_0x0417                   ; my = my - 10

_elseif_0x0404                LDW                               _my
                              SUBI                              4
                              BLE                               _endif_0x0417                   ; elseif my &&> 4

                              LDW                               _my
                              SUBI                              5
                              STW                               _my                             ; my = my - 5

_endif_0x0417                 Return                                                            ; return

_initVars                     PUSH                              
                              LDI                               0
                              STW                               _gx
                              STW                               _gy
                              STW                               _gxd
                              STW                               _gyd
                              STW                               _mz
                              STW                               _pyd
                              STW                               _oxd
                              STW                               _oyd
                              STW                               _puci
                              STW                               _pucj
                              STW                               _ti
                              STW                               _tj
                              STW                               _time
                              STW                               _flags                          ; gx = 0 : gy = gx : gxd = gy : gyd = gxd : mz = gyd : pyd = mz : oxd = pyd : oyd = oxd : puci = oyd : pucj = puci : ti = pucj : tj = ti : time = tj : flags = time

                              LDI                               65
                              STW                               _px
                              LDI                               88
                              STW                               0xde
                              LDWI                              _page_0x0400
                              CALL                              giga_vAC
_page_0x0400                  LDW                               0xde
                              STW                               _py                             ; px = (63+ORIGIN_X) : py = (86+ORIGIN_Y)

                              LDI                               200
                              STW                               _bonus                          ; bonus = 200

                              LDWI                              -1
                              STW                               _pxd                            ; pxd = -1

                              LDI                               0
                              STW                               _gidx                           ; for gidx=0 &to (NUM_GHOSTS - 1)

_next_0x0467                  LDW                               _gidx
                              LSLW                              
                              STW                               _i                              ; i = gidx <<1

                              LDWI                              28837
                              ADDW                              _i
                              DEEK                              
                              STW                               _gx                             ; gx = deek(@ghostsXr + i)

                              LDWI                              28581
                              ADDW                              _i
                              DEEK                              
                              STW                               _gy                             ; gy = deek(@ghostsYr + i)

                              LDWI                              -1
                              STW                               _gxd                            ; gxd = -1

                              LDWI                              _setGhostVars
                              CALL                              giga_vAC                        ; gosub setGhostVars

                              ForNextInc                        _gidx _next_0x0467 3            ; next gidx

                              Return                                                            ; return

_drawPucMon                   PUSH                              
                              LDW                               _mz
                              XORI                              240
                              BNE                               _endif_0x04c0                   ; if mz &&= WALL

                              LDI                               42
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, PucLt + 2, px, py

                              Return                                                            ; return

_endif_0x04c0                 LDW                               _px
                              STW                               mathShift
                              ShiftRight1bit                    
                              ANDI                              3
                              STW                               _xf                             ; xf = (px LSR 1) AND 3

                              LDW                               _py
                              STW                               mathShift
                              ShiftRight1bit                    
                              ANDI                              3
                              STW                               _yf                             ; yf = (py LSR 1) AND 3

                              LDW                               _pxd
                              XORI                              1
                              BNE                               _elseif_0x050c                  ; if pxd &&= 1

                              LDI                               44
                              ADDW                              _xf
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSpriteX                       
                              BRA                               _endif_0x0572                   ; sprite FlipX, PucRt + xf, px, py

_elseif_0x050c                LDWI                              -1
                              XORW                              _pxd
                              BNE                               _elseif_0x0533                  ; elseif pxd &&= -1

                              LDI                               40
                              ADDW                              _xf
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                        
                              BRA                               _endif_0x0572                   ; sprite NoFlip, PucLt + xf, px, py

_elseif_0x0533                LDW                               _pyd
                              XORI                              1
                              BNE                               _else_0x0559                    ; elseif pyd &&= 1

                              LDI                               36
                              ADDW                              _yf
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSpriteY                       
                              BRA                               _endif_0x0572                   ; sprite FlipY, PucDn + yf, px, py

_else_0x0559                  LDI                               32
                              ADDW                              _yf
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, PucUp + yf, px, py

_endif_0x0572                 LDW                               _px
                              ADDW                              _pxd
                              STW                               _px                             ; px = px + pxd

                              LDW                               _py
                              ADDW                              _pyd
                              STW                               _py                             ; py = py + pyd

                              Return                                                            ; return

_drawGhosts                   PUSH                              
                              LDI                               0
                              STW                               0xde
                              LDWI                              _page_0x0500
                              CALL                              giga_vAC
_page_0x0500                  LDW                               0xde
                              STW                               _gidx                           ; for gidx=0 to NUM_GHOSTS-1

_next_0x0589                  LDWI                              _getGhostVars
                              CALL                              giga_vAC                        ; gosub getGhostVars

                              LDW                               _dead
                              XORI                              1
                              JumpEQ                            _endif_0x05b6 14                ; if dead &= 1

                              LDI                               63
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Erase, gx, gy

                              LDWI                              _drawNextGhost
                              CALL                              giga_vAC                        ; goto drawNextGhost

_endif_0x05b6                 LDW                               _gx
                              STW                               mathShift
                              ShiftRight2bit                    
                              ANDI                              1
                              STW                               _xf                             ; xf = (gx LSR 2) AND 1

                              LDW                               _gy
                              STW                               mathShift
                              ShiftRight2bit                    
                              ANDI                              1
                              STW                               _yf                             ; yf = (gy LSR 2) AND 1

                              LDW                               _flags
                              XORI                              1
                              JumpEQ                            _elseif_0x05f6 15               ; if flags &= 1

                              LDWI                              _drawEyesGhost
                              CALL                              giga_vAC
                              LDWI                              _drawNextGhost
                              CALL                              giga_vAC                        ; gosub drawEyesGhost

_elseif_0x05f6                LDW                               _gmode
                              XORI                              1
                              JumpEQ                            _else_0x0643 20                 ; elseif gmode &= SCARED_MODE

                              LDW                               _time
                              SUBI                              8
                              BGE                               _else_0x0618                    ; if time &&< 8

                              LDWI                              _drawScaredGhost
                              CALL                              giga_vAC
                              BRA                               _endif_0x063e                   ; gosub drawScaredGhost

_else_0x0618                  LDW                               _frame
                              STW                               mathShift
                              ShiftRight3bit                    
                              ANDI                              1
                              BEQ                               _else_0x0639                    ; if &((frame >>3) AND 1)

                              LDWI                              _drawNormalGhost
                              CALL                              giga_vAC
                              BRA                               _endif_0x063e                   ; gosub drawNormalGhost

_else_0x0639                  LDWI                              _drawScaredGhost
                              CALL                              giga_vAC                        ; gosub drawScaredGhost

_endif_0x063e                 LDWI                              _drawNextGhost
                              CALL                              giga_vAC                        ; endif

_else_0x0643                  LDWI                              _drawNormalGhost
                              CALL                              giga_vAC                        ; gosub drawNormalGhost

_drawNextGhost                ForNextFarInc                     _gidx _next_0x0589 3            ; next gidx

                              Return                                                            ; return

_drawNormalGhost              PUSH                              
                              LDW                               _gidx
                              LSLW                              
                              LSLW                              
                              STW                               _i                              ; i = gidx <<2

                              LDW                               _gxd
                              XORI                              1
                              JumpEQ                            _elseif_0x069b 22               ; if gxd &= 1

                              LDWI                              21177
                              ADDW                              _i
                              PEEK                              
                              ADDW                              _xf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSpriteX                       
                              LDWI                              _endif_0x0735
                              CALL                              giga_vAC                        ; sprite FlipX,  peek(@gframes + 0 + i) + xf, gx, gy

_elseif_0x069b                LDWI                              -1
                              XORW                              _gxd
                              JumpEQ                            _elseif_0x06d6 23               ; elseif gxd &= -1

                              LDWI                              21178
                              ADDW                              _i
                              PEEK                              
                              ADDW                              _xf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              STW                               0xde
                              LDWI                              _page_0x0600
                              CALL                              giga_vAC
_page_0x0600                  LDW                               0xde
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                        
                              LDWI                              _endif_0x0735
                              CALL                              giga_vAC                        ; sprite NoFlip, peek(@gframes + 1 + i) + xf, gx, gy

_elseif_0x06d6                LDW                               _gyd
                              XORI                              1
                              JumpEQ                            _else_0x0710 24                 ; elseif gyd &= 1

                              LDWI                              21179
                              ADDW                              _i
                              PEEK                              
                              ADDW                              _yf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                        
                              LDWI                              _endif_0x0735
                              CALL                              giga_vAC                        ; sprite NoFlip, peek(@gframes + 2 + i) + yf, gx, gy

_else_0x0710                  LDWI                              21180
                              ADDW                              _i
                              PEEK                              
                              ADDW                              _yf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, peek(@gframes + 3 + i) + yf, gx, gy

_endif_0x0735                 Return                                                            ; return

_drawScaredGhost              PUSH                              
                              LDW                               _gxd
                              XORI                              1
                              JumpEQ                            _elseif_0x0766 26               ; if gxd &= 1

                              STW                               0xde
                              LDWI                              _page_0x08a0
                              CALL                              giga_vAC
_page_0x08a0                  LDW                               0xde
                              LDI                               54
                              ADDW                              _xf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSpriteX                       
                              LDWI                              _endif_0x07dc
                              CALL                              giga_vAC                        ; sprite FlipX,  ScaredRt + xf, gx, gy

_elseif_0x0766                LDWI                              -1
                              XORW                              _gxd
                              JumpEQ                            _elseif_0x0795 27               ; elseif gxd &= -1

                              LDI                               52
                              ADDW                              _xf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                        
                              LDWI                              _endif_0x07dc
                              CALL                              giga_vAC                        ; sprite NoFlip, ScaredLt + xf, gx, gy

_elseif_0x0795                LDW                               _gyd
                              XORI                              1
                              JumpEQ                            _else_0x07c3 28                 ; elseif gyd &= 1

                              LDI                               50
                              ADDW                              _yf
                              STW                               spriteId
                              LDW                               _gx
                              STW                               0xde
                              LDWI                              _page_0x09a0
                              CALL                              giga_vAC
_page_0x09a0                  LDW                               0xde
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                        
                              LDWI                              _endif_0x07dc
                              CALL                              giga_vAC                        ; sprite NoFlip, ScaredDn + yf, gx, gy

_else_0x07c3                  LDI                               48
                              ADDW                              _yf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, ScaredUp + yf, gx, gy

_endif_0x07dc                 Return                                                            ; return

_drawEyesGhost                PUSH                              
                              LDW                               _gxd
                              XORI                              1
                              JumpEQ                            _elseif_0x0813 30               ; if gxd &= 1

                              LDI                               59
                              STW                               spriteId
                              LDW                               _gx
                              ADDI                              2
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              11
                              ST                                spriteXY + 1
                              DrawSpriteX                       
                              LDWI                              _endif_0x089b
                              CALL                              giga_vAC                        ; sprite FlipX,  EyesRt, gx+2, gy+3

_elseif_0x0813                LDWI                              -1
                              XORW                              _gxd
                              STW                               0xde
                              LDWI                              _page_0x0aa0
                              CALL                              giga_vAC
_page_0x0aa0                  LDW                               0xde
                              JumpEQ                            _elseif_0x0848 31               ; elseif gxd &= -1

                              LDI                               58
                              STW                               spriteId
                              LDW                               _gx
                              ADDI                              2
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              11
                              ST                                spriteXY + 1
                              DrawSprite                        
                              LDWI                              _endif_0x089b
                              CALL                              giga_vAC                        ; sprite NoFlip, EyesLt, gx+2, gy+3

_elseif_0x0848                LDW                               _gyd
                              XORI                              1
                              JumpEQ                            _else_0x087c 32                 ; elseif gyd &= 1

                              LDI                               57
                              STW                               spriteId
                              LDW                               _gx
                              ADDI                              2
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              11
                              ST                                spriteXY + 1
                              DrawSprite                        
                              LDWI                              _endif_0x089b
                              CALL                              giga_vAC                        ; sprite NoFlip, EyesDn, gx+2, gy+3

_else_0x087c                  LDI                               56
                              STW                               spriteId
                              LDW                               _gx
                              ADDI                              2
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              11
                              STW                               0xde
                              LDWI                              _page_0x0ba0
                              CALL                              giga_vAC
_page_0x0ba0                  LDW                               0xde
                              ST                                spriteXY + 1
                              DrawSpriteY                                                       ; sprite FlipY,  EyesUp, gx+2, gy+3

_endif_0x089b                 Return                                                            ; return

_drawPills                    PUSH                              
                              LDW                               _frame
                              ANDI                              7
                              STW                               _i                              ; i = frame AND 7

                              LDW                               _i
                              XORI                              0
                              JumpEQ                            _endif_0x0980 38                ; if i &= 0

                              LDW                               _frame
                              STW                               mathShift
                              ShiftRight3bit                    
                              ANDI                              1
                              STW                               _i                              ; i = (frame >>3) AND 1

                              LDWI                              0x6fae
                              PEEK                              
                              XORI                              2
                              BNE                               _else_0x08f3
                              LDI                               61
                              ADDW                              _i
                              STW                               spriteId
                              LDI                               5
                              ST                                spriteXY
                              LDI                               9
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; if peek(PILL_LT) &&= PILL then sprite NoFlip, Pill + i, (1*5)  + (ORIGIN_X-2), (2*5)  + (ORIGIN_Y - 3)

_else_0x08f3                  LDWI                              0x6fc7
                              PEEK                              
                              XORI                              2
                              JumpEQ                            _else_0x0922 35
                              STW                               0xde
                              LDWI                              _page_0x0ca0
                              CALL                              giga_vAC
_page_0x0ca0                  LDW                               0xde
                              LDI                               61
                              ADDW                              _i
                              STW                               spriteId
                              LDI                               130
                              ST                                spriteXY
                              LDI                               9
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; if peek(PILL_RT) &= PILL then sprite NoFlip, Pill + i, (26*5) + (ORIGIN_X-2), (2*5)  + (ORIGIN_Y - 3)

_else_0x0922                  LDWI                              0x5fae
                              PEEK                              
                              XORI                              2
                              JumpEQ                            _else_0x0951 36
                              LDI                               61
                              ADDW                              _i
                              STW                               spriteId
                              LDI                               5
                              ST                                spriteXY
                              LDI                               89
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; if peek(PILL_LB) &= PILL then sprite NoFlip, Pill + i, (1*5)  + (ORIGIN_X-2), (18*5) + (ORIGIN_Y - 3)

_else_0x0951                  LDWI                              0x5fc7
                              PEEK                              
                              XORI                              2
                              JumpEQ                            _endif_0x0980 37
                              LDI                               61
                              ADDW                              _i
                              STW                               spriteId
                              LDI                               130
                              ST                                spriteXY
                              LDI                               89
                              ADDI                              8
                              ST                                spriteXY + 1
                              STW                               0xde
                              LDWI                              _page_0x0da0
                              CALL                              giga_vAC
_page_0x0da0                  LDW                               0xde
                              DrawSprite                                                        ; if peek(PILL_RB) &= PILL then sprite NoFlip, Pill + i, (26*5) + (ORIGIN_X-2), (18*5) + (ORIGIN_Y - 3)

_endif_0x0980                 Return                                                            ; return

_movePucMon                   PUSH                              
                              LDWI                              _coordsPucMon
                              CALL                              giga_vAC                        ; gosub coordsPucMon

                              LDW                               _ci
                              SUBW                              _pxd
                              STW                               _puci                           ; puci = ci - pxd

                              LDW                               _cj
                              SUBW                              _pyd
                              STW                               _pucj                           ; pucj = cj - pyd

                              LDW                               _cj
                              STW                               memIndex0
                              LDW                               _ci
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              STW                               _mz                             ; mz = maze(cj, ci)

                              LDW                               _mz
                              ANDI                              15
                              XORI                              1
                              JumpEQ                            _elseif_0x09f1 39               ; if (mz AND &h0F) &= DOT

                              LDW                               _mz
                              ANDI                              240
                              STW                               memValue
                              LDW                               _cj
                              STW                               memIndex0
                              LDW                               _ci
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              LDW                               memValue
                              POKE                              memAddr                         ; maze(cj, ci) = mz AND &hF0

                              LDWI                              27046
                              STW                               bcdDstAddr
                              LDI                               10
                              STW                               0xde
                              LDWI                              _page_0x0ea0
                              CALL                              giga_vAC
_page_0x0ea0                  LDW                               0xde
                              STW                               bcdValue
                              BcdInt                                                            ; bcdint @pointsBCD, 10

                              LDWI                              _drawScore
                              CALL                              giga_vAC
                              LDWI                              _endif_0x0a8a
                              CALL                              giga_vAC                        ; gosub drawScore

_elseif_0x09f1                LDW                               _mz
                              XORI                              2
                              JumpEQ                            _elseif_0x0a3e 40               ; elseif mz &= PILL

                              LDW                               _mz
                              ANDI                              240
                              STW                               memValue
                              LDW                               _cj
                              STW                               memIndex0
                              LDW                               _ci
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              LDW                               memValue
                              POKE                              memAddr                         ; maze(cj, ci) = mz AND &hF0

                              LDI                               1
                              STW                               _gmode                          ; gmode = SCARED_MODE

                              LDI                               0
                              STW                               _time                           ; time = 0

                              LDI                               0
                              STW                               _frame                          ; frame = 0

                              LDWI                              27046
                              STW                               bcdDstAddr
                              LDI                               50
                              STW                               bcdValue
                              BcdInt                                                            ; bcdint @pointsBCD, 50

                              LDWI                              _drawScore
                              CALL                              giga_vAC
                              LDWI                              _endif_0x0a8a
                              STW                               0xde
                              LDWI                              _page_0x0fa0
                              CALL                              giga_vAC
_page_0x0fa0                  LDW                               0xde
                              CALL                              giga_vAC                        ; gosub drawScore

_elseif_0x0a3e                LDW                               _mz
                              SUBI                              224
                              JumpGE                            _elseif_0x0a72 41               ; elseif mz &>= DOOR

                              LDW                               _oxd
                              STW                               _pxd
                              LDW                               _oyd
                              STW                               _pyd                            ; pxd = oxd : pyd = oyd

                              LDWI                              _coordsPucMon
                              CALL                              giga_vAC                        ; gosub coordsPucMon

                              LDW                               _cj
                              STW                               memIndex0
                              LDW                               _ci
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              STW                               _mz
                              LDWI                              _endif_0x0a8a
                              CALL                              giga_vAC                        ; mz = maze(cj, ci)

_elseif_0x0a72                LDW                               _mz
                              XORI                              160
                              JumpEQ                            _endif_0x0a8a 42                ; elseif mz &= TUNNEL

                              LDI                               133
                              SUBW                              _px
                              STW                               _px                             ; px = (131+ORIGIN_X) - px

_endif_0x0a8a                 Return                                                            ; return

_moveGhosts                   PUSH                              
                              LDI                               0
                              STW                               _gidx                           ; for gidx=0 to NUM_GHOSTS-1

_next_0x0a91                  LDWI                              _getGhostVars
                              CALL                              giga_vAC                        ; gosub getGhostVars

                              LDI                               0
                              STW                               _slowed                         ; slowed = 0

                              LDW                               _gmode
                              XORI                              1
                              STW                               0xde
                              LDWI                              _page_0x10a0
                              CALL                              giga_vAC
_page_0x10a0                  LDW                               0xde
                              JumpEQ                            _endif_0x0adc 45                ; if gmode &= SCARED_MODE

                              LDW                               _frame
                              ANDI                              1
                              XORI                              0
                              JumpEQ                            _endif_0x0adc 44                ; if (frame AND 1) &= 0

                              LDW                               _flags
                              XORI                              1
                              JumpNE                            _endif_0x0adc 43                ; if flags &<> 1

                              LDI                               1
                              STW                               _slowed                         ; slowed = 1

                              LDI                               0
                              STW                               _gxd
                              STW                               _gyd                            ; gxd = 0 : gyd = gxd

_endif_0x0adc                 LDW                               _gx
                              ADDW                              _gxd
                              STW                               _gx                             ; gx = gx + gxd

                              LDW                               _gy
                              ADDW                              _gyd
                              STW                               _gy                             ; gy = gy + gyd

                              LDW                               _flags
                              XORI                              0
                              JumpEQ                            _endif_0x0b9c 50                ; if flags &= 0

                              LDW                               _gx
                              SUBW                              _px
                              Absolute                          
                              SUBI                              3
                              STW                               0xde
                              LDWI                              _page_0x11a0
                              CALL                              giga_vAC
_page_0x11a0                  LDW                               0xde
                              JumpLE                            _endif_0x0b9c 49                ; if abs(gx - px) &<= 3

                              LDW                               _gy
                              SUBW                              _py
                              Absolute                          
                              SUBI                              3
                              JumpLE                            _endif_0x0b9c 48                ; if abs(gy - py) &<= 3

                              LDI                               63
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Erase, gx, gy

                              LDW                               _gmode
                              XORI                              1
                              JumpEQ                            _else_0x0b98 46                 ; if gmode &= SCARED_MODE

                              LDI                               1
                              STW                               _flags
                              STW                               memValue
                              LDWI                              0x7da0
                              ADDW                              _gidx
                              STW                               memAddr
                              LDW                               memValue
                              POKE                              memAddr                         ; flags = 1 : ghostsFlags(gidx) = flags

                              LDWI                              27046
                              STW                               bcdDstAddr
                              LDW                               _bonus
                              STW                               bcdValue
                              STW                               0xde
                              LDWI                              _page_0x12a0
                              CALL                              giga_vAC
_page_0x12a0                  LDW                               0xde
                              BcdInt                            
                              LDW                               _bonus
                              ADDW                              _bonus
                              STW                               _bonus                          ; bcdint @pointsBCD, bonus : bonus = bonus + bonus

                              LDWI                              _drawScore
                              CALL                              giga_vAC
                              LDWI                              _endif_0x0b9c
                              CALL                              giga_vAC                        ; gosub drawScore

_else_0x0b98                  LDI                               1
                              STW                               _dead                           ; dead = 1

_endif_0x0b9c                 LDW                               _gmode
                              XORI                              1
                              JumpEQ                            _endif_0x0bdc 53                ; if gmode &= SCARED_MODE

                              LDW                               _time
                              XORI                              0
                              JumpEQ                            _endif_0x0bdc 52                ; if time &= 0

                              LDW                               _frame
                              XORI                              1
                              JumpEQ                            _endif_0x0bdc 51                ; if frame &= 1

                              LDI                               0
                              SUBW                              _gxd
                              STW                               _gxd
                              LDI                               0
                              SUBW                              _gyd
                              STW                               _gyd                            ; gxd = -gxd : gyd = -gyd

_endif_0x0bdc                 LDW                               _gx
                              STW                               _mx
                              LDW                               _gy
                              STW                               _my
                              LDWI                              _mod5
                              CALL                              giga_vAC                        ; mx = gx : my = gy : gosub mod5

                              STW                               0xde
                              LDWI                              _page_0x13a0
                              CALL                              giga_vAC
_page_0x13a0                  LDW                               0xde
                              LDW                               _mx
                              XORI                              3
                              JumpNE                            _else_0x0bfe 54
                              LDWI                              _nextGhost
                              CALL                              giga_vAC                        ; if mx &<> 3 then goto nextGhost

_else_0x0bfe                  LDW                               _my
                              XORI                              3
                              JumpNE                            _else_0x0c13 55
                              LDWI                              _nextGhost
                              CALL                              giga_vAC                        ; if my &<> 3 then goto nextGhost

_else_0x0c13                  LDW                               _gx
                              ADDW                              _gxd
                              ADDW                              _gxd
                              ADDW                              _gxd
                              ADDI                              4
                              STW                               _ci                             ; ci = gx + gxd + gxd + gxd + -(ORIGIN_X-6)

                              LDW                               _gy
                              ADDW                              _gyd
                              ADDW                              _gyd
                              ADDW                              _gyd
                              ADDI                              4
                              STW                               _cj                             ; cj = gy + gyd + gyd + gyd +  (ORIGIN_Y+2)

                              LDWI                              _div5
                              CALL                              giga_vAC                        ; gosub div5

                              LDW                               _ci
                              SUBW                              _gxd
                              SUBW                              _gxd
                              STW                               _di                             ; di = ci - gxd - gxd

                              LDW                               _cj
                              SUBW                              _gyd
                              SUBW                              _gyd
                              STW                               _dj                             ; dj = cj - gyd - gyd

                              LDW                               _ci
                              SUBW                              _gxd
                              STW                               _gi                             ; gi = ci - gxd

                              STW                               0xde
                              LDWI                              _page_0x14a0
                              CALL                              giga_vAC
_page_0x14a0                  LDW                               0xde
                              LDW                               _cj
                              SUBW                              _gyd
                              STW                               _gj                             ; gj = cj - gyd

                              LDW                               _dj
                              STW                               memIndex0
                              LDW                               _di
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              STW                               _mz                             ; mz = maze(dj, di)

                              LDW                               _slowed
                              XORI                              0
                              JumpEQ                            _else_0x0c9f 56
                              LDWI                              _replaceDot
                              CALL                              giga_vAC                        ; if slowed &= 0 then gosub replaceDot

_else_0x0c9f                  LDW                               _gj
                              STW                               memIndex0
                              LDW                               _gi
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              XORI                              192
                              JumpEQ                            _endif_0x0ce8 59                ; if maze(gj, gi) &= EXIT

                              LDW                               _flags
                              XORI                              0
                              JumpEQ                            _endif_0x0ce8 58                ; if flags &= 0

                              LDW                               _gmode
                              XORI                              1
                              STW                               0xde
                              LDWI                              _page_0x15a0
                              CALL                              giga_vAC
_page_0x15a0                  LDW                               0xde
                              JumpNE                            _endif_0x0ce8 57                ; if gmode &<> SCARED_MODE

                              LDI                               0
                              STW                               _gxd
                              LDWI                              -1
                              STW                               _gyd                            ; gxd = 0 : gyd = -1

_endif_0x0ce8                 LDW                               _gidx
                              STW                               register0
                              ADDW                              register0
                              STW                               register0
                              LDWI                              lut_0x68a5
                              ADDW                              register0
                              DEEK                              
                              CALL                              giga_vAC                        ; on gidx gosub getBlinkyTarget, getPinkyTarget, getInkyTarget, getClydeTarget

                              LDW                               _gi
                              XORI                              13
                              JumpEQ                            _endif_0x0d2f 61                ; if gi &= 13

                              LDW                               _gj
                              XORI                              10
                              JumpEQ                            _endif_0x0d2f 60                ; if gj &= 10

                              LDI                               0
                              STW                               _flags
                              STW                               memValue
                              LDWI                              0x7da0
                              ADDW                              _gidx
                              STW                               memAddr
                              LDW                               memValue
                              POKE                              memAddr                         ; flags = 0 : ghostsFlags(gidx) = flags

_endif_0x0d2f                 LDW                               _flags
                              XORI                              1
                              JumpEQ                            _endif_0x0d47 62                ; if flags &= 1

                              STW                               0xde
                              LDWI                              _page_0x16a0
                              CALL                              giga_vAC
_page_0x16a0                  LDW                               0xde
                              LDI                               12
                              STW                               _ti
                              LDI                               11
                              STW                               _tj                             ; ti = 12 : tj = 11

_endif_0x0d47                 LDW                               _cj
                              STW                               memIndex0
                              LDW                               _ci
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              STW                               _mz                             ; mz = maze(cj, ci)

                              LDW                               _mz
                              XORI                              240
                              JumpEQ                            _elseif_0x0d78 63               ; if mz &= WALL

                              LDWI                              _getWallDir
                              CALL                              giga_vAC                        ; gosub getWallDir

                              LDWI                              _getGhostDir
                              CALL                              giga_vAC
                              LDWI                              _nextGhost
                              CALL                              giga_vAC                        ; gosub getGhostDir

_elseif_0x0d78                LDW                               _mz
                              XORI                              160
                              JumpEQ                            _else_0x0d95 64                 ; elseif mz &= TUNNEL

                              LDI                               133
                              SUBW                              _gx
                              STW                               _gx
                              LDWI                              _nextGhost
                              CALL                              giga_vAC                        ; gx = (131+ORIGIN_X) - gx

_else_0x0d95                  LDW                               _gj
                              STW                               memIndex0
                              LDW                               _gi
                              STW                               memIndex1
                              LDWI                              0x34d0
                              STW                               0xde
                              LDWI                              _page_0x17a0
                              CALL                              giga_vAC
_page_0x17a0                  LDW                               0xde
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              ANDI                              240
                              STW                               _mz                             ; mz = maze(gj, gi) AND &hF0

                              LDW                               _mz
                              XORI                              208
                              CALL                              convertEqOpAddr
                              STW                               0xc0
                              LDW                               _mz
                              XORI                              224
                              CALL                              convertEqOpAddr
                              STW                               0xc2
                              LDW                               _mz
                              XORI                              176
                              CALL                              convertEqOpAddr
                              ORW                               0xc2
                              STW                               0xc4
                              LDW                               _flags
                              XORI                              1
                              CALL                              convertEqOpAddr
                              ANDW                              0xc4
                              ORW                               0xc0
                              JumpFalse                         _nextGhost 65                   ; if (mz = JUNC) OR (((mz = DOOR) OR (mz = ENTER)) AND (flags = 1))

                              LDWI                              _getJuncDir
                              CALL                              giga_vAC                        ; gosub getJuncDir

                              LDWI                              _getGhostDir
                              CALL                              giga_vAC                        ; gosub getGhostDir

_nextGhost                    LDW                               _slowed
                              XORI                              0
                              JumpEQ                            _endif_0x0e08 67                ; if slowed &= 0

                              LDWI                              _setGhostVars
                              CALL                              giga_vAC                        ; gosub setGhostVars

                              STW                               0xde
                              LDWI                              _page_0x18a0
                              CALL                              giga_vAC
_page_0x18a0                  LDW                               0xde
_endif_0x0e08                 ForNextFarInc                     _gidx _next_0x0a91 3            ; next gidx

                              Return                                                            ; return

_getGhostVars                 PUSH                              
                              LDWI                              0x6ea5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              PEEK                              
                              STW                               _gx
                              LDWI                              0x6da5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              PEEK                              
                              STW                               _gy                             ; gx = ghostsX(gidx).lo : gy = ghostsY(gidx).lo

                              LDWI                              0x6ca5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              DEEK                              
                              STW                               _gxd
                              LDWI                              0x6ba5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              DEEK                              
                              STW                               _gyd                            ; gxd = ghostsXd(gidx)  : gyd = ghostsYd(gidx)

                              LDWI                              0x7da0
                              ADDW                              _gidx
                              PEEK                              
                              STW                               _flags                          ; flags = ghostsFlags(gidx)

                              Return                                                            ; return

_setGhostVars                 PUSH                              
                              LDWI                              0x6ea5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              STW                               memAddr
                              LDW                               _gx
                              DOKE                              memAddr
                              LDWI                              0x6da5
                              ADDW                              _gidx
                              STW                               0xde
                              LDWI                              _page_0x19a0
                              CALL                              giga_vAC
_page_0x19a0                  LDW                               0xde
                              ADDW                              _gidx
                              STW                               memAddr
                              LDW                               _gy
                              DOKE                              memAddr                         ; ghostsX(gidx) = gx : ghostsY(gidx) = gy

                              LDWI                              0x6ca5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              STW                               memAddr
                              LDW                               _gxd
                              DOKE                              memAddr
                              LDWI                              0x6ba5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              STW                               memAddr
                              LDW                               _gyd
                              DOKE                              memAddr                         ; ghostsXd(gidx) = gxd : ghostsYd(gidx) = gyd

                              Return                                                            ; return

_getGhostDir                  PUSH                              
                              LDW                               _i
                              LSLW                              
                              LSLW                              
                              STW                               _i                              ; i = i <<2

                              LDWI                              21415
                              ADDW                              _i
                              DEEK                              
                              STW                               _gxd                            ; gxd = deek(@GHOST_DIRS + i + 0)

                              LDWI                              21415
                              ADDW                              _i
                              ADDI                              2
                              DEEK                              
                              STW                               _gyd                            ; gyd = deek(@GHOST_DIRS + i + 2)

                              Return                                                            ; return

_setGhostsMode                PUSH                              
                              LDW                               _frame
                              ANDI                              31
                              JumpFalse                         _else_0x0f06 68
                              Return                                                            ; if (frame AND &h1F) then return

_else_0x0f06                  INC                               _time                           ; inc time

                              LDW                               _gmode
                              XORI                              1
                              STW                               0xde
                              LDWI                              _page_0x1aa0
                              CALL                              giga_vAC
_page_0x1aa0                  LDW                               0xde
                              JumpEQ                            _endif_0x0f36 70                ; if gmode &= SCARED_MODE

                              LDW                               _time
                              SUBI                              10
                              JumpGT                            _endif_0x0f34 69                ; if time &> 10

                              LDI                               0
                              STW                               _time                           ; time = 0

                              LDI                               200
                              STW                               _bonus                          ; bonus = 200

                              LDI                               0
                              STW                               _gmode                          ; gmode = CHASE_MODE

_endif_0x0f34                 Return                                                            ; return

_endif_0x0f36                 LDW                               _time
                              SUBI                              30
                              JumpGT                            _endif_0x0f50 71                ; if time &> 30

                              LDI                               0
                              STW                               _time                           ; time = 0

                              LDI                               0
                              STW                               _gmode                          ; gmode = CHASE_MODE

                              Return                                                            ; return

_endif_0x0f50                 LDW                               _time
                              SUBI                              20
                              JumpGT                            _endif_0x0f64 72                ; if time &> 20

                              LDI                               2
                              STW                               _gmode                          ; gmode = SCATTER_MODE

_endif_0x0f64                 Return                                                            ; return

_getBlinkyTarget              PUSH                              
                              LDW                               _gi
                              STW                               _bi
                              LDW                               _gj
                              STW                               _bj                             ; bi = gi : bj = gj

                              LDW                               _gmode
                              STW                               0xde
                              LDWI                              _page_0x1ba0
                              CALL                              giga_vAC
_page_0x1ba0                  LDW                               0xde
                              XORI                              0
                              JumpEQ                            _endif_0x0f89 73                ; if gmode &= CHASE_MODE

                              LDW                               _puci
                              STW                               _ti
                              LDW                               _pucj
                              STW                               _tj                             ; ti = puci : tj = pucj

                              Return                                                            ; return

_endif_0x0f89                 LDI                               27
                              STW                               _ti
                              LDI                               0
                              STW                               _tj                             ; ti = 27 : tj = 0

                              Return                                                            ; return

_getPinkyTarget               PUSH                              
                              LDW                               _gmode
                              XORI                              0
                              JumpEQ                            _endif_0x0fda 74                ; if gmode &= CHASE_MODE

                              LDW                               _puci
                              ADDW                              _pxd
                              ADDW                              _pxd
                              ADDW                              _pxd
                              ADDW                              _pxd
                              STW                               _ti                             ; ti = puci + pxd + pxd + pxd + pxd

                              LDW                               _pucj
                              ADDW                              _pyd
                              ADDW                              _pyd
                              ADDW                              _pyd
                              ADDW                              _pyd
                              STW                               _tj                             ; tj = pucj + pyd + pyd + pyd + pyd

                              Return                                                            ; return

_endif_0x0fda                 LDI                               0
                              STW                               _ti
                              LDI                               0
                              STW                               _tj                             ; ti = 0 : tj = 0

                              Return                                                            ; return

_getInkyTarget                PUSH                              
                              LDW                               _gmode
                              XORI                              0
                              STW                               0xde
                              LDWI                              _page_0x1ca0
                              CALL                              giga_vAC
_page_0x1ca0                  LDW                               0xde
                              JumpEQ                            _endif_0x1033 75                ; if gmode &= CHASE_MODE

                              LDW                               _puci
                              ADDW                              _pxd
                              ADDW                              _pxd
                              STW                               _ti                             ; ti = puci + pxd + pxd

                              LDW                               _pucj
                              ADDW                              _pyd
                              ADDW                              _pyd
                              STW                               _tj                             ; tj = pucj + pyd + pyd

                              LDW                               _ti
                              SUBW                              _bi
                              STW                               _zi
                              LDW                               _tj
                              SUBW                              _bj
                              STW                               _zj                             ; zi = ti - bi : zj = tj - bj 'vector from Blinky to (Puc + 2)

                              LDW                               _ti
                              ADDW                              _zi
                              STW                               _ti                             ; ti = ti + zi

                              LDW                               _tj
                              ADDW                              _zj
                              STW                               _tj                             ; tj = tj + zj

                              Return                                                            ; return

_endif_0x1033                 LDI                               27
                              STW                               _ti
                              LDI                               23
                              STW                               _tj                             ; ti = 27 : tj = 23

                              Return                                                            ; return

_getClydeTarget               PUSH                              
                              LDW                               _gmode
                              XORI                              0
                              JumpEQ                            _endif_0x1094 77                ; if gmode &= CHASE_MODE

                              LDW                               _puci
                              SUBW                              _gi
                              STW                               _zi
                              LDW                               _pucj
                              SUBW                              _gj
                              STW                               _zj                             ; zi = puci - gi : zj = pucj - gj

                              STW                               0xde
                              LDWI                              _page_0x1da0
                              CALL                              giga_vAC
_page_0x1da0                  LDW                               0xde
                              LDW                               _zi
                              Absolute                          
                              STW                               0xc0
                              LDW                               _zj
                              Absolute                          
                              ADDW                              0xc0
                              SUBI                              8
                              JumpGT                            _endif_0x1094 76                ; if abs(zi) + abs(zj) &> 8 'taxi-cab distance

                              LDW                               _puci
                              STW                               _ti
                              LDW                               _pucj
                              STW                               _tj                             ; ti = puci : tj = pucj

                              Return                                                            ; return

_endif_0x1094                 LDI                               0
                              STW                               _ti
                              LDI                               23
                              STW                               _tj                             ; ti = 0 : tj = 23

                              Return                                                            ; return

_getJuncDir                   PUSH                              
                              LDW                               _ti
                              SUBW                              _gi
                              Absolute                          
                              STW                               _zi
                              LDW                               _tj
                              SUBW                              _gj
                              Absolute                          
                              STW                               _zj                             ; zi = abs(ti - gi) : zj = abs(tj - gj)

                              LDW                               _gxd
                              STW                               0xde
                              LDWI                              _page_0x1ea0
                              CALL                              giga_vAC
_page_0x1ea0                  LDW                               0xde
                              JumpFalse                         _else_0x1156 83                 ; if (gxd)

                              LDW                               _zj
                              JumpFalse                         _endif_0x1151 82                ; if (zj)

                              LDW                               _gj
                              SUBI                              1
                              STW                               memIndex0
                              LDW                               _gi
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              XORI                              240
                              JumpNE                            _endif_0x1115 79                ; if maze(gj - 1, gi) &<> WALL

                              LDI                               3
                              STW                               _i
                              LDW                               _tj
                              SUBW                              _gj
                              JumpLT                            _endif_0x1115 78
                              Return                                                            ; i = 3 : if tj &< gj then return

_endif_0x1115                 LDW                               _gj
                              ADDI                              1
                              STW                               memIndex0
                              LDW                               _gi
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              XORI                              240
                              STW                               0xde
                              LDWI                              _page_0x1fa0
                              CALL                              giga_vAC
_page_0x1fa0                  LDW                               0xde
                              JumpNE                            _endif_0x1151 81                ; if maze(gj + 1, gi) &<> WALL

                              LDI                               1
                              STW                               _i
                              LDW                               _tj
                              SUBW                              _gj
                              JumpGT                            _endif_0x1151 80
                              Return                                                            ; i = 1 : if tj &> gj then return

_endif_0x1151                 LDWI                              _endif_0x11d8
                              CALL                              giga_vAC                        ; endif

_else_0x1156                  LDW                               _zi
                              JumpFalse                         _endif_0x11d8 88                ; if (zi)

                              LDW                               _gi
                              SUBI                              1
                              STW                               0xc0
                              LDW                               _gj
                              STW                               memIndex0
                              LDW                               0xc0
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              XORI                              240
                              JumpNE                            _endif_0x119c 85                ; if maze(gj, gi - 1) &<> WALL

                              LDI                               2
                              STW                               _i
                              LDW                               _ti
                              SUBW                              _gi
                              STW                               0xde
                              LDWI                              _page_0x20a0
                              CALL                              giga_vAC
_page_0x20a0                  LDW                               0xde
                              JumpLT                            _endif_0x119c 84
                              Return                                                            ; i = 2 : if ti &< gi then return

_endif_0x119c                 LDW                               _gi
                              ADDI                              1
                              STW                               0xc0
                              LDW                               _gj
                              STW                               memIndex0
                              LDW                               0xc0
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              XORI                              240
                              JumpNE                            _endif_0x11d8 87                ; if maze(gj, gi + 1) &<> WALL

                              LDI                               0
                              STW                               _i
                              LDW                               _ti
                              SUBW                              _gi
                              JumpGT                            _endif_0x11d8 86
                              Return                                                            ; i = 0 : if ti &> gi then return

_endif_0x11d8                 LDW                               _gxd
                              XORI                              1
                              JumpEQ                            _elseif_0x11f1 90               ; if gxd &= 1

                              LDI                               0
                              STW                               _i
                              LDWI                              _endif_0x1228
                              CALL                              giga_vAC                        ; i = 0

_elseif_0x11f1                LDWI                              -1
                              XORW                              _gxd
                              STW                               0xde
                              LDWI                              _page_0x21a0
                              CALL                              giga_vAC
_page_0x21a0                  LDW                               0xde
                              JumpEQ                            _elseif_0x120b 91               ; elseif gxd &= -1

                              LDI                               2
                              STW                               _i
                              LDWI                              _endif_0x1228
                              CALL                              giga_vAC                        ; i = 2

_elseif_0x120b                LDW                               _gyd
                              XORI                              1
                              JumpEQ                            _else_0x1224 92                 ; elseif gyd &= 1

                              LDI                               1
                              STW                               _i
                              LDWI                              _endif_0x1228
                              CALL                              giga_vAC                        ; i = 1

_else_0x1224                  LDI                               3
                              STW                               _i                              ; i = 3

_endif_0x1228                 Return                                                            ; return

_getWallDir                   PUSH                              
                              LDW                               _gxd
                              JumpFalse                         _else_0x12a0 97                 ; if (gxd)

                              LDW                               _gj
                              SUBI                              1
                              STW                               memIndex0
                              LDW                               _gi
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              XORI                              240
                              JumpNE                            _endif_0x1271 95                ; if maze(gj - 1, gi) &<> WALL

                              LDI                               3
                              STW                               _i
                              STW                               0xde
                              LDWI                              _page_0x22a0
                              CALL                              giga_vAC
_page_0x22a0                  LDW                               0xde
                              LDW                               _tj
                              SUBW                              _gj
                              JumpLT                            _endif_0x1271 94
                              Return                                                            ; i = 3 : if tj &< gj then return

_endif_0x1271                 LDW                               _gj
                              ADDI                              1
                              STW                               memIndex0
                              LDW                               _gi
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              XORI                              240
                              JumpNE                            _else_0x129b 96
                              LDI                               1
                              STW                               _i
_else_0x129b                  LDWI                              _endif_0x1306
                              CALL                              giga_vAC                        ; if maze(gj + 1, gi) &<> WALL then i = 1

_else_0x12a0                  LDW                               _gi
                              SUBI                              1
                              STW                               0xc0
                              LDW                               _gj
                              STW                               memIndex0
                              LDW                               0xc0
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              XORI                              240
                              JumpNE                            _endif_0x12dc 99                ; if maze(gj, gi - 1) &<> WALL

                              LDI                               2
                              STW                               _i
                              LDW                               _ti
                              STW                               0xde
                              LDWI                              _page_0x23a0
                              CALL                              giga_vAC
_page_0x23a0                  LDW                               0xde
                              SUBW                              _gi
                              JumpLT                            _endif_0x12dc 98
                              Return                                                            ; i = 2 : if ti &< gi then return

_endif_0x12dc                 LDW                               _gi
                              ADDI                              1
                              STW                               0xc0
                              LDW                               _gj
                              STW                               memIndex0
                              LDW                               0xc0
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              XORI                              240
                              JumpNE                            _endif_0x1306 100
                              LDI                               0
                              STW                               _i                              ; if maze(gj, gi + 1) &<> WALL then i = 0

_endif_0x1306                 Return                                                            ; return

_replaceDot                   PUSH                              
                              LDW                               _mz
                              ANDI                              15
                              XORI                              1
                              JumpEQ                            _endif_0x1361 102               ; if (mz AND &h0F) &= DOT

                              LDW                               _di
                              LSLW                              
                              LSLW                              
                              ADDW                              _di
                              ADDI                              2
                              STW                               _di                             ; di = (di <<2) + di + ORIGIN_X   'di = di*5 + 12

                              LDW                               _dj
                              LSLW                              
                              LSLW                              
                              ADDW                              _dj
                              ADDI                              2
                              STW                               _dj                             ; dj = (dj <<2) + dj + ORIGIN_Y   'dj = dj*5 + 2

                              LDW                               _dj
                              STW                               0xde
                              LDWI                              _page_0x24a0
                              CALL                              giga_vAC
_page_0x24a0                  LDW                               0xde
                              ADDI                              8
                              STW                               0xc0
                              LD                                0xc0
                              ST                                giga_vAC + 1
                              ORI                               0xFF
                              XORI                              0xFF
                              ADDW                              _di
                              STW                               0xc2
                              LDI                               43
                              POKE                              0xc2                            ; poke ((dj + 8) <<8) + di, &h2B  'convert dj, di to vram address

_endif_0x1361                 Return                                                            ; return

_coordsPucMon                 PUSH                              
                              LDW                               _px
                              ADDW                              _pxd
                              ADDW                              _pxd
                              ADDW                              _pxd
                              ADDI                              4
                              STW                               _ci                             ; ci = px + pxd + pxd + pxd + -(ORIGIN_X-6)

                              LDW                               _py
                              ADDW                              _pyd
                              ADDW                              _pyd
                              ADDW                              _pyd
                              ADDI                              4
                              STW                               _cj                             ; cj = py + pyd + pyd + pyd +  (ORIGIN_Y+2)

                              LDWI                              _div5
                              CALL                              giga_vAC                        ; gosub div5

                              Return                                                            ; return

_handleInput                  PUSH                              
                              LDW                               _pxd
                              STW                               _oxd
                              LDW                               _pyd
                              STW                               _oyd                            ; oxd = pxd : oyd = pyd

                              LDW                               _px
                              STW                               _mx
                              LDW                               _py
                              STW                               _my
                              LDWI                              _mod5
                              CALL                              giga_vAC                        ; mx = px : my = py : gosub mod5

                              LD                                giga_buttonState
                              STW                               numericLabel
                              LDI                               0
                              STW                               defaultLabel
                              STW                               0xde
                              LDWI                              _page_0x25a0
                              CALL                              giga_vAC
_page_0x25a0                  LDW                               0xde
                              GosubNumeric                                                      ; gosub get("BUTTON_STATE")

                              Return                                                            ; return

_253                          PUSH                              
                              LDW                               _my
                              XORI                              3
                              JumpEQ                            _else_0x13e5 103
                              LDI                               0
                              STW                               _pyd
                              SUBI                              1
                              STW                               _pxd                            ; if my &= 3 then pyd = 0 : pxd = pyd-1 :

_else_0x13e5                  Return                                                            ; return

_254                          PUSH                              
                              LDW                               _my
                              XORI                              3
                              JumpEQ                            _else_0x1404 104
                              LDI                               0
                              STW                               _pyd
                              ADDI                              1
                              STW                               _pxd                            ; if my &= 3 then pyd = 0 : pxd = pyd+1

_else_0x1404                  Return                                                            ; return

_247                          PUSH                              
                              LDW                               _mx
                              XORI                              3
                              JumpEQ                            _else_0x1423 105
                              LDI                               0
                              STW                               _pxd
                              SUBI                              1
                              STW                               _pyd                            ; if mx &= 3 then pxd = 0 : pyd = pxd-1

_else_0x1423                  Return                                                            ; return

_251                          PUSH                              
                              LDW                               _mx
                              XORI                              3
                              STW                               0xde
                              LDWI                              _page_0x26a0
                              CALL                              giga_vAC
_page_0x26a0                  LDW                               0xde
                              JumpEQ                            _else_0x1442 106
                              LDI                               0
                              STW                               _pxd
                              ADDI                              1
                              STW                               _pyd                            ; if mx &= 3 then pxd = 0 : pyd = pxd+1

_else_0x1442                  Return                                                            ; return

_drawScore                    PUSH                              
                              LDWI                              27046
                              STW                               bcdSrcAddr
                              LDWI                              27302
                              STW                               bcdDstAddr
                              LDI                               7
                              ST                                bcdLength
                              BcdAdd                                                            ; bcdadd @pointsBCD, @scoreBCD, SCORE_LEN

                              LDI                               116
                              STW                               _zi                             ; zi = 114+ORIGIN_X

                              LDI                               0
                              STW                               _i                              ; for i=0 to SCORE_LEN-1

_next_0x1460                  LDWI                              27308
                              SUBW                              _i
                              PEEK                              
                              ADDI                              64
                              STW                               spriteId
                              LDW                               _zi
                              ST                                spriteXY
                              LDI                               39
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Digit + peek(@scoreBCD + SCORE_LEN-1 - i), zi, 37+ORIGIN_Y

                              LDW                               _zi
                              ADDI                              6
                              STW                               _zi                             ; zi = zi + 6

                              STW                               0xde
                              LDWI                              _page_0x27a0
                              CALL                              giga_vAC
_page_0x27a0                  LDW                               0xde
                              ForNextFarInc                     _i _next_0x1460 6               ; next i

                              Return                                                            ; return

_drawDeath                    PUSH                              
                              LDI                               63
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Erase, px, py

                              LDI                               120
                              STW                               waitVBlankNum
                              WaitVBlanks                                                       ; wait 120

                              Return                                                            ; return

_drawMaze                     PUSH                              
                              LDI                               48
                              ST                                fgbgColour + 1                  ; set FG_COLOUR, &h30

                              LDI                               0
                              STW                               _i                              ; for i=0 to (NUM_MAZE_PIECES*2 - 2) step 4

_next_0x14c5                  LDWI                              13248
                              ADDW                              _i
                              DEEK                              
                              STW                               cursorXY
                              LDWI                              12992
                              ADDW                              _i
                              DEEK                              
                              STW                               drawPoly_addr
                              DrawPolyRel                                                       ; set CURSOR_XY, deek(@MAZE_PIECES + i)     : polyR deek(@MAZE_ADDRS + i)

                              LDWI                              13248
                              ADDW                              _i
                              ADDI                              2
                              DEEK                              
                              STW                               0xde
                              LDWI                              _page_0x28a0
                              CALL                              giga_vAC
_page_0x28a0                  LDW                               0xde
                              STW                               cursorXY
                              LDI                               0xB8
                              ST                                drawPoly_mode
                              SetPolyRelFlipX                   
                              LDWI                              12992
                              ADDW                              _i
                              ADDI                              2
                              DEEK                              
                              STW                               drawPoly_addr
                              DrawPolyRel                                                       ; set CURSOR_XY, deek(@MAZE_PIECES + i + 2) : polyR deek(@MAZE_ADDRS + i + 2), FLIPX

                              ForNextFarAdd                     _i _next_0x14c5 62 4            ; next i

                              LDI                               0
                              ST                                fgbgColour + 1                  ; set FG_COLOUR, 0 '&h2B

                              Return                                                            ; return

_drawDots                     PUSH                              
                              LDI                               43
                              ST                                fgbgColour + 1                  ; set FG_COLOUR, &h2B

                              LDI                               0
                              STW                               _cj                             ; for cj=0 to 23

_next_0x1543                  LDI                               0
                              STW                               _ci                             ; for ci=0 to 27

_next_0x1547                  LDW                               _cj
                              STW                               memIndex0
                              LDW                               _ci
                              STW                               memIndex1
                              LDWI                              0x34d0
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              STW                               _mz                             ; mz = maze(cj, ci)

                              LDW                               _mz
                              ANDI                              15
                              XORI                              1
                              STW                               0xde
                              LDWI                              _page_0x29a0
                              CALL                              giga_vAC
_page_0x29a0                  LDW                               0xde
                              JumpEQ                            _endif_0x15a0 107               ; if (mz AND &h0F) &= DOT

                              LDW                               _ci
                              LSLW                              
                              LSLW                              
                              ADDW                              _ci
                              ADDI                              2
                              ST                                drawPixel_xy
                              LDW                               _cj
                              LSLW                              
                              LSLW                              
                              ADDW                              _cj
                              ADDI                              2
                              ST                                drawPixel_xy + 1
                              DrawPixel                                                         ; pset (ci <<2) + ci + ORIGIN_X, (cj <<2) + cj + ORIGIN_Y

_endif_0x15a0                 ForNextFarInc                     _ci _next_0x1547 27             ; next ci

                              ForNextFarInc                     _cj _next_0x1543 23             ; next cj

                              Return                                                            ; return

_end_0x15be                   BRA                               _end_0x15be                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                      EQU     0x52a2
realTimeStub                  EQU     0x51b7
convertEqOp                   EQU     0x40ba
convert8Arr2d                 EQU     0x40b0
absolute                      EQU     0x5ca3
shiftRight1bit                EQU     0x61a3
shiftRight2bit                EQU     0x5ea3
shiftRight3bit                EQU     0x5da3
shiftRight4bit                EQU     0x62a3
shiftRight6bit                EQU     0x63a3
gosubNumericLabel             EQU     0x2fcd
scanlineMode                  EQU     0x66a3
waitVBlank                    EQU     0x65a1
waitVBlanks                   EQU     0x51a4
resetVideoFlags               EQU     0x67a1
resetVideoTable               EQU     0x3fa5
initClearFuncs                EQU     0x40a3
clearVertBlinds               EQU     0x31c5
drawPixel                     EQU     0x5ba0
drawLine                      EQU     0x2caa
drawLineExt                   EQU     0x2bc6
drawLineLoop                  EQU     0x2ac5
drawLineLoadXY                EQU     0x34a5
drawPolyRel                   EQU     0x2da4
draw_sprite                   EQU     0x3ea1
drawSprite                    EQU     0x64a0
drawSpriteX                   EQU     0x60a0
drawSpriteY                   EQU     0x5fa0
bcdAdd                        EQU     0x2ecc
bcdInt                        EQU     0x30c8
bcdDigits                     EQU     0x3dad
convertEqOpAddr               EQU     0x00d0
convertNeOpAddr               EQU     0x00d2
convertLeOpAddr               EQU     0x00d4
convertGeOpAddr               EQU     0x00d6
convertLtOpAddr               EQU     0x00d8
convertGtOpAddr               EQU     0x00da
convert8Arr2dAddr             EQU     0x00e0
convert8Arr3dAddr             EQU     0x00e2
convert16Arr2dAddr            EQU     0x00e4
convert16Arr3dAddr            EQU     0x00e6
realTimeStubAddr              EQU     0x00dc


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


convert8Arr2d       ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    STW     memAddr
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


absolute            LDW     mathX
                    BGE     abs_exit
                    LDI     0
                    SUBW    mathX
abs_exit            RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


shiftRight2bit      LDWI    SYS_LSRW2_52
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     52
                    RET


shiftRight3bit      LDWI    SYS_LSRW3_52
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     52
                    RET


shiftRight4bit      LDWI    SYS_LSRW4_50
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     50
                    RET


shiftRight6bit      LDWI    SYS_LSRW6_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
                    PUSH
                    CALL    realTimeStubAddr
                    POP
                    RET


waitVBlanks         PUSH

waitVB_loop         LDW     waitVBlankNum
                    SUBI    0x01
                    STW     waitVBlankNum
                    BGE     waitVB_vblank
                    POP
                    RET
    
waitVB_vblank       LDWI    waitVBlank
                    CALL    giga_vAC
                    BRA     waitVB_loop


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    

resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET




                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeStubAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    SYS_SetMemory_v2_54                 ; setup fill memory SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LD      fgbgColour
                    ST      giga_sysArg1                        ; fill value
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LD      top
                    ST      giga_sysArg3                        ; top line
                    SYS     54                                  ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        ; bottom line
                    SYS     54                                  ; fill memory
                    INC     top                                 ; next top line
                    
                    CALL    realTimeStubAddr
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET


drawPixel           LD      drawPixel_xy + 1                ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      drawPixel_xy + 1
                    LD      fgbgColour + 1
                    POKE    drawPixel_xy
                    RET





drawLine            PUSH                                    ; matches drawLineLoop's POP
                    LDI     1
                    STW     drawLine_dx1
                    STW     drawLine_dx2
                    STW     drawLine_dy1
                    LDI     0
                    STW     drawLine_dy2                
    
                    LDWI    0x8000
                    STW     drawLine_tmp
                    
                    LDW     drawLine_x2                     ; sx = x2 - x1
                    SUBW    drawLine_x1
                    STW     drawLine_sx
                    ANDW    drawLine_tmp        
                    BEQ     drawL_dy
                    LDWI    -1
                    STW     drawLine_dx1        
                    STW     drawLine_dx2                    ; dx1 = dx2 = (sx & 0x8000) ? -1 : 1
                    LDI     0                               ; sx = (sx & 0x8000) ? 0 - sx : sx
                    SUBW    drawLine_sx
                    STW     drawLine_sx                
                    
drawL_dy            LDW     drawLine_y2
                    SUBW    drawLine_y1
                    STW     drawLine_sy
                    STW     drawLine_h                      ; h = sy
                    ANDW    drawLine_tmp
                    BEQ     drawL_ext
                    
                    LDWI    -1
                    STW     drawLine_dy1                    ; dy1 = (sy & 0x8000) ? -1 : 1
                    LDI     0                   
                    SUBW    drawLine_sy
                    STW     drawLine_sy                     ; sy = (sy & 0x8000) ? 0 - sy : sy
                    SUBW    drawLine_sx
                    BLE     drawL_ext           
                    LDW     drawLine_dy1
                    STW     drawLine_dy2                    ; if(sx < sy) dy2 = -1
    
drawL_ext           LDWI    drawLineLoadXY
                    CALL    giga_vAC
                    LDWI    drawLineExt
                    CALL    giga_vAC



drawLineExt         LDW     drawLine_sy
                    SUBW    drawLine_sx
                    BLE     drawL_num
                    LDI     0
                    STW     drawLine_dx2                    ; if(sx < sy) dx2 = 0
                    LDW     drawLine_sy       
                    STW     drawLine_tmp
                    LDW     drawLine_sx
                    STW     drawLine_sy
                    LDW     drawLine_tmp
                    STW     drawLine_sx                     ; swap sx with sy
                    LDW     drawLine_h
                    BLE     drawL_num
                    LDI     1
                    STW     drawLine_dy2                    ; if(h > 0) dy2 = 1
    
drawL_num           LDWI    SYS_LSRW1_48
                    STW     giga_sysFn          
                    LDW     drawLine_sx
                    SYS     48
                    ADDI    1
                    STW     drawLine_num                    ; numerator = sx>>1
                    STW     drawLine_count                  ; for(count=sx>>1; counti>=0; --i)
                    
                    LDWI    drawLineLoadDXY
                    CALL    giga_vAC
                    LDWI    drawLineLoop
                    CALL    giga_vAC


drawLineLoop        LD      fgbgColour + 1
                    POKE    drawLine_xy1                    ; plot start pixel
                    POKE    drawLine_xy2                    ; plot end pixel, (meet in middle)
                    
                    LDW     drawLine_num                    ; numerator += sy
                    ADDW    drawLine_sy
                    STW     drawLine_num
                    SUBW    drawLine_sx
                    BLE     drawL_flip                      ; if(numerator <= sx) goto flip
                    STW     drawLine_num                    ; numerator -= sx
                    
                    LDW     drawLine_xy1
                    ADDW    drawLine_dxy1
                    STW     drawLine_xy1                    ; xy1 += dxy1
                    
                    LDW     drawLine_xy2
                    SUBW    drawLine_dxy1
                    STW     drawLine_xy2                    ; xy2 -= dxy1
                    BRA     drawL_count
                    
drawL_flip          LDW     drawLine_xy1        
                    ADDW    drawLine_dxy2
                    STW     drawLine_xy1                    ; xy1 += dxy2
                    
                    LDW     drawLine_xy2        
                    SUBW    drawLine_dxy2
                    STW     drawLine_xy2                    ; xy2 -= dxy2
                    
drawL_count         CALL    realTimeStubAddr
                    LDW     drawLine_count
                    SUBI    0x01
                    STW     drawLine_count
                    BGT     drawLineLoop
                    POP                                     ;matches drawLine's PUSH
                    RET


drawLineLoadXY      LD      drawLine_x1
                    ST      drawLine_xy1
                    LD      drawLine_y1
                    ADDI    8
                    ST      drawLine_xy1 + 1                ;xy1 = x1 | ((y1+8)<<8)
                    
                    LD      drawLine_x2
                    ST      drawLine_xy2
                    LD      drawLine_y2
                    ADDI    8
                    ST      drawLine_xy2 + 1                ;xy2 = x2 | ((y2+8)<<8)
                    RET
                    
drawLineLoadDXY     LDWI    SYS_LSLW8_24
                    STW     giga_sysFn          
                    LDW     drawLine_dy1
                    SYS     28
                    ADDW    drawLine_dx1
                    STW     drawLine_dxy1                   ;dxy1 = dx1 + (dy1<<8)
    
                    LDW     drawLine_dy2
                    SYS     28
                    ADDW    drawLine_dx2
                    STW     drawLine_dxy2                   ;dxy2 = dx2 + (dy2<<8)
                    RET


drawPolyRel         PUSH

drawPR_loop         LD      cursorXY
                    STW     drawLine_x1
                    LD      cursorXY + 1
                    STW     drawLine_y1
                    LDW     drawPoly_addr
                    DEEK
                    STW     drawLine_x2
                    SUBI    255
                    BEQ     drawPR_exit
                    LDW     drawLine_x1
drawPR_x2           ADDW    drawLine_x2                     ;relative X mode
                    STW     drawLine_x2
                    ST      cursorXY
                    INC     drawPoly_addr
                    INC     drawPoly_addr
                    LDW     drawPoly_addr
                    DEEK
                    STW     drawLine_y2
                    LDW     drawLine_y1
drawPR_y2           ADDW    drawLine_y2                     ;relative Y mode
                    STW     drawLine_y2
                    ST      cursorXY + 1
                    LDWI    drawLine
                    CALL    giga_vAC
                    INC     drawPoly_addr
                    INC     drawPoly_addr
                    BRA     drawPR_loop
                    
drawPR_exit         LDI     0x99                            ;ADDW
                    ST      drawPoly_mode
                    LDWI    setPolyRelFlipX
                    CALL    giga_vAC
                    LDWI    setPolyRelFlipY
                    CALL    giga_vAC                        ;reset X and Y modes             
                    POP
                    RET
                    
setPolyRelFlipX     LDWI    drawPR_x2
                    STW     drawPoly_addr
                    LD      drawPoly_mode
                    POKE    drawPoly_addr
                    RET

setPolyRelFlipY     LDWI    drawPR_y2
                    STW     drawPoly_addr
                    LD      drawPoly_mode
                    POKE    drawPoly_addr
                    RET



; do *NOT* use register4 to register7 during time slicing
spriteId            EQU     register0
spriteXY            EQU     register1
spriteAddrs         EQU     register2

    
draw_sprite         PUSH
                    LDWI    _spritesLut_
                    ADDW    spriteId
                    ADDW    spriteId
                    DEEK
                    STW     spriteAddrs                     ; get sprite address table
                    
draw_s_loop         LDW     spriteAddrs
                    DEEK                                    ; get source address
                    BEQ     draw_s_exit
                    STW     giga_sysArg0
                    INC     spriteAddrs
                    INC     spriteAddrs
                    LDW     spriteAddrs
                    DEEK                                    ; get stripe destination offset
                    ADDW    spriteXY
                    SYS     64
                    INC     spriteAddrs
                    INC     spriteAddrs
                    CALL    realTimeStubAddr
                    BRA     draw_s_loop
                    
draw_s_exit         POP
                    RET


drawSprite          PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    LDWI    draw_sprite
                    CALL    giga_vAC
                    POP
                    RET


drawSpriteX         PUSH
                    LDWI    SYS_Sprite6x_v3_64
                    STW     giga_sysFn
                    LDWI    draw_sprite
                    CALL    giga_vAC
                    POP
                    RET


drawSpriteY         PUSH
                    LDWI    SYS_Sprite6y_v3_64
                    STW     giga_sysFn
                    LDWI    draw_sprite
                    CALL    giga_vAC
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


bcdAdd              LDI     0
                    STW     bcdCarry
                    
bcdA_loop           LDW     bcdDstAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    STW     bcdDstData
                    LDW     bcdSrcAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    ADDW    bcdDstData
                    ADDW    bcdCarry
                    STW     bcdDstData
                    SUBI    10                  ; no handling of values > 9
                    BLT     bcdA_nc
                    STW     bcdDstData
                    LDI     1
                    BRA     bcdA_cont
          
bcdA_nc             LDI     0
                    
bcdA_cont           STW     bcdCarry
          
                    LDW     bcdDstData
                    POKE    bcdDstAddr          ; modifies dst bcd value
                    INC     bcdDstAddr
                    INC     bcdSrcAddr
                    LD      bcdLength
                    SUBI    1
                    ST      bcdLength           ; expects src and dst lengths to be equal
                    BGT     bcdA_loop
                    RET



                    ; create a bcd value from a +ve int, (max 42767)
bcdInt              PUSH
                    LDW     bcdDstAddr
                    ADDI    4
                    STW     bcdDstAddr                          ; bcdDstAddr must point to >= 5 digit bcd value
                    LDI     0
                    STW     bcdDigit
                    LDWI    10000
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LDWI    1000
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LDI     100
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LDI     10
                    STW     bcdMult
                    LDWI    bcdDigits
                    CALL    giga_vAC
                    LD      bcdValue
                    POKE    bcdDstAddr
                    POP
                    RET


bcdDigits           LDW     bcdValue

bcdD_index          SUBW    bcdMult
                    BLT     bcdD_cont
                    STW     bcdValue
                    INC     bcdDigit                            ; calculate digit
                    BRA     bcdD_index
    
bcdD_cont           LD      bcdDigit
                    POKE    bcdDstAddr                          ; store digit
                    LDW     bcdDstAddr
                    SUBI    1
                    STW     bcdDstAddr
                    LDI     0
                    ST      bcdDigit                            ; reset digit
                    
bcdD_exit           RET

