_startAddress_                EQU                               0x0200

; Internal Variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal Buffers
textWorkArea                  EQU                               0x7fa0

; Includes
%includePath                  "../../runtime"
%include                      util.i
%include                      gigatron.i
%include                      macros_ROMv5a.i

; Labels
_entryPoint_                  EQU                               0x0200
_reset                        EQU                               0x021d
_start                        EQU                               0x0220
_init                         EQU                               0x0223
_mod5                         EQU                               0x02ae
_drawPucMon                   EQU                               0x0399
_drawGhosts                   EQU                               0x0450
_drawNextGhost                EQU                               0x04df
_drawScaredGhost              EQU                               0x0584
_drawDeadGhost                EQU                               0x05f8
_movePucMon                   EQU                               0x08a1
_moveNextGhost                EQU                               0x11bc
_getGhostVars                 EQU                               0x14d0
_setGhostVars                 EQU                               0x15a7
_setGhostsMode                EQU                               0x15f9
_getBlinkyTarget              EQU                               0x17ae
_getPinkyTarget               EQU                               0x17d5
_getInkyTarget                EQU                               0x18a8
_getClydeTarget               EQU                               0x18e7
_getJuncDir                   EQU                               0x19c5
_getWallDir                   EQU                               0x1cc4
_replaceDot                   EQU                               0x1eae
_coordsPucMon                 EQU                               0x1ee7
_handleInput                  EQU                               0x1fa9
_253                          EQU                               0x1fca
_254                          EQU                               0x1fdf
_247                          EQU                               0x1ff4
_251                          EQU                               0x20b0
_nextLevel                    EQU                               0x28d9
_startLevel                   EQU                               0x2aae
_resetLevel                   EQU                               0x2bc3
_initSystem                   EQU                               0x2be8
_repeat_0x0226                EQU                               0x0226
_else_0x023d                  EQU                               0x0239
_endif_0x0243                 EQU                               0x023f
_endif_0x025c                 EQU                               0x0250
_endif_0x028b                 EQU                               0x0275
_endif_0x028e                 EQU                               0x0278
_elseif_0x02fe                EQU                               0x02d8
_elseif_0x0314                EQU                               0x02e8
_endif_0x0327                 EQU                               0x02f5
_page_0x0300                  EQU                               0x0300
_elseif_0x0360                EQU                               0x0327
_elseif_0x0376                EQU                               0x0337
_endif_0x0389                 EQU                               0x0344
_div5                         EQU                               0x0346
_endif_0x041d                 EQU                               0x03b4
_elseif_0x0464                EQU                               0x03e7
_page_0x0400                  EQU                               0x0400
_elseif_0x048d                EQU                               0x0412
_else_0x04b2                  EQU                               0x042f
_endif_0x04c9                 EQU                               0x0442
_next_0x04e0                  EQU                               0x0455
_endif_0x050e                 EQU                               0x047f
_elseif_0x0545                EQU                               0x04a2
_else_0x056f                  EQU                               0x04c4
_else_0x058d                  EQU                               0x04d6
_endif_0x0590                 EQU                               0x04d9
_else_0x0593                  EQU                               0x04dc
_drawNormalGhost              EQU                               0x04ed
_page_0x0500                  EQU                               0x0500
_elseif_0x05e1                EQU                               0x0522
_elseif_0x0616                EQU                               0x0547
_else_0x064a                  EQU                               0x056b
_endif_0x066d                 EQU                               0x0582
_elseif_0x0698                EQU                               0x05a5
_elseif_0x06c1                EQU                               0x05c6
_else_0x06e6                  EQU                               0x05e3
_endif_0x06fd                 EQU                               0x05f6
_page_0x0600                  EQU                               0x0600
_elseif_0x072b                EQU                               0x061b
_elseif_0x0757                EQU                               0x0639
_else_0x0782                  EQU                               0x0656
_page_0x0800                  EQU                               0x0800
_endif_0x079f                 EQU                               0x0805
_drawPills                    EQU                               0x0807
_else_0x07f4                  EQU                               0x0842
_else_0x081f                  EQU                               0x0861
_else_0x084a                  EQU                               0x0880
_endif_0x0875                 EQU                               0x089f
_page_0x0900                  EQU                               0x0900
_elseif_0x08f2                EQU                               0x090c
_elseif_0x0940                EQU                               0x094e
_elseif_0x096f                EQU                               0x0977
_endif_0x0985                 EQU                               0x0987
_endif_0x099a                 EQU                               0x0998
_eatSound                     EQU                               0x099a
_endif_0x09e6                 EQU                               0x09d6
_moveGhosts                   EQU                               0x09d8
_next_0x09ed                  EQU                               0x09dd
_page_0x0aa0                  EQU                               0x0aa0
_endif_0x0a4e                 EQU                               0x0ac8
_page_0x0ba0                  EQU                               0x0ba0
_page_0x0ca0                  EQU                               0x0ca0
_endif_0x0b12                 EQU                               0x0ca4
_endif_0x0b4c                 EQU                               0x0cce
_else_0x0b68                  EQU                               0x0ce6
_else_0x0b79                  EQU                               0x0cf3
_page_0x0da0                  EQU                               0x0da0
_else_0x0c00                  EQU                               0x0ded
_page_0x0ea0                  EQU                               0x0ea0
_endif_0x0c4a                 EQU                               0x0ec7
_page_0x0fa0                  EQU                               0x0fa0
_endif_0x0cad                 EQU                               0x0fb4
_elseif_0x0cdb                EQU                               0x0fdc
_elseif_0x0cf4                EQU                               0x0fef
_page_0x10a0                  EQU                               0x10a0
_else_0x0d20                  EQU                               0x10b2
_endif_0x0d4f                 EQU                               0x10cf
_page_0x11a0                  EQU                               0x11a0
_endif_0x0dbe                 EQU                               0x11c9
_else_0x0dde                  EQU                               0x11e5
_endif_0x0de1                 EQU                               0x11e8
_scaredSound                  EQU                               0x11ea
_page_0x12a0                  EQU                               0x12a0
_else_0x0e14                  EQU                               0x12ba
_chaseSound                   EQU                               0x12c0
_page_0x13a0                  EQU                               0x13a0
_deadSound                    EQU                               0x13b1
_repeat_0x0e87                EQU                               0x13be
_next_0x0e8b                  EQU                               0x13c2
_next_0x0eb4                  EQU                               0x13eb
_page_0x14a0                  EQU                               0x14a0
_page_0x15a0                  EQU                               0x15a0
_getGhostDir                  EQU                               0x15de
_page_0x16a0                  EQU                               0x16a0
_else_0x0fe6                  EQU                               0x16aa
_endif_0x101e                 EQU                               0x16da
_endif_0x1020                 EQU                               0x16dc
_endif_0x1038                 EQU                               0x16f0
_page_0x17a0                  EQU                               0x17a0
_endif_0x1054                 EQU                               0x17ac
_endif_0x1077                 EQU                               0x17cb
_endif_0x10c6                 EQU                               0x17fa
_page_0x18a0                  EQU                               0x18a0
_endif_0x111d                 EQU                               0x18dd
_page_0x19a0                  EQU                               0x19a0
_endif_0x116e                 EQU                               0x19bb
_page_0x1aa0                  EQU                               0x1aa0
_endif_0x11cf                 EQU                               0x1aa8
_endif_0x1208                 EQU                               0x1ad1
_else_0x120b                  EQU                               0x1ad4
_page_0x1ba0                  EQU                               0x1ba0
_endif_0x1259                 EQU                               0x1bb6
_endif_0x1292                 EQU                               0x1be3
_elseif_0x12a7                EQU                               0x1bf4
_page_0x1ca0                  EQU                               0x1ca0
_elseif_0x12bd                EQU                               0x1cad
_else_0x12d2                  EQU                               0x1cbe
_endif_0x12d6                 EQU                               0x1cc2
_endif_0x131a                 EQU                               0x1cf6
_page_0x1da0                  EQU                               0x1da0
_else_0x1343                  EQU                               0x1db7
_else_0x1346                  EQU                               0x1dba
_endif_0x137f                 EQU                               0x1de7
_page_0x1ea0                  EQU                               0x1ea0
_endif_0x13a8                 EQU                               0x1eac
_endif_0x1401                 EQU                               0x1ee5
_page_0x1fa0                  EQU                               0x1fa0
_else_0x147d                  EQU                               0x1fdd
_else_0x149a                  EQU                               0x1ff2
_page_0x20a0                  EQU                               0x20a0
_else_0x14b7                  EQU                               0x20ae
_else_0x14d4                  EQU                               0x20c3
_drawScore                    EQU                               0x20c5
_next_0x14ee                  EQU                               0x20dd
_page_0x21a0                  EQU                               0x21a0
_endif_0x1556                 EQU                               0x21d5
_drawHigh                     EQU                               0x21d7
_next_0x1561                  EQU                               0x21e0
_page_0x22a0                  EQU                               0x22a0
_drawLevel                    EQU                               0x22b0
_next_0x15b4                  EQU                               0x22ca
_drawLives                    EQU                               0x22f5
_page_0x23a0                  EQU                               0x23a0
_while_0x15f6                 EQU                               0x23a2
_while_0x162a                 EQU                               0x23d0
_wend_0x1656                  EQU                               0x23f6
_drawDeath                    EQU                               0x23f8
_page_0x24a0                  EQU                               0x24a0
_next_0x166b                  EQU                               0x24af
_next_0x16b8                  EQU                               0x24ea
_page_0x25a0                  EQU                               0x25a0
_else_0x16f2                  EQU                               0x25bc
_endif_0x1703                 EQU                               0x25cd
_endif_0x171f                 EQU                               0x25df
_drawMaze                     EQU                               0x25f4
_page_0x26a0                  EQU                               0x26a0
_next_0x173d                  EQU                               0x26a2
_drawDots                     EQU                               0x26e7
_next_0x17b3                  EQU                               0x26f0
_next_0x17b7                  EQU                               0x26f4
_page_0x27a0                  EQU                               0x27a0
_elseif_0x17fd                EQU                               0x27ca
_endif_0x181f                 EQU                               0x27de
_endif_0x1835                 EQU                               0x27f4
_page_0x28a0                  EQU                               0x28a0
_endif_0x187a                 EQU                               0x28bf
_else_0x18a8                  EQU                               0x28e9
_initVars                     EQU                               0x28f0
_page_0x29a0                  EQU                               0x29a0
_next_0x18de                  EQU                               0x29bd
_else_0x18f6                  EQU                               0x29cf
_endif_0x190f                 EQU                               0x29da
_page_0x2aa0                  EQU                               0x2aa0
_else_0x197d                  EQU                               0x2ae6
_page_0x2ba0                  EQU                               0x2ba0
_else_0x19b0                  EQU                               0x2bba
_endif_0x19b7                 EQU                               0x2bc1
_page_0x2ca0                  EQU                               0x2ca0
_end_0x1a30                   EQU                               0x2cd8

; Global Variables
_livesDots                    EQU                               0x0030
_levelPain                    EQU                               0x0032
_timeTicks                    EQU                               0x0034
_flags                        EQU                               0x0036
_gmode                        EQU                               0x0038
_gx                           EQU                               0x003a
_gy                           EQU                               0x003c
_gxd                          EQU                               0x003e
_gyd                          EQU                               0x0040
_gdir                         EQU                               0x0042
_mz                           EQU                               0x0044
_pyd                          EQU                               0x0046
_oxd                          EQU                               0x0048
_oyd                          EQU                               0x004a
_puci                         EQU                               0x004c
_pucj                         EQU                               0x004e
_ti                           EQU                               0x0050
_tj                           EQU                               0x0052
_bi                           EQU                               0x0054
_bj                           EQU                               0x0056
_zi                           EQU                               0x0058
_zj                           EQU                               0x005a
_px                           EQU                               0x005c
_py                           EQU                               0x005e
_pxd                          EQU                               0x0060
_bonus                        EQU                               0x0062
_eatTicks                     EQU                               0x0064
_scaredTicks                  EQU                               0x0066
_mx                           EQU                               0x0068
_my                           EQU                               0x006a
_ci                           EQU                               0x006c
_cj                           EQU                               0x006e
_xf                           EQU                               0x0070
_yf                           EQU                               0x0072
_gidx                         EQU                               0x0074
_slowed                       EQU                               0x0076
_di                           EQU                               0x0078
_dj                           EQU                               0x007a
_gi                           EQU                               0x007c
_gj                           EQU                               0x007e

; Local Variables
_div5_i                       EQU                               0x00d8
_div5_j                       EQU                               0x00da
_drawNormalGhost_i            EQU                               0x00d8
_drawPills_i                  EQU                               0x00d8
_eatSound_n                   EQU                               0x00d8
_chaseSound_n                 EQU                               0x00d8
_chaseSound_v                 EQU                               0x00da
_chaseSound_f                 EQU                               0x00dc
_deadSound_i                  EQU                               0x00d8
_deadSound_v                  EQU                               0x00da
_deadSound_f                  EQU                               0x00dc
_getGhostDir_dir              EQU                               0x00d8
_drawScore_i                  EQU                               0x00d8
_drawScore_char               EQU                               0x00da
_drawHigh_i                   EQU                               0x00d8
_drawHigh_char                EQU                               0x00da
_drawLevel_i                  EQU                               0x00d8
_drawLevel_char               EQU                               0x00da
_drawLives_i                  EQU                               0x00d8
_drawLives_puc                EQU                               0x00da
_drawDeath_i                  EQU                               0x00d8
_drawDeath_j                  EQU                               0x00da
_drawDeath_n                  EQU                               0x00dc
_drawDeath_f                  EQU                               0x00de
_drawMaze_i                   EQU                               0x00d8
_drawDots_redraw              EQU                               0x00d8
_initVars_i                   EQU                               0x00d8
_initVars_corner              EQU                               0x00da

; Arrays
_maze_array                   EQU                               0x3bd0
_maze_array                   DW                                0x6fad 0x6ead 0x6dad 0x6cad 0x6bad 0x6aad 0x69ad 0x68ad 0x67ad 0x66ad 0x65ad 0x64ad 0x63ad 0x62ad 0x61ad 0x60ad 0x5fad 0x5ead 0x5dad 0x5cad 0x5bad 0x5aad 0x59ad 0x58ad 
_maze_0x6fad                  EQU                               0x6fad
_maze_0x6fad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x6ead                  EQU                               0x6ead
_maze_0x6ead                  DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x6dad                  EQU                               0x6dad
_maze_0x6dad                  DB                                0xf0 0x02 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x02 0xf0 
_maze_0x6cad                  EQU                               0x6cad
_maze_0x6cad                  DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x6bad                  EQU                               0x6bad
_maze_0x6bad                  DB                                0xf0 0xd1 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0xd1 0xf0 
_maze_0x6aad                  EQU                               0x6aad
_maze_0x6aad                  DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x69ad                  EQU                               0x69ad
_maze_0x69ad                  DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x68ad                  EQU                               0x68ad
_maze_0x68ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x67ad                  EQU                               0x67ad
_maze_0x67ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0x00 0x00 0xd0 0xb0 0x00 0xd0 0x00 0x00 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x66ad                  EQU                               0x66ad
_maze_0x66ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xe0 0xe0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x65ad                  EQU                               0x65ad
_maze_0x65ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0x00 0x00 0xc0 0x00 0x00 0x00 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x64ad                  EQU                               0x64ad
_maze_0x64ad                  DB                                0xa0 0x90 0x90 0x90 0x90 0x00 0xd1 0x00 0x00 0xd0 0xf0 0x00 0x00 0x00 0x00 0x00 0x00 0xf0 0xd0 0x00 0x00 0xd1 0x00 0x90 0x90 0x90 0x90 0xa0 
_maze_0x63ad                  EQU                               0x63ad
_maze_0x63ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0x00 0x00 0x00 0x00 0x00 0x00 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x62ad                  EQU                               0x62ad
_maze_0x62ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x61ad                  EQU                               0x61ad
_maze_0x61ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xd0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xd0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x60ad                  EQU                               0x60ad
_maze_0x60ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x5fad                  EQU                               0x5fad
_maze_0x5fad                  DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x5ead                  EQU                               0x5ead
_maze_0x5ead                  DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x5dad                  EQU                               0x5dad
_maze_0x5dad                  DB                                0xf0 0x02 0x01 0x01 0xf0 0xf0 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x00 0x00 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0xf0 0xf0 0x01 0x01 0x02 0xf0 
_maze_0x5cad                  EQU                               0x5cad
_maze_0x5cad                  DB                                0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 
_maze_0x5bad                  EQU                               0x5bad
_maze_0x5bad                  DB                                0xf0 0x01 0x01 0xd1 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0xd1 0x01 0x01 0xf0 
_maze_0x5aad                  EQU                               0x5aad
_maze_0x5aad                  DB                                0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x59ad                  EQU                               0x59ad
_maze_0x59ad                  DB                                0xf0 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x58ad                  EQU                               0x58ad
_maze_0x58ad                  DB                                0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_MAZE_BORDER_array            EQU                               0x7f03
_MAZE_BORDER_array            DW                                0x0000 0x0073 0x00ff 0x00ff 0x00ff 0x00ff 0x00ff 
_MAZE_OUTER_T_array           EQU                               0x57ab
_MAZE_OUTER_T_array           DW                                0x0019 0x0000 0x0000 0xfff1 0xffe7 0x0000 0x0000 0xffdd 0x0041 0x0000 0x0000 0x000f 0x0002 0x0000 0x00ff 
_MAZE_OUTER_B_array           EQU                               0x56a7
_MAZE_OUTER_B_array           DW                                0xffbc 0x0000 0x0000 0xffec 0x0009 0x0000 0xfff7 0x0000 0x0000 0xffec 0x0019 0x0000 0x0000 0xfff1 0xffe7 0x0000 0x00ff 
_MAZE_TJUNC_0_array           EQU                               0x55b3
_MAZE_TJUNC_0_array           DW                                0x0019 0x0000 0x0000 0xfff6 0x0005 0x0000 0x0000 0x000a 0x000f 0x0000 0x00ff 
_MAZE_TJUNC_1_array           EQU                               0x7e03
_MAZE_TJUNC_1_array           DW                                0xfffe 0x0000 0x0000 0xfff6 0xfff1 0x0000 0x00ff 
_MAZE_CAGE_array              EQU                               0x55a5
_MAZE_CAGE_array              DW                                0xfff6 0x0000 0x0000 0x0014 0x0011 0x0000 0x00ff 
_MAZE_VERT_0_array            EQU                               0x54b7
_MAZE_VERT_0_array            DW                                0x0000 0x000f 0xfffb 0x0000 0x0000 0xfff1 0x0005 0x0000 0x00ff 
_MAZE_VERT_1_array            EQU                               0x54a5
_MAZE_VERT_1_array            DW                                0x0005 0x0000 0x0000 0x0019 0xfffb 0x0000 0x0000 0xffe7 0x00ff 
_MAZE_CORNER_array            EQU                               0x53b7
_MAZE_CORNER_array            DW                                0x000a 0x0000 0x0000 0x000a 0x0005 0x0000 0x0000 0xfff6 0x00ff 
_MAZE_HORIZ_0_array           EQU                               0x53a5
_MAZE_HORIZ_0_array           DW                                0x000f 0x0000 0x0000 0x0005 0xfff1 0x0000 0x0000 0xfffb 0x00ff 
_MAZE_HORIZ_1_array           EQU                               0x52b7
_MAZE_HORIZ_1_array           DW                                0x0014 0x0000 0x0000 0x0005 0xffec 0x0000 0x0000 0xfffb 0x00ff 
_MAZE_LINE_0_array            EQU                               0x6fa7
_MAZE_LINE_0_array            DW                                0x000f 0x0000 0x00ff 
_MAZE_LINE_1_array            EQU                               0x6fa1
_MAZE_LINE_1_array            DW                                0x0014 0x0000 0x00ff 
_MAZE_PIECES_array            EQU                               0x3ab8
_MAZE_PIECES_array            DW                                0x0200 0x0201 0x0202 0x029d 0x029e 0x029f 0x3402 0x3489 0x7546 0x7545 0x6b0c 0x6b7f 0x6b45 0x6b46 0x5745 0x5746 0x2545 0x2546 0x2f3e 0x2f4d 0x3e2a 0x3e61 0x1b25 0x1b66 0x570c 0x577f 0x0c0c 0x0c7f 0x0c25 0x0c66 0x252a 0x2561 0x5725 0x5766 0x1b0c 0x1b7f 
_MAZE_ADDRS_array             EQU                               0x39b8
_MAZE_ADDRS_array             DW                                0x7f03 0x7f03 0x7f03 0x7f03 0x7f03 0x7f03 0x57ab 0x57ab 0x56a7 0x56a7 0x55b3 0x55b3 0x7e03 0x7e03 0x7e03 0x7e03 0x7e03 0x7e03 0x55a5 0x55a5 0x54b7 0x54b7 0x54a5 0x54a5 0x53b7 0x53b7 0x53a5 0x53a5 0x52b7 0x52b7 0x6fa7 0x6fa7 0x6fa1 0x6fa1 0x6fa7 0x6fa7 
_GHOST_DIRS_array             EQU                               0x52a7
_GHOST_DIRS_array             DW                                0x0001 0x0000 0x0000 0x0001 0xffff 0x0000 0x0000 0xffff 
_gframes_array                EQU                               0x51b9
_gframes_array                DB                                0x06 0x04 0x02 0x00 0x0e 0x0c 0x0a 0x08 0x16 0x14 0x12 0x10 0x1e 0x1c 0x1a 0x18 
_ghostsXr_array               EQU                               0x6ea3
_ghostsXr_array               DW                                0x0042 0x0036 0x0036 0x004e 0x004e 
_ghostsYr_array               EQU                               0x6da3
_ghostsYr_array               DW                                0x0026 0x0030 0x003a 0x0030 0x003a 
_ghostsX_array                EQU                               0x6ca5
_ghostsX_array                DW                                0x0042 0x0036 0x0036 0x004e 
_ghostsY_array                EQU                               0x6ba5
_ghostsY_array                DW                                0x0026 0x0030 0x003a 0x0030 
_ghostsXd_array               EQU                               0x6aa5
_ghostsXd_array               DW                                0xffff 0xffff 0xffff 0xffff 
_ghostsYd_array               EQU                               0x69a5
_ghostsYd_array               DW                                0x0000 0x0000 0x0000 0x0000 
_ghostsFlags_array            EQU                               0x7da0
_ghostsFlags_array            DB                                0x00 0x00 0x00 0x00 
_highBCD_array                EQU                               0x68a6
_highBCD_array                DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_scoreBCD_array               EQU                               0x67a6
_scoreBCD_array               DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_pointsBCD_array              EQU                               0x66a6
_pointsBCD_array              DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_levelBCD_array               EQU                               0x7f01
_levelBCD_array               DB                                0x00 0x00 
_enotes_array                 EQU                               0x6ca0
_enotes_array                 DB                                0x3a 0x3d 0x3f 0x3c 0x39 
_gnotes_array                 EQU                               0x51a9
_gnotes_array                 DB                                0x45 0x47 0x48 0x4a 0x4c 0x4d 0x4f 0x51 0x53 0x51 0x4f 0x4d 0x4c 0x4a 0x48 0x47 
_dnotes_array                 EQU                               0x50b9
_dnotes_array                 DB                                0x4b 0x4a 0x49 0x48 0x47 0x46 0x45 0x44 0x43 0x44 0x45 0x46 0x47 0x48 0x49 0x4a 

; Strings

; Constant Strings

; Data

; Time

; Define Bytes
def_bytes_0x31a0              EQU                               0x31a0
def_bytes_0x31a0              DB                                144 71 145 35 4 128 4 144 83 129 5 128 4 144 78 4 
def_bytes_0x31b0              EQU                               0x31b0
def_bytes_0x31b0              DB                                128 4 144 75 145 47 5 128 4 144 83 145 35 4 144 78 
def_bytes_0x31c0              EQU                               0x31c0
def_bytes_0x31c0              DB                                4 128 129 9 144 75 8 145 47 5 128 4 144 72 145 36 
def_bytes_0x31d0              EQU                               0x31d0
def_bytes_0x31d0              DB                                4 128 4 144 84 129 5 128 4 144 79 4 128 4 144 76 
def_bytes_0x31e0              EQU                               0x31e0
def_bytes_0x31e0              DB                                145 48 5 128 4 144 84 145 36 4 144 79 4 128 129 9 
def_bytes_0x31f0              EQU                               0x31f0
def_bytes_0x31f0              DB                                144 76 8 145 48 5 128 4 144 71 145 35 4 208 160 50 
def_bytes_0x32a0              EQU                               0x32a0
def_bytes_0x32a0              DB                                128 4 144 83 129 5 128 4 144 78 4 128 4 144 75 145 
def_bytes_0x32b0              EQU                               0x32b0
def_bytes_0x32b0              DB                                47 5 128 4 144 83 145 35 4 144 78 4 128 129 9 144 
def_bytes_0x32c0              EQU                               0x32c0
def_bytes_0x32c0              DB                                75 8 145 47 4 128 5 144 75 145 42 4 144 76 4 144 
def_bytes_0x32d0              EQU                               0x32d0
def_bytes_0x32d0              DB                                77 129 4 128 5 144 77 145 44 4 144 78 4 144 79 129 
def_bytes_0x32e0              EQU                               0x32e0
def_bytes_0x32e0              DB                                4 128 5 144 79 145 46 4 144 80 4 144 81 129 4 128 
def_bytes_0x32f0              EQU                               0x32f0
def_bytes_0x32f0              DB                                5 144 83 145 47 8 128 129 208 0 0 
def_bytes_0x0700              EQU                               0x0700
def_bytes_0x0700              DB(4)                                32 35 38 41 44 47 49 52 54 56 58 59 61 62 62 63 63 63 62 62 61 59 58 56 54 52 49 47 44 41 38 35 32 29 26 23 20 17 15 12 10 8 6 5 3 2 2 1 1 1 2 2 3 5 6 8 10 12 15 17 20 23 26 29 
def_bytes_0x0701              EQU                               0x0701
def_bytes_0x0701              DB(4)                                31 39 46 51 55 58 60 62 63 62 60 58 55 51 46 39 33 27 22 16 11 6 3 1 0 1 3 6 11 16 22 32 39 46 51 55 59 62 63 62 59 54 48 41 32 23 15 8 3 0 3 8 15 26 38 49 58 63 55 46 35 22 11 0 
def_bytes_0x0703              EQU                               0x0703
def_bytes_0x0703              DB(4)                                33 45 52 57 60 62 63 62 60 57 52 45 48 50 52 53 52 50 48 45 42 39 35 31 26 21 17 13 11 15 21 28 34 41 47 52 50 47 43 38 31 23 19 16 14 12 11 12 14 16 19 22 25 23 20 15 9 4 1 0 1 5 11 20 

; Define Words

; Define Images

; Define Sprites
def_sprites_0x7fc9            EQU                               0x7fc9
def_sprites_0x7fc9            DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 56 0 0 0 3 63 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7f92            EQU                               0x7f92
def_sprites_0x7f92            DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 56 63 3 0 3 3 63 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 0 0 0 0 0 0 247 
def_sprites_0x7f5b            EQU                               0x7f5b
def_sprites_0x7f5b            DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 56 0 0 0 3 63 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7f24            EQU                               0x7f24
def_sprites_0x7f24            DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 56 63 3 0 3 3 63 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 3 0 3 0 3 0 0 0 0 0 0 0 247 
def_sprites_0x7ec9            EQU                               0x7ec9
def_sprites_0x7ec9            DB                                0 0 0 0 0 0 0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 63 56 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 247 
def_sprites_0x7e92            EQU                               0x7e92
def_sprites_0x7e92            DB                                0 0 0 0 0 0 3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 247 
def_sprites_0x7e5b            EQU                               0x7e5b
def_sprites_0x7e5b            DB                                0 0 0 0 0 0 0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 63 56 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 0 3 0 0 0 0 247 
def_sprites_0x7e24            EQU                               0x7e24
def_sprites_0x7e24            DB                                0 0 0 0 0 0 3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 3 0 3 0 3 0 247 
def_sprites_0x7dc9            EQU                               0x7dc9
def_sprites_0x7dc9            DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 56 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7cc9            EQU                               0x7cc9
def_sprites_0x7cc9            DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 0 0 0 0 0 0 247 
def_sprites_0x7bc9            EQU                               0x7bc9
def_sprites_0x7bc9            DB                                0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 56 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7ac9            EQU                               0x7ac9
def_sprites_0x7ac9            DB                                3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 3 0 3 0 3 0 0 0 0 0 0 0 247 
def_sprites_0x79c9            EQU                               0x79c9
def_sprites_0x79c9            DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 56 0 0 0 59 63 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x78c9            EQU                               0x78c9
def_sprites_0x78c9            DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 56 63 59 0 59 59 63 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 0 0 0 0 0 0 247 
def_sprites_0x77c9            EQU                               0x77c9
def_sprites_0x77c9            DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 56 0 0 0 59 63 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 0 59 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x76c9            EQU                               0x76c9
def_sprites_0x76c9            DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 56 63 59 0 59 59 63 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 59 0 59 0 59 0 0 0 0 0 0 0 247 
def_sprites_0x75c9            EQU                               0x75c9
def_sprites_0x75c9            DB                                0 0 0 0 0 0 0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 63 56 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 247 
def_sprites_0x74c9            EQU                               0x74c9
def_sprites_0x74c9            DB                                0 0 0 0 0 0 59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 247 
def_sprites_0x73c9            EQU                               0x73c9
def_sprites_0x73c9            DB                                0 0 0 0 0 0 0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 63 56 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 0 59 0 0 0 0 247 
def_sprites_0x72c9            EQU                               0x72c9
def_sprites_0x72c9            DB                                0 0 0 0 0 0 59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 59 0 59 0 59 0 247 
def_sprites_0x71c9            EQU                               0x71c9
def_sprites_0x71c9            DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 56 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x70c9            EQU                               0x70c9
def_sprites_0x70c9            DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 0 0 0 0 0 0 247 
def_sprites_0x6fc9            EQU                               0x6fc9
def_sprites_0x6fc9            DB                                0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 56 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 0 59 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x6ec9            EQU                               0x6ec9
def_sprites_0x6ec9            DB                                59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 59 0 59 0 59 0 0 0 0 0 0 0 247 
def_sprites_0x6dc9            EQU                               0x6dc9
def_sprites_0x6dc9            DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 56 0 0 0 61 63 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x6cc9            EQU                               0x6cc9
def_sprites_0x6cc9            DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 56 63 61 0 61 61 63 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 0 0 0 0 0 0 247 
def_sprites_0x6bc9            EQU                               0x6bc9
def_sprites_0x6bc9            DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 56 0 0 0 61 63 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 0 61 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x6ac9            EQU                               0x6ac9
def_sprites_0x6ac9            DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 56 63 61 0 61 61 63 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 61 0 61 0 61 0 0 0 0 0 0 0 247 
def_sprites_0x69c9            EQU                               0x69c9
def_sprites_0x69c9            DB                                0 0 0 0 0 0 0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 63 56 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 247 
def_sprites_0x68c9            EQU                               0x68c9
def_sprites_0x68c9            DB                                0 0 0 0 0 0 61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 247 
def_sprites_0x67c9            EQU                               0x67c9
def_sprites_0x67c9            DB                                0 0 0 0 0 0 0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 63 56 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 0 61 0 0 0 0 247 
def_sprites_0x66c9            EQU                               0x66c9
def_sprites_0x66c9            DB                                0 0 0 0 0 0 61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 61 0 61 0 61 0 247 
def_sprites_0x65c9            EQU                               0x65c9
def_sprites_0x65c9            DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 56 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x64c9            EQU                               0x64c9
def_sprites_0x64c9            DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 0 0 0 0 0 0 247 
def_sprites_0x63c9            EQU                               0x63c9
def_sprites_0x63c9            DB                                0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 56 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 0 61 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x62c9            EQU                               0x62c9
def_sprites_0x62c9            DB                                61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 61 0 61 0 61 0 0 0 0 0 0 0 247 
def_sprites_0x61c9            EQU                               0x61c9
def_sprites_0x61c9            DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 56 0 0 0 11 63 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x60c9            EQU                               0x60c9
def_sprites_0x60c9            DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 56 63 11 0 11 11 63 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 0 0 0 0 0 0 247 
def_sprites_0x5fc9            EQU                               0x5fc9
def_sprites_0x5fc9            DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 56 0 0 0 11 63 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 0 11 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x5ec9            EQU                               0x5ec9
def_sprites_0x5ec9            DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 56 63 11 0 11 11 63 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 11 0 11 0 11 0 0 0 0 0 0 0 247 
def_sprites_0x5dc9            EQU                               0x5dc9
def_sprites_0x5dc9            DB                                0 0 0 0 0 0 0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 63 56 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 247 
def_sprites_0x5cc9            EQU                               0x5cc9
def_sprites_0x5cc9            DB                                0 0 0 0 0 0 11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 247 
def_sprites_0x5bc9            EQU                               0x5bc9
def_sprites_0x5bc9            DB                                0 0 0 0 0 0 0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 63 56 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 0 11 0 0 0 0 247 
def_sprites_0x5ac9            EQU                               0x5ac9
def_sprites_0x5ac9            DB                                0 0 0 0 0 0 11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 11 0 11 0 11 0 247 
def_sprites_0x59c9            EQU                               0x59c9
def_sprites_0x59c9            DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 56 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x58c9            EQU                               0x58c9
def_sprites_0x58c9            DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 0 0 0 0 0 0 247 
def_sprites_0x57c9            EQU                               0x57c9
def_sprites_0x57c9            DB                                0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 56 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 0 11 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x56c9            EQU                               0x56c9
def_sprites_0x56c9            DB                                11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 11 0 11 0 11 0 0 0 0 0 0 0 247 
def_sprites_0x55c9            EQU                               0x55c9
def_sprites_0x55c9            DB                                0 0 0 0 0 0 0 15 0 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x54c9            EQU                               0x54c9
def_sprites_0x54c9            DB                                0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 15 15 0 0 0 15 15 15 0 15 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x53c9            EQU                               0x53c9
def_sprites_0x53c9            DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x52c9            EQU                               0x52c9
def_sprites_0x52c9            DB                                0 0 15 0 0 0 0 0 15 15 0 0 15 0 15 15 15 0 15 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x51c9            EQU                               0x51c9
def_sprites_0x51c9            DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x50c9            EQU                               0x50c9
def_sprites_0x50c9            DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4fc9            EQU                               0x4fc9
def_sprites_0x4fc9            DB                                0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 15 15 0 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4ec9            EQU                               0x4ec9
def_sprites_0x4ec9            DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4dc9            EQU                               0x4dc9
def_sprites_0x4dc9            DB                                0 0 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4cc9            EQU                               0x4cc9
def_sprites_0x4cc9            DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 0 15 15 15 15 0 0 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4bc9            EQU                               0x4bc9
def_sprites_0x4bc9            DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x4ac9            EQU                               0x4ac9
def_sprites_0x4ac9            DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 0 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x49c9            EQU                               0x49c9
def_sprites_0x49c9            DB                                0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x48c9            EQU                               0x48c9
def_sprites_0x48c9            DB                                15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x47c9            EQU                               0x47c9
def_sprites_0x47c9            DB                                0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x46c9            EQU                               0x46c9
def_sprites_0x46c9            DB                                15 15 15 0 0 0 15 15 15 15 0 0 0 15 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x45c9            EQU                               0x45c9
def_sprites_0x45c9            DB                                0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 43 52 0 0 0 52 52 43 0 0 0 52 0 52 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x44c9            EQU                               0x44c9
def_sprites_0x44c9            DB                                52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 43 52 43 52 52 0 52 43 52 43 52 0 0 52 0 52 0 0 0 0 0 0 0 0 247 
def_sprites_0x43c9            EQU                               0x43c9
def_sprites_0x43c9            DB                                0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 43 52 0 0 0 0 52 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x42c9            EQU                               0x42c9
def_sprites_0x42c9            DB                                52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 52 43 52 43 52 0 43 52 43 52 52 0 52 0 52 0 52 0 0 0 0 0 0 0 247 
def_sprites_0x41c9            EQU                               0x41c9
def_sprites_0x41c9            DB                                0 0 0 0 0 0 0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 43 52 0 0 0 52 52 43 0 0 0 52 0 52 0 0 0 247 
def_sprites_0x40c9            EQU                               0x40c9
def_sprites_0x40c9            DB                                0 0 0 0 0 0 52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 43 52 43 52 52 0 52 43 52 43 52 0 0 52 0 52 0 0 247 
def_sprites_0x3fc9            EQU                               0x3fc9
def_sprites_0x3fc9            DB                                0 0 0 0 0 0 0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 43 52 0 0 0 0 52 0 0 0 0 247 
def_sprites_0x3ec9            EQU                               0x3ec9
def_sprites_0x3ec9            DB                                0 0 0 0 0 0 52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 52 43 52 43 52 0 43 52 43 52 52 0 52 0 52 0 52 0 247 
def_sprites_0x7f11            EQU                               0x7f11
def_sprites_0x7f11            DB                                0 0 0 0 0 0 63 63 0 63 63 0 63 56 0 56 63 0 253 
def_sprites_0x7e11            EQU                               0x7e11
def_sprites_0x7e11            DB                                63 63 0 63 63 0 56 63 0 56 63 0 0 0 0 0 0 0 253 
def_sprites_0x3dc9            EQU                               0x3dc9
def_sprites_0x3dc9            DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x3cc9            EQU                               0x3cc9
def_sprites_0x3cc9            DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 247 
def_sprites_0x7da4            EQU                               0x7da4
def_sprites_0x7da4            DB                                0 0 0 0 0 0 0 43 43 43 0 0 43 43 43 43 43 0 43 43 43 43 43 0 43 43 43 43 43 0 0 43 43 43 0 0 250 
def_sprites_0x7ca4            EQU                               0x7ca4
def_sprites_0x7ca4            DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 250 
def_sprites_0x7ba4            EQU                               0x7ba4
def_sprites_0x7ba4            DB                                0 0 0 0 0 0 0 15 15 15 0 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 15 15 15 0 0 250 
def_sprites_0x7aa4            EQU                               0x7aa4
def_sprites_0x7aa4            DB                                63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x79a4            EQU                               0x79a4
def_sprites_0x79a4            DB                                0 63 63 63 0 0 63 63 0 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 0 63 63 0 0 63 63 63 0 0 250 
def_sprites_0x78a4            EQU                               0x78a4
def_sprites_0x78a4            DB                                0 0 63 0 0 0 0 63 63 0 0 0 63 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x77a4            EQU                               0x77a4
def_sprites_0x77a4            DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 63 0 250 
def_sprites_0x76a4            EQU                               0x76a4
def_sprites_0x76a4            DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 0 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x75a4            EQU                               0x75a4
def_sprites_0x75a4            DB                                0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 63 63 63 63 0 0 0 0 63 0 0 0 0 0 63 0 0 250 
def_sprites_0x74a4            EQU                               0x74a4
def_sprites_0x74a4            DB                                63 63 63 63 63 0 63 0 0 0 0 0 0 63 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x73a4            EQU                               0x73a4
def_sprites_0x73a4            DB                                0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x72a4            EQU                               0x72a4
def_sprites_0x72a4            DB                                63 63 63 63 63 0 63 0 0 0 63 0 0 0 0 63 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 250 
def_sprites_0x71a4            EQU                               0x71a4
def_sprites_0x71a4            DB                                0 63 63 63 0 0 63 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_sprites_0x70a4            EQU                               0x70a4
def_sprites_0x70a4            DB                                0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 63 0 0 0 0 0 63 0 0 63 63 63 0 0 250 

; Define Fonts

; Lookup Tables
_lut_numericLabs              EQU                               0x64a3
_lut_numericLabs              DW                                253 254 247 251 0x0000
_lut_numericAddrs             EQU                               0x63a5
_lut_numericAddrs             DW                                0x1fca 0x1fdf 0x1ff4 0x20b0 
_lut_onAddrs_0x65a5           EQU                               0x65a5
_lut_onAddrs_0x65a5           DW                                0x17ae 0x17d5 0x18a8 0x18e7 
_spriteLut_0x62a3             EQU                               0x62a3
_spriteLut_0x62a3             DW                                0x7fc9 0x0000 0x7f92 0x0003 0x0000
_spriteLut_0x61a3             EQU                               0x61a3
_spriteLut_0x61a3             DW                                0x7f5b 0x0000 0x7f24 0x0003 0x0000
_spriteLut_0x60a3             EQU                               0x60a3
_spriteLut_0x60a3             DW                                0x7ec9 0x0000 0x7e92 0x0003 0x0000
_spriteLut_0x5fa3             EQU                               0x5fa3
_spriteLut_0x5fa3             DW                                0x7e5b 0x0000 0x7e24 0x0003 0x0000
_spriteLut_0x5ea3             EQU                               0x5ea3
_spriteLut_0x5ea3             DW                                0x7dc9 0x0000 0x7cc9 0x0003 0x0000
_spriteLut_0x5da3             EQU                               0x5da3
_spriteLut_0x5da3             DW                                0x7bc9 0x0000 0x7ac9 0x0003 0x0000
_spriteLut_0x5ca3             EQU                               0x5ca3
_spriteLut_0x5ca3             DW                                0x7dc9 0x0003 0x7cc9 0x0000 0x0000
_spriteLut_0x5ba3             EQU                               0x5ba3
_spriteLut_0x5ba3             DW                                0x7bc9 0x0003 0x7ac9 0x0000 0x0000
_spriteLut_0x5aa3             EQU                               0x5aa3
_spriteLut_0x5aa3             DW                                0x79c9 0x0000 0x78c9 0x0003 0x0000
_spriteLut_0x59a3             EQU                               0x59a3
_spriteLut_0x59a3             DW                                0x77c9 0x0000 0x76c9 0x0003 0x0000
_spriteLut_0x58a3             EQU                               0x58a3
_spriteLut_0x58a3             DW                                0x75c9 0x0000 0x74c9 0x0003 0x0000
_spriteLut_0x57a1             EQU                               0x57a1
_spriteLut_0x57a1             DW                                0x73c9 0x0000 0x72c9 0x0003 0x0000
_spriteLut_0x50af             EQU                               0x50af
_spriteLut_0x50af             DW                                0x71c9 0x0000 0x70c9 0x0003 0x0000
_spriteLut_0x50a5             EQU                               0x50a5
_spriteLut_0x50a5             DW                                0x6fc9 0x0000 0x6ec9 0x0003 0x0000
_spriteLut_0x4fbf             EQU                               0x4fbf
_spriteLut_0x4fbf             DW                                0x71c9 0x0003 0x70c9 0x0000 0x0000
_spriteLut_0x4fb5             EQU                               0x4fb5
_spriteLut_0x4fb5             DW                                0x6fc9 0x0003 0x6ec9 0x0000 0x0000
_spriteLut_0x4fab             EQU                               0x4fab
_spriteLut_0x4fab             DW                                0x6dc9 0x0000 0x6cc9 0x0003 0x0000
_spriteLut_0x4fa1             EQU                               0x4fa1
_spriteLut_0x4fa1             DW                                0x6bc9 0x0000 0x6ac9 0x0003 0x0000
_spriteLut_0x4ebf             EQU                               0x4ebf
_spriteLut_0x4ebf             DW                                0x69c9 0x0000 0x68c9 0x0003 0x0000
_spriteLut_0x4eb5             EQU                               0x4eb5
_spriteLut_0x4eb5             DW                                0x67c9 0x0000 0x66c9 0x0003 0x0000
_spriteLut_0x4eab             EQU                               0x4eab
_spriteLut_0x4eab             DW                                0x65c9 0x0000 0x64c9 0x0003 0x0000
_spriteLut_0x4ea1             EQU                               0x4ea1
_spriteLut_0x4ea1             DW                                0x63c9 0x0000 0x62c9 0x0003 0x0000
_spriteLut_0x4dbf             EQU                               0x4dbf
_spriteLut_0x4dbf             DW                                0x65c9 0x0003 0x64c9 0x0000 0x0000
_spriteLut_0x4db5             EQU                               0x4db5
_spriteLut_0x4db5             DW                                0x63c9 0x0003 0x62c9 0x0000 0x0000
_spriteLut_0x4dab             EQU                               0x4dab
_spriteLut_0x4dab             DW                                0x61c9 0x0000 0x60c9 0x0003 0x0000
_spriteLut_0x4da1             EQU                               0x4da1
_spriteLut_0x4da1             DW                                0x5fc9 0x0000 0x5ec9 0x0003 0x0000
_spriteLut_0x4cbf             EQU                               0x4cbf
_spriteLut_0x4cbf             DW                                0x5dc9 0x0000 0x5cc9 0x0003 0x0000
_spriteLut_0x4cb5             EQU                               0x4cb5
_spriteLut_0x4cb5             DW                                0x5bc9 0x0000 0x5ac9 0x0003 0x0000
_spriteLut_0x4cab             EQU                               0x4cab
_spriteLut_0x4cab             DW                                0x59c9 0x0000 0x58c9 0x0003 0x0000
_spriteLut_0x4ca1             EQU                               0x4ca1
_spriteLut_0x4ca1             DW                                0x57c9 0x0000 0x56c9 0x0003 0x0000
_spriteLut_0x4bbf             EQU                               0x4bbf
_spriteLut_0x4bbf             DW                                0x59c9 0x0003 0x58c9 0x0000 0x0000
_spriteLut_0x4bb5             EQU                               0x4bb5
_spriteLut_0x4bb5             DW                                0x57c9 0x0003 0x56c9 0x0000 0x0000
_spriteLut_0x4bab             EQU                               0x4bab
_spriteLut_0x4bab             DW                                0x55c9 0x0000 0x54c9 0x0003 0x0000
_spriteLut_0x4ba1             EQU                               0x4ba1
_spriteLut_0x4ba1             DW                                0x53c9 0x0000 0x52c9 0x0003 0x0000
_spriteLut_0x4abf             EQU                               0x4abf
_spriteLut_0x4abf             DW                                0x51c9 0x0000 0x50c9 0x0003 0x0000
_spriteLut_0x4ab5             EQU                               0x4ab5
_spriteLut_0x4ab5             DW                                0x4fc9 0x0000 0x4ec9 0x0003 0x0000
_spriteLut_0x4aab             EQU                               0x4aab
_spriteLut_0x4aab             DW                                0x55c9 0x0800 0x54c9 0x0803 0x0000
_spriteLut_0x4aa1             EQU                               0x4aa1
_spriteLut_0x4aa1             DW                                0x53c9 0x0800 0x52c9 0x0803 0x0000
_spriteLut_0x49bf             EQU                               0x49bf
_spriteLut_0x49bf             DW                                0x51c9 0x0800 0x50c9 0x0803 0x0000
_spriteLut_0x49b5             EQU                               0x49b5
_spriteLut_0x49b5             DW                                0x4fc9 0x0800 0x4ec9 0x0803 0x0000
_spriteLut_0x49ab             EQU                               0x49ab
_spriteLut_0x49ab             DW                                0x4dc9 0x0000 0x4cc9 0x0003 0x0000
_spriteLut_0x49a1             EQU                               0x49a1
_spriteLut_0x49a1             DW                                0x4bc9 0x0000 0x4ac9 0x0003 0x0000
_spriteLut_0x48bf             EQU                               0x48bf
_spriteLut_0x48bf             DW                                0x49c9 0x0000 0x48c9 0x0003 0x0000
_spriteLut_0x48b5             EQU                               0x48b5
_spriteLut_0x48b5             DW                                0x47c9 0x0000 0x46c9 0x0003 0x0000
_spriteLut_0x48ab             EQU                               0x48ab
_spriteLut_0x48ab             DW                                0x4dc9 0x0003 0x4cc9 0x0000 0x0000
_spriteLut_0x48a1             EQU                               0x48a1
_spriteLut_0x48a1             DW                                0x4bc9 0x0003 0x4ac9 0x0000 0x0000
_spriteLut_0x47bf             EQU                               0x47bf
_spriteLut_0x47bf             DW                                0x49c9 0x0003 0x48c9 0x0000 0x0000
_spriteLut_0x47b5             EQU                               0x47b5
_spriteLut_0x47b5             DW                                0x47c9 0x0003 0x46c9 0x0000 0x0000
_spriteLut_0x47ab             EQU                               0x47ab
_spriteLut_0x47ab             DW                                0x45c9 0x0000 0x44c9 0x0003 0x0000
_spriteLut_0x47a1             EQU                               0x47a1
_spriteLut_0x47a1             DW                                0x43c9 0x0000 0x42c9 0x0003 0x0000
_spriteLut_0x46bf             EQU                               0x46bf
_spriteLut_0x46bf             DW                                0x41c9 0x0000 0x40c9 0x0003 0x0000
_spriteLut_0x46b5             EQU                               0x46b5
_spriteLut_0x46b5             DW                                0x3fc9 0x0000 0x3ec9 0x0003 0x0000
_spriteLut_0x46ab             EQU                               0x46ab
_spriteLut_0x46ab             DW                                0x45c9 0x0000 0x44c9 0x0003 0x0000
_spriteLut_0x46a1             EQU                               0x46a1
_spriteLut_0x46a1             DW                                0x43c9 0x0000 0x42c9 0x0003 0x0000
_spriteLut_0x45bf             EQU                               0x45bf
_spriteLut_0x45bf             DW                                0x45c9 0x0003 0x44c9 0x0000 0x0000
_spriteLut_0x45b5             EQU                               0x45b5
_spriteLut_0x45b5             DW                                0x43c9 0x0003 0x42c9 0x0000 0x0000
_spriteLut_0x68a0             EQU                               0x68a0
_spriteLut_0x68a0             DW                                0x7f11 0x0200 0x0000
_spriteLut_0x67a0             EQU                               0x67a0
_spriteLut_0x67a0             DW                                0x7f11 0x0000 0x0000
_spriteLut_0x66a0             EQU                               0x66a0
_spriteLut_0x66a0             DW                                0x7e11 0x0000 0x0000
_spriteLut_0x56a1             EQU                               0x56a1
_spriteLut_0x56a1             DW                                0x7e11 0x0000 0x0000
_spriteLut_0x45ab             EQU                               0x45ab
_spriteLut_0x45ab             DW                                0x3dc9 0x0000 0x3cc9 0x0006 0x0000
_spriteLut_0x52a1             EQU                               0x52a1
_spriteLut_0x52a1             DW                                0x7da4 0x0000 0x0000
_spriteLut_0x51a3             EQU                               0x51a3
_spriteLut_0x51a3             DW                                0x7ca4 0x0000 0x0000
_spriteLut_0x45a1             EQU                               0x45a1
_spriteLut_0x45a1             DW                                0x3dc9 0x0000 0x3cc9 0x0003 0x0000
_spriteLut_0x44c3             EQU                               0x44c3
_spriteLut_0x44c3             DW                                0x7ba4 0x0000 0x0000
_spriteLut_0x44bd             EQU                               0x44bd
_spriteLut_0x44bd             DW                                0x7aa4 0x0000 0x0000
_spriteLut_0x44b7             EQU                               0x44b7
_spriteLut_0x44b7             DW                                0x79a4 0x0000 0x0000
_spriteLut_0x44b1             EQU                               0x44b1
_spriteLut_0x44b1             DW                                0x78a4 0x0000 0x0000
_spriteLut_0x44ab             EQU                               0x44ab
_spriteLut_0x44ab             DW                                0x77a4 0x0000 0x0000
_spriteLut_0x44a5             EQU                               0x44a5
_spriteLut_0x44a5             DW                                0x76a4 0x0000 0x0000
_spriteLut_0x43c3             EQU                               0x43c3
_spriteLut_0x43c3             DW                                0x75a4 0x0000 0x0000
_spriteLut_0x43bd             EQU                               0x43bd
_spriteLut_0x43bd             DW                                0x74a4 0x0000 0x0000
_spriteLut_0x43b7             EQU                               0x43b7
_spriteLut_0x43b7             DW                                0x73a4 0x0000 0x0000
_spriteLut_0x43b1             EQU                               0x43b1
_spriteLut_0x43b1             DW                                0x72a4 0x0000 0x0000
_spriteLut_0x43ab             EQU                               0x43ab
_spriteLut_0x43ab             DW                                0x71a4 0x0000 0x0000
_spriteLut_0x43a5             EQU                               0x43a5
_spriteLut_0x43a5             DW                                0x70a4 0x0000 0x0000
_spritesLut_                  EQU                               0x0668
_spritesLut_                  DW                                0x62a3 0x61a3 0x60a3 0x5fa3 0x5ea3 0x5da3 0x5ca3 0x5ba3 0x5aa3 0x59a3 0x58a3 0x57a1 0x50af 0x50a5 0x4fbf 0x4fb5 0x4fab 0x4fa1 0x4ebf 0x4eb5 0x4eab 0x4ea1 0x4dbf 0x4db5 0x4dab 0x4da1 0x4cbf 0x4cb5 0x4cab 0x4ca1 0x4bbf 0x4bb5 0x4bab 0x4ba1 0x4abf 0x4ab5 0x4aab 0x4aa1 0x49bf 0x49b5 0x49ab 0x49a1 0x48bf 0x48b5 0x48ab 0x48a1 0x47bf 0x47b5 0x47ab 0x47a1 0x46bf 0x46b5 0x46ab 0x46a1 0x45bf 0x45b5 0x68a0 0x67a0 0x66a0 0x56a1 0x45ab 0x52a1 0x51a3 0x45a1 0x44c3 0x44bd 0x44b7 0x44b1 0x44ab 0x44a5 0x43c3 0x43bd 0x43b7 0x43b1 0x43ab 0x43a5 

; Code
_entryPoint_                  LDI                               0x40
                              STW                               romType
                              RomCheck                          
                              Initialise                                                        ; INIT

                              CALLI                             _initSystem                     ; gosub initSystem

                              CALLI                             _drawMaze                       ; call drawMaze

_reset                        CALLI                             _resetLevel                     ; gosub resetLevel

_start                        CALLI                             _startLevel                     ; gosub startLevel

_init                         CALLI                             _initVars                       ; call initVars

_repeat_0x0226                WaitVBlank                                                        ; wait

                              LDW                               _gmode
                              XORI                              1
                              BNE                               _else_0x023d                    ; if gmode &&= SCARED_MODE

                              CALLI                             _drawGhosts                     ; gosub drawGhosts

                              CALLI                             _drawPucMon
                              CALLI                             _endif_0x0243                   ; gosub drawPucMon

_else_0x023d                  CALLI                             _drawPucMon                     ; gosub drawPucMon

                              CALLI                             _drawGhosts                     ; gosub drawGhosts

_endif_0x0243                 LD                                _eatTicks
                              XORI                              0
                              BNE                               _endif_0x025c                   ; if eatTicks.lo &&= 0

                              LD                                _livesDots
                              XORI                              0
                              BNE                               _endif_0x025c                   ; if livesDots.lo &&= 0

                              CALLI                             _nextLevel                      ; goto nextLevel

_endif_0x025c                 LD                                _flags + 1
                              XORI                              1
                              BNE                               _endif_0x028e                   ; if flags.hi &&= 1

                              LDI                               0
                              ST                                _flags + 1                      ; flags.hi = 0

                              LD                                _livesDots + 1
                              SUBI                              1
                              ST                                _livesDots + 1                  ; livesDots.hi = livesDots.hi - 1

                              CALLI                             _drawDeath                      ; call drawDeath

                              LDI                               0x00
                              STW                               0xd8
                              CALLI                             _drawDots                       ; call drawDots, 0 'refresh

                              LD                                _livesDots + 1
                              XORI                              0
                              BNE                               _endif_0x028b                   ; if livesDots.hi &&= 0

                              CALLI                             _reset                          ; goto reset

_endif_0x028b                 CALLI                             _init                           ; goto init

_endif_0x028e                 LDI                               60
                              STW                               spriteId
                              LDI                               3
                              ST                                spriteXY
                              LDI                               53
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Tunnel, (1+ORIGIN_X),   (51+ORIGIN_Y)

                              LDI                               60
                              STW                               spriteId
                              LDI                               125
                              ST                                spriteXY
                              LDI                               53
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Tunnel, (123+ORIGIN_X), (51+ORIGIN_Y)

                              CALLI                             _drawPills                      ; call drawPills

                              CALLI                             _setGhostsMode                  ; gosub setGhostsMode

                              CALLI                             _moveGhosts                     ; call moveGhosts

                              CALLI                             _handleInput                    ; gosub handleInput

                              CALLI                             _movePucMon                     ; gosub movePucMon

                              INC                               _timeTicks                      ; inc timeTicks.lo

                              CALLI                             _repeat_0x0226                  ; forever

_mod5                         PUSH                              
                              LD                                _mx + 1
                              STW                               0xea
                              LD                                _mx
                              ADDW                              0xea
                              STW                               _mx
                              STW                               mathShift
                              ShiftRight4bit                    
                              STW                               0xe8
                              LDW                               _mx
                              ANDI                              15
                              ADDW                              0xe8
                              STW                               _mx                             ; mx = mx.hi + mx.lo : mx = (mx >>4) + (mx AND &h000F)

                              LDW                               _mx
                              SUBI                              14
                              BLE                               _elseif_0x02fe                  ; if mx &&> 14

                              LDW                               _mx
                              SUBI                              15
                              STW                               _mx
                              CALLI                             _endif_0x0327                   ; mx = mx - 15

_elseif_0x02fe                LDW                               _mx
                              SUBI                              9
                              BLE                               _elseif_0x0314                  ; elseif mx &&> 9

                              LDW                               _mx
                              SUBI                              10
                              STW                               _mx
                              CALLI                             _endif_0x0327                   ; mx = mx - 10

_elseif_0x0314                LDW                               _mx
                              SUBI                              4
                              BLE                               _endif_0x0327                   ; elseif mx &&> 4

                              LDW                               _mx
                              SUBI                              5
                              STW                               _mx                             ; mx = mx - 5

_endif_0x0327                 LD                                _my + 1
                              CALLI                             _page_0x0300
_page_0x0300                  STW                               0xea
                              LD                                _my
                              ADDW                              0xea
                              STW                               _my
                              STW                               mathShift
                              ShiftRight4bit                    
                              STW                               0xe8
                              LDW                               _my
                              ANDI                              15
                              ADDW                              0xe8
                              STW                               _my                             ; my = my.hi + my.lo : my = (my >>4) + (my AND &h000F)

                              LDW                               _my
                              SUBI                              14
                              BLE                               _elseif_0x0360                  ; if my &&> 14

                              LDW                               _my
                              SUBI                              15
                              STW                               _my
                              CALLI                             _endif_0x0389                   ; my = my - 15

_elseif_0x0360                LDW                               _my
                              SUBI                              9
                              BLE                               _elseif_0x0376                  ; elseif my &&> 9

                              LDW                               _my
                              SUBI                              10
                              STW                               _my
                              CALLI                             _endif_0x0389                   ; my = my - 10

_elseif_0x0376                LDW                               _my
                              SUBI                              4
                              BLE                               _endif_0x0389                   ; elseif my &&> 4

                              LDW                               _my
                              SUBI                              5
                              STW                               _my                             ; my = my - 5

_endif_0x0389                 Return                                                            ; return

_div5                         PUSH                                                              ; proc div5

                              LDW                               _ci
                              STW                               mathShift
                              ShiftRight6bit                    
                              STW                               0xea
                              LDW                               _ci
                              SUBW                              0xea
                              STW                               _ci                             ; ci = ci - (ci >>6)                         'error term

                              LDW                               _ci
                              LSLW                              
                              LSLW                              
                              LSLW                              
                              LSLW                              
                              STW                               _div5_i
                              LSLW                              
                              ADDW                              _div5_i
                              STW                               0xe8
                              LDW                               _ci
                              LSLW                              
                              LSLW                              
                              ADDW                              0xe8
                              STW                               _ci                             ; i  = ci <<4 : ci = (i <<1) + i + (ci <<2)  'multiply by 52

                              LD                                _ci + 1
                              STW                               _ci                             ; ci = ci.hi                                 'divide by 256

                              LDW                               _cj
                              STW                               mathShift
                              ShiftRight6bit                    
                              STW                               0xea
                              LDW                               _cj
                              SUBW                              0xea
                              STW                               _cj                             ; cj = cj - (cj >>6)                         'error term

                              LDW                               _cj
                              LSLW                              
                              LSLW                              
                              LSLW                              
                              LSLW                              
                              STW                               _div5_j
                              LSLW                              
                              ADDW                              _div5_j
                              STW                               0xe8
                              LDW                               _cj
                              LSLW                              
                              LSLW                              
                              ADDW                              0xe8
                              STW                               _cj                             ; j  = cj <<4 : cj = (j <<1) + j + (cj <<2)  'multiply by 52

                              LD                                _cj + 1
                              STW                               _cj                             ; cj = cj.hi                                 'divide by 256

                              Return                                                            ; endproc

_drawPucMon                   PUSH                              
                              LDW                               _mz
                              XORI                              240
                              BNE                               _endif_0x041d                   ; if mz &&= WALL

                              LDI                               42
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, PucLt + 2, px, py

                              Return                                                            ; return

_endif_0x041d                 LDW                               _px
                              STW                               mathShift
                              ShiftRight1bit                    
                              ANDI                              3
                              STW                               _xf                             ; xf = (px LSR 1) AND 3

                              LDW                               _py
                              STW                               mathShift
                              ShiftRight1bit                    
                              ANDI                              3
                              STW                               _yf                             ; yf = (py LSR 1) AND 3

                              LDW                               _pxd
                              XORI                              1
                              BNE                               _elseif_0x0464                  ; if pxd &&= 1

                              LDI                               44
                              ADDW                              _xf
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSpriteX                       
                              CALLI                             _endif_0x04c9                   ; sprite FlipX, PucRt + xf, px, py

_elseif_0x0464                LDWI                              -1
                              XORW                              _pxd
                              JumpEQ                            _elseif_0x048d 14               ; elseif pxd &= -1

                              LDI                               40
                              ADDW                              _xf
                              CALLI                             _page_0x0400
_page_0x0400                  STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                        
                              CALLI                             _endif_0x04c9                   ; sprite NoFlip, PucLt + xf, px, py

_elseif_0x048d                LDW                               _pyd
                              XORI                              1
                              BNE                               _else_0x04b2                    ; elseif pyd &&= 1

                              LDI                               36
                              ADDW                              _yf
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSpriteY                       
                              CALLI                             _endif_0x04c9                   ; sprite FlipY, PucDn + yf, px, py

_else_0x04b2                  LDI                               32
                              ADDW                              _yf
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, PucUp + yf, px, py

_endif_0x04c9                 LDW                               _px
                              ADDW                              _pxd
                              STW                               _px                             ; px = px + pxd

                              LDW                               _py
                              ADDW                              _pyd
                              STW                               _py                             ; py = py + pyd

                              Return                                                            ; return

_drawGhosts                   PUSH                              
                              LDI                               0
                              STW                               _gidx                           ; for gidx=0 to NUM_GHOSTS-1

_next_0x04e0                  CALLI                             _getGhostVars                   ; gosub getGhostVars

                              LD                                _livesDots
                              XORI                              0
                              CALLI                             convertEqOp
                              STW                               0xe8
                              LD                                _flags + 1
                              ORW                               0xe8
                              JumpFalse                         _endif_0x050e 17                ; if (flags.hi) OR (livesDots.lo = 0)

                              LDI                               63
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Erase12x9, gx, gy

                              CALLI                             _drawNextGhost                  ; goto drawNextGhost

_endif_0x050e                 LDW                               _gx
                              STW                               mathShift
                              ShiftRight2bit                    
                              ANDI                              1
                              STW                               _xf                             ; xf = (gx LSR 2) AND 1

                              LDW                               _gy
                              STW                               mathShift
                              ShiftRight2bit                    
                              ANDI                              1
                              STW                               _yf                             ; yf = (gy LSR 2) AND 1

                              LD                                _flags
                              ANDI                              1
                              BEQ                               _elseif_0x0545                  ; if &(flags.lo AND 1)

                              CALLI                             _drawDeadGhost
                              CALLI                             _drawNextGhost                  ; gosub drawDeadGhost

_elseif_0x0545                LDW                               _gmode
                              XORI                              1
                              BNE                               _else_0x0593                    ; elseif gmode &&= SCARED_MODE

                              LDI                               8
                              STW                               0xe8
                              LD                                _levelPain + 1
                              STW                               0xea
                              LDW                               0xe8
                              SUBW                              0xea
                              STW                               0xec
                              LD                                _timeTicks + 1
                              SUBW                              0xec
                              BGE                               _else_0x056f                    ; if timeTicks.hi &&< (8-levelPain.hi)

                              CALLI                             _drawScaredGhost
                              CALLI                             _endif_0x0590                   ; gosub drawScaredGhost

_else_0x056f                  LD                                _timeTicks
                              STW                               mathShift
                              ShiftRight3bit                    
                              ANDI                              1
                              BEQ                               _else_0x058d                    ; if &((timeTicks.lo >>3) AND 1)

                              CALLI                             _drawNormalGhost
                              CALLI                             _endif_0x0590                   ; call drawNormalGhost

_else_0x058d                  CALLI                             _drawScaredGhost                ; gosub drawScaredGhost

_endif_0x0590                 CALLI                             _drawNextGhost                  ; endif

_else_0x0593                  CALLI                             _drawNormalGhost                ; call drawNormalGhost

_drawNextGhost                ForNextFarInc                     _gidx _next_0x04e0 3            ; next gidx

                              Return                                                            ; return

_drawNormalGhost              PUSH                                                              ; proc drawNormalGhost

                              LDW                               _gidx
                              LSLW                              
                              LSLW                              
                              STW                               _drawNormalGhost_i              ; i = gidx <<2

                              LDW                               _gxd
                              CALLI                             _page_0x0500
_page_0x0500                  XORI                              1
                              JumpEQ                            _elseif_0x05e1 25               ; if gxd &= 1

                              LDWI                              20921
                              ADDW                              _drawNormalGhost_i
                              PEEK                              
                              ADDW                              _xf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSpriteX                       
                              CALLI                             _endif_0x066d                   ; sprite FlipX,  peek(@gframes + 0 + i) + xf, gx, gy

_elseif_0x05e1                LDWI                              -1
                              XORW                              _gxd
                              JumpEQ                            _elseif_0x0616 26               ; elseif gxd &= -1

                              LDWI                              20922
                              ADDW                              _drawNormalGhost_i
                              PEEK                              
                              ADDW                              _xf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                        
                              CALLI                             _endif_0x066d                   ; sprite NoFlip, peek(@gframes + 1 + i) + xf, gx, gy

_elseif_0x0616                LDW                               _gyd
                              XORI                              1
                              JumpEQ                            _else_0x064a 27                 ; elseif gyd &= 1

                              LDWI                              20923
                              ADDW                              _drawNormalGhost_i
                              PEEK                              
                              ADDW                              _yf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                        
                              CALLI                             _endif_0x066d                   ; sprite NoFlip, peek(@gframes + 2 + i) + yf, gx, gy

_else_0x064a                  LDWI                              20924
                              ADDW                              _drawNormalGhost_i
                              PEEK                              
                              ADDW                              _yf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, peek(@gframes + 3 + i) + yf, gx, gy

_endif_0x066d                 Return                                                            ; endproc

_drawScaredGhost              PUSH                              
                              LDW                               _gxd
                              XORI                              1
                              JumpEQ                            _elseif_0x0698 29               ; if gxd &= 1

                              LDI                               54
                              ADDW                              _xf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSpriteX                       
                              CALLI                             _endif_0x06fd                   ; sprite FlipX,  ScaredRt + xf, gx, gy

_elseif_0x0698                LDWI                              -1
                              XORW                              _gxd
                              JumpEQ                            _elseif_0x06c1 30               ; elseif gxd &= -1

                              LDI                               52
                              ADDW                              _xf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                        
                              CALLI                             _endif_0x06fd                   ; sprite NoFlip, ScaredLt + xf, gx, gy

_elseif_0x06c1                LDW                               _gyd
                              XORI                              1
                              BNE                               _else_0x06e6                    ; elseif gyd &&= 1

                              LDI                               50
                              ADDW                              _yf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                        
                              CALLI                             _endif_0x06fd                   ; sprite NoFlip, ScaredDn + yf, gx, gy

_else_0x06e6                  LDI                               48
                              ADDW                              _yf
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, ScaredUp + yf, gx, gy

_endif_0x06fd                 Return                                                            ; return

_drawDeadGhost                PUSH                              
                              LDW                               _gxd
                              CALLI                             _page_0x0600
_page_0x0600                  XORI                              1
                              BNE                               _elseif_0x072b                  ; if gxd &&= 1

                              LDI                               59
                              STW                               spriteId
                              LDW                               _gx
                              ADDI                              2
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              11
                              ST                                spriteXY + 1
                              DrawSpriteX                       
                              CALLI                             _endif_0x079f                   ; sprite FlipX,  EyesRt, gx+2, gy+3

_elseif_0x072b                LDWI                              -1
                              XORW                              _gxd
                              BNE                               _elseif_0x0757                  ; elseif gxd &&= -1

                              LDI                               58
                              STW                               spriteId
                              LDW                               _gx
                              ADDI                              2
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              11
                              ST                                spriteXY + 1
                              DrawSprite                        
                              CALLI                             _endif_0x079f                   ; sprite NoFlip, EyesLt, gx+2, gy+3

_elseif_0x0757                LDW                               _gyd
                              XORI                              1
                              BNE                               _else_0x0782                    ; elseif gyd &&= 1

                              LDI                               57
                              STW                               spriteId
                              LDW                               _gx
                              ADDI                              2
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              11
                              ST                                spriteXY + 1
                              DrawSprite                        
                              CALLI                             _endif_0x079f                   ; sprite NoFlip, EyesDn, gx+2, gy+3

_else_0x0782                  LDI                               56
                              STW                               spriteId
                              LDW                               _gx
                              ADDI                              2
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              11
                              CALLI                             _page_0x0800
_page_0x0800                  ST                                spriteXY + 1
                              DrawSpriteY                                                       ; sprite FlipY,  EyesUp, gx+2, gy+3

_endif_0x079f                 Return                                                            ; return

_drawPills                    PUSH                                                              ; proc drawPills

                              LD                                _timeTicks
                              ANDI                              7
                              STW                               _drawPills_i                    ; i = timeTicks.lo AND 7

                              LDW                               _drawPills_i
                              XORI                              0
                              JumpEQ                            _endif_0x0875 41                ; if i &= 0

                              LD                                _timeTicks
                              STW                               mathShift
                              ShiftRight3bit                    
                              ANDI                              1
                              STW                               _drawPills_i                    ; i = (timeTicks.lo >>3) AND 1

                              LDWI                              0x6dae
                              PEEK                              
                              XORI                              2
                              JumpEQ                            _else_0x07f4 37
                              LDI                               61
                              ADDW                              _drawPills_i
                              STW                               spriteId
                              LDI                               5
                              ST                                spriteXY
                              LDI                               9
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; if peek(PILL_LT) &= PILL then sprite NoFlip, Pill + i, (1*5)  + (ORIGIN_X-2), (2*5)  + (ORIGIN_Y - 3)

_else_0x07f4                  LDWI                              0x6dc7
                              PEEK                              
                              XORI                              2
                              JumpEQ                            _else_0x081f 38
                              LDI                               61
                              ADDW                              _drawPills_i
                              STW                               spriteId
                              LDI                               130
                              ST                                spriteXY
                              LDI                               9
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; if peek(PILL_RT) &= PILL then sprite NoFlip, Pill + i, (26*5) + (ORIGIN_X-2), (2*5)  + (ORIGIN_Y - 3)

_else_0x081f                  LDWI                              0x5dae
                              PEEK                              
                              XORI                              2
                              JumpEQ                            _else_0x084a 39
                              LDI                               61
                              ADDW                              _drawPills_i
                              STW                               spriteId
                              LDI                               5
                              ST                                spriteXY
                              LDI                               89
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; if peek(PILL_LB) &= PILL then sprite NoFlip, Pill + i, (1*5)  + (ORIGIN_X-2), (18*5) + (ORIGIN_Y - 3)

_else_0x084a                  LDWI                              0x5dc7
                              PEEK                              
                              XORI                              2
                              JumpEQ                            _endif_0x0875 40
                              LDI                               61
                              ADDW                              _drawPills_i
                              STW                               spriteId
                              LDI                               130
                              ST                                spriteXY
                              LDI                               89
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; if peek(PILL_RB) &= PILL then sprite NoFlip, Pill + i, (26*5) + (ORIGIN_X-2), (18*5) + (ORIGIN_Y - 3)

_endif_0x0875                 Return                                                            ; endproc

_movePucMon                   PUSH                              
                              CALLI                             _coordsPucMon                   ; gosub coordsPucMon

                              LDW                               _ci
                              SUBW                              _pxd
                              STW                               _puci                           ; puci = ci - pxd

                              LDW                               _cj
                              SUBW                              _pyd
                              STW                               _pucj                           ; pucj = cj - pyd

                              LDI                               0
                              ST                                _eatTicks + 1                   ; eatTicks.hi = 0

                              LDW                               _cj
                              STW                               memIndex0
                              LDW                               _ci
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              STW                               _mz                             ; mz = maze(cj, ci)

                              LDW                               _mz
                              ANDI                              15
                              XORI                              1
                              JumpEQ                            _elseif_0x08f2 42               ; if (mz AND &h0F) &= DOT

                              LDI                               1
                              ST                                _eatTicks + 1                   ; eatTicks.hi = 1

                              LDW                               _mz
                              ANDI                              240
                              ORI                               3
                              STW                               memValue
                              LDW                               _cj
                              STW                               memIndex0
                              LDW                               _ci
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              LDW                               memValue
                              POKE                              memAddr                         ; maze(cj, ci) = (mz AND &hF0) OR RDOT

                              LDWI                              26278
                              STW                               bcdDstAddr
                              LDI                               10
                              BcdInt                                                            ; bcdint @pointsBCD, 10

                              CALLI                             _page_0x0900
_page_0x0900                  CALLI                             _drawScore                      ; call drawScore

                              LD                                _livesDots
                              SUBI                              1
                              ST                                _livesDots
                              CALLI                             _endif_0x0985                   ; livesDots.lo = livesDots.lo - 1

_elseif_0x08f2                LDW                               _mz
                              XORI                              2
                              JumpEQ                            _elseif_0x0940 43               ; elseif mz &= PILL

                              LDW                               _mz
                              ANDI                              240
                              ORI                               4
                              STW                               memValue
                              LDW                               _cj
                              STW                               memIndex0
                              LDW                               _ci
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              LDW                               memValue
                              POKE                              memAddr                         ; maze(cj, ci) = (mz AND &hF0) OR RPILL

                              LDI                               1
                              STW                               _gmode                          ; gmode = SCARED_MODE

                              LDI                               0
                              STW                               _timeTicks                      ; timeTicks = 0

                              LDWI                              26278
                              STW                               bcdDstAddr
                              LDI                               50
                              BcdInt                                                            ; bcdint @pointsBCD, 50

                              CALLI                             _drawScore                      ; call drawScore

                              LD                                _livesDots
                              SUBI                              1
                              ST                                _livesDots
                              CALLI                             _endif_0x0985                   ; livesDots.lo = livesDots.lo - 1

_elseif_0x0940                LDW                               _mz
                              SUBI                              224
                              JumpGE                            _elseif_0x096f 44               ; elseif mz &>= DOOR

                              LDW                               _oxd
                              STW                               _pxd
                              LDW                               _oyd
                              STW                               _pyd                            ; pxd = oxd : pyd = oyd

                              CALLI                             _coordsPucMon                   ; gosub coordsPucMon

                              LDW                               _cj
                              STW                               memIndex0
                              LDW                               _ci
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              STW                               _mz
                              CALLI                             _endif_0x0985                   ; mz = maze(cj, ci)

_elseif_0x096f                LDW                               _mz
                              XORI                              160
                              JumpEQ                            _endif_0x0985 45                ; elseif mz &= TUNNEL

                              LDI                               131
                              SUBW                              _px
                              STW                               _px                             ; px = (129+ORIGIN_X) - px

_endif_0x0985                 LD                                _eatTicks + 1
                              STW                               0xea
                              LD                                _eatTicks
                              ORW                               0xea
                              JumpFalse                         _endif_0x099a 46                ; if (eatTicks.hi) OR (eatTicks.lo)

                              CALLI                             _eatSound                       ; call eatSound

_endif_0x099a                 Return                                                            ; return

_eatSound                     PUSH                                                              ; proc eatSound

                              LDWI                              27808
                              STW                               0xe8
                              LD                                _eatTicks
                              ADDW                              0xe8
                              PEEK                              
                              STW                               musicNote
                              GetMusicNote                      
                              STW                               _eatSound_n                     ; n = get("MUSIC_NOTE", peek(@enotes + eatTicks.lo))

                              LDI                               2
                              ST                                sndChannel + 1
                              LDW                               _eatSound_n
                              STW                               sndFrequency
                              LDI                               63
                              STW                               sndVolume
                              LDI                               1
                              STW                               sndWaveType
                              SoundOnV                                                          ; sound on, 2, n, 63, 1

                              INC                               _eatTicks                       ; inc eatTicks.lo

                              LD                                _eatTicks
                              SUBI                              4
                              JumpGE                            _endif_0x09e6 47                ; if eatTicks.lo &>= 4

                              LDI                               0
                              ST                                _eatTicks                       ; eatTicks.lo = 0

                              LDI                               2
                              ST                                sndChannel + 1
                              SoundOff                                                          ; sound off, 2

_endif_0x09e6                 Return                                                            ; endproc

_moveGhosts                   PUSH                                                              ; proc moveGhosts

                              LDI                               0
                              STW                               _gidx                           ; for gidx=0 to NUM_GHOSTS-1

_next_0x09ed                  CALLI                             _getGhostVars                   ; gosub getGhostVars

                              LDI                               0
                              STW                               _slowed                         ; slowed = 0

                              LDW                               _gmode
                              XORI                              1
                              CALLI                             convertEqOp
                              STW                               0xe8
                              LD                                _flags
                              ANDI                              2
                              XORI                              2
                              CALLI                             convertEqOp
                              ORW                               0xe8
                              CALLI                             _page_0x0aa0
_page_0x0aa0                  JumpFalse                         _endif_0x0a4e 50                ; if (gmode = SCARED_MODE) OR ((flags.lo AND 2) = 2)

                              LD                                _timeTicks
                              ANDI                              1
                              XORI                              0
                              JumpEQ                            _endif_0x0a4e 49                ; if (timeTicks.lo AND 1) &= 0

                              LD                                _flags
                              ANDI                              1
                              XORI                              0
                              JumpEQ                            _endif_0x0a4e 48                ; if (flags.lo AND 1) &= 0

                              LDI                               1
                              STW                               _slowed                         ; slowed = 1

                              LDI                               0
                              STW                               _gxd
                              STW                               _gyd                            ; gxd = 0 : gyd = gxd

_endif_0x0a4e                 LDW                               _gx
                              ADDW                              _gxd
                              STW                               _gx                             ; gx = gx + gxd

                              LDW                               _gy
                              ADDW                              _gyd
                              STW                               _gy                             ; gy = gy + gyd

                              LD                                _flags
                              ANDI                              1
                              XORI                              0
                              JumpEQ                            _endif_0x0b12 55                ; if (flags.lo AND 1) &= 0

                              LDW                               _gx
                              SUBW                              _px
                              Absolute                          
                              SUBI                              3
                              JumpLE                            _endif_0x0b12 54                ; if abs(gx - px) &<= 3

                              LDW                               _gy
                              SUBW                              _py
                              Absolute                          
                              SUBI                              3
                              CALLI                             _page_0x0ba0
_page_0x0ba0                  JumpLE                            _endif_0x0b12 53                ; if abs(gy - py) &<= 3

                              LDI                               63
                              STW                               spriteId
                              LDW                               _gx
                              ST                                spriteXY
                              LDW                               _gy
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Erase12x9, gx, gy

                              LDW                               _gmode
                              XORI                              1
                              JumpEQ                            _page_0x0ca0 51                 ; if gmode &= SCARED_MODE

                              LDI                               42
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, PucLt + 2, px, py

                              CALLI                             _deadSound                      ; call deadSound

                              LD                                _flags
                              ORI                               1
                              ST                                _flags
                              LDWI                              0x7da0
                              ADDW                              _gidx
                              STW                               memAddr
                              LD                                _flags
                              POKE                              memAddr                         ; flags.lo = flags.lo OR 1 : ghostsFlags(gidx) = flags.lo

                              LDWI                              26278
                              STW                               bcdDstAddr
                              LDW                               _bonus
                              BcdInt                            
                              LDW                               _bonus
                              ADDW                              _bonus
                              STW                               _bonus                          ; bcdint @pointsBCD, bonus : bonus = bonus + bonus

                              CALLI                             _drawScore
                              CALLI                             _endif_0x0b12                   ; call drawScore

                              CALLI                             _page_0x0ca0
_page_0x0ca0                  LDI                               1
                              ST                                _flags + 1                      ; flags.hi = 1

_endif_0x0b12                 LDW                               _gmode
                              XORI                              1
                              JumpEQ                            _endif_0x0b4c 58                ; if gmode &= SCARED_MODE

                              LD                                _timeTicks + 1
                              XORI                              0
                              JumpEQ                            _endif_0x0b4c 57                ; if timeTicks.hi &= 0

                              LD                                _timeTicks
                              XORI                              1
                              JumpEQ                            _endif_0x0b4c 56                ; if timeTicks.lo &= 1

                              LDI                               0
                              SUBW                              _gxd
                              STW                               _gxd
                              LDI                               0
                              SUBW                              _gyd
                              STW                               _gyd                            ; gxd = -gxd : gyd = -gyd

_endif_0x0b4c                 LDW                               _gx
                              STW                               _mx
                              LDW                               _gy
                              STW                               _my
                              CALLI                             _mod5                           ; mx = gx : my = gy : gosub mod5

                              LDW                               _mx
                              XORI                              3
                              JumpNE                            _else_0x0b68 59
                              CALLI                             _moveNextGhost                  ; if mx &<> 3 then goto moveNextGhost

_else_0x0b68                  LDW                               _my
                              XORI                              3
                              JumpNE                            _else_0x0b79 60
                              CALLI                             _moveNextGhost                  ; if my &<> 3 then goto moveNextGhost

_else_0x0b79                  LDW                               _gx
                              ADDW                              _gxd
                              ADDW                              _gxd
                              ADDW                              _gxd
                              CALLI                             _page_0x0da0
_page_0x0da0                  ADDI                              4
                              STW                               _ci                             ; ci = gx + gxd + gxd + gxd + -(ORIGIN_X-6)

                              LDW                               _gy
                              ADDW                              _gyd
                              ADDW                              _gyd
                              ADDW                              _gyd
                              ADDI                              4
                              STW                               _cj                             ; cj = gy + gyd + gyd + gyd +  (ORIGIN_Y+2)

                              CALLI                             _div5                           ; call div5

                              LDW                               _ci
                              SUBW                              _gxd
                              SUBW                              _gxd
                              STW                               _di                             ; di = ci - gxd - gxd

                              LDW                               _cj
                              SUBW                              _gyd
                              SUBW                              _gyd
                              STW                               _dj                             ; dj = cj - gyd - gyd

                              LDW                               _ci
                              SUBW                              _gxd
                              STW                               _gi                             ; gi = ci - gxd

                              LDW                               _cj
                              SUBW                              _gyd
                              STW                               _gj                             ; gj = cj - gyd

                              LDW                               _dj
                              STW                               memIndex0
                              LDW                               _di
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              STW                               _mz                             ; mz = maze(dj, di)

                              LDW                               _slowed
                              XORI                              0
                              JumpEQ                            _else_0x0c00 61
                              CALLI                             _replaceDot                     ; if slowed &= 0 then gosub replaceDot

_else_0x0c00                  LDW                               _gj
                              STW                               memIndex0
                              LDW                               _gi
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              CALLI                             _page_0x0ea0
_page_0x0ea0                  XORI                              192
                              JumpEQ                            _endif_0x0c4a 64                ; if maze(gj, gi) &= EXIT

                              LD                                _flags
                              ANDI                              1
                              XORI                              0
                              JumpEQ                            _endif_0x0c4a 63                ; if (flags.lo AND 1) &= 0

                              LDW                               _gmode
                              XORI                              1
                              JumpNE                            _endif_0x0c4a 62                ; if gmode &<> SCARED_MODE

                              LDI                               0
                              STW                               _gxd
                              LDWI                              -1
                              STW                               _gyd                            ; gxd = 0 : gyd = -1

_endif_0x0c4a                 LDW                               _gidx
                              STW                               register0
                              ADDW                              register0
                              STW                               register0
                              LDWI                              _lut_onAddrs_0x65a5
                              ADDW                              register0
                              DEEK                              
                              CALL                              giga_vAC                        ; on gidx gosub getBlinkyTarget, getPinkyTarget, getInkyTarget, getClydeTarget

                              LDW                               _gi
                              XORI                              13
                              JumpEQ                            _page_0x0fa0 66                 ; if gi &= 13

                              LDW                               _gj
                              XORI                              10
                              JumpEQ                            _page_0x0fa0 65                 ; if gj &= 10

                              LD                                _flags
                              ANDI                              254
                              ST                                _flags
                              LDWI                              0x7da0
                              ADDW                              _gidx
                              STW                               memAddr
                              LD                                _flags
                              POKE                              memAddr                         ; flags.lo = flags.lo AND &hFE : ghostsFlags(gidx) = flags.lo

                              CALLI                             _page_0x0fa0
_page_0x0fa0                  LD                                _flags
                              ANDI                              1
                              XORI                              1
                              JumpEQ                            _endif_0x0cad 67                ; if (flags.lo AND 1) &= 1

                              LDI                               12
                              STW                               _ti
                              LDI                               11
                              STW                               _tj                             ; ti = 12 : tj = 11

_endif_0x0cad                 LDW                               _cj
                              STW                               memIndex0
                              LDW                               _ci
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              STW                               _mz                             ; mz = maze(cj, ci)

                              LDW                               _mz
                              XORI                              240
                              JumpEQ                            _elseif_0x0cdb 68               ; if mz &= WALL

                              CALLI                             _getWallDir                     ; gosub getWallDir

                              LDW                               _gdir
                              STW                               0xd8
                              CALLI                             _getGhostDir
                              CALLI                             _moveNextGhost                  ; call getGhostDir, gdir

_elseif_0x0cdb                LDW                               _mz
                              XORI                              160
                              JumpEQ                            _elseif_0x0cf4 69               ; elseif mz &= TUNNEL

                              LDI                               131
                              SUBW                              _gx
                              STW                               _gx
                              CALLI                             _moveNextGhost                  ; gx = (129+ORIGIN_X) - gx

_elseif_0x0cf4                LDW                               _mz
                              XORI                              144
                              JumpEQ                            _else_0x0d20 70                 ; elseif mz &= SLOW

                              LD                                _flags
                              CALLI                             _page_0x10a0
_page_0x10a0                  ORI                               2
                              ST                                _flags
                              LDWI                              0x7da0
                              ADDW                              _gidx
                              STW                               memAddr
                              LD                                _flags
                              POKE                              memAddr
                              CALLI                             _moveNextGhost                  ; flags.lo = flags.lo OR 2 : ghostsFlags(gidx) = flags.lo

_else_0x0d20                  LD                                _flags
                              ANDI                              2
                              XORI                              2
                              JumpEQ                            _endif_0x0d4f 71                ; if (flags.lo AND 2) &= 2

                              LD                                _flags
                              ANDI                              253
                              ST                                _flags
                              LDWI                              0x7da0
                              ADDW                              _gidx
                              STW                               memAddr
                              LD                                _flags
                              POKE                              memAddr                         ; flags.lo = flags.lo AND &hFD : ghostsFlags(gidx) = flags.lo

_endif_0x0d4f                 LDW                               _gj
                              STW                               memIndex0
                              LDW                               _gi
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              ANDI                              240
                              STW                               _mz                             ; mz = maze(gj, gi) AND &hF0

                              LDW                               _mz
                              XORI                              208
                              CALLI                             convertEqOp
                              STW                               0xe8
                              LDW                               _mz
                              XORI                              224
                              CALLI                             convertEqOp
                              STW                               0xea
                              LDW                               _mz
                              XORI                              176
                              CALLI                             convertEqOp
                              CALLI                             _page_0x11a0
_page_0x11a0                  ORW                               0xea
                              STW                               0xec
                              LD                                _flags
                              ANDI                              1
                              ANDW                              0xec
                              ORW                               0xe8
                              JumpFalse                         _moveNextGhost 72               ; if (mz = JUNC) OR (((mz = DOOR) OR (mz = ENTER)) AND (flags.lo AND 1))

                              CALLI                             _getJuncDir                     ; gosub getJuncDir

                              LDW                               _gdir
                              STW                               0xd8
                              CALLI                             _getGhostDir                    ; call getGhostDir, gdir

_moveNextGhost                LDW                               _slowed
                              XORI                              0
                              JumpEQ                            _endif_0x0dbe 74                ; if slowed &= 0

                              CALLI                             _setGhostVars                   ; gosub setGhostVars

_endif_0x0dbe                 ForNextFarInc                     _gidx _next_0x09ed 3            ; next gidx

                              LDW                               _gmode
                              XORI                              1
                              JumpEQ                            _else_0x0dde 75                 ; if gmode &= SCARED_MODE

                              CALLI                             _scaredSound
                              CALLI                             _endif_0x0de1                   ; call scaredSound

_else_0x0dde                  CALLI                             _chaseSound                     ; call chaseSound

_endif_0x0de1                 Return                                                            ; endproc

_scaredSound                  PUSH                                                              ; proc scaredSound

                              LDI                               1
                              ST                                sndChannel + 1
                              LDW                               _scaredTicks
                              STW                               sndFrequency
                              LDI                               63
                              STW                               sndVolume
                              LDI                               0
                              STW                               sndWaveType
                              CALLI                             _page_0x12a0
_page_0x12a0                  SoundOnV                                                          ; sound on, 1, scaredTicks, 63, 0

                              LDWI                              -650
                              ADDW                              _scaredTicks
                              STW                               _scaredTicks                    ; scaredTicks = scaredTicks - 650

                              LDWI                              5000
                              SUBW                              _scaredTicks
                              JumpGT                            _else_0x0e14 77
                              LDWI                              10000
                              STW                               _scaredTicks                    ; if scaredTicks &<= 5000 then scaredTicks = 10000

_else_0x0e14                  LDI                               3
                              ST                                giga_soundTimer                 ; set SOUND_TIMER, 3

                              Return                                                            ; endproc

_chaseSound                   PUSH                                                              ; proc chaseSound

                              LDI                               212
                              STW                               0xe8
                              LD                                _livesDots
                              STW                               0xea
                              LDW                               0xe8
                              SUBW                              0xea
                              STW                               mathShift
                              ShiftRight4bit                    
                              STW                               0xe8
                              LD                                0xe8
                              ST                                giga_vAC + 1
                              ORI                               0xFF
                              XORI                              0xFF
                              STW                               _chaseSound_f                   ; f = ((212 - livesDots.lo) >>4) <<8

                              LD                                _timeTicks
                              ANDI                              15
                              STW                               0xe8
                              LDWI                              20905
                              ADDW                              0xe8
                              PEEK                              
                              STW                               musicNote
                              GetMusicNote                      
                              STW                               _chaseSound_n                   ; n = get("MUSIC_NOTE", peek(@gnotes + (timeTicks.lo AND 15)))

                              LDI                               1
                              ST                                sndChannel + 1
                              LDW                               _chaseSound_n
                              ADDW                              _chaseSound_f
                              STW                               sndFrequency
                              CALLI                             _page_0x13a0
_page_0x13a0                  LDI                               63
                              STW                               sndVolume
                              LDI                               0
                              STW                               sndWaveType
                              SoundOnV                                                          ; sound on, 1, n + f, 63, 0 '48-v, 0

                              LDI                               3
                              ST                                giga_soundTimer                 ; set SOUND_TIMER, 3

                              Return                                                            ; endproc

_deadSound                    PUSH                                                              ; proc deadSound

                              LDWI                              1000
                              STW                               _deadSound_f                    ; f = 1000

                              LDI                               1
                              ST                                sndChannel + 1
                              SoundOff                                                          ; sound off, 1

_repeat_0x0e87                LDI                               1
                              STW                               _deadSound_v                    ; for v=1 to 62 step 2

_next_0x0e8b                  LDI                               2
                              ST                                sndChannel + 1
                              LDW                               _deadSound_f
                              STW                               sndFrequency
                              LDW                               _deadSound_v
                              STW                               sndVolume
                              LDI                               2
                              STW                               sndWaveType
                              SoundOnV                                                          ; sound on, 2, f, v, 2

                              LDI                               1
                              ST                                giga_soundTimer                 ; set SOUND_TIMER, 1

                              ForNextFarAdd                     _deadSound_v _next_0x0e8b 62 2  ; next v

                              LDI                               63
                              STW                               _deadSound_v                    ; for v=63 downto 1 step 2

_next_0x0eb4                  LDI                               2
                              ST                                sndChannel + 1
                              LDW                               _deadSound_f
                              STW                               sndFrequency
                              LDW                               _deadSound_v
                              STW                               sndVolume
                              LDI                               2
                              STW                               sndWaveType
                              CALLI                             _page_0x14a0
_page_0x14a0                  SoundOnV                                                          ; sound on, 2, f, v, 2

                              LDI                               1
                              ST                                giga_soundTimer                 ; set SOUND_TIMER, 1

                              ForNextFarSub                     _deadSound_v _next_0x0eb4 1 2   ; next v

                              LDWI                              400
                              ADDW                              _deadSound_f
                              STW                               _deadSound_f                    ; f = f + 400

                              LDWI                              10000
                              SUBW                              _deadSound_f
                              JumpLT                            _repeat_0x0e87 78               ; until f &>= 10000

                              LDI                               2
                              ST                                sndChannel + 1
                              SoundOff                                                          ; sound off, 2

                              Return                                                            ; endproc

_getGhostVars                 PUSH                              
                              LDWI                              0x6ca5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              PEEK                              
                              STW                               _gx
                              LDWI                              0x6ba5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              PEEK                              
                              STW                               _gy                             ; gx = ghostsX(gidx).lo : gy = ghostsY(gidx).lo

                              LDWI                              0x6aa5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              DEEK                              
                              STW                               _gxd
                              LDWI                              0x69a5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              DEEK                              
                              STW                               _gyd                            ; gxd = ghostsXd(gidx)  : gyd = ghostsYd(gidx)

                              LDWI                              0x7da0
                              CALLI                             _page_0x15a0
_page_0x15a0                  ADDW                              _gidx
                              PEEK                              
                              ST                                _flags                          ; flags.lo = ghostsFlags(gidx)

                              Return                                                            ; return

_setGhostVars                 PUSH                              
                              LDWI                              0x6ca5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              STW                               memAddr
                              LDW                               _gx
                              DOKE                              memAddr
                              LDWI                              0x6ba5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              STW                               memAddr
                              LDW                               _gy
                              DOKE                              memAddr                         ; ghostsX(gidx) = gx : ghostsY(gidx) = gy

                              LDWI                              0x6aa5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              STW                               memAddr
                              LDW                               _gxd
                              DOKE                              memAddr
                              LDWI                              0x69a5
                              ADDW                              _gidx
                              ADDW                              _gidx
                              STW                               memAddr
                              LDW                               _gyd
                              DOKE                              memAddr                         ; ghostsXd(gidx) = gxd : ghostsYd(gidx) = gyd

                              Return                                                            ; return

_getGhostDir                  PUSH                                                              ; proc getGhostDir, dir

                              LDW                               _getGhostDir_dir
                              LSLW                              
                              LSLW                              
                              STW                               _getGhostDir_dir                ; dir = dir <<2

                              LDWI                              21159
                              ADDW                              _getGhostDir_dir
                              DEEK                              
                              STW                               _gxd                            ; gxd = deek(@GHOST_DIRS + dir + 0)

                              LDWI                              21159
                              ADDW                              _getGhostDir_dir
                              ADDI                              2
                              DEEK                              
                              STW                               _gyd                            ; gyd = deek(@GHOST_DIRS + dir + 2)

                              Return                                                            ; endproc

_setGhostsMode                PUSH                              
                              LD                                _timeTicks
                              CALLI                             _page_0x16a0
_page_0x16a0                  ANDI                              31
                              JumpFalse                         _else_0x0fe6 79
                              Return                                                            ; if (timeTicks.lo AND &h1F) then return

_else_0x0fe6                  INC                               _timeTicks + 1                  ; inc timeTicks.hi

                              LDW                               _gmode
                              XORI                              1
                              JumpEQ                            _endif_0x1020 81                ; if gmode &= SCARED_MODE

                              LDI                               10
                              STW                               0xe8
                              LD                                _levelPain + 1
                              STW                               0xea
                              LDW                               0xe8
                              SUBW                              0xea
                              STW                               0xec
                              LD                                _timeTicks + 1
                              SUBW                              0xec
                              JumpGT                            _endif_0x101e 80                ; if timeTicks.hi &> (10 - levelPain.hi)

                              LDI                               0
                              ST                                _timeTicks + 1                  ; timeTicks.hi = 0

                              LDI                               200
                              STW                               _bonus                          ; bonus = 200

                              LDI                               0
                              STW                               _gmode                          ; gmode = CHASE_MODE

_endif_0x101e                 Return                                                            ; return

_endif_0x1020                 LD                                _timeTicks + 1
                              SUBI                              30
                              JumpGT                            _endif_0x1038 82                ; if timeTicks.hi &> 30

                              LDI                               0
                              ST                                _timeTicks + 1                  ; timeTicks.hi = 0

                              LDI                               0
                              STW                               _gmode                          ; gmode = CHASE_MODE

                              Return                                                            ; return

_endif_0x1038                 LDI                               20
                              STW                               0xe8
                              LD                                _levelPain + 1
                              ADDW                              0xe8
                              STW                               0xea
                              LD                                _timeTicks + 1
                              CALLI                             _page_0x17a0
_page_0x17a0                  SUBW                              0xea
                              JumpGT                            _endif_0x1054 83                ; if timeTicks.hi &> (20 + levelPain.hi)

                              LDI                               2
                              STW                               _gmode                          ; gmode = SCATTER_MODE

_endif_0x1054                 Return                                                            ; return

_getBlinkyTarget              PUSH                              
                              LDW                               _gi
                              STW                               _bi
                              LDW                               _gj
                              STW                               _bj                             ; bi = gi : bj = gj

                              LDW                               _gmode
                              XORI                              0
                              JumpEQ                            _endif_0x1077 84                ; if gmode &= CHASE_MODE

                              LDW                               _puci
                              STW                               _ti
                              LDW                               _pucj
                              STW                               _tj                             ; ti = puci : tj = pucj

                              Return                                                            ; return

_endif_0x1077                 LDI                               27
                              STW                               _ti
                              LDI                               0
                              STW                               _tj                             ; ti = 27 : tj = 0

                              Return                                                            ; return

_getPinkyTarget               PUSH                              
                              LDW                               _gmode
                              XORI                              0
                              JumpEQ                            _endif_0x10c6 85                ; if gmode &= CHASE_MODE

                              LDW                               _puci
                              ADDW                              _pxd
                              ADDW                              _pxd
                              ADDW                              _pxd
                              ADDW                              _pxd
                              STW                               _ti                             ; ti = puci + pxd + pxd + pxd + pxd

                              LDW                               _pucj
                              ADDW                              _pyd
                              ADDW                              _pyd
                              ADDW                              _pyd
                              ADDW                              _pyd
                              STW                               _tj                             ; tj = pucj + pyd + pyd + pyd + pyd

                              Return                                                            ; return

_endif_0x10c6                 LDI                               0
                              CALLI                             _page_0x18a0
_page_0x18a0                  STW                               _ti
                              LDI                               0
                              STW                               _tj                             ; ti = 0 : tj = 0

                              Return                                                            ; return

_getInkyTarget                PUSH                              
                              LDW                               _gmode
                              XORI                              0
                              JumpEQ                            _endif_0x111d 86                ; if gmode &= CHASE_MODE

                              LDW                               _puci
                              ADDW                              _pxd
                              ADDW                              _pxd
                              STW                               _ti                             ; ti = puci + pxd + pxd

                              LDW                               _pucj
                              ADDW                              _pyd
                              ADDW                              _pyd
                              STW                               _tj                             ; tj = pucj + pyd + pyd

                              LDW                               _ti
                              SUBW                              _bi
                              STW                               _zi
                              LDW                               _tj
                              SUBW                              _bj
                              STW                               _zj                             ; zi = ti - bi : zj = tj - bj 'vector from Blinky to (Puc + 2)

                              LDW                               _ti
                              ADDW                              _zi
                              STW                               _ti                             ; ti = ti + zi

                              LDW                               _tj
                              ADDW                              _zj
                              STW                               _tj                             ; tj = tj + zj

                              Return                                                            ; return

_endif_0x111d                 LDI                               27
                              STW                               _ti
                              LDI                               23
                              STW                               _tj                             ; ti = 27 : tj = 23

                              Return                                                            ; return

_getClydeTarget               PUSH                              
                              LDW                               _gmode
                              XORI                              0
                              JumpEQ                            _endif_0x116e 88                ; if gmode &= CHASE_MODE

                              LDW                               _puci
                              SUBW                              _gi
                              Absolute                          
                              STW                               0xea
                              CALLI                             _page_0x19a0
_page_0x19a0                  LDW                               _pucj
                              SUBW                              _gj
                              Absolute                          
                              ADDW                              0xea
                              SUBI                              8
                              JumpGT                            _endif_0x116e 87                ; if abs(puci - gi) + abs(pucj - gj) &> 8 'taxi-cab distance

                              LDW                               _puci
                              STW                               _ti
                              LDW                               _pucj
                              STW                               _tj                             ; ti = puci : tj = pucj

                              Return                                                            ; return

_endif_0x116e                 LDI                               0
                              STW                               _ti
                              LDI                               23
                              STW                               _tj                             ; ti = 0 : tj = 23

                              Return                                                            ; return

_getJuncDir                   PUSH                              
                              LDW                               _gxd
                              JumpFalse                         _else_0x120b 94                 ; if (gxd)

                              LDW                               _tj
                              SUBW                              _gj
                              Absolute                          
                              JumpFalse                         _endif_0x1208 93                ; if (abs(tj - gj))

                              LDW                               _gj
                              SUBI                              1
                              STW                               memIndex0
                              LDW                               _gi
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              XORI                              240
                              JumpNE                            _endif_0x11cf 90                ; if maze(gj - 1, gi) &<> WALL

                              LDI                               3
                              STW                               _gdir
                              LDW                               _tj
                              SUBW                              _gj
                              CALLI                             _page_0x1aa0
_page_0x1aa0                  JumpLT                            _endif_0x11cf 89
                              Return                                                            ; gdir = 3 : if tj &< gj then return

_endif_0x11cf                 LDW                               _gj
                              ADDI                              1
                              STW                               memIndex0
                              LDW                               _gi
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              XORI                              240
                              JumpNE                            _endif_0x1208 92                ; if maze(gj + 1, gi) &<> WALL

                              LDI                               1
                              STW                               _gdir
                              LDW                               _tj
                              SUBW                              _gj
                              JumpGT                            _endif_0x1208 91
                              Return                                                            ; gdir = 1 : if tj &> gj then return

_endif_0x1208                 CALLI                             _endif_0x1292                   ; endif

_else_0x120b                  LDW                               _ti
                              SUBW                              _gi
                              Absolute                          
                              JumpFalse                         _endif_0x1292 99                ; if (abs(ti - gi))

                              LDW                               _gi
                              SUBI                              1
                              STW                               0xe8
                              LDW                               _gj
                              STW                               memIndex0
                              LDW                               0xe8
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              XORI                              240
                              CALLI                             _page_0x1ba0
_page_0x1ba0                  JumpNE                            _endif_0x1259 96                ; if maze(gj, gi - 1) &<> WALL

                              LDI                               2
                              STW                               _gdir
                              LDW                               _ti
                              SUBW                              _gi
                              JumpLT                            _endif_0x1259 95
                              Return                                                            ; gdir = 2 : if ti &< gi then return

_endif_0x1259                 LDW                               _gi
                              ADDI                              1
                              STW                               0xe8
                              LDW                               _gj
                              STW                               memIndex0
                              LDW                               0xe8
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              XORI                              240
                              JumpNE                            _endif_0x1292 98                ; if maze(gj, gi + 1) &<> WALL

                              LDI                               0
                              STW                               _gdir
                              LDW                               _ti
                              SUBW                              _gi
                              JumpGT                            _endif_0x1292 97
                              Return                                                            ; gdir = 0 : if ti &> gi then return

_endif_0x1292                 LDW                               _gxd
                              XORI                              1
                              JumpEQ                            _elseif_0x12a7 101              ; if gxd &= 1

                              LDI                               0
                              STW                               _gdir
                              CALLI                             _endif_0x12d6                   ; gdir = 0

_elseif_0x12a7                LDWI                              -1
                              XORW                              _gxd
                              CALLI                             _page_0x1ca0
_page_0x1ca0                  JumpEQ                            _elseif_0x12bd 102              ; elseif gxd &= -1

                              LDI                               2
                              STW                               _gdir
                              CALLI                             _endif_0x12d6                   ; gdir = 2

_elseif_0x12bd                LDW                               _gyd
                              XORI                              1
                              JumpEQ                            _else_0x12d2 103                ; elseif gyd &= 1

                              LDI                               1
                              STW                               _gdir
                              CALLI                             _endif_0x12d6                   ; gdir = 1

_else_0x12d2                  LDI                               3
                              STW                               _gdir                           ; gdir = 3

_endif_0x12d6                 Return                                                            ; return

_getWallDir                   PUSH                              
                              LDW                               _gxd
                              JumpFalse                         _else_0x1346 108                ; if (gxd)

                              LDW                               _gj
                              SUBI                              1
                              STW                               memIndex0
                              LDW                               _gi
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              XORI                              240
                              JumpNE                            _endif_0x131a 106               ; if maze(gj - 1, gi) &<> WALL

                              LDI                               3
                              STW                               _gdir
                              LDW                               _tj
                              SUBW                              _gj
                              JumpLT                            _endif_0x131a 105
                              Return                                                            ; gdir = 3 : if tj &< gj then return

_endif_0x131a                 LDW                               _gj
                              ADDI                              1
                              STW                               memIndex0
                              CALLI                             _page_0x1da0
_page_0x1da0                  LDW                               _gi
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              XORI                              240
                              JumpNE                            _else_0x1343 107
                              LDI                               1
                              STW                               _gdir
_else_0x1343                  CALLI                             _endif_0x13a8                   ; if maze(gj + 1, gi) &<> WALL then gdir = 1

_else_0x1346                  LDW                               _gi
                              SUBI                              1
                              STW                               0xe8
                              LDW                               _gj
                              STW                               memIndex0
                              LDW                               0xe8
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              XORI                              240
                              JumpNE                            _endif_0x137f 110               ; if maze(gj, gi - 1) &<> WALL

                              LDI                               2
                              STW                               _gdir
                              LDW                               _ti
                              SUBW                              _gi
                              JumpLT                            _endif_0x137f 109
                              Return                                                            ; gdir = 2 : if ti &< gi then return

_endif_0x137f                 LDW                               _gi
                              ADDI                              1
                              STW                               0xe8
                              LDW                               _gj
                              STW                               memIndex0
                              LDW                               0xe8
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              CALLI                             _page_0x1ea0
_page_0x1ea0                  XORI                              240
                              JumpNE                            _endif_0x13a8 111
                              LDI                               0
                              STW                               _gdir                           ; if maze(gj, gi + 1) &<> WALL then gdir = 0

_endif_0x13a8                 Return                                                            ; return

_replaceDot                   PUSH                              
                              LDW                               _mz
                              ANDI                              15
                              XORI                              1
                              JumpEQ                            _endif_0x1401 113               ; if (mz AND &h0F) &= DOT

                              LDW                               _di
                              LSLW                              
                              LSLW                              
                              ADDW                              _di
                              ADDI                              2
                              STW                               _di                             ; di = (di <<2) + di + ORIGIN_X   'di = di*5 + 12

                              LDW                               _dj
                              LSLW                              
                              LSLW                              
                              ADDW                              _dj
                              ADDI                              2
                              STW                               _dj                             ; dj = (dj <<2) + dj + ORIGIN_Y   'dj = dj*5 + 2

                              LDW                               _dj
                              ADDI                              8
                              STW                               0xe8
                              LD                                0xe8
                              ST                                giga_vAC + 1
                              ORI                               0xFF
                              XORI                              0xFF
                              ADDW                              _di
                              STW                               0xea
                              LDI                               43
                              POKE                              0xea                            ; poke ((dj + 8) <<8) + di, &h2B  'convert dj, di to vram address

_endif_0x1401                 Return                                                            ; return

_coordsPucMon                 PUSH                              
                              LDW                               _px
                              ADDW                              _pxd
                              ADDW                              _pxd
                              ADDW                              _pxd
                              ADDI                              4
                              STW                               _ci                             ; ci = px + pxd + pxd + pxd + -(ORIGIN_X-6)

                              LDW                               _py
                              ADDW                              _pyd
                              ADDW                              _pyd
                              ADDW                              _pyd
                              CALLI                             _page_0x1fa0
_page_0x1fa0                  ADDI                              4
                              STW                               _cj                             ; cj = py + pyd + pyd + pyd +  (ORIGIN_Y+2)

                              CALLI                             _div5                           ; call div5

                              Return                                                            ; return

_handleInput                  PUSH                              
                              LDW                               _pxd
                              STW                               _oxd
                              LDW                               _pyd
                              STW                               _oyd                            ; oxd = pxd : oyd = pyd

                              LDW                               _px
                              STW                               _mx
                              LDW                               _py
                              STW                               _my
                              CALLI                             _mod5                           ; mx = px : my = py : gosub mod5

                              LD                                giga_buttonState
                              STW                               numericLabel
                              LDI                               0
                              STW                               defaultLabel
                              GosubNumeric                                                      ; gosub get("BUTTON_STATE")

                              Return                                                            ; return

_253                          PUSH                              
                              LDW                               _my
                              XORI                              3
                              JumpEQ                            _else_0x147d 114
                              LDI                               0
                              STW                               _pyd
                              SUBI                              1
                              STW                               _pxd                            ; if my &= 3 then pyd = 0 : pxd = pyd-1

_else_0x147d                  Return                                                            ; return

_254                          PUSH                              
                              LDW                               _my
                              XORI                              3
                              JumpEQ                            _else_0x149a 115
                              LDI                               0
                              STW                               _pyd
                              ADDI                              1
                              STW                               _pxd                            ; if my &= 3 then pyd = 0 : pxd = pyd+1

_else_0x149a                  Return                                                            ; return

_247                          PUSH                              
                              LDW                               _mx
                              XORI                              3
                              CALLI                             _page_0x20a0
_page_0x20a0                  JumpEQ                            _else_0x14b7 116
                              LDI                               0
                              STW                               _pxd
                              SUBI                              1
                              STW                               _pyd                            ; if mx &= 3 then pxd = 0 : pyd = pxd-1

_else_0x14b7                  Return                                                            ; return

_251                          PUSH                              
                              LDW                               _mx
                              XORI                              3
                              JumpEQ                            _else_0x14d4 117
                              LDI                               0
                              STW                               _pxd
                              ADDI                              1
                              STW                               _pyd                            ; if mx &= 3 then pxd = 0 : pyd = pxd+1

_else_0x14d4                  Return                                                            ; return

_drawScore                    PUSH                                                              ; proc drawScore

                              LDWI                              26278
                              STW                               bcdSrcAddr
                              LDWI                              26534
                              STW                               bcdDstAddr
                              LDI                               7
                              BcdAdd                                                            ; bcdadd @pointsBCD, @scoreBCD, SCORE_LEN

                              LDI                               114
                              STW                               _drawScore_char                 ; char = SCORE_X+ORIGIN_X

                              LDI                               0
                              STW                               _drawScore_i                    ; for i=0 to SCORE_LEN-1

_next_0x14ee                  LDWI                              26540
                              SUBW                              _drawScore_i
                              PEEK                              
                              ADDI                              66
                              STW                               spriteId
                              LDW                               _drawScore_char
                              ST                                spriteXY
                              LDI                               67
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Digit + peek(@scoreBCD + SCORE_LEN-1 - i), char, SCORE_Y+ORIGIN_Y

                              LDW                               _drawScore_char
                              ADDI                              6
                              STW                               _drawScore_char                 ; char = char + 6

                              CALLI                             _page_0x21a0
_page_0x21a0                  ForNextFarInc                     _drawScore_i _next_0x14ee 6     ; next i

                              LDWI                              0x67ac
                              STW                               bcdSrcAddr
                              LDWI                              0x68ac
                              STW                               bcdDstAddr
                              LDI                               7
                              BcdCmp                            
                              XORI                              1
                              JumpEQ                            _endif_0x1556 118               ; if bcdcmp(@scoreBCD+(SCORE_LEN-1), @highBCD+(SCORE_LEN-1), SCORE_LEN) &= 1

                              LDWI                              26534
                              STW                               bcdSrcAddr
                              LDWI                              26790
                              STW                               bcdDstAddr
                              LDI                               7
                              BcdCpy                                                            ; bcdcpy @scoreBCD, @highBCD, SCORE_LEN

                              CALLI                             _drawHigh                       ; call drawHigh

_endif_0x1556                 Return                                                            ; endproc

_drawHigh                     PUSH                                                              ; proc drawHigh

                              LDI                               114
                              STW                               _drawHigh_char                  ; char = HIGH_X+ORIGIN_X

                              LDI                               0
                              STW                               _drawHigh_i                     ; for i=0 to SCORE_LEN-1

_next_0x1561                  LDWI                              26796
                              SUBW                              _drawHigh_i
                              PEEK                              
                              ADDI                              66
                              STW                               spriteId
                              LDW                               _drawHigh_char
                              ST                                spriteXY
                              LDI                               42
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Digit + peek(@highBCD + SCORE_LEN-1 - i), char, HIGH_Y+ORIGIN_Y

                              LDW                               _drawHigh_char
                              ADDI                              6
                              CALLI                             _page_0x22a0
_page_0x22a0                  STW                               _drawHigh_char                  ; char = char + 6

                              ForNextFarInc                     _drawHigh_i _next_0x1561 6      ; next i

                              Return                                                            ; endproc

_drawLevel                    PUSH                                                              ; proc drawLevel

                              LDI                               65
                              STW                               spriteId
                              LDI                               139
                              ST                                spriteXY
                              LDI                               55
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Level, LEVEL_X+ORIGIN_X, LEVEL_Y+ORIGIN_Y

                              LDI                               145
                              STW                               _drawLevel_char                 ; char = LEVEL_X+ORIGIN_X + 6

                              LDI                               0
                              STW                               _drawLevel_i                    ; for i=0 to LEVEL_LEN-1

_next_0x15b4                  LDWI                              32514
                              SUBW                              _drawLevel_i
                              PEEK                              
                              ADDI                              66
                              STW                               spriteId
                              LDW                               _drawLevel_char
                              ST                                spriteXY
                              LDI                               55
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Digit + peek(@levelBCD + LEVEL_LEN-1 - i), char, LEVEL_Y+ORIGIN_Y

                              LDW                               _drawLevel_char
                              ADDI                              6
                              STW                               _drawLevel_char                 ; char = char + 6

                              ForNextFarInc                     _drawLevel_i _next_0x15b4 1     ; next i

                              Return                                                            ; endproc

_drawLives                    PUSH                                                              ; proc drawLives

                              LDI                               1
                              STW                               _drawLives_i                    ; i = 1

                              LDI                               139
                              CALLI                             _page_0x23a0
_page_0x23a0                  STW                               _drawLives_puc                  ; puc = LIFE_X+ORIGIN_X

_while_0x15f6                 LDW                               _drawLives_i
                              STW                               0xea
                              LD                                _livesDots + 1
                              STW                               0xec
                              LDW                               0xea
                              SUBW                              0xec
                              JumpLE                            _while_0x162a 119               ; while i &<= livesDots.hi

                              LDI                               64
                              STW                               spriteId
                              LDW                               _drawLives_puc
                              ST                                spriteXY
                              LDI                               111
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Life, puc, LIFE_Y+ORIGIN_Y

                              LDW                               _drawLives_puc
                              ADDI                              6
                              STW                               _drawLives_puc                  ; puc = puc + 6

                              INC                               _drawLives_i                    ; inc i

                              CALLI                             _while_0x15f6                   ; wend

_while_0x162a                 LDW                               _drawLives_i
                              SUBI                              3
                              JumpLE                            _wend_0x1656 120                ; while i &<= 3

                              LDI                               62
                              STW                               spriteId
                              LDW                               _drawLives_puc
                              ST                                spriteXY
                              LDI                               111
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Erase6x6, puc, LIFE_Y+ORIGIN_Y

                              LDW                               _drawLives_puc
                              ADDI                              6
                              STW                               _drawLives_puc                  ; puc = puc + 6

                              INC                               _drawLives_i                    ; inc i

                              CALLI                             _while_0x162a                   ; wend

_wend_0x1656                  Return                                                            ; endproc

_drawDeath                    PUSH                                                              ; proc drawDeath

                              CALLI                             _drawLives                      ; call drawLives

                              CALLI                             _page_0x24a0
_page_0x24a0                  LDI                               0
                              STW                               _drawDeath_f                    ; f = 0

                              LDI                               1
                              ST                                sndChannel + 1
                              SoundOff                                                          ; sound off, 1

                              LDI                               0
                              STW                               _drawDeath_i                    ; for i=0 to 128

_next_0x166b                  LDW                               _drawDeath_i
                              ANDI                              15
                              STW                               0xe8
                              LDWI                              20665
                              ADDW                              0xe8
                              PEEK                              
                              STW                               musicNote
                              GetMusicNote                      
                              STW                               _drawDeath_n                    ; n = get("MUSIC_NOTE", peek(@dnotes + (i AND 15)))

                              LDI                               2
                              ST                                sndChannel + 1
                              LDW                               _drawDeath_n
                              SUBW                              _drawDeath_f
                              STW                               sndFrequency
                              LDW                               _drawDeath_i
                              STW                               mathShift
                              ShiftRight2bit                    
                              STW                               0xec
                              LDI                               63
                              SUBW                              0xec
                              STW                               sndVolume
                              LDI                               3
                              STW                               sndWaveType
                              SoundOnV                                                          ; sound on, 2, n - f, 63 - (i >>2), 3

                              LDI                               1
                              ST                                giga_soundTimer                 ; set SOUND_TIMER, 1

                              LDI                               1
                              STW                               _drawDeath_j
_next_0x16b8                  ForNextInc                        _drawDeath_j _next_0x16b8 250   ; for j=1 &to 250 : next j

                              LDW                               _drawDeath_i
                              STW                               mathShift
                              ShiftRight3bit                    
                              ANDI                              1
                              CALLI                             _page_0x25a0
_page_0x25a0                  XORI                              0
                              JumpEQ                            _else_0x16f2 121                ; if ((i >> 3) AND 1) &= 0

                              LDI                               63
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                        
                              CALLI                             _endif_0x1703                   ; sprite NoFlip, Erase12x9, px, py

_else_0x16f2                  LDI                               42
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, PucLt + 2, px, py

_endif_0x1703                 LDW                               _drawDeath_i
                              ANDI                              7
                              XORI                              0
                              JumpEQ                            _endif_0x171f 123               ; if (i AND 7) &= 0

                              LDW                               _drawDeath_f
                              ADDI                              200
                              STW                               _drawDeath_f                    ; f = f + 200

_endif_0x171f                 ForNextFarInc                     _drawDeath_i _next_0x166b 128   ; next i

                              LDI                               2
                              ST                                sndChannel + 1
                              SoundOff                                                          ; sound off, 2

                              Return                                                            ; endproc

_drawMaze                     PUSH                                                              ; proc drawMaze

                              LDI                               48
                              ST                                fgbgColour + 1                  ; set FG_COLOUR, &h30

                              LDI                               0
                              CALLI                             _page_0x26a0
_page_0x26a0                  STW                               _drawMaze_i                     ; for i=0 to (NUM_MAZE_PIECES*2 - 2) step 4

_next_0x173d                  LDWI                              15032
                              ADDW                              _drawMaze_i
                              DEEK                              
                              STW                               cursorXY
                              LDWI                              14776
                              ADDW                              _drawMaze_i
                              DEEK                              
                              STW                               drawPoly_addr
                              DrawPolyRel                                                       ; set CURSOR_XY, deek(@MAZE_PIECES + i)     : polyR deek(@MAZE_ADDRS + i)

                              LDWI                              15032
                              ADDW                              _drawMaze_i
                              ADDI                              2
                              DEEK                              
                              STW                               cursorXY
                              LDI                               0xB8
                              ST                                drawPoly_mode
                              SetPolyRelFlipX                   
                              LDWI                              14776
                              ADDW                              _drawMaze_i
                              ADDI                              2
                              DEEK                              
                              STW                               drawPoly_addr
                              DrawPolyRel                                                       ; set CURSOR_XY, deek(@MAZE_PIECES + i + 2) : polyR deek(@MAZE_ADDRS + i + 2), FLIPX

                              ForNextFarAdd                     _drawMaze_i _next_0x173d 70 4   ; next i

                              LDI                               0
                              ST                                fgbgColour + 1                  ; set FG_COLOUR, 0 '&h2B

                              Return                                                            ; endproc

_drawDots                     PUSH                                                              ; proc drawDots, redraw

                              LDI                               43
                              ST                                fgbgColour + 1                  ; set FG_COLOUR, &h2B

                              LDI                               0
                              STW                               _cj                             ; for cj=0 to 23

_next_0x17b3                  LDI                               0
                              STW                               _ci                             ; for ci=0 to 27

_next_0x17b7                  LDW                               _cj
                              STW                               memIndex0
                              LDW                               _ci
                              STW                               memIndex1
                              CALLI                             _page_0x27a0
_page_0x27a0                  LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              PEEK                              
                              STW                               _mz                             ; mz = maze(cj, ci)

                              LDW                               _drawDots_redraw
                              XORI                              1
                              JumpEQ                            _endif_0x1835 126               ; if redraw &= 1

                              LDW                               _mz
                              ANDI                              15
                              XORI                              3
                              JumpEQ                            _elseif_0x17fd 124              ; if (mz AND &h0F) &= RDOT       'reset dots

                              LDW                               _mz
                              ANDI                              240
                              ORI                               1
                              STW                               _mz
                              CALLI                             _endif_0x181f                   ; mz = (mz AND &hF0) OR DOT

_elseif_0x17fd                LDW                               _mz
                              ANDI                              15
                              XORI                              4
                              JumpEQ                            _endif_0x181f 125               ; elseif (mz AND &h0F) &= RPILL  'reset pills

                              LDW                               _mz
                              ANDI                              240
                              ORI                               2
                              STW                               _mz                             ; mz = (mz AND &hF0) OR PILL

_endif_0x181f                 LDW                               _mz
                              STW                               memValue
                              LDW                               _cj
                              STW                               memIndex0
                              LDW                               _ci
                              STW                               memIndex1
                              LDWI                              0x3bd0
                              CALLI                             convert8Arr2d
                              LDW                               memValue
                              POKE                              memAddr                         ; maze(cj, ci) = mz

_endif_0x1835                 LDW                               _mz
                              ANDI                              15
                              XORI                              1
                              CALLI                             _page_0x28a0
_page_0x28a0                  JumpEQ                            _endif_0x187a 127               ; if (mz AND &h0F) &= DOT

                              LDW                               _ci
                              LSLW                              
                              LSLW                              
                              ADDW                              _ci
                              ADDI                              2
                              ST                                drawPixel_xy
                              LDW                               _cj
                              LSLW                              
                              LSLW                              
                              ADDW                              _cj
                              ADDI                              2
                              ST                                drawPixel_xy + 1
                              DrawPixel                                                         ; pset (ci <<2) + ci + ORIGIN_X, (cj <<2) + cj + ORIGIN_Y

_endif_0x187a                 ForNextFarInc                     _ci _next_0x17b7 27             ; next ci

                              ForNextFarInc                     _cj _next_0x17b3 23             ; next cj

                              Return                                                            ; endproc

_nextLevel                    LD                                _levelPain
                              XORI                              99
                              BNE                               _else_0x18a8
                              LDWI                              257
                              STW                               register0
                              LDI                               64
                              POKE                              register0                       ; if levelPain.lo &&= 99 then poke &h0101, &h40  'level100 easter egg, good luck once you get to level 100!

_else_0x18a8                  INC                               _levelPain                      ; inc levelPain.lo

                              INC                               _levelPain + 1                  ; inc levelPain.hi

                              CALLI                             _start                          ; goto start

_initVars                     PUSH                                                              ; proc initVars

                              LDI                               0x34
                              STW                               varAddress
                              ResetVars                                                         ; init vars @timeTicks

                              LDI                               65
                              STW                               _px                             ; px = (63+ORIGIN_X)

                              CALLI                             _page_0x29a0
_page_0x29a0                  LDI                               88
                              STW                               _py                             ; py = (86+ORIGIN_Y)

                              LDWI                              -1
                              STW                               _pxd                            ; pxd = -1

                              LDI                               200
                              STW                               _bonus                          ; bonus = 200

                              LDWI                              10000
                              STW                               _scaredTicks                    ; scaredTicks = 10000

                              Rand                              
                              ANDI                              3
                              STW                               _initVars_corner                ; corner = (rnd(0) AND 3)

                              LDI                               0
                              STW                               _gidx                           ; for gidx=0 to (NUM_GHOSTS - 1)

_next_0x18de                  LDW                               _gidx
                              XORI                              0
                              JumpEQ                            _else_0x18f6 129                ; if gidx &= 0

                              LDW                               _gidx
                              LSLW                              
                              STW                               _initVars_i
                              CALLI                             _endif_0x190f                   ; i = gidx <<1                          'blinky is always reset to the same position

_else_0x18f6                  LDW                               _initVars_corner
                              ADDW                              _gidx
                              ANDI                              3
                              ADDI                              1
                              LSLW                              
                              STW                               _initVars_i                     ; i = (((corner + gidx) AND 3) + 1) <<1 'pinky, inky and clyde are reset to 1 of 4 random cage corners

_endif_0x190f                 LDWI                              28323
                              ADDW                              _initVars_i
                              DEEK                              
                              STW                               _gx                             ; gx = deek(@ghostsXr + i)

                              LDWI                              28067
                              ADDW                              _initVars_i
                              DEEK                              
                              STW                               _gy                             ; gy = deek(@ghostsYr + i)

                              LDWI                              -1
                              STW                               _gxd                            ; gxd = -1                                  'ghosts initially move left

                              CALLI                             _setGhostVars                   ; gosub setGhostVars

                              CALLI                             _page_0x2aa0
_page_0x2aa0                  ForNextFarInc                     _gidx _next_0x18de 3            ; next gidx

                              Return                                                            ; endproc

_startLevel                   PUSH                              
                              LDI                               63
                              STW                               spriteId
                              LDW                               _px
                              ST                                spriteXY
                              LDW                               _py
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite NoFlip, Erase12x9, px, py

                              LDI                               212
                              ST                                _livesDots                      ; livesDots.lo = 212

                              LDWI                              26278
                              STW                               bcdDstAddr
                              LDI                               0
                              BcdInt                                                            ; bcdint @pointsBCD, 0

                              LDWI                              32513
                              STW                               bcdDstAddr
                              LD                                _levelPain
                              BcdInt                                                            ; bcdint @levelBCD, levelPain.lo

                              LD                                _levelPain + 1
                              SUBI                              7
                              JumpGT                            _else_0x197d 131
                              LDI                               7
                              ST                                _levelPain + 1                  ; if levelPain.hi &> 7 then levelPain.hi = 7

_else_0x197d                  LDI                               0x01
                              STW                               0xd8
                              CALLI                             _drawDots                       ; call drawDots, 1 'redraw

                              CALLI                             _drawScore                      ; call drawScore

                              CALLI                             _drawHigh                       ; call drawHigh

                              CALLI                             _drawLives                      ; call drawLives

                              CALLI                             _drawLevel                      ; call drawLevel

                              LD                                _levelPain
                              CALLI                             _page_0x2ba0
_page_0x2ba0                  XORI                              0
                              JumpEQ                            _else_0x19b0 132                ; if levelPain.lo &= 0

                              LDI                               2
                              ST                                waveType + 1
                              LDWI                              12704
                              PlayMusic                         
                              CALLI                             _endif_0x19b7                   ; play music, MUSIC_INTRO, 2

_else_0x19b0                  LDI                               120
                              STW                               waitVBlankNum
                              WaitVBlanks                                                       ; wait 120

_endif_0x19b7                 Return                                                            ; return

_resetLevel                   PUSH                              
                              LDI                               0
                              STW                               _levelPain                      ; levelPain = 0+0*256

                              LDWI                              768
                              STW                               _livesDots                      ; livesDots = 3*256

                              LDWI                              26534
                              STW                               bcdDstAddr
                              LDI                               0
                              BcdInt                                                            ; bcdint @scoreBCD, 0

                              LDWI                              257
                              STW                               register0
                              LDI                               0
                              POKE                              register0                       ; poke &h0101, 0

                              LD                                0x21
                              ORI                               3
                              ST                                33                              ; poke &h21, peek(&h21) OR 3

                              Return                                                            ; return

_initSystem                   PUSH                              
                              LDI                               65
                              STW                               _px
                              LDI                               88
                              STW                               _py                             ; px = (63+ORIGIN_X) : py = (86+ORIGIN_Y)

                              LDWI                              256
                              STW                               register0
                              LDI                               10
                              POKE                              register0                       ; poke &h0100, &h0A

                              CALLI                             _page_0x2ca0
_page_0x2ca0                  LDWI                              258
                              STW                               register0
                              LDI                               10
                              POKE                              register0                       ; poke &h0102, &h0A

                              LDWI                              492
                              STW                               register0
                              LDI                               125
                              POKE                              register0                       ; poke &h01EC, &h7D

                              LDWI                              494
                              STW                               register0
                              LDI                               125
                              POKE                              register0                       ; poke &h01EE, &h7D

                              LDI                               2
                              STW                               graphicsMode
                              ScanlineMode                                                      ; mode 2

                              LDI                               0
                              STW                               fgbgColour                      ; set FGBG_COLOUR, 0

                              LDWI                              2560
                              STW                               clrAddress
                              LDI                               160
                              ST                                clrWidth
                              LDI                               116
                              ST                                clrLines
                              ClearRect                                                         ; cls &h0A00, 160, 116

                              Return                                                            ; return

_end_0x1a30                   BRA                               _end_0x1a30                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                      EQU     0x3aa1
realTimeStub                  EQU     0x36b6
convertEqOp                   EQU     0x30b0
convert8Arr2d                 EQU     0x33b5
resetVars                     EQU     0x33ef
absolute                      EQU     0x33ab
rand16bit                     EQU     0x2ff7
shiftRight1bit                EQU     0x33a1
shiftRight2bit                EQU     0x30f5
shiftRight3bit                EQU     0x30eb
shiftRight4bit                EQU     0x30e1
shiftRight6bit                EQU     0x30d7
gosubNumericLabel             EQU     0x35cd
scanlineMode                  EQU     0x30cd
waitVBlank                    EQU     0x2fef
waitVBlanks                   EQU     0x34bd
resetVideoFlags               EQU     0x34a0
initClearFuncs                EQU     0x3ca0
clearRect                     EQU     0x41a1
drawPixel                     EQU     0x33e0
drawLineSlow                  EQU     0x34ce
drawLineSlowExt               EQU     0x3ba5
drawLineSlowLoop              EQU     0x35a2
drawLineSlowSwap              EQU     0x38a0
drawPolyRel                   EQU     0x37be
setPolyRelFlipX               EQU     0x30c3
setPolyRelFlipY               EQU     0x30b9
draw_sprite                   EQU     0x3fa5
drawSprite                    EQU     0x33d5
drawSpriteX                   EQU     0x33ca
drawSpriteY                   EQU     0x33bf
resetMusic                    EQU     0x3da7
playMusic                     EQU     0x38b9
musicGetNote                  EQU     0x37a3
musicPlayNote                 EQU     0x34ac
soundOff                      EQU     0x30a7
soundOnV                      EQU     0x40a1
bcdAdd                        EQU     0x36ca
bcdInt                        EQU     0x42a0
bcdDigits                     EQU     0x3cab
bcdCmp                        EQU     0x3ea5
bcdCmpExt                     EQU     0x36a3
bcdCpy                        EQU     0x39a3


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


convert8Arr2d       ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    STW     memAddr
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15


resetVars           LDI     0
                    DOKE    varAddress
                    INC     varAddress
                    INC     varAddress
                    LD      varAddress
                    XORI    giga_One                            ; end of user vars
                    BNE     resetVars
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


absolute            BGE     abs_exit
                    STW     mathX
                    LDI     0
                    SUBW    mathX
abs_exit            RET


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


shiftRight2bit      LDWI    SYS_LSRW2_52
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     52
                    RET


shiftRight3bit      LDWI    SYS_LSRW3_52
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     52
                    RET


shiftRight4bit      LDWI    SYS_LSRW4_50
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     50
                    RET


shiftRight6bit      LDWI    SYS_LSRW6_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_tmp        EQU     register15
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10
drawLine_ddx        EQU     register11
drawLine_cnt        EQU     register12
drawLine_swp        EQU     register13

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
                    RET


waitVBlanks         PUSH

waitVB_loop         LDW     waitVBlankNum
                    SUBI    0x01
                    STW     waitVBlankNum
                    BGE     waitVB_vblank
                    POP
                    RET
    
waitVB_vblank       CALLI   waitVBlank
                    BRA     waitVB_loop


resetVideoFlags     LDI     giga_CursorX                        ; starting cursor position
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    CALLI   resetVideoFlags
                    
                    LDWI    SYS_SetMemory_v2_54                 ; setup fill memory SYS routine
                    STW     giga_sysFn
                    POP
                    RET



                    ; runs real time, (vblank interrupt), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    CALLI   0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
realTimeStub1       BRA     realTS_rti
                    RET                                     ; BRA + RET gets replaced by CALLI realTimeProc1 address
realTimeStub2       BRA     realTS_rti
                    RET                                     ; BRA + RET gets replaced by CALLI realTimeProc2 address

realTS_rti          POP
                    LDI     255                             ; (256 - n) = vblank interrupt frequency
                    ST      giga_frameCount
                    LDWI    &h0400
                    LUP 0                                   ; RTI


                    ; clears a rectangle on the viewable screen
clearRect           PUSH
                    CALLI   initClearFuncs
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LD      clrAddress + 1
                    ST      giga_sysArg3
                    LD      clrLines
                    
clearCR_loopy       ST      clrLines
                    LD      clrWidth
                    ST      giga_sysArg0
                    LD      clrAddress
                    ST      giga_sysArg2
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clrLines
                    SUBI    1
                    BNE     clearCR_loopy
                    CALLI   realTimeStub
                    POP
                    RET


drawPixel           STW     drawPixel_xy
                    LD      drawPixel_xy + 1    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      drawPixel_xy + 1
                    LD      fgbgColour + 1
                    POKE    drawPixel_xy
                    RET




drawLineSlow        PUSH
                    LDI     1
                    STW     drawLine_u
                    LDW     drawLine_x2
                    SUBW    drawLine_x1                     ; dx = x2 - x1
                    BGE     drawLS_dxp
                    LDWI    -1
                    STW     drawLine_u
                    LDW     drawLine_x1
                    SUBW    drawLine_x2                     ; dx = x1 - x2
                    
drawLS_dxp          STW     drawLine_dx
                    LDWI    256
                    STW     drawLine_v
                    LDW     drawLine_y2
                    SUBW    drawLine_y1                     ; dy = y2 - y1
                    BGE     drawLS_dyp
                    LDWI    -256
                    STW     drawLine_v
                    LDW     drawLine_y1
                    SUBW    drawLine_y2                     ; sy = y1 - y2
                    
drawLS_dyp          STW     drawLine_dy
                    CALLI   drawLineSlowExt




drawLineSlowExt     LD      drawLine_x1
                    ST      drawLine_addr
                    LD      drawLine_y1
                    ADDI    8
                    ST      drawLine_addr + 1
                    LDW     drawLine_dx
                    SUBW    drawLine_dy
                    BGE     drawLS_noswap
                    CALLI   drawLineSlowSwap
                    
drawLS_noswap       LDI     0
                    SUBW    drawLine_dx
                    STW     drawLine_ddx
                    STW     drawLine_cnt
                    LDW     drawLine_dx
                    ADDW    drawLine_dx
                    STW     drawLine_dx
                    LDW     drawLine_dy
                    ADDW    drawLine_dy
                    STW     drawLine_dy
                    CALLI   drawLineSlowLoop


drawLineSlowLoop    LD      fgbgColour + 1
                    POKE    drawLine_addr
                    LDW     drawLine_ddx
                    ADDW    drawLine_dy
                    STW     drawLine_ddx
                    BLE     drawLLS_xy
                    SUBW    drawLine_dx
                    STW     drawLine_ddx
                    LDW     drawLine_addr
                    ADDW    drawLine_v
                    STW     drawLine_addr

drawLLS_xy          LDW     drawLine_addr
                    ADDW    drawLine_u
                    STW     drawLine_addr
                    CALLI   realTimeStub
                    LDW     drawLine_cnt
                    ADDI    1
                    STW     drawLine_cnt
                    BLE     drawLineSlowLoop

                    POP
                    RET


drawLineSlowSwap    LDW     drawLine_dx
                    STW     drawLine_swp
                    LDW     drawLine_dy
                    STW     drawLine_dx
                    LDW     drawLine_swp
                    STW     drawLine_dy
                    LDW     drawLine_u
                    STW     drawLine_swp
                    LDW     drawLine_v
                    STW     drawLine_u
                    LDW     drawLine_swp
                    STW     drawLine_v
                    RET



drawPolyRel         PUSH

drawPR_loop         LD      cursorXY
                    STW     drawLine_x1
                    LD      cursorXY + 1
                    STW     drawLine_y1
                    LDW     drawPoly_addr
                    DEEK
                    STW     drawLine_x2
                    SUBI    255
                    BEQ     drawPR_exit
                    LDW     drawLine_x1
drawPR_x2           ADDW    drawLine_x2                     ;relative X mode
                    STW     drawLine_x2
                    ST      cursorXY
                    INC     drawPoly_addr
                    INC     drawPoly_addr
                    LDW     drawPoly_addr
                    DEEK
                    STW     drawLine_y2
                    LDW     drawLine_y1
drawPR_y2           ADDW    drawLine_y2                     ;relative Y mode
                    STW     drawLine_y2
                    ST      cursorXY + 1
                    CALLI   drawLineSlow
                    INC     drawPoly_addr
                    INC     drawPoly_addr
                    BRA     drawPR_loop
                    
drawPR_exit         LDI     0x99                            ;ADDW
                    ST      drawPoly_mode
                    CALLI   setPolyRelFlipX
                    CALLI   setPolyRelFlipY                 ;reset X and Y modes
                    POP
                    RET


setPolyRelFlipX     LDWI    drawPR_x2
                    STW     drawPoly_addr
                    LDW     drawPoly_mode
                    POKE    drawPoly_addr
                    RET


setPolyRelFlipY     LDWI    drawPR_y2
                    STW     drawPoly_addr
                    LDW     drawPoly_mode
                    POKE    drawPoly_addr
                    RET



; do *NOT* use register4 to register7 during time slicing
spriteId            EQU     register0
spriteXY            EQU     register1
spriteAddrs         EQU     register2

    
draw_sprite         LDWI    _spritesLut_
                    ADDW    spriteId
                    ADDW    spriteId
                    DEEK
                    STW     spriteAddrs                     ; get sprite address table
                    
draw_s_loop         LDW     spriteAddrs
                    DEEK
                    BEQ     draw_s_exit
                    STW     giga_sysArg0
                    INC     spriteAddrs
                    INC     spriteAddrs
                    LDW     spriteAddrs
                    DEEK
                    ADDW    spriteXY
                    SYS     64
                    INC     spriteAddrs
                    INC     spriteAddrs
                    BRA     draw_s_loop
                    
draw_s_exit         RET


drawSprite          PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    CALLI   draw_sprite
                    POP
                    RET


drawSpriteX         PUSH
                    LDWI    SYS_Sprite6x_v3_64
                    STW     giga_sysFn
                    CALLI   draw_sprite
                    POP
                    RET


drawSpriteY         PUSH
                    LDWI    SYS_Sprite6y_v3_64
                    STW     giga_sysFn
                    CALLI   draw_sprite
                    POP
                    RET


audioAddr           EQU     register1
waveType            EQU     register2
midiNote            EQU     register4                       ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


resetMusic          LDI     giga_soundChan1 >>8
                    ST      audioAddr + 1
                    LDI     0
                    ST      waveType                        ; wavA, (wavX is initialised by Macros)

resetMu_loop        LDI     giga_soundChan1
                    ST      audioAddr                       ; reset low byte
                    LDW     waveType
                    DOKE    audioAddr                       ; wavA and wavX
                    INC     audioAddr
                    INC     audioAddr
                    LDI     0
                    DOKE    audioAddr                       ; keyL and keyH
                    INC     audioAddr + 1                   ; increment high byte
                    LD      audioAddr + 1
                    SUBI    4
                    BLE     resetMu_loop
                    RET



playMusic           PUSH
                    
playN_process       LDW     musicStream
                    INC     musicStream
                    PEEK                                    ; get music stream byte
                    STW     musicCommand
                    ANDI    0xF0
                    XORI    0x90                            ; check for start note
                    BNE     playN_endnote
                    LDW     musicStream
                    INC     musicStream
                    PEEK                                    ; get music note
                    ST      musicNote
                    CALLI   musicGetNote                    ; get note from ROM
                    CALLI   musicPlayNote
                    BRA     playN_process
                    
playN_endnote       XORI    0x10                            ; check for end note
                    BNE     playN_segment
                    LDI     0
                    STW     musicNote
                    CALLI   musicPlayNote         			; end note
                    BRA     playN_process

playN_segment       XORI    0x50                            ; check for new segment
                    BNE     playN_delay
                    LDW     musicStream                     ; music stream
                    DEEK
                    STW     musicStream                     ; 0xD0 new music segment address
                    BNE     playN_process                   ; 0x0000 = stop
                    POP
                    RET

playN_delay         LDW     musicCommand
                    ST      giga_soundTimer                 ; keep pumping soundTimer
                    STW     waitVBlankNum
                    CALLI   waitVBlanks
                    BRA     playN_process


musicGetNote        LDWI    giga_notesTable                 ; note table in ROM
                    STW     musicPtr
                    LD      musicNote
                    SUBI    11
                    LSLW
                    ADDW    musicPtr
                    STW     musicPtr
                    LUP     0x00                            ; get ROM note low byte
                    ST      musicNote
                    LDW     musicPtr
                    LUP     0x01                            ; get ROM note high byte
                    ST      musicNote + 1
                    LDW     musicNote                       ; this is needed for GET("MUSIC_NOTE")
                    RET


musicPlayNote       LDW     musicCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01
                    ST      musicPtr + 1
                    LDI     0xFC
                    ST      musicPtr                        ; note address 0x01FC <-> 0x04FC
                    LDW     musicNote
                    DOKE    musicPtr                        ; set note
                    RET


soundOff            LDI     0xFC
                    ST      sndChannel
                    LDI     0
                    DOKE    sndChannel                      ; turn off channel
                    RET


soundOnV            LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDI     0xFC
                    ST      sndChannel
                    LD      sndFrequency
                    SYS     48
                    ST      sndFrequency                    ; right shift low byte of sndFrequency by 1
                    LDW     sndFrequency                    ; format = high:8 low:07, (bit 7 of low byte = 0)
                    DOKE    sndChannel                      ; turn on channel
                    LDI     0xFA
                    ST      sndChannel                      ; still pointing to the correct channel
                    LDI     63
                    SUBW    sndVolume
                    ADDI    64
                    POKE    sndChannel                      ; 0 -> 63 maps to 127 -> 64
                    INC     sndChannel
                    LD      sndWaveType
                    ANDI    3
                    POKE    sndChannel                      ; wave type in wave X
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


bcdAdd              ST      bcdLength
                    LDI     0
                    STW     bcdCarry
                    
bcdA_loop           LDW     bcdDstAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    STW     bcdDstData
                    LDW     bcdSrcAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    ADDW    bcdDstData
                    ADDW    bcdCarry
                    STW     bcdDstData
                    SUBI    10                  ; no handling of values > 9
                    BLT     bcdA_nc
                    STW     bcdDstData
                    LDI     1
                    BRA     bcdA_cont
          
bcdA_nc             LDI     0
                    
bcdA_cont           STW     bcdCarry
          
                    LDW     bcdDstData
                    POKE    bcdDstAddr          ; modifies dst bcd value
                    INC     bcdDstAddr
                    INC     bcdSrcAddr
                    LD      bcdLength
                    SUBI    1
                    ST      bcdLength           ; expects src and dst lengths to be equal
                    BGT     bcdA_loop
                    RET



                    ; create a bcd value from a +ve int, (max 42767)
bcdInt              STW     bcdValue
                    PUSH
                    LDW     bcdDstAddr
                    ADDI    4
                    STW     bcdDstAddr                          ; bcdDstAddr must point to >= 5 digit bcd value
                    LDI     0
                    STW     bcdDigit
                    LDWI    10000
                    CALLI   bcdDigits
                    LDWI    1000
                    CALLI   bcdDigits
                    LDI     100
                    CALLI   bcdDigits
                    LDI     10
                    CALLI   bcdDigits
                    LD      bcdValue
                    POKE    bcdDstAddr
                    POP
                    RET


bcdDigits           STW     bcdMult
                    LDW     bcdValue

bcdD_index          SUBW    bcdMult
                    BLT     bcdD_cont
                    STW     bcdValue
                    INC     bcdDigit                            ; calculate digit
                    BRA     bcdD_index
    
bcdD_cont           LD      bcdDigit
                    POKE    bcdDstAddr                          ; store digit
                    LDW     bcdDstAddr
                    SUBI    1
                    STW     bcdDstAddr
                    LDI     0
                    ST      bcdDigit                            ; reset digit
                    
bcdD_exit           RET



bcdCmp              ST      bcdLength

bcdCmp_loop         LDW     bcdDstAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    STW     bcdDstData
                    LDW     bcdSrcAddr
                    PEEK                        ; expects unpacked byte values 0 to 9
                    SUBW    bcdDstData
                    BGT     bcdC_gt
                    BLT     bcdC_lt
                    PUSH
                    CALLI   bcdCmpExt
                    POP
                    BGT     bcdCmp_loop
                    LDI     0
                    RET

bcdC_gt             LDI     1
                    RET
                    
bcdC_lt             LDWI    -1
                    RET                    


bcdCmpExt           LDW     bcdDstAddr
                    SUBI    1
                    STW     bcdDstAddr
                    LDW     bcdSrcAddr
                    SUBI    1
                    STW     bcdSrcAddr
                    LD      bcdLength
                    SUBI    1
                    ST      bcdLength           ; expects src and dst lengths to be equal
                    RET


bcdCpy              ST      bcdLength

bcdCpy_loop         LDW     bcdSrcAddr
                    PEEK
                    POKE    bcdDstAddr
                    INC     bcdSrcAddr
                    INC     bcdDstAddr
                    LD      bcdLength
                    SUBI    1
                    ST      bcdLength           ; expects src and dst lengths to be equal
                    BGT     bcdCpy_loop
                    RET

