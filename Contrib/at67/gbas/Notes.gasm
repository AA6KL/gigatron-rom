_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x00a0
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     0x0024
register11          EQU                     0x0026
register12          EQU                     0x0028
register13          EQU                     0x002A
fgbgColour          EQU                     register0 + 0x14
cursorXY            EQU                     register0 + 0x16
midiStreamPtr       EQU                     register0 + 0x18
midiDelay           EQU                     register0 + 0x1A
frameCountPrev      EQU                     register0 + 0x1C
miscFlags           EQU                     register0 + 0x1E

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_10                 EQU                     0x022f
_11                 EQU                     0x0233
_12                 EQU                     0x0245
_13                 EQU                     0x024f
_14                 EQU                     0x025d
_20                 EQU                     0x026b
_21                 EQU                     0x0274
_22                 EQU                     0x027d
_23                 EQU                     0x0286
_24                 EQU                     0x028f
_25                 EQU                     0x0298
_26                 EQU                     0x02a1
_30                 EQU                     0x02aa
_31                 EQU                     0x02ae
_32                 EQU                     0x02c6
_33                 EQU                     0x02d5
_34                 EQU                     0x02dc
_35                 EQU                     0x02e9
_36                 EQU                     0x08a2
_37                 EQU                     0x08b5
_end_0x032b         EQU                     0x08c3
_next_0x0233        EQU                     0x0233
_next_0x02b4        EQU                     0x02ae
_page_0x08a0        EQU                     0x08a0
_if_0x031d          EQU                     0x08b5

; Variables
_c                  EQU                     0x0030
_p                  EQU                     0x0032
_n                  EQU                     0x0034

; Strings
usrStr_0x7fa0       EQU                     0x7fa0
usrStr_0x7fa0       DB                      12 'Playing note'

; Code
_entryPoint_        Initialise              
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                                                ; INIT

_10                 LDI                     1
                    STW                     _c                              ; for c=1 to 4

_11                 LDW                     _c
                    STW                     mathX
                    LDWI                    256
                    STW                     mathY
                    LDWI                    multiply16bit
                    CALL                    giga_vAC
                    ADDI                    252
                    STW                     _p                              ; p=c*256+252

_12                 LDW                     _p
                    SUBI                    1
                    STW                     0xd0
                    LDI                     2
                    POKE                    0xd0                            ; poke p-1,2:'Pulse

_13                 LDI                     0
                    POKE                    _p
                    LDW                     _p
                    ADDI                    1
                    STW                     0xd0
                    LDI                     0
                    POKE                    0xd0                            ; poke p,0:poke p+1,0

_14                 ForNextLoopUp           _c _11                  4       ; next c

_20                 LDWI                    129
                    STW                     register0
                    LDI                     17
                    POKE                    register0                       ; poke 129,17:'LDWI $9xx

_21                 LDWI                    131
                    STW                     register0
                    LDI                     9
                    POKE                    register0                       ; poke 131,9

_22                 LDWI                    132
                    STW                     register0
                    LDI                     127
                    POKE                    register0                       ; poke 132,127:'LUP 0

_23                 LDWI                    133
                    STW                     register0
                    LDI                     0
                    POKE                    register0                       ; poke 133,0

_24                 LDWI                    134
                    STW                     register0
                    LDI                     147
                    POKE                    register0                       ; poke 134,147:'INC 130

_25                 LDWI                    135
                    STW                     register0
                    LDI                     130
                    POKE                    register0                       ; poke 135,130

_26                 LDWI                    136
                    STW                     register0
                    LDI                     255
                    POKE                    register0                       ; poke 136,255:'RET

_30                 LDI                     1
                    STW                     _n                              ; for n=1 to 95

_31                 PrintString             usrStr_0x7fa0
                    PrintVarInt16           _n
                    LDWI                    newLineScroll
                    CALL                    giga_vAC                        ; print "Playing note",n

_32                 LDW                     _n
                    ADDW                    _n
                    STW                     0xd0
                    LDWI                    130
                    STW                     register0
                    LD                      0xd0
                    POKE                    register0                       ; poke 130,n+n:'$900+n*2

_33                 LDWI                    0x0081
                    CALL                    giga_vAC
                    POKE                    _p                              ; poke p,  usr(129):'Flo

_34                 LDW                     _p
                    ADDI                    1
                    STW                     0xd0
                    LDWI                    0x0081
                    CALL                    giga_vAC
                    POKE                    0xd0                            ; poke p+1,usr(129):'Fhi

_35                 LDWI                    44
                    STW                     register0
                    LDI                     15
                    POKE                    register0                       ; poke 44,15:'0.25 secs

                    STW                     0xe0
                    LDWI                    _page_0x08a0
                    CALL                    giga_vAC
_page_0x08a0        LDW                     0xe0
_36                 LDWI                    0x002c
                    PEEK                    
                    CALL                    convertGtOpAddr
                    PageJumpBEQ             _37                 
                    LDWI                    _36
                    CALL                    giga_vAC                        ; if peek(44)>0 then goto 36

_37                 ForNextLoopUp           _n _31                  95      ; next n

_end_0x032b         BRA                     _end_0x032b                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY HERE, modifications must be made in the original include files                                       *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

convertEqOp         EQU     0x7fd0
convertNeOp         EQU     0x7fd9
convertLeOp         EQU     0x7fe2
convertGeOp         EQU     0x7feb
convertLtOp         EQU     0x7ff4
convertGtOp         EQU     0x7ea0
multiply16bit       EQU     0x7ea9
resetVideoTable     EQU     0x7ba0
initClearFuncs      EQU     0x7fad
clearCursorRow      EQU     0x7bbc
printText           EQU     0x7ecc
printDigit          EQU     0x7aa0
printInt16          EQU     0x7da0
printChar           EQU     0x79a0
newLineScroll       EQU     0x7ca0
convertEqOpAddr     EQU     0x00e2
convertNeOpAddr     EQU     0x00e4
convertLeOpAddr     EQU     0x00e6
convertGeOpAddr     EQU     0x00e8
convertLtOpAddr     EQU     0x00ea
convertGtOpAddr     EQU     0x00ec


onGgVar             EQU     register0
onGgAddr            EQU     register1


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


mathX               EQU     register0
mathY               EQU     register1
mathSum             EQU     register2
mathMask            EQU     register3
mathRem             EQU     register4
mathSign            EQU     register5
mathScratch         EQU     register6
mathShift           EQU     register7
    
    
                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDI     1
    
multiply16_loop     STW     mathMask
                    ANDW    mathY
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum
                    
multiply16_skip     LDW     mathX
                    ADDW    mathX
                    STW     mathX
                    LDW     mathMask
                    ADDW    mathMask
                    BNE     multiply16_loop
                    
                    LDW     mathSum
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register4
top                 EQU     register5
bot                 EQU     register6
vramAddr            EQU     register7
evenAddr            EQU     register8
    
    
                    ; resets video table pointers
resetVideoTable     LDWI    0x0008
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
    
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres+8
                    BLT     resetVT_loop
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET



textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textFont            EQU     register2
textChr             EQU     register3
textHex             EQU     register4
textSlice           EQU     register5
scanLine            EQU     register6
digitMult           EQU     register7
digitIndex          EQU     register8
clearLoop           EQU     register9
    
    
                    ; prints text string pointed to by the accumulator
printText           PUSH
                    LDW     textStr             
                    PEEK
                    ST      textLen                         ; first byte is length
    
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
printT_loop         LoopCounter textLen printT_char
                    POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDWI    0
                    SUBW    textNum
printI16_pos        STW     textNum    
    
                    LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           PUSH
                    LD      textChr                         ; (char-32)*5 + 0x0700
                    SUBI    32
                    STW     textChr
                    STW     textFont
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    STW     textFont             
                    LDWI    giga_text32
                    ADDW    textFont
                    STW     textFont                        ; text font slice base address for chars 32-81
    
                    LDW     textChr
                    SUBI    50
                    BLT     printC_draw
                    LDW     textFont
                    ADDI    0x06
                    STW     textFont                        ; text font slice base address for chars 82+
    
printC_draw         LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LDWI    0x0800
                    ADDW    cursorXY
                    STW     giga_sysArg4                    ; xy position
    
                    LDI     0x05
                    ST      textSlice
    
printC_slice        LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2        
                    SYS     0xCB                            ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LoopCounter textSlice printC_slice
    
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    155                             ; 154 is last possible char in row
                    BLT     printC_exit
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
printC_exit         POP
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDI     8
                    ST      clearLoop
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
    
clearCR_loopy       LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    BGT     clearCR_loopx
    
                    INC     giga_sysArg4 + 1                ; next line                
                    LoopCounter clearLoop clearCR_loopy
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY+1
                    ADDI    8
                    ST      cursorXY+1
                    SUBI    120
                    BLT     newLS_exit
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    
                    LDWI    giga_videoTable
                    STW     scanLine
    
                    ; scroll all scan lines by 8 through 0x08 to 0x7F
newLS_scroll        LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scan line pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
        
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
                    ; read scan line pointer for last char row, use this as cursor position
                    LDWI    giga_videoTable + 0x00E0
                    PEEK
                    SUBI    0x08                            ; corrected in printChar
                    ST      cursorXY+1
newLS_exit          POP
                    RET

