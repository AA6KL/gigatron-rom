_startAddress_      EQU                     0x0200

; Internal variables
serialRawPrev       EQU                     0x0081
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
miscFlags           EQU                     register0 + 0x28

; Internal buffers
textWorkArea        EQU                     0xffa0

; Includes
%includePath        "../runtime"
%include            gigatron.i
%include            macros.i

; Labels
_entryPoint_        EQU                     0x0200
_loop               EQU                     0x0463
_254                EQU                     0x04dc
_253                EQU                     0x04ee
_191                EQU                     0x0513
_127                EQU                     0x051a
_calcPitch          EQU                     0x0521
_next_0x02cb        EQU                     0x02a5
_else_0x030b        EQU                     0x02d3
_page_0x0300        EQU                     0x0300
_else_0x034b        EQU                     0x030f
_endif_0x034f       EQU                     0x0313
_next_0x0386        EQU                     0x0342
_else_0x039b        EQU                     0x034f
_endif_0x03a3       EQU                     0x0355
_else_0x03be        EQU                     0x0366
_endif_0x03c6       EQU                     0x036c
_next_0x0436        EQU                     0x03ce
_else_0x0450        EQU                     0x03e2
_next_0x0454        EQU                     0x03e6
_page_0x0400        EQU                     0x0400
_next_0x04f1        EQU                     0x0487
_repeat_0x051b      EQU                     0x04ad
_else_0x057a        EQU                     0x04ec
_page_0x0500        EQU                     0x0500
_else_0x0596        EQU                     0x0511
_end_0x05c1         EQU                     0x0538

; Variables
_y                  EQU                     0x0030
_x                  EQU                     0x0032
_i                  EQU                     0x0034
_j                  EQU                     0x0036
_a                  EQU                     0x0038
_pitch              EQU                     0x003a
_yy                 EQU                     0x003c
_color1             EQU                     0x003e
_color2             EQU                     0x0040
_c1_array           EQU                     0xff9a
_c1_array           DW                      0x0000 0x0000 0x0000 
_c2_array           EQU                     0xff94
_c2_array           DW                      0x0000 0x0000 0x0000 
_fade               EQU                     0x0042
_cIndex             EQU                     0x0044
_decay              EQU                     0x0046
_p                  EQU                     0x0048
_sky_array          EQU                     0xff8e
_sky_array          DW                      0x0000 0x0000 0x0000 
_v                  EQU                     0x004a
_q                  EQU                     0x004c

; Strings

; Define Bytes
def_bytes_0x8000    EQU                     0x8000
def_bytes_0x8000    DB                      144 57 145 33 145 33 144 57 146 45 22 128 129 1 144 55 145 33 145 33 7 144 57 128 130 15 144 33 144 33 129 7 145 57 15 146 55 144 33 144 33 129 8 145 57 130 7 145 55 8 145 57 144 33 144 33 7 145 55 8 145 57 144 33 144 33 7 145 55 8 145 57 144 36 144 36 22 128 129 1 144 55 145 36 145 36 7 144 57 15 145 36 145 36 7 128 1 144 57 14 146 55 145 36 145 36 128 8 144 57 130 7 144 55 8 144 57 145 36 145 36 7 144 55 8 144 57 145 36 145 36 7 144 55 8 144 57 145 31 145 31 22 128 129 1 144 55 145 31 145 31 7 144 57 15 145 31 145 31 7 128 1 144 57 14 146 55 145 31 145 31 128 8 144 57 130 7 144 55 8 144 57 145 31 145 31 7 144 55 8 144 57 145 31 145 31 7 144 55 8 144 57 145 33 145 33 22 128 129 1 144 55 145 33 145 33 7 144 57 15 145 33 145 33 7 128 1 144 57 14 146 55 145 33 145 33 128 8 144 57 130 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 33 145 33 22 128 129 1 144 55 145 33 145 33 7 144 57 15 145 33 145 33 7 128 1 144 57 14 146 55 145 33 145 33 128 8 144 57 130 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 36 145 36 22 128 129 1 144 55 145 36 145 36 7 144 57 15 145 36 145 36 7 128 1 144 57 14 146 55 145 36 145 36 128 8 144 57 130 7 144 55 8 144 57 145 36 145 36 7 144 55 8 144 57 145 36 145 36 7 144 55 8 144 57 145 31 145 31 22 128 129 1 144 55 145 31 145 31 7 144 57 15 145 31 145 31 7 128 1 144 57 14 146 55 145 31 145 31 128 8 144 57 130 7 144 55 8 144 57 145 31 145 31 7 144 55 8 144 57 145 31 145 31 7 144 55 8 144 57 145 33 145 33 22 128 129 1 144 55 145 33 145 33 7 144 57 15 145 33 145 33 7 128 1 144 57 14 146 55 145 33 145 33 128 8 144 57 130 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 33 145 33 146 69 15 130 146 69 7 128 129 1 144 55 145 33 145 33 146 69 7 144 57 146 72 7 146 69 8 145 33 145 33 146 69 7 128 1 144 57 146 69 7 146 72 7 147 55 145 33 145 33 146 69 128 8 144 57 131 7 144 55 8 144 57 145 33 145 33 146 69 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 36 145 36 146 72 15 130 146 72 7 128 129 1 144 55 145 36 145 36 146 72 7 144 57 146 76 7 146 72 8 145 36 145 36 146 72 7 128 1 144 57 146 72 7 146 76 7 147 55 145 36 145 36 146 72 128 8 144 57 131 7 144 55 8 144 57 145 36 145 36 146 72 7 144 55 8 144 57 145 36 145 36 7 144 55 8 144 57 145 31 145 31 146 67 15 130 146 67 7 128 129 1 144 55 145 31 145 31 146 67 7 144 57 146 71 7 146 67 8 145 31 145 31 146 67 7 128 1 144 57 146 67 7 146 71 7 147 55 145 31 145 31 146 67 128 8 144 57 131 7 144 55 8 144 57 145 31 145 31 146 67 7 144 55 8 144 57 145 31 145 31 7 144 55 8 144 57 145 33 145 33 146 69 15 130 146 69 7 128 129 1 144 55 145 33 145 33 146 69 7 144 57 146 72 7 146 69 8 145 33 145 33 146 69 7 128 1 144 57 146 69 7 146 72 7 147 55 145 33 145 33 146 69 128 8 144 57 131 7 144 55 8 144 57 145 33 145 33 146 69 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 33 145 33 146 69 15 130 146 69 7 128 129 1 144 55 145 33 145 33 146 69 7 144 57 146 72 7 146 69 8 145 33 145 33 146 69 7 128 1 144 57 146 69 7 146 72 7 147 55 145 33 145 33 146 69 128 8 144 57 131 7 144 55 8 144 57 145 33 145 33 146 69 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 36 145 36 146 72 15 130 146 72 7 128 129 1 144 55 145 36 145 36 146 72 7 144 57 146 76 7 146 72 8 145 36 145 36 146 72 7 128 1 144 57 146 72 7 146 76 7 147 55 145 36 145 36 146 72 128 8 144 57 131 7 144 55 8 144 57 145 36 145 36 146 72 7 144 55 8 144 57 145 36 145 36 7 144 55 8 144 57 145 31 145 31 146 67 15 130 146 67 7 128 129 1 144 55 145 31 145 31 146 67 7 144 57 146 71 7 146 67 8 145 31 145 31 146 67 7 128 1 144 57 146 67 7 146 71 7 147 55 145 31 145 31 146 67 128 8 144 57 131 7 144 55 8 144 57 145 31 145 31 146 67 7 144 55 8 144 57 145 31 145 31 7 144 55 8 144 57 145 33 145 33 146 69 15 130 146 69 7 128 129 1 144 55 145 33 145 33 146 69 7 144 57 146 72 7 146 69 8 145 33 145 33 146 69 7 128 1 144 57 146 69 7 146 72 7 147 55 145 33 145 33 146 69 128 8 144 57 131 7 144 55 8 144 57 145 33 145 33 146 69 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 33 144 33 145 69 130 15 144 33 144 33 7 129 8 145 69 15 144 33 144 33 7 129 1 144 33 144 33 7 145 69 7 144 33 144 33 145 69 8 144 33 144 33 7 129 8 145 69 22 129 8 144 33 144 33 145 69 15 144 33 144 33 145 69 15 145 69 15 144 33 144 33 145 69 7 144 33 144 33 8 145 69 7 144 33 144 33 8 144 33 144 33 145 69 15 145 69 15 145 69 15 146 57 144 33 144 33 129 22 128 130 1 144 55 145 33 145 33 7 144 57 15 145 33 145 33 7 128 1 144 57 14 146 55 145 33 145 33 128 8 144 57 130 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 36 145 36 22 128 129 1 144 55 145 36 145 36 7 144 57 15 145 36 145 36 7 128 1 144 57 14 146 55 145 36 145 36 128 8 144 57 130 7 144 55 8 144 57 145 36 145 36 7 144 55 8 144 57 145 36 145 36 7 144 55 8 144 57 145 31 145 31 22 128 129 1 144 55 145 31 145 31 7 144 57 15 145 31 145 31 7 128 1 144 57 14 146 55 145 31 145 31 128 8 144 57 130 7 144 55 8 144 57 145 31 145 31 7 144 55 8 144 57 145 31 145 31 7 144 55 8 144 57 145 33 145 33 22 128 129 1 144 55 145 33 145 33 7 144 57 15 145 33 145 33 7 128 1 144 57 14 146 55 145 33 145 33 128 8 144 57 130 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 33 145 33 144 57 22 128 129 1 144 55 145 33 145 33 144 55 7 144 57 144 57 15 145 33 145 33 7 128 1 144 57 144 57 14 146 55 145 33 145 33 146 55 128 8 144 57 144 57 130 7 144 55 144 55 8 144 57 145 33 145 33 144 57 7 144 55 144 55 8 144 57 145 33 145 33 144 57 7 144 55 144 55 8 144 57 145 36 145 36 144 57 22 128 129 1 144 55 145 36 145 36 144 55 7 144 57 144 57 15 145 36 145 36 7 128 1 144 57 144 57 14 146 55 145 36 145 36 146 55 128 8 144 57 144 57 130 7 144 55 144 55 8 144 57 145 36 145 36 144 57 7 144 55 144 55 8 144 57 145 36 145 36 144 57 7 144 55 144 55 8 144 57 145 31 145 31 144 57 22 128 129 1 144 55 145 31 145 31 144 55 7 144 57 144 57 15 145 31 145 31 7 128 1 144 57 144 57 14 146 55 145 31 145 31 146 55 128 8 144 57 144 57 130 7 144 55 144 55 8 144 57 145 31 145 31 144 57 7 144 55 144 55 8 144 57 145 31 145 31 144 57 7 144 55 144 55 8 144 33 144 33 145 45 146 57 22 128 1 144 33 144 33 7 145 57 146 45 15 144 33 144 33 15 145 57 146 45 7 144 33 144 33 23 144 33 144 33 145 57 146 45 15 144 33 144 33 15 145 57 144 33 144 33 147 69 129 130 15 131 145 69 7 128 1 144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 57 146 36 146 36 145 72 15 129 145 72 7 128 130 1 144 55 146 36 146 36 145 72 7 144 57 145 76 7 145 72 8 146 36 146 36 145 72 7 128 1 144 57 145 72 7 145 76 7 147 55 146 36 146 36 145 72 128 8 144 57 131 7 144 55 8 144 57 146 36 146 36 145 72 7 144 55 8 144 57 146 36 146 36 7 144 55 8 144 57 146 31 146 31 145 67 15 129 145 67 7 128 130 1 144 55 146 31 146 31 145 67 7 144 57 145 71 7 145 67 8 146 31 146 31 145 67 7 128 1 144 57 145 67 7 145 71 7 147 55 146 31 146 31 145 67 128 8 144 57 131 7 144 55 8 144 57 146 31 146 31 145 67 7 144 55 8 144 57 146 31 146 31 7 144 55 8 144 57 146 33 146 33 145 69 15 129 145 69 7 128 130 1 144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 57 146 33 146 33 145 69 15 129 145 69 7 128 130 1 144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 57 146 36 146 36 145 72 15 129 145 72 7 128 130 1 144 55 146 36 146 36 145 72 7 144 57 145 76 7 145 72 8 146 36 146 36 145 72 7 128 1 144 57 145 72 7 145 76 7 147 55 146 36 146 36 145 72 128 8 144 57 131 7 144 55 8 144 57 146 36 146 36 145 72 7 144 55 8 144 57 146 36 146 36 7 144 55 8 144 57 146 31 146 31 145 67 15 129 145 67 7 128 130 1 144 55 146 31 146 31 145 67 7 144 57 145 71 7 145 67 8 146 31 146 31 145 67 7 128 1 144 57 145 67 7 145 71 7 147 55 146 31 146 31 145 67 128 8 144 57 131 7 144 55 8 144 57 146 31 146 31 145 67 7 144 55 8 144 57 146 31 146 31 7 144 55 8 144 57 146 33 146 33 145 69 15 129 145 69 7 128 130 1 144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 28 144 28 145 64 130 3 146 52 57 145 67 3 146 55 27 145 69 3 146 57 27 144 26 144 26 145 62 3 130 146 50 57 145 65 3 147 53 130 27 145 67 3 146 55 131 27 144 28 144 28 145 64 3 146 52 57 145 67 3 146 55 27 145 69 3 146 57 27 144 26 144 26 145 62 3 130 146 50 57 145 65 3 147 53 130 27 145 67 3 146 55 131 27 147 57 144 33 144 33 145 69 3 130 12 129 145 69 7 128 131 1 144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 57 146 36 146 36 145 72 15 129 145 72 7 128 130 1 144 55 146 36 146 36 145 72 7 144 57 145 76 7 145 72 8 146 36 146 36 145 72 7 128 1 144 57 145 72 7 145 76 7 147 55 146 36 146 36 145 72 128 8 144 57 131 7 144 55 8 144 57 146 36 146 36 145 72 7 144 55 8 144 57 146 36 146 36 7 144 55 8 144 57 146 31 146 31 145 67 15 129 145 67 7 128 130 1 144 55 146 31 146 31 145 67 7 144 57 145 71 7 145 67 8 146 31 146 31 145 67 7 128 1 144 57 145 67 7 145 71 7 147 55 146 31 146 31 145 67 128 8 144 57 131 7 144 55 8 144 57 146 31 146 31 145 67 7 144 55 8 144 57 146 31 146 31 7 144 55 8 144 57 146 33 146 33 145 69 15 129 145 69 7 128 130 1 144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 57 146 33 146 33 145 69 15 129 145 69 7 128 130 1 144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 57 146 36 146 36 145 72 15 129 145 72 7 128 130 1 144 55 146 36 146 36 145 72 7 144 57 145 76 7 145 72 8 146 36 146 36 145 72 7 128 1 144 57 145 72 7 145 76 7 147 55 146 36 146 36 145 72 128 8 144 57 131 7 144 55 8 144 57 146 36 146 36 145 72 7 144 55 8 144 57 146 36 146 36 7 144 55 8 144 57 146 31 146 31 145 67 15 129 145 67 7 128 130 1 144 55 146 31 146 31 145 67 7 144 57 145 71 7 145 67 8 146 31 146 31 145 67 7 128 1 144 57 145 67 7 145 71 7 147 55 146 31 146 31 145 67 128 8 144 57 131 7 144 55 8 144 57 146 31 146 31 145 67 7 144 55 8 144 57 146 31 146 31 7 144 55 8 144 57 146 33 146 33 145 69 15 129 145 69 7 128 130 1 144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 33 144 33 145 69 130 22 129 8 145 69 22 129 8 144 33 144 33 145 69 7 145 69 15 129 8 145 69 22 129 8 144 33 144 33 145 69 15 145 69 15 145 69 15 145 69 15 144 33 144 33 145 69 15 145 69 15 145 69 15 145 69 15 144 33 144 33 145 69 22 129 8 145 69 22 129 8 144 33 144 33 145 69 7 145 69 15 129 8 145 69 22 129 8 144 33 144 33 145 69 15 145 69 15 145 69 15 145 69 15 144 33 144 33 145 69 7 128 8 129 45 144 28 144 28 145 64 3 146 52 57 145 67 3 146 55 27 145 69 3 146 57 27 144 26 144 26 145 62 3 130 146 50 57 145 65 3 147 53 130 27 145 67 3 146 55 131 27 144 28 144 28 145 64 3 146 52 57 145 67 3 146 55 27 145 69 3 146 57 27 144 26 144 26 145 62 3 130 146 50 57 145 65 3 147 53 130 27 145 67 3 146 55 131 27 144 33 144 33 129 3 130 57 144 33 144 33 60 144 33 144 33 60 144 33 144 33 30 145 57 146 45 30 144 33 144 33 129 130 22 128 1 144 33 144 33 22 144 33 144 33 22 144 33 144 33 23 144 33 144 33 15 144 33 144 33 15 144 36 144 36 22 128 1 144 36 144 36 22 144 36 144 36 22 144 36 144 36 23 144 36 144 36 15 144 36 144 36 15 144 31 144 31 22 128 1 144 31 144 31 22 144 31 144 31 22 144 31 144 31 23 144 31 144 31 15 144 31 144 31 15 144 33 144 33 22 128 1 144 33 144 33 22 144 33 144 33 22 144 33 144 33 23 144 33 144 33 15 144 33 144 33 15 145 57 144 33 144 33 22 128 129 1 144 55 145 33 145 33 7 144 57 15 145 33 145 33 7 128 1 144 57 14 146 55 145 33 145 33 128 8 144 57 130 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 33 145 33 7 144 55 8 144 57 145 36 145 36 22 128 129 1 144 55 145 36 145 36 7 144 57 15 145 36 145 36 7 128 1 144 57 14 146 55 145 36 145 36 128 8 144 57 130 7 144 55 8 144 57 145 36 145 36 7 144 55 8 144 57 145 36 145 36 7 144 55 8 144 57 145 31 145 31 22 128 129 1 144 55 145 31 145 31 7 144 57 15 145 31 145 31 7 128 1 144 57 14 146 55 145 31 145 31 128 8 144 57 130 7 144 55 8 144 57 145 31 145 31 7 144 55 8 144 57 145 31 145 31 7 144 55 8 144 33 144 33 145 45 146 57 22 128 1 144 33 144 33 7 145 57 146 45 15 144 33 144 33 15 145 57 146 45 7 144 33 144 33 23 144 33 144 33 145 57 146 45 15 144 33 144 33 15 145 57 144 33 144 33 147 69 129 130 15 131 145 69 7 128 1 144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 57 146 36 146 36 145 72 15 129 145 72 7 128 130 1 144 55 146 36 146 36 145 72 7 144 57 145 76 7 145 72 8 146 36 146 36 145 72 7 128 1 144 57 145 72 7 145 76 7 147 55 146 36 146 36 145 72 128 8 144 57 131 7 144 55 8 144 57 146 36 146 36 145 72 7 144 55 8 144 57 146 36 146 36 7 144 55 8 144 57 146 31 146 31 145 67 15 129 145 67 7 128 130 1 144 55 146 31 146 31 145 67 7 144 57 145 71 7 145 67 8 146 31 146 31 145 67 7 128 1 144 57 145 67 7 145 71 7 147 55 146 31 146 31 145 67 128 8 144 57 131 7 144 55 8 144 57 146 31 146 31 145 67 7 144 55 8 144 57 146 31 146 31 7 144 55 8 144 57 146 33 146 33 145 69 15 129 145 69 7 128 130 1 144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 57 146 33 146 33 145 69 15 129 145 69 7 128 130 1 144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 57 146 36 146 36 145 72 15 129 145 72 7 128 130 1 144 55 146 36 146 36 145 72 7 144 57 145 76 7 145 72 8 146 36 146 36 145 72 7 128 1 144 57 145 72 7 145 76 7 147 55 146 36 146 36 145 72 128 8 144 57 131 7 144 55 8 144 57 146 36 146 36 145 72 7 144 55 8 144 57 146 36 146 36 7 144 55 8 144 57 146 31 146 31 145 67 15 129 145 67 7 128 130 1 144 55 146 31 146 31 145 67 7 144 57 145 71 7 145 67 8 146 31 146 31 145 67 7 128 1 144 57 145 67 7 145 71 7 147 55 146 31 146 31 145 67 128 8 144 57 131 7 144 55 8 144 57 146 31 146 31 145 67 7 144 55 8 144 57 146 31 146 31 7 144 55 8 144 57 146 33 146 33 145 69 15 129 145 69 7 128 130 1 144 55 146 33 146 33 145 69 7 144 57 145 72 7 145 69 8 146 33 146 33 145 69 7 128 1 144 57 145 69 7 145 72 7 147 55 146 33 146 33 145 69 128 8 144 57 131 7 144 55 8 144 57 146 33 146 33 145 69 7 144 55 8 144 57 146 33 146 33 7 144 55 8 144 33 144 33 129 130 15 144 33 144 33 15 144 33 144 33 15 144 33 144 33 15 144 33 144 33 15 128 208 0 128 

; Define Words

; Define Images

; Define Sprites

; Lookup Tables
_lut_numericLabs    EQU                     0xff0c
_lut_numericLabs    DW                      254 253 191 127 0
_lut_numericAddrs   EQU                     0xff04
_lut_numericAddrs   DW                      0x04dc 0x04ee 0x0513 0x051a 

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    LDWI                    505
                    STW                     register0
                    LDI                     238
                    POKE                    register0                       ; poke &h01F9, 238 'disables video output, cls becomes almost instant

                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC                        ; cls

                    LDI                     0
                    STW                     _y
                    STW                     _x
                    STW                     _i
                    STW                     _j
                    STW                     _a
                    STW                     _pitch
                    STW                     _yy                             ; y=0 : x=y : i=x : j=i : a=j : pitch=a : yy=pitch

                    LDI                     63
                    STW                     _color1
                    LDI                     3
                    STW                     _color2                         ; color1 = &h3F : color2 = &h03

                    LDWI                    0xff9a
                    STW                     register1
                    LDI                     63
                    DOKE                    register1
                    LDWI                    0xff9c
                    STW                     register1
                    LDI                     42
                    DOKE                    register1
                    LDWI                    0xff9e
                    STW                     register1
                    LDI                     21
                    DOKE                    register1                       ; dim c1(2)=0 : c1(0)=&h3F : c1(1)=&h2A : c1(2)=&h15

                    LDWI                    0xff94
                    STW                     register1
                    LDI                     3
                    DOKE                    register1
                    LDWI                    0xff96
                    STW                     register1
                    LDI                     2
                    DOKE                    register1
                    LDWI                    0xff98
                    STW                     register1
                    LDI                     1
                    DOKE                    register1                       ; dim c2(2)=0 : c2(0)=&h03 : c2(1)=&h02 : c2(2)=&h01

                    LDI                     0
                    STW                     _fade
                    STW                     _cIndex
                    LDI                     54
                    STW                     _decay                          ; fade=0 : cIndex=fade : decay=54

                    LDI                     119
                    STW                     _y                              ; for y=119 to horizonY step -1

_next_0x02cb        LDWI                    0xff9a
                    ADDW                    _cIndex
                    ADDW                    _cIndex
                    DEEK                    
                    STW                     _color1
                    LDWI                    0xff94
                    ADDW                    _cIndex
                    ADDW                    _cIndex
                    DEEK                    
                    STW                     _color2                         ; color1 = c1(cIndex) : color2 = c2(cIndex)

                    INC                     _fade                           ; inc fade

                    LDW                     _fade
                    SUBW                    _decay
                    BNE                     _else_0x030b
                    INC                     _cIndex
                    LDI                     0
                    STW                     _fade
                    LDW                     _decay
                    STW                     mathShift
                    ShiftRight1bit          
                    STW                     _decay                          ; if fade &&= decay then inc cIndex : fade = 0 : decay = decay LSR 1

_else_0x030b        LDW                     _y
                    STW                     _yy                             ; yy = y

                    LDWI                    _calcPitch
                    CALL                    giga_vAC                        ; gosub calcPitch

                    LDW                     _y
                    SUBI                    32
                    ADDI                    40
                    STW                     0xc0
                    LDWI                    400
                    STW                     mathX
                    LDW                     0xc0
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    ANDI                    1
                    BNE                     _else_0x034b                    ; if ((400 / (y-horizonY+40)) AND 1) &&= 0

                    LDW                     _color1
                    XORW                    _color2
                    STW                     _j
                    BRA                     _endif_0x034f                   ; j = color1 XOR color2

_else_0x034b        LDI                     0
                    STW                     _j                              ; j = 0

_endif_0x034f       LDI                     80
                    STW                     mathX
                    LDW                     _pitch
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    LDW                     mathRem
                    STW                     _i                              ; i = 80 % pitch

                    LDW                     _y
                    ADDI                    8
                    STW                     0xc0
                    LD                      0xc0
                    ST                      giga_vAC + 1
                    ORI                     0xFF
                    XORI                    0xFF
                    STW                     _a                              ; a = ((y + 8) LSL 8)

                    LDI                     0
                    STW                     _x
                    LDW                     _pitch
                    ADDI                    159
                    STW                     0xb4
                    LDI                     1
                    STW                     0xb6                            ; for x=0 to pitch + 159

_next_0x0386        LDW                     _i
                    BNE                     _else_0x039b                    ; if i &&= 0

                    LDW                     _pitch
                    SUBI                    1
                    STW                     _i
                    BRA                     _endif_0x03a3                   ; i = pitch - 1

_else_0x039b        LDW                     _i
                    SUBI                    1
                    STW                     _i                              ; i = i - 1

_endif_0x03a3       LDW                     _i
                    ADDW                    _i
                    SUBW                    _pitch
                    BLT                     _else_0x03be                    ; if i+i &&>= pitch

                    LDW                     _color1
                    XORW                    _j
                    STW                     _p
                    BRA                     _endif_0x03c6                   ; p = color1 XOR j

_else_0x03be        LDW                     _color2
                    XORW                    _j
                    STW                     _p                              ; p = color2 XOR j

_endif_0x03c6       LDW                     _a
                    ADDW                    _x
                    STW                     0xc0
                    LDW                     _p
                    POKE                    0xc0                            ; poke a+x, p

                    ForNextFarVarPos        _x _next_0x0386 0xb4 0xb6       ; next x

                    LDW                     _y
                    ADDW                    _y
                    STW                     0xc0
                    LDWI                    505
                    STW                     register0
                    LDW                     0xc0
                    POKE                    register0                       ; poke &h01F9, y+y

                    ForNextFarDec           _y _next_0x02cb 32              ; next y

                    LDWI                    0xff8e
                    STW                     register1
                    LDI                     16
                    DOKE                    register1
                    LDWI                    0xff90
                    STW                     register1
                    LDI                     32
                    DOKE                    register1
                    LDWI                    0xff92
                    STW                     register1
                    LDI                     48
                    DOKE                    register1                       ; dim sky(2)=0 : sky(0)=&h10 : sky(1)=&h20 : sky(2)=&h30

                    LDI                     0
                    STW                     _fade
                    STW                     _cIndex
                    LDI                     5
                    STW                     _decay                          ; fade=0 : cIndex=fade : decay = 5

                    LDI                     31
                    STW                     _y                              ; for y=horizonY-1 to 0 step -1

_next_0x0436        INC                     _fade                           ; inc fade

                    LDW                     _fade
                    SUBW                    _decay
                    BNE                     _else_0x0450
                    INC                     _cIndex
                    LDI                     0
                    STW                     _fade
                    LDW                     _decay
                    LSLW                    
                    STW                     _decay                          ; if fade &&= decay then inc cIndex : fade = 0 : decay = decay LSL 1

_else_0x0450        LDI                     0
                    STW                     _x                              ; for x=0 to 159

_next_0x0454        LDW                     _y
                    ADDI                    8
                    STW                     0xc0
                    LD                      0xc0
                    ST                      giga_vAC + 1
                    ORI                     0xFF
                    STW                     0xde
                    LDWI                    _page_0x0400
                    CALL                    giga_vAC
_page_0x0400        LDW                     0xde
                    XORI                    0xFF
                    STW                     _a                              ; a = ((y + 8) LSL 8)

                    LDW                     _a
                    ADDW                    _x
                    STW                     0xc0
                    LDWI                    0xff8e
                    ADDW                    _cIndex
                    ADDW                    _cIndex
                    DEEK                    
                    POKE                    0xc0                            ; poke a+x, sky(cIndex)

                    ForNextFarInc           _x _next_0x0454 159             ; next x

                    LDW                     _y
                    ADDW                    _y
                    STW                     0xc0
                    LDWI                    505
                    STW                     register0
                    LDW                     0xc0
                    POKE                    register0                       ; poke &h01F9, y+y

                    ForNextFarDec           _y _next_0x0436 0               ; next y

                    LDI                     3
                    ST                      waveType
                    LDWI                    -32768
                    PlayMidi                                                ; play midi &h8000,3

                    LDI                     0
                    STW                     _x
                    LDI                     8
                    STW                     _v                              ; x=0 : v=8

_loop               LDW                     _x
                    ANDI                    255
                    STW                     _i                              ; i = x AND 255

                    LDI                     0
                    STW                     _j                              ; j = 0

                    LDWI                    496
                    STW                     _q                              ; q = &h0100 + 240

                    LDI                     32
                    STW                     _yy                             ; yy = horizonY

                    LDWI                    _calcPitch
                    CALL                    giga_vAC                        ; gosub calcPitch

                    LDI                     0
                    STW                     _y
                    LDW                     _pitch
                    STW                     0xb0
                    LDI                     1
                    STW                     0xb2                            ; for y=0 to pitch

_next_0x04f1        LDW                     _j
                    ADDW                    _i
                    STW                     _j                              ; j = j + i

                    ForNextFarVarPos        _y _next_0x04f1 0xb0 0xb2       ; next y

                    LDW                     _i
                    ADDW                    _i
                    STW                     _i                              ; i = i + i

                    LDWI                    321
                    STW                     _p                              ; p = &h0101 + horizonY + horizonY

                    WaitVBlank                                              ; wait

_repeat_0x051b      LD                      _j + 1
                    POKE                    _p                              ; poke p, j LSR 8

                    LDW                     _j
                    ANDI                    255
                    ADDW                    _i
                    STW                     _j                              ; j = i + (j AND 255)

                    LDW                     _p
                    ADDI                    4
                    STW                     _p
                    SUBW                    _q
                    BLT                     _repeat_0x051b                  ; p = p + 4 : until p &&>= q

                    LD                      0x11
                    STW                     numericLabel
                    LDI                     0
                    STW                     defaultLabel
                    LDWI                    gosubNumericLabel
                    CALL                    giga_vAC                        ; gosub peek(17)

                    LDW                     _x
                    ADDW                    _v
                    STW                     _x                              ; x = x + v

                    LDWI                    _loop
                    CALL                    giga_vAC                        ; goto loop

_254                PUSH                    
                    LDW                     _v
                    ADDI                    1
                    STW                     _v
                    SUBI                    32
                    BLE                     _else_0x057a
                    LDI                     32
                    STW                     _v                              ; v = v + 1 : if v &&> 32 then v = 32

_else_0x057a        POP                     
                    RET                                                     ; return

_253                PUSH                    
                    LDW                     _v
                    SUBI                    1
                    STW                     0xde
                    LDWI                    _page_0x0500
                    CALL                    giga_vAC
_page_0x0500        LDW                     0xde
                    STW                     _v
                    LDWI                    -32
                    SUBW                    _v
                    BLT                     _else_0x0596
                    LDWI                    -32
                    STW                     _v                              ; v = v - 1 : if v &&< -32 then v = -32

_else_0x0596        POP                     
                    RET                                                     ; return

_191                PUSH                    
                    LDI                     0
                    STW                     _v
                    POP                     
                    RET                                                     ; v = 0 : return

_127                PUSH                    
                    LDI                     0
                    STW                     _v
                    POP                     
                    RET                                                     ; v = 0 : return

_calcPitch          PUSH                    
                    LDWI                    -23
                    ADDW                    _yy
                    STW                     _pitch                          ; pitch = yy + (96 - 120 + 1)

                    LDW                     _pitch
                    ADDI                    1
                    STW                     0xc0
                    LDWI                    0xfffe
                    ANDW                    0xc0
                    STW                     _pitch                          ; pitch = (pitch + 1) AND &hfffe

                    POP                     
                    RET                                                     ; return

_end_0x05c1         BRA                     _end_0x05c1                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0xff85
convertEqOp         EQU     0xff7c
convertNeOp         EQU     0xff73
convertLeOp         EQU     0xff6a
convertGeOp         EQU     0xff61
convertLtOp         EQU     0xff58
convertGtOp         EQU     0xff4f
divide16bit         EQU     0xfe6e
shiftRight1bit      EQU     0xff22
gosubNumericLabel   EQU     0xfe05
waitVBlank          EQU     0xff16
resetVideoTable     EQU     0xfd90
initClearFuncs      EQU     0xff2c
clearVertBlinds     EQU     0xfec5
resetAudio          EQU     0xfe37
playMidi            EQU     0xfdaf
midiStartNote       EQU     0xfd4f
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4           ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_addr       EQU     register13
drawLine_tmp        EQU     register14
  
drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_addr       EQU     register15

    
waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET


numChannels         EQU     register0
audioPtr            EQU     register1
waveType            EQU     register2
midiNote            EQU     register4           ; register4 to register7 are the only free registers during time slicing, (state is invalidated each time slice)
midiCommand         EQU     register5
midiPtr             EQU     register6


resetAudio          LDI     0
                    STW     midiDelay
                    LDWI    giga_soundChan1
                    STW     audioPtr
                    LD      waveType
                    ANDI    0x03
                    ST      waveType + 1
                    LDI     0x00
                    ST      waveType            ; waveform type
                    LDI     0x04

resetA_loop         ST      numChannels
                    LDI     giga_soundChan1     ; reset low byte
                    ST      audioPtr
                    LDW     waveType
                    DOKE    audioPtr            ; wavA and wavX
                    INC     audioPtr
                    INC     audioPtr    
                    LDI     0
                    DOKE    audioPtr            ; keyL and keyH
                    INC     audioPtr
                    INC     audioPtr
                    DOKE    audioPtr            ; oscL and oscH
                    INC     audioPtr + 1        ; increment high byte
                    
                    LD      numChannels
                    SUBI    1
                    BNE     resetA_loop
                    RET



playMidi            LDW     midiStream
                    BEQ     playM_exit0         ; 0x0000 = stop
                    LDI     0x08                ; keep pumping soundTimer, so that global sound stays alive
                    ST      giga_soundTimer
                    LD      giga_frameCount
                    SUBW    midiDelay
                    BEQ     playM_start
playM_exit0         RET

playM_start         PUSH
playM_process       LDW     midiStream
                    PEEK                        ; get midi stream byte
                    STW     midiCommand
                    LDW     midiStream
                    ADDI    0x01
                    STW     midiStream
                    LDI     0xF0
                    ANDW    midiCommand
                    XORI    0x90                ; check for start note
                    BNE     playM_endnote
    
                    LDWI    midiStartNote
                    CALL    giga_vAC            ; start note
                    BRA     playM_process
                    
playM_endnote       XORI    0x10                ; check for end note
                    BNE     playM_segment
    
                    LDWI    midiEndNote         ; end note
                    CALL    giga_vAC
                    BRA     playM_process

playM_segment       XORI    0x50                ; check for new segment
                    BNE     playM_delay
    
                    LDW     midiStream          ; midi score
                    DEEK
                    STW     midiStream          ; 0xD0 new midi segment address
                    BEQ     playM_exit1         ; 0x0000 = stop
                    BRA     playM_process
    
playM_delay         LD      giga_frameCount     ; midiDelay = (midiCommand + peek(frameCount)) & 0x00FF 
                    ADDW    midiCommand
                    ST      midiDelay
playM_exit1         POP
                    RET


midiStartNote       LDWI    giga_notesTable     ; note table in ROM
                    STW     midiPtr
                    LDW     midiStream          ; midi score
                    PEEK
                    SUBI    11
                    LSLW
                    ADDW    midiPtr
                    STW     midiPtr
                    LUP     0x00                ; get ROM midi note low byte
                    ST      midiNote
                    LDW     midiPtr
                    LUP     0x01                ; get ROM midi note high byte
                    ST      midiNote + 1
                    LDW     midiCommand
                    ANDI    0x03                ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr             ; channels address 0x01FC <-> 0x04FC
                    LDW     midiNote
                    DOKE    midiPtr             ; set note
                    LDW     midiStream
                    ADDI    0x01                ; midiStream++
                    STW     midiStream
                    RET
                    
midiEndNote         LDW     midiCommand
                    ANDI    0x03                ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr             ; channels address 0x01FC <-> 0x04FC
                    LDI     0
                    DOKE    midiPtr             ; end note
                    RET

