_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0x26a0

; Includes
%includePath                  "../runtime"
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_loop                         EQU                               0x0387
_254                          EQU                               0x0412
_253                          EQU                               0x0422
_191                          EQU                               0x0438
_127                          EQU                               0x043f
_calcPitch                    EQU                               0x0446
_next_0x028d                  EQU                               0x027f
_endif_0x02cd                 EQU                               0x02ad
_else_0x030d                  EQU                               0x02d9
_endif_0x0311                 EQU                               0x02dd
_page_0x0300                  EQU                               0x0300
_next_0x0348                  EQU                               0x031c
_else_0x035d                  EQU                               0x0329
_endif_0x0365                 EQU                               0x032f
_else_0x0380                  EQU                               0x0340
_endif_0x0388                 EQU                               0x0346
_next_0x03f3                  EQU                               0x03ab
_repeat_0x0422                EQU                               0x03d0
_page_0x0400                  EQU                               0x0400
_else_0x047b                  EQU                               0x0420
_else_0x0497                  EQU                               0x0436
_end_0x04c2                   EQU                               0x045d

; Variables
_y                            EQU                               0x0030
_x                            EQU                               0x0032
_i                            EQU                               0x0034
_j                            EQU                               0x0036
_a                            EQU                               0x0038
_pitch                        EQU                               0x003a
_yy                           EQU                               0x003c
_color1                       EQU                               0x003e
_color2                       EQU                               0x0040
_horizonY                     EQU                               0x0042
_c1_array                     EQU                               0x25f8
_c1_array                     DW                                0x003f 0x002a 0x0015 0x0000 
_c2_array                     EQU                               0x25f0
_c2_array                     DW                                0x0003 0x0002 0x0001 0x0000 
_fade                         EQU                               0x0044
_cIndex                       EQU                               0x0046
_decay                        EQU                               0x0048
_p                            EQU                               0x004a
_v                            EQU                               0x004c
_q                            EQU                               0x004e

; Strings
_timeArray_                   EQU                               0x25a0
_timeArray_                   DB                                00 00 00
_timeString_                  EQU                               0x23af
_timeString_                  DB                                8 '00:00:00' 0

; Define Bytes

; Define Words

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables
_lut_numericLabs              EQU                               0x23a5
_lut_numericLabs              DW                                254 253 191 127 0x0000
_lut_numericAddrs             EQU                               0x22a0
_lut_numericAddrs             DW                                0x0412 0x0422 0x0438 0x043f 

; Code
_entryPoint_                  LDI                               0x1c
                              STW                               romType
                              RomCheck                          
                              InitEqOp                          
                              InitNeOp                          
                              InitLeOp                          
                              InitGeOp                          
                              InitLtOp                          
                              InitGtOp                          
                              InitArray2d                       
                              InitArray3d                       
                              InitRealTimeAddr                  
                              Initialise                                                        ; INIT

                              ClearVertBlinds                                                   ; cls

                              LDI                               0
                              STW                               _y
                              STW                               _x
                              STW                               _i
                              STW                               _j
                              STW                               _a
                              STW                               _pitch
                              STW                               _yy                             ; y=0 : x=y : i=x : j=i : a=j : pitch=a : yy=pitch

                              LDI                               63
                              STW                               _color1
                              LDI                               3
                              STW                               _color2
                              LDI                               32
                              STW                               _horizonY                       ; color1 = &h3F : color2 = &h03 : horizonY = 32

                              LDI                               0
                              STW                               _fade
                              STW                               _cIndex
                              LDI                               54
                              STW                               _decay                          ; fade=0 : cIndex=fade : decay = 54

                              LDI                               119
                              STW                               _y
                              LDW                               _horizonY
                              STW                               0xb0
                              LDI                               1
                              STW                               0xb2                            ; for y=119 downto horizonY

_next_0x028d                  LDWI                              0x25f8
                              ADDW                              _cIndex
                              ADDW                              _cIndex
                              DEEK                              
                              STW                               _color1
                              LDWI                              0x25f0
                              ADDW                              _cIndex
                              ADDW                              _cIndex
                              DEEK                              
                              STW                               _color2                         ; color1 = c1(cIndex) : color2 = c2(cIndex)

                              INC                               _fade                           ; inc fade

                              LDW                               _fade
                              SUBW                              _decay
                              BNE                               _endif_0x02cd                   ; if fade &&= decay

                              INC                               _cIndex                         ; inc cIndex

                              LDI                               0
                              STW                               _fade                           ; fade = 0

                              LDW                               _decay
                              STW                               mathShift
                              ShiftRight1bit                    
                              STW                               _decay                          ; decay = decay LSR 1

_endif_0x02cd                 LDW                               _y
                              STW                               _yy                             ; yy = y

                              LDWI                              _calcPitch
                              CALL                              giga_vAC                        ; gosub calcPitch

                              LDW                               _y
                              SUBW                              _horizonY
                              ADDI                              40
                              STW                               0xc0
                              LDWI                              400
                              STW                               mathX
                              LDW                               0xc0
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              ANDI                              1
                              BNE                               _else_0x030d                    ; if((400 / (y-horizonY+40)) AND 1) &&= 0

                              LDW                               _color1
                              XORW                              _color2
                              STW                               _j
                              BRA                               _endif_0x0311                   ; j = color1 XOR color2

_else_0x030d                  LDI                               0
                              STW                               _j                              ; j = 0

_endif_0x0311                 LDI                               80
                              STW                               mathX
                              LDW                               _pitch
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              LDW                               mathRem
                              STW                               _i                              ; i = 80 % pitch

                              LDW                               _y
                              ADDI                              8
                              STW                               0xe2
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xe2
                              STW                               0xc0
                              LD                                0xc0
                              ST                                giga_vAC + 1
                              ORI                               0xFF
                              XORI                              0xFF
                              STW                               _a                              ; a = ((y + 8) LSL 8)

                              LDI                               0
                              STW                               _x
                              LDW                               _pitch
                              ADDI                              159
                              STW                               0xb4
                              LDI                               1
                              STW                               0xb6                            ; for x=0 &to pitch + 159

_next_0x0348                  LDW                               _i
                              BNE                               _else_0x035d                    ; if i &&= 0

                              LDW                               _pitch
                              SUBI                              1
                              STW                               _i
                              BRA                               _endif_0x0365                   ; i = pitch - 1

_else_0x035d                  LDW                               _i
                              SUBI                              1
                              STW                               _i                              ; i = i - 1

_endif_0x0365                 LDW                               _i
                              ADDW                              _i
                              SUBW                              _pitch
                              BLT                               _else_0x0380                    ; if i+i &&>= pitch

                              LDW                               _color1
                              XORW                              _j
                              STW                               _p
                              BRA                               _endif_0x0388                   ; p = color1 XOR j

_else_0x0380                  LDW                               _color2
                              XORW                              _j
                              STW                               _p                              ; p = color2 XOR j

_endif_0x0388                 LDW                               _a
                              ADDW                              _x
                              STW                               0xc0
                              LDW                               _p
                              POKE                              0xc0                            ; poke a+x,p

                              ForNextVarAdd                     _x _next_0x0348 0xb4 0xb6       ; next x

                              LDWI                              giga_videoTop
                              STW                               register0
                              LDW                               _y
                              ADDW                              _y
                              POKE                              register0                       ; set VIDEO_TOP, y+y

                              ForNextFarVarSub                  _y _next_0x028d 0xb0 0xb2       ; next y

                              LDWI                              giga_videoTop
                              STW                               register0
                              LDI                               0
                              POKE                              register0                       ; set VIDEO_TOP, 0

                              LDI                               0
                              STW                               _x
                              LDI                               8
                              STW                               _v                              ; x=0 : v=8

_loop                         LDW                               _x
                              ANDI                              255
                              STW                               _i                              ; i = x AND 255

                              LDI                               0
                              STW                               _j                              ; j = 0

                              LDWI                              496
                              STW                               _q                              ; q = &h0100 + 240

                              LDW                               _horizonY
                              STW                               _yy                             ; yy = horizonY

                              LDWI                              _calcPitch
                              CALL                              giga_vAC                        ; gosub calcPitch

                              LDI                               0
                              STW                               _y
                              LDW                               _pitch
                              STW                               0xb0
                              LDI                               1
                              STW                               0xb2                            ; for y=0 &to pitch

_next_0x03f3                  LDW                               _j
                              ADDW                              _i
                              STW                               _j                              ; j = j + i

                              ForNextVarAdd                     _y _next_0x03f3 0xb0 0xb2       ; next y

                              LDW                               _i
                              ADDW                              _i
                              STW                               _i                              ; i = i + i

                              LDWI                              257
                              ADDW                              _horizonY
                              ADDW                              _horizonY
                              STW                               _p                              ; p = &h0101 + horizonY + horizonY

                              WaitVBlank                                                        ; wait

_repeat_0x0422                LD                                _j + 1
                              POKE                              _p                              ; poke p, j LSR 8

                              LDW                               _j
                              ANDI                              255
                              ADDW                              _i
                              STW                               _j                              ; j = i + (j AND 255)

                              LDW                               _p
                              ADDI                              4
                              STW                               _p
                              SUBW                              _q
                              BLT                               _repeat_0x0422                  ; p = p + 4 : until p &&>= q

                              LD                                giga_buttonState
                              STW                               numericLabel
                              LDI                               0
                              STW                               defaultLabel
                              STW                               0xe2
                              LDWI                              _page_0x0400
                              CALL                              giga_vAC
_page_0x0400                  LDW                               0xe2
                              GosubNumeric                                                      ; gosub get("BUTTON_STATE")

                              LDW                               _x
                              ADDW                              _v
                              STW                               _x                              ; x = x + v

                              LDWI                              _loop
                              CALL                              giga_vAC                        ; goto loop

_254                          PUSH                              
                              INC                               _v
                              LDW                               _v
                              SUBI                              32
                              BLE                               _else_0x047b
                              LDI                               32
                              STW                               _v                              ; inc v : if v &&> 32 then v = 32

_else_0x047b                  Return                                                            ; return

_253                          PUSH                              
                              LDW                               _v
                              SUBI                              1
                              STW                               _v
                              LDWI                              -32
                              SUBW                              _v
                              BLT                               _else_0x0497
                              LDWI                              -32
                              STW                               _v                              ; v = v - 1 : if v &&< -32 then v = -32

_else_0x0497                  Return                                                            ; return

_191                          PUSH                              
                              LDI                               0
                              STW                               _v
                              Return                                                            ; v = 0 : return

_127                          PUSH                              
                              LDI                               0
                              STW                               _v
                              Return                                                            ; v = 0 : return

_calcPitch                    PUSH                              
                              LDWI                              -23
                              ADDW                              _yy
                              STW                               _pitch                          ; pitch = yy + (96 - 120 + 1)

                              LDW                               _pitch
                              ADDI                              1
                              STW                               0xc0
                              LDWI                              0xfffe
                              ANDW                              0xc0
                              STW                               _pitch                          ; pitch = (pitch + 1) AND &hfffe

                              Return                                                            ; return

_end_0x04c2                   BRA                               _end_0x04c2                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                      EQU     0x25d9
convertEqOp                   EQU     0x25d0
convertNeOp                   EQU     0x25c7
convertLeOp                   EQU     0x25be
convertGeOp                   EQU     0x25b5
convertLtOp                   EQU     0x25ac
convertGtOp                   EQU     0x25a3
convertArr2d                  EQU     0x24f3
convertArr3d                  EQU     0x24e2
realTimeStub                  EQU     0x24d0
divide16bit                   EQU     0x22a8
shiftRight1bit                EQU     0x24a4
gosubNumericLabel             EQU     0x21cd
waitVBlank                    EQU     0x23b9
resetVideoTable               EQU     0x21ae
initClearFuncs                EQU     0x24ae
clearVertBlinds               EQU     0x23c5
convertEqOpAddr               EQU     0x00d0
convertNeOpAddr               EQU     0x00d2
convertLeOpAddr               EQU     0x00d4
convertGeOpAddr               EQU     0x00d6
convertLtOpAddr               EQU     0x00d8
convertGtOpAddr               EQU     0x00da
convertArr2dAddr              EQU     0x00dc
convertArr3dAddr              EQU     0x00de
realTimeStubAddr              EQU     0x00e0


; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


memIndex0           EQU     register0
memIndex1           EQU     register1
memIndex2           EQU     register2
memValue            EQU     register8
memAddr             EQU     register9


convertArr2d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    STW     memAddr
                    RET


convertArr3d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    DEEK
                    ADDW    memIndex2
                    ADDW    memIndex2
                    STW     memAddr
                    RET


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you use realTimeStub
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_addr       EQU     register15


waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
                    PUSH
                    CALL    realTimeStubAddr
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeStubAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET

