_startAddress_  EQU		0x0200
clearRegion     EQU     0x7fa0
resetVideoTable EQU     clearRegion - 0x0100
clearCursorRow  EQU     clearRegion - 0x0200
printText       EQU     clearRegion - 0x0300
printDigit      EQU     clearRegion - 0x0400
printVarInt16   EQU     clearRegion - 0x0500
printChar       EQU     clearRegion - 0x0600
printHexByte    EQU     clearRegion - 0x0700
newLineScroll   EQU     clearRegion - 0x0800
resetAudio      EQU     clearRegion - 0x0900
playMidi        EQU     clearRegion - 0x0A00
midiStartNote   EQU     clearRegion - 0x0B00

; Internal variables
register0       EQU     0x00a0
register1       EQU     register0 + 0x02
register2       EQU     register0 + 0x04
register3       EQU     register0 + 0x06
register4       EQU     register0 + 0x08
register5       EQU     register0 + 0x0A
register6       EQU     register0 + 0x0C
register7       EQU     register0 + 0x0E
register8       EQU     register0 + 0x10
register9       EQU     register0 + 0x12
textColour      EQU     register0 + 0x14
cursorXY        EQU     register0 + 0x16
midiStreamPtr   EQU     register0 + 0x18
midiDelay       EQU     register0 + 0x1A
frameCountPrev  EQU     register0 + 0x1C

; Includes
%include include/gigatron.i
%include include/audio.i
%include include/clear_screen.i
%include include/print_text.i
%include include/macros.i

; Labels
_entryPoint_    EQU		0x0200
_10             EQU		0x022e
_blamo          EQU		0x033c
_end_9          EQU		0x033a
_next13         EQU		0x0356
0x0300          EQU		0x0300

; Variables
_addr           EQU		0x0030
_a              EQU		0x0032
_b              EQU		0x0034
_c              EQU		0x0036
_f              EQU		0x0038
_d              EQU		0x003a
_z              EQU		0x003c
_g              EQU		0x003e
_h              EQU		0x0040
_i              EQU		0x0042

; Strings
usrStr_0x6fa0		EQU		0x6fa0
usrStr_0x6fa0		DB		4 'test'
usrStr_0x6fa5		EQU		0x6fa5
usrStr_0x6fa5		DB		1 ' '
usrStr_0x6fa7		EQU		0x6fa7
usrStr_0x6fa7		DB		3 'dog'
usrStr_0x6fab		EQU		0x6fab
usrStr_0x6fab		DB		1 ' '

; Code
_entryPoint_    Initialise	                        		; INIT

_10             LDI		33
                STW		_addr                       		; addr = &h21

                LDWI	0xffff
                ANDW	_addr
                STW		_addr                       		; addr = addr AND &hFFFF

                LDWI	-1
                SUBW	_addr
                STW		0xd0
                LDWI	0xf000
                PEEK	
                STW		0xd2
                LDWI	0x0fff
                ORW		0xd2
                PEEK	
                STW		0xd4
                LDW		_addr
                ANDW	0xd4
                PEEK	
                STW		0xd8
                LDW		0xd0
                SUBW	0xd8
                ANDI	252
                STW		0xd8
                LDW		_addr
                ADDI	1
                PEEK	
                STW		0xdc
                LDW		0xd8
                ORW		0xdc
                ADDI	23
                XORI	15
                STW		0xdc
                LDWI	-57
                ADDW	0xdc
                STW		0xdc
                LDWI	-1
                SUBW	_addr
                STW		0xde
                LDW		0xdc
                ADDW	0xde
                STW		_a                          		; a = NOT addr - peek(addr AND pEeK(&h0FFF OR peek(&hF000))) AND &hFC OR peek(addr+1) + 23 XOR &B00001111 - NOT 56 + NOT addr

                LDWI	_blamo
                CALL	giga_vAC                    		; gosub blamo

                PrintString	usrStr_0x6fa0
                PrintString	usrStr_0x6fa5
                PrintString	usrStr_0x6fa7
                PrintString	usrStr_0x6fa5
                PrintInt16	0x0064
                PrintString	usrStr_0x6fa5
                PrintVarInt16	_a
                PrintString	usrStr_0x6fa5
                LDWI	0x0021
                PEEK	
                ANDI	252
                PrintAcHexByte	
                LDWI	newLineScroll
                CALL	giga_vAC                    		; print "test";" ";"dog";" ";56+44;" ";a;" ";hex$(peek(&h21) AND &hFC)

                LDW		_a
                STW		0xe0
                LDWI	0x0300
                CALL	giga_vAC

0x0300          LDW		0xe0
                PrintAcHexByte	
                PrintString	usrStr_0x6fa5
                LDW		_b
                PrintAcHexWord	
                PrintString	usrStr_0x6fa5
                LDWI	13107
                PrintAcHexWord	
                LDWI	newLineScroll
                CALL	giga_vAC                    		; print hex$(a);" ";hexw$(b);" ";hexw$(&h1111 OR &h2222)

                LDWI	_10
                CALL	giga_vAC                    		; goto 10

_end_9          BRA		_end_9                      		; END

_blamo          PUSH	
                LDWI	23205
                STW		_b                          		; b = &haa55 XOR &hF0F0

                LDW		_b
                XORW	_a
                STW		_b                          		; b = b XOR a

                ForNextLoopInit	300 1 0xc0 0xc2
                LDI		0
                STW		_i                          		; for i = 0 to 300

_next13         LDWI	0x6fab
                STW		_c                          		; c = CHR$(32)

                LDWI	0x0000
                PEEK	
                STW		_f                          		; f = peek(0)

                LDWI	0xaa55
                ANDW	_c
                ANDW	_a
                STW		_d                          		; d = c AND &hAA55 AND a

                LDW		_a
                ADDI	5
                ADDW	_b
                STW		_z                          		; z = a + 5 + b

                LDI		0
                SUBW	_b
                STW		_b                          		; b = -b

                PrintVarInt16	_i
                PrintString	usrStr_0x6fa5
                LDW		_b
                PrintAcHexWord	
                LDWI	newLineScroll
                CALL	giga_vAC                    		; print i; " " ; hexw$(b)

                ForNextLoopStepUp	_i _next13 0xc0 0xc2                                                		; next i

                LDWI	-1
                SUBW	_g
                STW		0xd0
                LDW		_z
                SUBW	0xd0
                STW		_g                          		; g = z - NOT g

                LDWI	-1
                SUBW	_a
                SUBW	_d
                STW		_h                          		; h = NOT a - d

                POP		
                RET		                            		; return


