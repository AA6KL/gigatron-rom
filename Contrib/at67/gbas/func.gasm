_startAddress_      EQU                     0x0200
resetVideoTable     EQU                     0x7fa0
clearRegion         EQU                     0x7ea0
convertEqOp         EQU                     0x7fbc
convertNeOp         EQU                     0x7fc5
convertLeOp         EQU                     0x7fce
convertGeOp         EQU                     0x7fd7
convertLtOp         EQU                     0x7fe0
convertGtOp         EQU                     0x7fe9
multiply16bit       EQU                     0x7da0
divide16bit         EQU                     0x7ca0
random16bit         EQU                     0x7ff2
shiftLeft4bit       EQU                     0x7eeb
shiftLeft8bit       EQU                     0x7ef5
shiftRight1bit      EQU                     0x7dc3
shiftRight2bit      EQU                     0x7dcd
shiftRight3bit      EQU                     0x7dd7
shiftRight4bit      EQU                     0x7de1
shiftRight5bit      EQU                     0x7deb
shiftRight6bit      EQU                     0x7df5
shiftRight7bit      EQU                     0x7cf6
shiftRight8bit      EQU                     0x7ba0
clearCursorRow      EQU                     0x7baa
printText           EQU                     0x7aa0
printDigit          EQU                     0x7ab9
printInt16          EQU                     0x79a0
printChar           EQU                     0x78a0
printHexByte        EQU                     0x77a0
printHexWord        EQU                     0x7be9
newLineScroll       EQU                     0x76a0
resetAudio          EQU                     0x77ca
playMidi            EQU                     0x75a0
playMidiAsync       EQU                     0x7ad9
midiStartNote       EQU                     0x74a0

; Internal variables
register0           EQU                     0x00a0
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
textColour          EQU                     register0 + 0x14
cursorXY            EQU                     register0 + 0x16
midiStreamPtr       EQU                     register0 + 0x18
midiDelay           EQU                     register0 + 0x1A
frameCountPrev      EQU                     register0 + 0x1C

; Includes
%include            include/gigatron.i
%include            include/math.i
%include            include/conv_conds.i
%include            include/audio.i
%include            include/clear_screen.i
%include            include/print_text_CALLI.i
%include            include/macros_CALLI.i

; Labels
_entryPoint_        EQU                     0x0200
_10                 EQU                     0x022e
_blamo              EQU                     0x08b3
_end_0x0329         EQU                     0x08b1
_end_0x03b4         EQU                     0x09cc
_page_0x08a0        EQU                     0x08a0
_next_0x033d        EQU                     0x08c3
_page_0x09a0        EQU                     0x09a0

; Variables
_addr               EQU                     0x0030
_a                  EQU                     0x0032
_b                  EQU                     0x0034
_x                  EQU                     0x0036
_z                  EQU                     0x0038
_i                  EQU                     0x003a
_c                  EQU                     0x003c
_f                  EQU                     0x003e
_d                  EQU                     0x0040
_g                  EQU                     0x0042
_h                  EQU                     0x0044

; Strings
usrStr_0x7ffa       EQU                     0x7ffa
usrStr_0x7ffa       DB                      1 ' '
usrStr_0x7bf8       EQU                     0x7bf8
usrStr_0x7bf8       DB                      4 'test'
usrStr_0x7ffc       EQU                     0x7ffc
usrStr_0x7ffc       DB                      3 'dog'

; Code
_entryPoint_        Initialise                                              ; INIT

_10                 LDI                     33
                    STW                     _addr                           ; addr = &h21

                    LDWI                    0xffff
                    ANDW                    _addr
                    STW                     _addr                           ; addr = addr AND &hFFFF

                    LDWI                    -1
                    SUBW                    _addr
                    STW                     0xd0
                    LDWI                    0xf000
                    PEEK                    
                    STW                     0xd2
                    LDWI                    0x0fff
                    ORW                     0xd2
                    PEEK                    
                    STW                     0xd4
                    LDW                     _addr
                    ANDW                    0xd4
                    PEEK                    
                    STW                     0xd8
                    LDW                     0xd0
                    SUBW                    0xd8
                    ANDI                    252
                    STW                     0xd8
                    LDW                     _addr
                    ADDI                    1
                    PEEK                    
                    STW                     0xdc
                    LDW                     0xd8
                    ORW                     0xdc
                    ADDI                    23
                    XORI                    15
                    STW                     0xdc
                    LDWI                    -57
                    ADDW                    0xdc
                    STW                     0xdc
                    LDWI                    -1
                    SUBW                    _addr
                    ADDW                    0xdc
                    STW                     _a                              ; a = NOT addr - peek(addr AND pEeK(&h0FFF OR peek(&hF000))) AND &hFC OR peek(addr+1) + 23 XOR &B00001111 - NOT 56 + NOT addr

                    LDI                     131
                    STW                     _b                              ; b = 131

                    CALLI                   _blamo                          ; gosub blamo

                    LDW                     _a
                    PrintAcHexByte          
                    PrintString             usrStr_0x7ffa
                    LDW                     _b
                    PrintAcHexWord          
                    PrintString             usrStr_0x7ffa
                    LDWI                    13107
                    PrintAcHexWord          
                    CALLI                   newLineScroll                   ; print hex$(a);" ";hexw$(b);" ";hexw$(&h1111 OR &h2222)

                    PrintString             usrStr_0x7bf8
                    PrintString             usrStr_0x7ffa
                    PrintString             usrStr_0x7ffc
                    PrintString             usrStr_0x7ffa
                    PrintInt16              0x0064
                    PrintString             usrStr_0x7ffa
                    PrintVarInt16           _a
                    PrintString             usrStr_0x7ffa
                    LDWI                    0x0021
                    PEEK                    
                    ANDI                    252
                    PrintAcHexByte          
                    CALLI                   newLineScroll                   ; print "test";" ";"dog";" ";56+44;" ";a;" ";hex$(peek(&h21) AND &hFC)

                    LDI                     128
                    STW                     _x                              ; x = &h0080

                    LDW                     _x
                    STW                     mathShift
                    ShiftLeft8bit           
                    STW                     _z                              ; z = x LSL 8

                    LDW                     _x
                    CALLI                   _page_0x08a0
_page_0x08a0        PrintAcHexWord          
                    PrintString             usrStr_0x7ffa
                    LDW                     _z
                    PrintAcHexWord          
                    CALLI                   newLineScroll                   ; print hexw$(x);" ";hexw$(z)

_end_0x0329         BRA                     _end_0x0329                     ; END

_blamo              PUSH                    
                    LDWI                    23205
                    STW                     _b                              ; b = &haa55 XOR &hF0F0

                    LDW                     _b
                    XORW                    _a
                    STW                     _b                              ; b = b XOR a

                    LDI                     0
                    STW                     _i                              ; for i = 0 to 10

_next_0x033d        LDWI                    usrStr_0x7ffa
                    STW                     _c                              ; c = CHR$(32)

                    LDWI                    0x0000
                    PEEK                    
                    STW                     _f                              ; f = peek(0)

                    LDWI                    0xaa55
                    ANDW                    _c
                    ANDW                    _a
                    STW                     _d                              ; d = c AND &hAA55 AND a

                    LDW                     _a
                    ADDI                    5
                    ADDW                    _b
                    STW                     _z                              ; z = a + 5 + b

                    LDI                     0
                    SUBW                    _b
                    STW                     _b                              ; b = -b

                    PrintVarInt16           _i
                    PrintString             usrStr_0x7ffa
                    PrintInt16              0x0000
                    CALLI                   _page_0x09a0
_page_0x09a0        LDW                     _b
                    PrintAcHexWord          
                    CALLI                   newLineScroll                   ; print i; " " ; hexw$(b)

                    ForNextLoopUp           _i _next_0x033d 10              ; next i

                    LDWI                    -1
                    SUBW                    _g
                    STW                     0xd0
                    LDW                     _z
                    SUBW                    0xd0
                    STW                     _g                              ; g = z - NOT g

                    LDWI                    -1
                    SUBW                    _a
                    SUBW                    _d
                    STW                     _h                              ; h = NOT a - d

                    POP                     
                    RET                                                     ; return

_end_0x03b4         BRA                     _end_0x03b4                     ; END


