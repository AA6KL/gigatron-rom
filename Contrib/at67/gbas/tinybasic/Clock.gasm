_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0x7fa0

; Includes
%includePath                  "../runtime"
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_10                           EQU                               0x024c
_20                           EQU                               0x025a
_30                           EQU                               0x0273
_40                           EQU                               0x028d
_50                           EQU                               0x02a7
_60                           EQU                               0x02e4
_70                           EQU                               0x033b
_80                           EQU                               0x0347
_90                           EQU                               0x035a
_page_0x0300                  EQU                               0x0300
_end_0x038c                   EQU                               0x0365

; Variables
_A                            EQU                               0x0030
_H                            EQU                               0x0032
_M                            EQU                               0x0034
_S                            EQU                               0x0036
_B                            EQU                               0x0038
_T                            EQU                               0x003a
_V                            EQU                               0x003c

; Strings
_timeArray_                   EQU                               0x7ea2
_timeArray_                   DB                                00 00 00
_timeString_                  EQU                               0x7cac
_timeString_                  DB                                8 '00:00:00' 0
_str_0x7efd                   EQU                               0x7efd
_str_0x7efd                   DB                                1 '?' 0
_str_0x7ee0                   EQU                               0x7ee0
_str_0x7ee0                   DB                                1 ':' 0

; Define Bytes

; Define Words

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables
_inputVars_0x7ef1             EQU                               0x7ef1
_inputVars_0x7ef1             DW                                0x0032 0x0034 0x0036 
_inputStrs_0x7eeb             EQU                               0x7eeb
_inputStrs_0x7eeb             DW                                0x7efd 0x7efd 0x7efd 
_inputTypes_0x7ee3            EQU                               0x7ee3
_inputTypes_0x7ee3            DW                                0x5f02 0x5f02 0x5f02 0x0000 
_input_0x7ef7                 EQU                               0x7ef7
_input_0x7ef7                 DW                                0x7ef1 0x7eeb 0x7ee3 

; Code
_entryPoint_                  LDI                               0x1c
                              STW                               romType
                              RomCheck                          
                              InitEqOp                          
                              InitNeOp                          
                              InitLeOp                          
                              InitGeOp                          
                              InitLtOp                          
                              InitGtOp                          
                              InitArray2d                       
                              InitArray3d                       
                              InitRealTimeAddr                  
                              Initialise                                                        ; INIT

                              LDI                               0
                              STW                               _A                              ; A = 0

_10                           LDWI                              0x7ef7
                              Input                             
                              LD                                0x0e
                              STW                               _B                              ; input H,M,S:B=peek(14)

_20                           LDW                               _S
                              STW                               mathX
                              LDI                               60
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              STW                               _T
                              LDWI                              3599
                              STW                               _V
                              LDWI                              _50
                              CALL                              giga_vAC                        ; T=S*60:V=3599:goto 50

_30                           LDW                               _T
                              SUBW                              _V
                              CALL                              convertGeOpAddr
                              JumpFalse                         _40 0
                              LDW                               _T
                              SUBW                              _V
                              STW                               _T
                              LDW                               _M
                              ADDI                              1
                              STW                               _M                              ; if T>=V then T=T-V: M=M+1

_40                           LDW                               _M
                              SUBI                              59
                              CALL                              convertGtOpAddr
                              JumpFalse                         _50 1
                              LDW                               _M
                              SUBI                              60
                              STW                               _M
                              LDW                               _H
                              ADDI                              1
                              STW                               _H                              ; if M>59 then M=M-60:H=H+1

_50                           LDW                               _H
                              PrintAcInt16                      
                              PrintString                       _str_0x7ee0
                              LDW                               _M
                              STW                               mathX
                              LDI                               10
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              PrintAcInt16                      
                              LDW                               _M
                              STW                               mathX
                              LDI                               10
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              LDW                               mathRem
                              PrintAcInt16                                                      ; print H;":";M/10;M%10;

_60                           LDW                               _T
                              STW                               mathX
                              LDI                               60
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              STW                               _S
                              STW                               0xe2
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xe2
                              PrintString                       _str_0x7ee0
                              LDW                               _S
                              STW                               mathX
                              LDI                               10
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              PrintAcInt16                      
                              LDW                               _S
                              STW                               mathX
                              LDI                               10
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              LDW                               mathRem
                              PrintAcInt16                      
                              NewLine                                                           ; S=T/60:? ":";S/10;S%10

_70                           LDW                               _B
                              STW                               _A
                              LD                                0x0e
                              STW                               _B
                              SUBW                              _A
                              STW                               _A                              ; A=B:B=peek(14):A=B-A

_80                           LDW                               _A
                              CALL                              convertLtOpAddr
                              JumpFalse                         _90 2
                              LDWI                              256
                              ADDW                              _A
                              STW                               _A                              ; if A<0 then A=A+256

_90                           LDW                               _T
                              ADDW                              _A
                              STW                               _T
                              LDWI                              _30
                              CALL                              giga_vAC                        ; T=T+A:goto 30

_end_0x038c                   BRA                               _end_0x038c                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                      EQU     0x7ec9
convertEqOp                   EQU     0x7ec0
convertNeOp                   EQU     0x7eb7
convertLeOp                   EQU     0x7eae
convertGeOp                   EQU     0x7ea5
convertLtOp                   EQU     0x7df6
convertGtOp                   EQU     0x7ded
convertArr2d                  EQU     0x7de1
convertArr3d                  EQU     0x7dd0
realTimeStub                  EQU     0x7dbe
multiply16bit                 EQU     0x7bcd
divide16bit                   EQU     0x79a8
resetVideoTable               EQU     0x7bae
initClearFuncs                EQU     0x7cdd
clearCursorRow                EQU     0x77b6
input                         EQU     0x7cb6
inputExt1                     EQU     0x76b0
inputExt2                     EQU     0x75e1
inputCursor                   EQU     0x75bf
inputKeys                     EQU     0x74a4
inputIntVar                   EQU     0x77a2
inputStrVar                   EQU     0x75a8
inputReturn                   EQU     0x73c6
inputDelete                   EQU     0x72b9
inputPrint                    EQU     0x73a7
inputNewline                  EQU     0x72a4
printInit                     EQU     0x71e9
printText                     EQU     0x7da5
printDigit                    EQU     0x71c7
printInt16                    EQU     0x7aae
printChr                      EQU     0x7ba1
printChar                     EQU     0x70a7
newLineScroll                 EQU     0x78a4
integerStr                    EQU     0x6fc0
convertEqOpAddr               EQU     0x00d0
convertNeOpAddr               EQU     0x00d2
convertLeOpAddr               EQU     0x00d4
convertGeOpAddr               EQU     0x00d6
convertLtOpAddr               EQU     0x00d8
convertGtOpAddr               EQU     0x00da
convertArr2dAddr              EQU     0x00dc
convertArr3dAddr              EQU     0x00de
realTimeStubAddr              EQU     0x00e0


; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


memIndex0           EQU     register0
memIndex1           EQU     register1
memIndex2           EQU     register2
memValue            EQU     register8
memAddr             EQU     register9


convertArr2d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    STW     memAddr
                    RET


convertArr3d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    DEEK
                    ADDW    memIndex2
                    ADDW    memIndex2
                    STW     memAddr
                    RET


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

multiply16_exit     PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSum
                    RET


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeStubAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeStub
inpLutAddr          EQU     register0
inpKeyBak           EQU     register0
inpVarsAddr         EQU     register1
inpStrsAddr         EQU     register2
inpTypesAddr        EQU     register4
inpTextAddr         EQU     register5
inpTextOfs          EQU     register6
inpTypeData         EQU     register7
inpTextEnd          EQU     register8
printXYBak          EQU     register11
cursXYBak           EQU     register12
cursFlash           EQU     register13
cursorChr           EQU     register14
cursXYOfs           EQU     register15

cursorDelay         EQU     30

    
                    ; inputs numerics and text into vars
input               PUSH
                    LDW     inpLutAddr
                    DEEK
                    STW     inpVarsAddr         ; vars LUT address
                    LDW     inpLutAddr
                    ADDI    2
                    DEEK
                    STW     inpStrsAddr         ; strings LUT address
                    LDW     inpLutAddr
                    ADDI    4
                    DEEK
                    STW     inpTypesAddr        ; types LUT address

                    LD      giga_serialRaw
                    ST      serialRawPrev       ; initialise previous keystroke
                    LD      giga_frameCount
                    ADDI    cursorDelay
                    STW     cursFlash           ; delay for cursor flash
                    LDI     127
                    STW     cursorChr           ; cursor char
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here




                    ; input extended 1
inputExt1           LDW     inpTypesAddr
                    DEEK
                    BEQ     inputE1_exit        ; exit on LUT delimiter
                    STW     inpTypeData         ; high byte is max string length, 8th and 7th bits of low byte are newlines, last 6 bits of low byte is type
                    ANDI    0x40
                    BEQ     inputE1_print       ; check for prefix newline
                    LDWI    inputNewline
                    CALL    giga_vAC
                    
inputE1_print       LDW     inpStrsAddr
                    DEEK
                    STW     textStr
                    LDWI    printText           ; print strings LUT
                    CALL    giga_vAC
                    LD      inpTypeData
                    ANDI    0x80
                    BEQ     inputE1_skip        ; check for suffix newline
                    LDWI    inputNewline
                    CALL    giga_vAC
                    
inputE1_skip        LDWI    textWorkArea + 1
                    STW     inpTextAddr         ; text work area, treated as a string so skip length
                    LDI     0
                    STW     inpTextOfs          ; print text offset
                    LDWI    textWorkArea
                    STW     inpTextEnd          ; print text end
                    LD      inpTypeData + 1
                    ADDW    inpTextEnd
                    STW     inpTextEnd          ; text max = textWorkArea + (highByte(inpTypeData) >> 8)
                    
                    LDW     cursorXY
                    STW     cursXYBak
                    STW     printXYBak
                    LDWI    inputExt2
                    CALL    giga_vAC            ; doesn't return to here
                    
inputE1_exit        LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    POP
                    RET




                    ; input extended 2
inputExt2           LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    inputKeys
                    CALL    giga_vAC
                    BEQ     inputExt2           ; loop until return key pressed

                    INC     inpVarsAddr
                    INC     inpVarsAddr
                    INC     inpStrsAddr
                    INC     inpStrsAddr
                    INC     inpTypesAddr
                    INC     inpTypesAddr
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here



                    ; flashes cursor
inputCursor         LD      giga_frameCount
                    SUBW    cursFlash
                    BEQ     inputC_toggle
                    RET
                    
inputC_toggle       PUSH
                    LD      giga_frameCount
                    ADDI    cursorDelay
                    ST      cursFlash           ; delay for cursor flash
                    LD      cursorChr
                    ST      textChr
                    XORI    0xDF
                    ST      cursorChr           ; toggle between 127 and 32 for cursor char
                    LDW     cursXYBak
                    STW     cursorXY            ; restore cursor position after the printChr
                    LDWI    printChr
                    CALL    giga_vAC
                    POP
                    RET





                    ; saves key press into string work area buffer
inputKeys           PUSH
                    LD      giga_serialRaw
                    STW     inpKeyBak           ; save keystroke
                    LD      serialRawPrev
                    SUBW    inpKeyBak
                    BEQ     inputK_exit         ; if keystroke hasn't changed exit
                    LD      inpKeyBak
                    ST      serialRawPrev       ; save as previous keystroke
                    SUBI    127
                    BGT     inputK_exit
                    BNE     inputK_ret
                    LDWI    inputDelete         ; delete key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_ret          LD      inpKeyBak
                    SUBI    10
                    BNE     inputK_char
                    LDWI    inputReturn         ; return key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_char         LDW     inpTextEnd
                    SUBW    inpTextAddr
                    BEQ     inputK_exit         ; text string bounds, (check after delete and return keys)
                    LD      inpKeyBak
                    SUBI    32
                    BLT     inputK_exit
                    LD      inpKeyBak
                    POKE    inpTextAddr         ; set char
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; set new end of text string
                    LD      cursXYBak
                    SUBI    giga_xres - 11
                    BLT     inputK_advance      ; cursor max bounds
                    INC     inpTextOfs
                    LDI     0
                    BRA     inputK_print
                    
inputK_advance      LDI     6
                    
inputK_print        STW     cursXYOfs           ; advance cursor
                    LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET                    



inputStrVar         LDWI    textWorkArea
                    STW     register11          ; src str address
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst var address

inputS_copy         LDW     register11
                    PEEK
                    POKE    register12
                    INC     register11
                    INC     register12
                    BNE     inputS_copy         ; copy char until terminating char
                    RET




inputIntVar         PUSH
                    LDWI    textWorkArea + 1
                    STW     intSrcAddr          ; src str address, (skip length)
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst int address
                    LDWI    integerStr
                    CALL    giga_vAC
                    DOKE    register12          ; convert string to integer
                    POP
                    RET


inputReturn         LDI     32
                    STW     cursorChr
                    LDWI    inputC_toggle
                    CALL    giga_vAC            ; erase cursor
                    
                    LDWI    textWorkArea
                    STW     register0
                    LDW     inpTextAddr
                    SUBW    register0
                    SUBI    1
                    POKE    register0           ; text length
                    ADDW    register0
                    ADDI    1
                    STW     register0
                    LDI     0
                    POKE    register0           ; text delimiter
                    
                    LD      inpTypeData         ; check var tye
                    ANDI    0x3F                ; var type is bottom 6 bits
                    SUBI    3                   ; var is string or integer?
                    BNE     inputR_int
                    LDWI    inputStrVar
                    CALL    giga_vAC            ; copy string
                    BRA     inputR_exit
                    
inputR_int          LDWI    inputIntVar
                    CALL    giga_vAC            ; convert numeric

inputR_exit         LDI     1                   ; return key pressed, next var
                    POP
                    RET


inputDelete         LD      inpTextOfs
                    BEQ     inputD_bounds
                    SUBI    1
                    STW     inpTextOfs          ; decrement print text offset
                    LDI     0
                    STW     cursXYOfs           ; stationary cursor
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    1
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    BRA     inputD_print

inputD_bounds       LDW     printXYBak
                    SUBW    cursXYBak
                    BGE     inputD_exit         ; cursor min bounds
                    LDWI    -6
                    STW     cursXYOfs           ; retreat cursor
                    LDI     32                  
                    POKE    inpTextAddr         ; delete cursor
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    2
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    
inputD_print        LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputD_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET


inputPrint          LDWI    inputCursor
                    CALL    giga_vAC            ; call cursor flash frequently
                    LDWI    textWorkArea
                    ADDW    inpTextOfs
                    STW     textStr
                    LDW     printXYBak
                    STW     cursorXY            ; restore cursor position after the printText
                    LDWI    printText
                    CALL    giga_vAC
                    LDW     cursXYBak           ; new cursor position
                    ADDW    cursXYOfs
                    STW     cursXYBak
                    LDI     0                   ; keep looping on current var
                    POP
                    RET


inputNewline        PUSH
                    LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    LDWI    newLineScroll
                    CALL    giga_vAC            ; new line
                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeStub
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeStubAddr
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
                    CALL    realTimeStubAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11


                    ; converts a string to a +/- integer, assumes string pointer is pointing to first char and not the string length, (no overflow or underflow checks)
integerStr          LDI     0
                    ST      intNegative
                    STW     intResult
                    LDW     intSrcAddr
                    PEEK
                    SUBI    45                  ; -ve
                    BNE     integerS_loop
                    LDI     1
                    ST      intNegative
                    INC     intSrcAddr          ; skip -ve

integerS_loop       LDW     intSrcAddr
                    PEEK
                    SUBI    48                  ; str[i] - '0'
                    BLT     integerS_neg
                    STW     intDigit
                    SUBI    9
                    BGT     integerS_neg
                    LDW     intResult
                    LSLW
                    LSLW
                    ADDW    intResult
                    LSLW
                    ADDW    intDigit
                    STW     intResult           ; result = result*10 + digit
                    INC     intSrcAddr
                    BRA     integerS_loop
          
integerS_neg        LD      intNegative
                    BEQ     integerS_exit
                    LDI     0
                    SUBW    intResult           ; result *= -1
                    RET
                    
integerS_exit       LDW     intResult
                    RET

