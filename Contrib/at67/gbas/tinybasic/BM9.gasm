_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0x7fa0

; Includes
%includePath                  "../runtime"
%include                      util.i
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_100                          EQU                               0x021c
_101                          EQU                               0x0226
_102                          EQU                               0x0230
_103                          EQU                               0x023a
_104                          EQU                               0x0249
_105                          EQU                               0x0253
_110                          EQU                               0x0262
_120                          EQU                               0x0266
_130                          EQU                               0x026a
_140                          EQU                               0x027b
_150                          EQU                               0x028a
_160                          EQU                               0x0296
_170                          EQU                               0x02a2
_180                          EQU                               0x02ac
_190                          EQU                               0x02bd
_200                          EQU                               0x02cb
_210                          EQU                               0x02d9
_220                          EQU                               0x02e7
_230                          EQU                               0x02ec
_240                          EQU                               0x0302
_250                          EQU                               0x0311
_page_0x0300                  EQU                               0x0300
_end_0x0316                   EQU                               0x0311

; Variables
_N                            EQU                               0x0030
_K                            EQU                               0x0032
_M                            EQU                               0x0034
_L                            EQU                               0x0036

; Arrays

; Strings

; Constant Strings
_str_0x7ef1                   EQU                               0x7ef1
_str_0x7ef1                   DB                                13 'INTERFACE AGE' 0
_str_0x7ee2                   EQU                               0x7ee2
_str_0x7ee2                   DB                                13 ' PRIME-NUMBER' 0
_str_0x7ed6                   EQU                               0x7ed6
_str_0x7ed6                   DB                                10 ' BENCHMARK' 0
_str_0x7ecc                   EQU                               0x7ecc
_str_0x7ecc                   DB                                8 ' PROGRAM' 0
_str_0x7ebe                   EQU                               0x7ebe
_str_0x7ebe                   DB                                12 'For Gigatron' 0
_str_0x7eb3                   EQU                               0x7eb3
_str_0x7eb3                   DB                                9 ' gtBASIC ' 0
_str_0x7ead                   EQU                               0x7ead
_str_0x7ead                   DB                                4 'DONE' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                  Initialise                        
                              InitRealTimeStub                                                  ; INIT

                              ClearVertBlinds                                                   ; cls

_100                          PrintString                       _str_0x7ef1                     ; PRINT "INTERFACE AGE";

_101                          PrintString                       _str_0x7ee2                     ; PRINT " PRIME-NUMBER";

_102                          PrintString                       _str_0x7ed6                     ; PRINT " BENCHMARK";

_103                          PrintString                       _str_0x7ecc
                              NewLine                                                           ; PRINT " PROGRAM"

_104                          PrintString                       _str_0x7ebe                     ; PRINT "For Gigatron";

_105                          PrintString                       _str_0x7eb3
                              NewLine                                                           ; PRINT " gtBASIC "

_110                          LDI                               1
                              STW                               _N                              ; FOR N=1 TO 200

_120                          LDI                               2
                              STW                               _K                              ; FOR K=2 TO 100

_130                          LDW                               _N
                              STW                               mathX
                              LDW                               _K
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              LDW                               mathRem
                              STW                               _M                              ; M=N % K

_140                          LDW                               _N
                              STW                               mathX
                              LDW                               _K
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              STW                               _L                              ; L=N / K

_150                          LDW                               _L
                              XORI                              0
                              BNE                               _160
                              LDWI                              _200
                              CALL                              giga_vAC                        ; IF L&&=0 THEN GOTO 200

_160                          LDW                               _L
                              XORI                              1
                              BNE                               _170
                              LDWI                              _190
                              CALL                              giga_vAC                        ; IF L&&=1 THEN GOTO 190

_170                          LDW                               _M
                              BLE                               _180
                              LDWI                              _190
                              CALL                              giga_vAC                        ; IF M&&>0 THEN GOTO 190

_180                          LDW                               _M
                              XORI                              0
                              JumpEQ                            _190 3
                              LDWI                              _210
                              CALL                              giga_vAC                        ; IF M&=0 THEN GOTO 210

_190                          ForNextFarInc                     _K _130 100                     ; NEXT K

_200                          LDW                               _N
                              PrintAcInt16                      
                              NewLine                                                           ; PRINT N

_210                          ForNextFarInc                     _N _120 200                     ; NEXT N

_220                          NewLine                                                           ; PRINT

_230                          NewLine                                                           ; PRINT

                              STW                               0xde
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xde
_240                          PrintString                       _str_0x7ead
                              NewLine                                                           ; PRINT "DONE"

_250                          BRA                               _250                            ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeStub                  EQU     0x76ed
divide16bit                   EQU     0x7ba8
resetVideoFlags               EQU     0x7ea1
resetVideoTable               EQU     0x78a1
initClearFuncs                EQU     0x77ad
clearVertBlinds               EQU     0x78c5
clearCursorRow                EQU     0x79b6
printInit                     EQU     0x79a0
printText                     EQU     0x77c4
printDigit                    EQU     0x77dd
printInt16                    EQU     0x7aae
printChar                     EQU     0x7ca7
newLineScroll                 EQU     0x7da4
convertEqOpAddr               EQU     0x00d0
convertNeOpAddr               EQU     0x00d2
convertLeOpAddr               EQU     0x00d4
convertGeOpAddr               EQU     0x00d6
convertLtOpAddr               EQU     0x00d8
convertGtOpAddr               EQU     0x00da
convert8Arr2dAddr             EQU     0x00e0
convert8Arr3dAddr             EQU     0x00e2
convert16Arr2dAddr            EQU     0x00e4
convert16Arr3dAddr            EQU     0x00e6
realTimeStubAddr              EQU     0x00dc


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
    

resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET




                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeStubAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    
                    LDWI    resetVideoFlags
                    CALL    giga_vAC                    
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeStubAddr
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
                    CALL    realTimeStubAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

