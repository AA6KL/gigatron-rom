_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x0084
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     0x0024
register11          EQU                     0x0026
register12          EQU                     0x0028
register13          EQU                     0x002A
fgbgColour          EQU                     register0 + 0x14
cursorXY            EQU                     register0 + 0x16
midiStream          EQU                     register0 + 0x18
midiDelay           EQU                     register0 + 0x1A
frameCountPrev      EQU                     register0 + 0x1C
miscFlags           EQU                     register0 + 0x1E

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_10                 EQU                     0x025e
_20                 EQU                     0x0262
_30                 EQU                     0x0267
_40                 EQU                     0x0277
_50                 EQU                     0x028e
_60                 EQU                     0x029c
_70                 EQU                     0x02a0
_80                 EQU                     0x02a5
_90                 EQU                     0x02b5
_100                EQU                     0x02ca
_110                EQU                     0x02da
_120                EQU                     0x02de
_130                EQU                     0x02e3
_140                EQU                     0x08a6
_150                EQU                     0x08bd
_160                EQU                     0x08cb
_170                EQU                     0x08cf
_180                EQU                     0x08d4
_190                EQU                     0x08e4
_200                EQU                     0x09a9
_math               EQU                     0x09be
_end_0x03bf         EQU                     0x09dc
_page_0x08a0        EQU                     0x08a0
_page_0x09a0        EQU                     0x09a0

; Variables
_x                  EQU                     0x0030
_y                  EQU                     0x0032
_i                  EQU                     0x0034
_p                  EQU                     0x0036
_sh                 EQU                     0x0038

; Strings

; Define Bytes
def_bytes_0x4fa0    EQU                     0x4fa0
def_bytes_0x4fa0    DB                      144 81 145 69 6 145 79 144 67 5 144 81 145 69 86 128 129 12 145 79 144 67 5 144 77 145 65 6 145 76 144 64 6 144 74 145 62 5 145 73 144 61 11 144 74 145 62 23 128 129 120 145 69 144 57 6 144 67 145 55 5 145 69 144 57 86 128 129 12 144 64 145 52 11 145 65 144 53 11 144 61 145 49 11 145 62 144 50 23 128 129 130 131 208 0 0 

; Lookup Tables

; Code
_entryPoint_        Initialise              
                    InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                                                ; INIT

                    LDWI                    20384
                    PlayMidi                                                ; play midi &h4fa0

                    LDI                     0
                    STW                     _x
                    LDI                     0
                    STW                     _y
                    LDI                     2
                    STW                     graphicsMode
                    ScanlineMode                                            ; x=0 : y=0 : mode 2

_10                 LDI                     0
                    STW                     _i                              ; for i=0 to 19

_20                 LDWI                    _math
                    CALL                    giga_vAC                        ; gosub math

_30                 LDI                     0x99
                    PEEK                    
                    ADDI                    7
                    STW                     _p
                    LDWI                    153
                    STW                     register0
                    LD                      _p
                    POKE                    register0                       ; p=peek(153)+7 : poke 153,p

_40                 LDW                     _x
                    STW                     drawLine_x1
                    LDI                     119
                    STW                     drawLine_y1
                    LDI                     159
                    STW                     drawLine_x2
                    LDI                     119
                    SUBW                    _y
                    STW                     drawLine_y2
                    DrawLine                                                ; line x,119, 159,119-y

_50                 ForNextLoopUp           _i _20 19                       ; next i

_60                 LDI                     19
                    STW                     _i                              ; for i=19 to 0

_70                 LDWI                    _math
                    CALL                    giga_vAC                        ; gosub math

_80                 LDI                     0x99
                    PEEK                    
                    ADDI                    7
                    STW                     _p
                    LDWI                    153
                    STW                     register0
                    LD                      _p
                    POKE                    register0                       ; p=peek(153)+7 : poke 153,p

_90                 LDI                     159
                    STW                     drawLine_x1
                    LDW                     _y
                    STW                     drawLine_y1
                    LDW                     _x
                    STW                     drawLine_x2
                    LDI                     0
                    STW                     drawLine_y2
                    DrawLine                                                ; line 159,y, x,0

_100                ForNextLoopDown         _i _70 0                        ; next i

_110                LDI                     0
                    STW                     _i                              ; for i=0 to 19

_120                LDWI                    _math
                    CALL                    giga_vAC                        ; gosub math

_130                LDI                     0x99
                    PEEK                    
                    ADDI                    7
                    STW                     _p
                    LDWI                    153
                    STW                     register0
                    STW                     0x82
                    LDWI                    _page_0x08a0
                    CALL                    giga_vAC
_page_0x08a0        LDW                     0x82
                    LD                      _p
                    POKE                    register0                       ; p=peek(153)+7 : poke 153,p

_140                LDI                     0
                    STW                     drawLine_x1
                    LDW                     _y
                    STW                     drawLine_y1
                    LDI                     159
                    SUBW                    _x
                    STW                     drawLine_x2
                    LDI                     0
                    STW                     drawLine_y2
                    DrawLine                                                ; line 0,y, 159-x,0

_150                ForNextLoopUp           _i _120 19                      ; next i

_160                LDI                     19
                    STW                     _i                              ; for i=19 to 0

_170                LDWI                    _math
                    CALL                    giga_vAC                        ; gosub math

_180                LDI                     0x99
                    PEEK                    
                    ADDI                    7
                    STW                     _p
                    LDWI                    153
                    STW                     register0
                    LD                      _p
                    POKE                    register0                       ; p=peek(153)+7 : poke 153,p

_190                LDI                     159
                    SUBW                    _x
                    STW                     drawLine_x1
                    LDI                     119
                    STW                     drawLine_y1
                    LDI                     0
                    STW                     drawLine_x2
                    LDI                     119
                    SUBW                    _y
                    STW                     0x82
                    LDWI                    _page_0x09a0
                    CALL                    giga_vAC
_page_0x09a0        LDW                     0x82
                    STW                     drawLine_y2
                    DrawLine                                                ; line 159-x,119, 0,119-y

_200                ForNextLoopDown         _i _170 0                       ; next i

                    LDWI                    _10
                    CALL                    giga_vAC                        ; goto 10

_math               PUSH                    
                    LDW                     _i
                    LSLW                    
                    STW                     _sh                             ; sh = (i<<1)

                    LDW                     _sh
                    ADDW                    _sh
                    ADDW                    _sh
                    ADDW                    _sh
                    ADDI                    4
                    STW                     _x                              ; x = sh + sh + sh + sh + 4

                    LDW                     _sh
                    ADDW                    _sh
                    ADDW                    _sh
                    ADDI                    3
                    STW                     _y                              ; y = sh + sh + sh + 3

                    POP                     
                    RET                                                     ; return

_end_0x03bf         BRA                     _end_0x03bf                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY HERE, modifications must be made in the original include files                                       *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0x7fc3
convertEqOp         EQU     0x7fcc
convertNeOp         EQU     0x7fd5
convertLeOp         EQU     0x7fde
convertGeOp         EQU     0x7fe7
convertLtOp         EQU     0x7ff0
convertGtOp         EQU     0x7ea0
scanlineMode        EQU     0x7edb
resetVideoTable     EQU     0x7ba0
initClearFuncs      EQU     0x7fa0
drawLine            EQU     0x7ca0
drawLineExt         EQU     0x7aa0
drawLineDelta1      EQU     0x79a0
resetAudio          EQU     0x7ea9
playMidi            EQU     0x7da0
midiStartNote       EQU     0x7bbc
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register4
lutLabel            EQU     register5


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
    
    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     0xE6                ; 270 - max(14,80/2)
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register4
top                 EQU     register5
bot                 EQU     register6
vramAddr            EQU     register7
evenAddr            EQU     register8
    
    
                    ; resets video table pointers
resetVideoTable     LDWI    0x0008
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
    
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres+8
                    BLT     resetVT_loop
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET



drawLine            PUSH
                    LDI     1
                    STW     drawLine_dx1
                    STW     drawLine_dx2
                    STW     drawLine_dy1
                    LDI     0
                    STW     drawLine_dy2                
    
                    LDWI    0x8000
                    STW     drawLine_tmp
                    
                    LDW     drawLine_x2         ; sx = x2 - x1
                    SUBW    drawLine_x1
                    STW     drawLine_sx
                    ANDW    drawLine_tmp        
                    BEQ     drawL_dy
                    LDWI    -1
                    STW     drawLine_dx1        
                    STW     drawLine_dx2        ; dx1 = dx2 = (sx & 0x8000) ? -1 : 1
                    LDI     0                   ; sx = (sx & 0x8000) ? 0 - sx : sx
                    SUBW    drawLine_sx
                    STW     drawLine_sx                
                    
drawL_dy            LDW     drawLine_y2
                    SUBW    drawLine_y1
                    STW     drawLine_sy
                    STW     drawLine_h          ; h = sy
                    ANDW    drawLine_tmp
                    BEQ     drawL_ext
                    
                    LDWI    -1
                    STW     drawLine_dy1        ; dy1 = (sy & 0x8000) ? -1 : 1
                    LDI     0                   
                    SUBW    drawLine_sy
                    STW     drawLine_sy         ; sy = (sy & 0x8000) ? 0 - sy : sy
                    SUBW    drawLine_sx
                    BLE     drawL_ext           
                    LDW     drawLine_dy1
                    STW     drawLine_dy2        ; if(sx < sy) dy2 = -1
    
drawL_ext           LDWI    drawLineLoadXY
                    CALL    giga_vAC
                    LDWI    drawLineExt
                    CALL    giga_vAC



drawLineExt         LDW     drawLine_sy
                    SUBW    drawLine_sx
                    BLE     drawL_num
                    LDI     0
                    STW     drawLine_dx2        ; if(sx < sy) dx2 = 0
                    LDW     drawLine_sy       
                    STW     drawLine_tmp
                    LDW     drawLine_sx
                    STW     drawLine_sy
                    LDW     drawLine_tmp
                    STW     drawLine_sx         ; swap sx with sy
                    LDW     drawLine_h
                    BLE     drawL_num
                    LDI     1
                    STW     drawLine_dy2        ; if(h > 0) dy2 = 1
    
drawL_num           LDWI    SYS_LSRW1_48
                    STW     giga_sysFn          
                    LDW     drawLine_sx
                    SYS     0xF6                ; 0xF6 = 270-max(14,48/2)
                    STW     drawLine_num        ; numerator = sx>>1
                    STW     drawLine_count
                    INC     drawLine_count      ; for(count=sx>>1; counti>=0; --i)
                    
                    LDWI    drawLineLoadDXY
                    CALL    giga_vAC     
                    
drawL_loop          LD      fgbgColour + 1
                    POKE    drawLine_xy1        ; plot start pixel
                    POKE    drawLine_xy2        ; plot end pixel, (meet in middle)
                    
                    LDW     drawLine_num        ; numerator += sy
                    ADDW    drawLine_sy
                    STW     drawLine_num
                    SUBW    drawLine_sx
                    BLE     drawL_flip          ; if(numerator <= sx) goto flip
                    
                    STW     drawLine_num        ; numerator -= sx
                    LDWI    drawLineDelta1      ; x1 += dx1, y1 += dx1, x2 -= dx1, y2 -= dx1
                    CALL    giga_vAC
                    BRA     drawL_count
                    
drawL_flip          LDWI    drawLineDelta2      ; x1 += dx2, y1 += dx2, x2 -= dx2, y2 -= dx2
                    CALL    giga_vAC
                    
drawL_count         LDW     drawLine_count
                    SUBI    0x01
                    STW     drawLine_count
                    BGT     drawL_loop
                    POP
                    RET


drawLineDelta1      LDW     drawLine_xy1
                    ADDW    drawLine_dxy1
                    STW     drawLine_xy1        ; xy1 += dxy1
                    
                    LDW     drawLine_xy2
                    SUBW    drawLine_dxy1
                    STW     drawLine_xy2        ; xy2 -= dxy1
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    RET
                    
drawLineDelta2      LDW     drawLine_xy1        
                    ADDW    drawLine_dxy2
                    STW     drawLine_xy1        ; xy1 += dxy2
                    
                    LDW     drawLine_xy2        
                    SUBW    drawLine_dxy2
                    STW     drawLine_xy2        ; xy2 -= dxy2
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    RET
                    
drawLineLoadXY      LD      drawLine_x1
                    ST      drawLine_xy1
                    LD      drawLine_y1
                    ADDI    8
                    ST      drawLine_xy1 + 1    ; xy1 = x1 | ((y1+8)<<8)
                    
                    LD      drawLine_x2
                    ST      drawLine_xy2
                    LD      drawLine_y2
                    ADDI    8
                    ST      drawLine_xy2 + 1    ; xy2 = x2 | ((y2+8)<<8)
                    RET
                    
drawLineLoadDXY     LDWI    SYS_LSLW8_24
                    STW     giga_sysFn          
                    LDW     drawLine_dy1
                    SYS     0x00                ; LSL 8, 0x00 = 270-max(14,24/2)
                    ADDW    drawLine_dx1
                    STW     drawLine_dxy1       ; dxy1 = dx1 + (dy1<<8)
    
                    LDW     drawLine_dy2
                    SYS     0x00                ; LSL 8, 0x00 = 270-max(14,24/2)
                    ADDW    drawLine_dx2
                    STW     drawLine_dxy2       ; dxy2 = dx2 + (dy2<<8)
                    RET


numChannels         EQU     register0
audioPtr            EQU     register1           
midiNote            EQU     register4           ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6


resetAudio          LDWI    0x0000
                    STW     midiDelay
                    LDWI    giga_soundChan1
                    STW     audioPtr
                    LDI     0x04
                    ST      numChannels
                    
resetA_loop         LDI     giga_soundChan1     ; reset low byte
                    ST      audioPtr
                    LDWI    0x0200              ; waveform type
                    DOKE    audioPtr            ; wavA and wavX
                    INC     audioPtr
                    INC     audioPtr    
                    LDWI    0x0000
                    DOKE    audioPtr            ; keyL and keyH
                    INC     audioPtr
                    INC     audioPtr
                    DOKE    audioPtr            ; oscL and oscH
                    INC     audioPtr + 1        ; increment high byte
                    LoopCounter numChannels resetA_loop
                    RET



playMidi            LDW     midiStream
                    BEQ     playM_exit0         ; 0x0000 = stop
                    LDI     0x05                ; keep pumping soundTimer, so that global sound stays alive
                    ST      giga_soundTimer
                    LD      giga_frameCount
                    SUBW    midiDelay
                    BEQ     playM_start
playM_exit0         RET

playM_start         PUSH
playM_process       LDW     midiStream
                    PEEK                        ; get midi stream byte
                    STW     midiCommand
                    LDW     midiStream
                    ADDI    0x01
                    STW     midiStream
                    LDI     0xF0
                    ANDW    midiCommand
                    XORI    0x90                ; check for start note
                    BNE     playM_endnote
    
                    LDWI    midiStartNote
                    CALL    giga_vAC            ; start note
                    BRA     playM_process
                    
playM_endnote       XORI    0x10                ; check for end note
                    BNE     playM_segment
    
                    LDWI    midiEndNote         ; end note
                    CALL    giga_vAC
                    BRA     playM_process

playM_segment       XORI    0x50                ; check for new segment
                    BNE     playM_delay
    
                    LDW     midiStream          ; midi score
                    DEEK
                    STW     midiStream          ; 0xD0 new midi segment address
                    BEQ     playM_exit1         ; 0x0000 = stop
                    BRA     playM_process
    
playM_delay         LD      giga_frameCount     ; midiDelay = (midiCommand + peek(frameCount)) & 0x00FF 
                    ADDW    midiCommand
                    ST      midiDelay
playM_exit1         POP
                    RET


midiStartNote       LDWI    giga_notesTable     ; note table in ROM
                    STW     midiPtr
                    LDW     midiStream          ; midi score
                    PEEK
                    SUBI    11
                    LSLW
                    ADDW    midiPtr
                    STW     midiPtr
                    LUP     0x00                ; get ROM midi note low byte
                    ST      midiNote
                    LDW     midiPtr
                    LUP     0x01                ; get ROM midi note high byte
                    ST      midiNote + 1
                    LDW     midiCommand
                    ANDI    0x03                ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr             ; channels address 0x01FC <-> 0x04FC
                    LDW     midiNote
                    DOKE    midiPtr             ; set note
                    LDW     midiStream
                    ADDI    0x01                ; midiStream++
                    STW     midiStream
                    RET
                    
midiEndNote         LDW     midiCommand
                    ANDI    0x03                ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr             ; channels address 0x01FC <-> 0x04FC
                    LDWI    0x0000
                    DOKE    midiPtr             ; end note
                    RET

