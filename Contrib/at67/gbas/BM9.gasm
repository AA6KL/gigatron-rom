_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x0084
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     0x0024
register11          EQU                     0x0026
register12          EQU                     0x0028
register13          EQU                     0x002A
fgbgColour          EQU                     register0 + 0x14
cursorXY            EQU                     register0 + 0x16
midiStreamPtr       EQU                     register0 + 0x18
midiDelay           EQU                     register0 + 0x1A
frameCountPrev      EQU                     register0 + 0x1C
miscFlags           EQU                     register0 + 0x1E

; Includes
%include            include/gigatron.i
%include            include/macros_CALLI.i

; Labels
_entryPoint_        EQU                     0x0200
_100                EQU                     0x020f
_101                EQU                     0x0215
_102                EQU                     0x021b
_103                EQU                     0x0221
_104                EQU                     0x022a
_105                EQU                     0x0230
_110                EQU                     0x0239
_120                EQU                     0x023d
_130                EQU                     0x0241
_140                EQU                     0x0250
_150                EQU                     0x025d
_160                EQU                     0x026b
_170                EQU                     0x027b
_180                EQU                     0x0289
_190                EQU                     0x0297
_200                EQU                     0x02a3
_210                EQU                     0x02ab
_220                EQU                     0x02b7
_230                EQU                     0x02ba
_240                EQU                     0x02bd
_250                EQU                     0x02c6
_end_0x02e0         EQU                     0x02c6

; Variables
_N                  EQU                     0x0030
_K                  EQU                     0x0032
_M                  EQU                     0x0034
_L                  EQU                     0x0036

; Strings
str_0x7fa0          EQU                     0x7fa0
str_0x7fa0          DB                      13 'INTERFACE AGE'
str_0x7fae          EQU                     0x7fae
str_0x7fae          DB                      13 ' PRIME-NUMBER'
str_0x7fbc          EQU                     0x7fbc
str_0x7fbc          DB                      10 ' BENCHMARK'
str_0x7fc7          EQU                     0x7fc7
str_0x7fc7          DB                      8 ' PROGRAM'
str_0x7fd0          EQU                     0x7fd0
str_0x7fd0          DB                      12 'For Gigatron'
str_0x7fdd          EQU                     0x7fdd
str_0x7fdd          DB                      9 ' gtBASIC '
str_0x7fe7          EQU                     0x7fe7
str_0x7fe7          DB                      4 'DONE'

; Lookup Tables

; Code
_entryPoint_        Initialise                                              ; INIT

_100                PrintString             str_0x7fa0                      ; PRINT "INTERFACE AGE";

_101                PrintString             str_0x7fae                      ; PRINT " PRIME-NUMBER";

_102                PrintString             str_0x7fbc                      ; PRINT " BENCHMARK";

_103                PrintString             str_0x7fc7
                    CALLI                   newLineScroll                   ; PRINT " PROGRAM"

_104                PrintString             str_0x7fd0                      ; PRINT "For Gigatron";

_105                PrintString             str_0x7fdd
                    CALLI                   newLineScroll                   ; PRINT " gtBASIC "

_110                LDI                     1
                    STW                     _N                              ; FOR N=1 TO 200

_120                LDI                     2
                    STW                     _K                              ; FOR K=2 TO 100

_130                LDW                     _N
                    STW                     mathX
                    LDW                     _K
                    STW                     mathY
                    CALLI                   divide16bit
                    LDW                     mathRem
                    STW                     _M                              ; M=N % K

_140                LDW                     _N
                    STW                     mathX
                    LDW                     _K
                    STW                     mathY
                    CALLI                   divide16bit
                    STW                     _L                              ; L=N / K

_150                LDW                     _L
                    CALLI                   convertEqOp
                    PageJumpBEQ             _160
                    CALLI                   _200                            ; IF L=0 THEN GOTO 200

_160                LDW                     _L
                    SUBI                    1
                    CALLI                   convertEqOp
                    PageJumpBEQ             _170
                    CALLI                   _190                            ; IF L=1 THEN GOTO 190

_170                LDW                     _M
                    CALLI                   convertGtOp
                    PageJumpBEQ             _180
                    CALLI                   _190                            ; IF M>0 THEN GOTO 190

_180                LDW                     _M
                    CALLI                   convertEqOp
                    PageJumpBEQ             _190
                    CALLI                   _210                            ; IF M=0 THEN GOTO 210

_190                ForNextLoopUp           _K _130 100                     ; NEXT K

_200                PrintVarInt16           _N
                    CALLI                   newLineScroll                   ; PRINT N

_210                ForNextLoopUp           _N _120 200                     ; NEXT N

_220                CALLI                   newLineScroll                   ; PRINT

_230                CALLI                   newLineScroll                   ; PRINT

_240                PrintString             str_0x7fe7
                    CALLI                   newLineScroll                   ; PRINT "DONE"

_end_0x02e0         BRA                     _end_0x02e0                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY HERE, modifications must be made in the original include files                                       *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

convertEqOp         EQU     0x7fec
convertNeOp         EQU     0x7eda
convertLeOp         EQU     0x7ee3
convertGeOp         EQU     0x7eec
convertLtOp         EQU     0x7ef5
convertGtOp         EQU     0x7ff5
divide16bit         EQU     0x7ca0
resetVideoTable     EQU     0x7bd9
initClearFuncs      EQU     0x7ea0
clearCursorRow      EQU     0x7aa0
printInit           EQU     0x7ae2
printText           EQU     0x7ec1
printDigit          EQU     0x79a0
printInt16          EQU     0x7ba0
printChar           EQU     0x78a0
newLineScroll       EQU     0x7da0


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


mathX               EQU     register0
mathY               EQU     register1
mathSum             EQU     register2
mathMask            EQU     register3
mathRem             EQU     register4
mathSign            EQU     register5
mathScratch         EQU     register6
mathShift           EQU     register7
    
    
                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_skip0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_skip0      LDW     mathY                     
                    BGE     divide16_skip1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_skip1      LDI     0
                    STW     mathRem
    
divide16_loop       STW     mathScratch
                    LDW     mathRem
                    ADDW    mathRem
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_skip3
                    INC     mathRem
                    
divide16_skip3      LDW     mathX
                    ADDW    mathX
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_skip4
                    STW     mathRem
                    INC     mathX
                    
divide16_skip4      LDW     mathScratch
                    ADDI    1
                    ANDI    0x0F
                    BNE     divide16_loop
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register4
top                 EQU     register5
bot                 EQU     register6
vramAddr            EQU     register7
evenAddr            EQU     register8
    
    
                    ; resets video table pointers
resetVideoTable     LDWI    0x0008
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
    
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres+8
                    BLT     resetVT_loop
                    RET


initClearFuncs      PUSH
                    CALLI   resetVideoTable
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET



textStr             EQU     register0
textNum             EQU     register0
textScratch         EQU     register0
textLen             EQU     register1
textFont            EQU     register2
textChr             EQU     register3
textHex             EQU     register4
textSlice           EQU     register5
scanLine            EQU     register6
digitMult           EQU     register7
digitIndex          EQU     register8
clearLoop           EQU     register9
    
    
                    ; prints text string pointed to by the accumulator
printText           PUSH
                    STW     textStr             
                    PEEK
                    ST      textLen                         ; first byte is length
        
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    CALLI   printChar
                    LoopCounter textLen printT_char
                    POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    STW     digitMult
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
            
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    CALLI   printChar
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in the accumulator
printInt16          PUSH
                    STW     textNum
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    CALLI   printChar
                    LDWI    0
                    SUBW    textNum
printI16_pos        STW     textNum    
            
                    LDWI    10000
                    CALLI   printDigit
                    LDWI    1000
                    CALLI   printDigit
                    LDWI    100
                    CALLI   printDigit
                    LDWI    10
                    CALLI   printDigit
                    LD      textNum
                    ORI     0x30
                    CALLI   printChar
                    POP
                    RET



printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LDWI    0x0800
                    ADDW    cursorXY
                    STW     giga_sysArg4                    ; xy position
                    RET


                    ; prints char in the accumulator
printChar           PUSH
                    ST      textChr                         ; (char-32)*5 + 0x0700
                    SUBI    32
                    STW     textChr
                    STW     textFont
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    STW     textFont             
                    LDWI    giga_text32
                    ADDW    textFont
                    STW     textFont                        ; text font slice base address for chars 32-81
            
                    LDW     textChr
                    SUBI    50
                    BLT     printC_draw
                    LDW     textFont
                    ADDI    0x06
                    STW     textFont                        ; text font slice base address for chars 82+
            
printC_draw         CALLI   printInit
                    LDI     0x05
                    ST      textSlice
            
printC_slice        LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2        
                    SYS     0xCB                            ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LoopCounter textSlice printC_slice
                    ST      giga_sysArg2                    ; result of loopCounter is always 0
                    SYS     0xCB                            ; draw last blank slice

                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_exit
                    CALLI   newLineScroll ; next row, scroll at bottom
printC_exit         POP
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
                    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDI     8
                    ST      clearLoop
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
    
clearCR_loopy       LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    BGT     clearCR_loopx
    
                    INC     giga_sysArg4 + 1                ; next line                
                    LoopCounter clearLoop clearCR_loopy
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY+1
                    ADDI    8
                    ST      cursorXY+1
                    SUBI    giga_yres
                    BLT     newLS_exit
                            
newLS_cont1         CALLI   clearCursorRow
                            
                    LDWI    giga_videoTable
                    STW     scanLine
            
                    ; scroll all scan lines by 8 through 0x08 to 0x7F
newLS_scroll        LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scan line pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
                    ; read scan line pointer for last char row, use this as cursor position
                    LDWI    giga_videoTable + 0x00E0
                    PEEK
                    SUBI    0x08                            ; corrected in printChar
                    ST      cursorXY+1
newLS_exit          POP
                    RET

