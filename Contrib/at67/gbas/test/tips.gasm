_startAddress_                EQU                               0x0200

; Internal Variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal Buffers
textWorkArea                  EQU                               0x7fa0

; Includes
%includePath                  "../runtime"
%include                      util.i
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_loop                         EQU                               0x0ff5
_49                           EQU                               0x10d2
_50                           EQU                               0x10e4
_51                           EQU                               0x10f6
_asmTest                      EQU                               0x11b3
_next_0x0224                  EQU                               0x022e
_next_0x028b                  EQU                               0x0295
_page_0x0300                  EQU                               0x0300
_page_0x0400                  EQU                               0x0400
_next_0x042e                  EQU                               0x0426
_next_0x0444                  EQU                               0x043c
_next_0x0453                  EQU                               0x044b
_page_0x0500                  EQU                               0x0500
_next_0x05cd                  EQU                               0x05ab
_next_0x05d1                  EQU                               0x05af
_next_0x05d5                  EQU                               0x05b3
_page_0x0600                  EQU                               0x0600
_next_0x0644                  EQU                               0x0622
_next_0x0648                  EQU                               0x0626
_next_0x064c                  EQU                               0x062a
_page_0x08a0                  EQU                               0x08a0
_page_0x09a0                  EQU                               0x09a0
_page_0x0aa0                  EQU                               0x0aa0
_page_0x0ba0                  EQU                               0x0ba0
_page_0x0ca0                  EQU                               0x0ca0
_page_0x0da0                  EQU                               0x0da0
_page_0x0ea0                  EQU                               0x0ea0
_page_0x0fa0                  EQU                               0x0fa0
_page_0x10a0                  EQU                               0x10a0
_endif_0x0a6c                 EQU                               0x10c9
_page_0x11a0                  EQU                               0x11a0
_doStuff                      EQU                               0x11ba
_page_0x12a0                  EQU                               0x12a0
_page_0x13a0                  EQU                               0x13a0
_page_0x14a0                  EQU                               0x14a0
_page_0x15a0                  EQU                               0x15a0
_end_0x0c0b                   EQU                               0x15ae

; Global Variables
_i                            EQU                               0x0030
_a                            EQU                               0x0032
_j                            EQU                               0x0034
_k                            EQU                               0x0036
_index0                       EQU                               0x0038
_index1                       EQU                               0x003a
_index2                       EQU                               0x003c
_aaa                          EQU                               0x003e
_x                            EQU                               0x0040
_y                            EQU                               0x0042
_z                            EQU                               0x0044
_blah                         EQU                               0x0046
_kk                           EQU                               0x0048

; Local Variables
_doStuff_a                    EQU                               0x00d8
_doStuff_b                    EQU                               0x00da
_doStuff_c                    EQU                               0x00dc
_doStuff_d                    EQU                               0x00de
_doStuff_e                    EQU                               0x00e0
_doStuff_f                    EQU                               0x00e2
_doStuff_g                    EQU                               0x00e4
_doStuff_h                    EQU                               0x00e6

; Arrays
_test1d_array                 EQU                               0x7dde
_test1d_array                 DB                                0x01 0x02 0x03 0x55 0x17 0x17 
_test2d_array                 EQU                               0x7dd6
_test2d_array                 DW                                0x7ddc 0x7dda 
_test2d_0x7ddc                EQU                               0x7ddc
_test2d_0x7ddc                DB                                0x00 0x01 
_test2d_0x7dda                EQU                               0x7dda
_test2d_0x7dda                DB                                0x01 0x01 
_test3d_array                 EQU                               0x71ea
_test3d_array                 DW                                0x7da3 0x71fa 0x71f4 
_test3d_lut_0                 EQU                               0x7da3
_test3d_lut_0                 DW                                0x7dd1 0x7dcc 0x7dc7 
_test3d_lut_1                 EQU                               0x71fa
_test3d_lut_1                 DW                                0x7dc2 0x7dbd 0x7db8 
_test3d_lut_2                 EQU                               0x71f4
_test3d_lut_2                 DW                                0x7db3 0x7dae 0x7da9 
_test3d_0x7dd1                EQU                               0x7dd1
_test3d_0x7dd1                DB                                0x01 0x02 0x03 0x04 0x00 
_test3d_0x7dcc                EQU                               0x7dcc
_test3d_0x7dcc                DB                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x7dc7                EQU                               0x7dc7
_test3d_0x7dc7                DB                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x7dc2                EQU                               0x7dc2
_test3d_0x7dc2                DB                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x7dbd                EQU                               0x7dbd
_test3d_0x7dbd                DB                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x7db8                EQU                               0x7db8
_test3d_0x7db8                DB                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x7db3                EQU                               0x7db3
_test3d_0x7db3                DB                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x7dae                EQU                               0x7dae
_test3d_0x7dae                DB                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x7da9                EQU                               0x7da9
_test3d_0x7da9                DB                                0x0000 0x0000 0x0000 0x0000 0x0000 
_arr3d_array                  EQU                               0x71ba
_arr3d_array                  DW                                0x71cc 0x71c6 0x71c0 
_arr3d_lut_0                  EQU                               0x71cc
_arr3d_lut_0                  DW                                0x7da0 0x71e7 0x71e4 
_arr3d_lut_1                  EQU                               0x71c6
_arr3d_lut_1                  DW                                0x71e1 0x71de 0x71db 
_arr3d_lut_2                  EQU                               0x71c0
_arr3d_lut_2                  DW                                0x71d8 0x71d5 0x71d2 
_arr3d_0x7da0                 EQU                               0x7da0
_arr3d_0x7da0                 DB                                0x01 0x02 0x03 
_arr3d_0x71e7                 EQU                               0x71e7
_arr3d_0x71e7                 DB                                0x04 0x05 0x06 
_arr3d_0x71e4                 EQU                               0x71e4
_arr3d_0x71e4                 DB                                0x07 0x08 0x09 
_arr3d_0x71e1                 EQU                               0x71e1
_arr3d_0x71e1                 DB                                0x00 0x0000 0x0000 
_arr3d_0x71de                 EQU                               0x71de
_arr3d_0x71de                 DB                                0x0000 0x0000 0x0000 
_arr3d_0x71db                 EQU                               0x71db
_arr3d_0x71db                 DB                                0x0000 0x0000 0x0000 
_arr3d_0x71d8                 EQU                               0x71d8
_arr3d_0x71d8                 DB                                0x0000 0x0000 0x0000 
_arr3d_0x71d5                 EQU                               0x71d5
_arr3d_0x71d5                 DB                                0x0000 0x0000 0x0000 
_arr3d_0x71d2                 EQU                               0x71d2
_arr3d_0x71d2                 DB                                0x0000 0x0000 0x0000 

; Strings
_a$                           EQU                               0x7ea0
_a$                           DB                                0 '' 0
_string$                      EQU                               0x7de4
_string$                      DW                                0x7ca0 0x7ba0 0x7aa0 0x79a0 0x78a0 0x77a0 0x76a0 0x75a0 0x74a0 0x73a0 
_string$_0x7ca0               EQU                               0x7ca0
_string$_0x7ca0               DB                                4 'test' 0
_string$_0x7ba0               EQU                               0x7ba0
_string$_0x7ba0               DB                                3 'dog' 0
_string$_0x7aa0               EQU                               0x7aa0
_string$_0x7aa0               DB                                3 'cat' 0
_string$_0x79a0               EQU                               0x79a0
_string$_0x79a0               DB                                4 'fish' 0
_string$_0x78a0               EQU                               0x78a0
_string$_0x78a0               DB                                0 '' 0
_string$_0x77a0               EQU                               0x77a0
_string$_0x77a0               DB                                0 '' 0
_string$_0x76a0               EQU                               0x76a0
_string$_0x76a0               DB                                0 '' 0
_string$_0x75a0               EQU                               0x75a0
_string$_0x75a0               DB                                0 '' 0
_string$_0x74a0               EQU                               0x74a0
_string$_0x74a0               DB                                0 '' 0
_string$_0x73a0               EQU                               0x73a0
_string$_0x73a0               DB                                0 '' 0
_oops$                        EQU                               0x72a0
_oops$                        DB                                0 '' 0
_strTest$                     EQU                               0x70a0
_strTest$                     DB                                6 'dogcat' 0

; Constant Strings
_str_0x7dfd                   EQU                               0x7dfd
_str_0x7dfd                   DB                                1 ' ' 0
_str_0x7df8                   EQU                               0x7df8
_str_0x7df8                   DB                                3 ' : ' 0
_str_0x71b7                   EQU                               0x71b7
_str_0x71b7                   DB                                1 '1' 0
_str_0x71b4                   EQU                               0x71b4
_str_0x71b4                   DB                                1 '2' 0
_str_0x71b1                   EQU                               0x71b1
_str_0x71b1                   DB                                1 '3' 0

; Data
_data_0x71af                  EQU                               0x71af
_data_0x71af                  DW                                1
_data_0x71aa                  EQU                               0x71aa
_data_0x71aa                  DB                                3 'one' 0
_data_0x71a8                  EQU                               0x71a8
_data_0x71a8                  DW                                2
_data_0x71a3                  EQU                               0x71a3
_data_0x71a3                  DB                                3 'two' 0
_data_0x71a1                  EQU                               0x71a1
_data_0x71a1                  DW                                3
_data_0x6ff9                  EQU                               0x6ff9
_data_0x6ff9                  DB                                5 'three' 0
_data_0x6ff7                  EQU                               0x6ff7
_data_0x6ff7                  DW                                4
_data_0x6ff1                  EQU                               0x6ff1
_data_0x6ff1                  DB                                4 'four' 0
_data_0x6fef                  EQU                               0x6fef
_data_0x6fef                  DW                                5
_data_0x6fe9                  EQU                               0x6fe9
_data_0x6fe9                  DB                                4 'five' 0
_data_0x6fe7                  EQU                               0x6fe7
_data_0x6fe7                  DW                                6
_data_0x6fe1                  EQU                               0x6fe1
_data_0x6fe1                  DB                                4 'test' 0
_data_0x6fdf                  EQU                               0x6fdf
_data_0x6fdf                  DW                                7
_data_0x6fda                  EQU                               0x6fda
_data_0x6fda                  DB                                3 'yes' 0
_data_0x6fd8                  EQU                               0x6fd8
_data_0x6fd8                  DW                                8
_data_0x6fd4                  EQU                               0x6fd4
_data_0x6fd4                  DB                                2 'no' 0
_data_                        EQU                               0x6fb4
_data_                        DW                                0x71af 0x71aa 0x71a8 0x71a3 0x71a1 0x6ff9 0x6ff7 0x6ff1 0x6fef 0x6fe9 0x6fe7 0x6fe1 0x6fdf 0x6fda 0x6fd8 0x6fd4 
_dataIndex_                   EQU                               0x6fb2
_dataIndex_                   DW                                0

; Time

; Define Bytes

; Define Words

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables
_lut_numericLabs              EQU                               0x6faa
_lut_numericLabs              DW                                49 50 51 0x0000
_lut_numericAddrs             EQU                               0x6fa4
_lut_numericAddrs             DW                                0x10d2 0x10e4 0x10f6 

; Code
_entryPoint_                  Initialise                        
                              Init8Array2d                    
                              Init8Array3d                    
                              InitRealTimeStub                                                  ; INIT

                              LDI                               8
                              STW                               fgbgColour                      ; set FGBG_COLOUR, fgBgColour

                              ClearVertBlinds                                                   ; cls

                              LDI                               1
                              STW                               _i                              ; for i=1 to 4

_next_0x0224                  ReadIntVar                        
                              DEEK                              
                              STW                               _a
                              LDWI                              _a$
                              STW                               strDstAddr
                              ReadStrVar                                                        ; read a, a$

                              LDW                               _i
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDW                               _a
                              PrintAcHexWord                    
                              PrintString                       _str_0x7df8
                              PrintString                       _a$
                              NewLine                                                           ; print i;" ";hexw$(a);" : ";a$

                              ForNextFarInc                     _i _next_0x0224 4               ; next i

                              NewLine                                                           ; print

                              LDWI                              _dataIndex_
                              STW                               memAddr
                              LDI                               2
                              DOKE                              memAddr                         ; restore 2

                              LDI                               1
                              STW                               _i                              ; for i=1 to 7

_next_0x028b                  ReadIntVar                        
                              DEEK                              
                              STW                               _a
                              LDWI                              _a$
                              STW                               strDstAddr
                              ReadStrVar                                                        ; read a, a$

                              LDW                               _i
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDW                               _a
                              PrintAcHexWord                    
                              PrintString                       _str_0x7df8
                              PrintString                       _a$
                              NewLine                                                           ; print i;" ";hexw$(a);" : ";a$

                              ForNextFarInc                     _i _next_0x028b 7               ; next i

                              LDI                               120
                              STW                               waitVBlankNum
                              WaitVBlanks                                                       ; wait 120

                              STW                               0xc0
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xc0
                              NewLine                                                           ; print

                              LDI                               2
                              STW                               _a                              ; a = 2

                              LDWI                              0x7de4
                              ADDW                              _a
                              ADDW                              _a
                              DEEK                              
                              STW                               strSrcAddr
                              LDWI                              0x72a0
                              StringCopy                                                        ; oops$ = string$(a)

                              PrintString                       _oops$
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7de4
                              ADDW                              _a
                              ADDW                              _a
                              DEEK                              
                              PrintAcString                     
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7de4
                              DEEK                              
                              PrintAcString                     
                              PrintString                       _str_0x7dfd
                              LDW                               _a
                              ADDI                              1
                              STW                               memIndex0
                              LDWI                              0x7de4
                              ADDW                              memIndex0
                              ADDW                              memIndex0
                              DEEK                              
                              PrintAcString                     
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7de4
                              PrintAcHexWord                    
                              NewLine                                                           ; print oops$;" ";string$(a);" ";string$(0);" ";string$(a + 1);" ";hexw$(@string$)

                              PrintInt16                        0x005e
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x03d4
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7ba0
                              PrintAcHexWord                    
                              PrintString                       _str_0x7dfd
                              LDW                               _a
                              ADDI                              1
                              STW                               0xec
                              LDWI                              0x7de4
                              ADDW                              0xec
                              ADDW                              0xec
                              DEEK                              
                              PrintAcHexWord                    
                              NewLine                                                           ; print #oops$;" ";#string$;" ";hexw$(addr(string$, 1));" ";hexw$(addr(string$, a + 1))

                              LDI                               10
                              STW                               _j                              ; j = 10

                              LDI                               24
                              ADDW                              _j
                              STW                               0xe8
                              LDI                               3
                              ADDW                              _j
                              STW                               0xc0
                              LDWI                              _page_0x0400
                              CALL                              giga_vAC
_page_0x0400                  LDW                               0xc0
                              ADDW                              0xe8
                              STW                               0xea
                              LDI                               9
                              ADDW                              _j
                              ADDW                              0xea
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; print func(8, 8, 8) + func(1, 1, 1) + func(3, 3, 3);" ";

                              LDWI                              _asmTest
                              CALL                              giga_vAC                        ; gosub asmTest

                              LDI                               10
                              STW                               _i                              ; for i=10 &downto 0

_next_0x042e                  ForNextDecZero                    _i _next_0x042e                 ; next i

                              LDWI                              -10
                              STW                               _i
                              LDI                               0
                              STW                               0xb0
                              LDI                               1
                              STW                               0xb2                            ; for i=-10 &to 0

_next_0x0444                  ForNextVarAdd                     _i _next_0x0444 0xb0 0xb2       ; next i

                              LDI                               10
                              STW                               _i                              ; for i=10 &downto 1

_next_0x0453                  ForNextDec                        _i _next_0x0453 1               ; next i

                              LDI                               2
                              STW                               _a                              ; a = 2

                              LDWI                              0x7dde
                              ADDW                              _a
                              PEEK                              
                              STW                               _a                              ; a = test1d(a)

                              LDW                               _a
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7de1
                              PEEK                              
                              PrintAcHexWord                    
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7de1
                              PEEK                              
                              PrintAcHexWord                    
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7de1
                              PEEK                              
                              PrintAcHexWord                    
                              PrintString                       _str_0x7dfd                     ; print a;" ";hexw$(test1d(3));" ";hexw$(test1d(3).lo);" ";hexw$(test1d(3).hi);" ";

                              LDI                               0
                              STW                               memIndex0
                              LDI                               0
                              STW                               memIndex1
                              LDWI                              0x7dd6
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDI                               0
                              STW                               memIndex0
                              LDI                               1
                              STW                               memIndex1
                              LDWI                              0x7dd6
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              PrintAcInt16                      
                              NewLine                                                           ; print test2d(0, 0);" ";test2d(0, 1)

                              LDWI                              -16657
                              STW                               memValue
                              STW                               0xc0
                              LDWI                              _page_0x0500
                              CALL                              giga_vAC
_page_0x0500                  LDW                               0xc0
                              LDI                               0
                              STW                               memIndex0
                              LDI                               1
                              STW                               memIndex1
                              LDWI                              0x7dd6
                              CALL                              convert8Arr2dAddr
                              LDW                               memValue
                              POKE                              memAddr                         ; test2d(0, 1) = &hBEEF

                              LDI                               0
                              STW                               memIndex0
                              LDI                               0
                              STW                               memIndex1
                              LDWI                              0x7dd6
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDI                               0
                              STW                               memIndex0
                              LDI                               1
                              STW                               memIndex1
                              LDWI                              0x7dd6
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              PrintAcHexWord                    
                              NewLine                                                           ; print test2d(0, 0);" ";hexw$(test2d(0, 1))

                              LDI                               1
                              STW                               memIndex0
                              LDI                               2
                              STW                               memIndex1
                              LDI                               3
                              STW                               memIndex2
                              LDWI                              0x71ea
                              CALL                              convert8Arr3dAddr
                              PEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; print test3d(1, 2, 3);" ";

                              LDWI                              -21931
                              STW                               memValue
                              LDI                               1
                              STW                               memIndex0
                              LDI                               2
                              STW                               memIndex1
                              LDI                               3
                              STW                               memIndex2
                              LDWI                              0x71ea
                              CALL                              convert8Arr3dAddr
                              LDW                               memValue
                              POKE                              memAddr                         ; test3d(1, 2, 3) = &hAA55

                              LDI                               1
                              STW                               memIndex0
                              LDI                               2
                              STW                               memIndex1
                              LDI                               3
                              STW                               memIndex2
                              LDWI                              0x71ea
                              CALL                              convert8Arr3dAddr
                              PEEK                              
                              PrintAcHexWord                    
                              NewLine                                                           ; print hexw$(test3d(1, 2, 3))

                              LDI                               0
                              STW                               _i                              ; for i=0 to 2

_next_0x05cd                  LDI                               0
                              STW                               _j                              ; for j=0 to 2

_next_0x05d1                  LDI                               0
                              STW                               _k                              ; for k=0 to 2

_next_0x05d5                  LDW                               _i
                              STW                               mathX
                              LDI                               9
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              STW                               0xe8
                              LDW                               _j
                              STW                               mathX
                              LDI                               3
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              ADDW                              0xe8
                              ADDW                              _k
                              STW                               memValue
                              LDW                               _i
                              STW                               memIndex0
                              LDW                               _j
                              STW                               memIndex1
                              LDW                               _k
                              STW                               memIndex2
                              LDWI                              0x71ba
                              CALL                              convert8Arr3dAddr
                              LDW                               memValue
                              POKE                              memAddr                         ; arr3d(i, j, k) = i*9 + j*3 + k

                              ForNextFarInc                     _k _next_0x05d5 2               ; next k

                              STW                               0xc0
                              LDWI                              _page_0x0600
                              CALL                              giga_vAC
_page_0x0600                  LDW                               0xc0
                              ForNextFarInc                     _j _next_0x05d1 2               ; next j

                              ForNextFarInc                     _i _next_0x05cd 2               ; next i

                              LDI                               0
                              STW                               _i                              ; for i=0 to 2

_next_0x0644                  LDI                               0
                              STW                               _j                              ; for j=0 to 2

_next_0x0648                  LDI                               0
                              STW                               _k                              ; for k=0 to 2

_next_0x064c                  LDW                               _i
                              STW                               memIndex0
                              LDW                               _j
                              STW                               memIndex1
                              LDW                               _k
                              STW                               memIndex2
                              LDWI                              0x71ba
                              CALL                              convert8Arr3dAddr
                              PEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; print arr3d(i, j, k).lo;" ";

                              ForNextFarInc                     _k _next_0x064c 2               ; next k

                              ForNextFarInc                     _j _next_0x0648 2               ; next j

                              ForNextFarInc                     _i _next_0x0644 2               ; next i

                              NewLine                                                           ; print

                              LDI                               6
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDI                               4
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDI                               45
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDI                               27
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDWI                              0x70a0
                              PEEK                              
                              PrintAcInt16                      
                              NewLine                                                           ; print len(test1d);" ";len(test2d);" ";len(test3d);" ";len(arr3d);" ";len(strTest$)

                              LDWI                              0x7dde
                              PrintAcHexWord                    
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7dd6
                              PrintAcHexWord                    
                              STW                               0xc0
                              LDWI                              _page_0x08a0
                              CALL                              giga_vAC
_page_0x08a0                  LDW                               0xc0
                              PrintString                       _str_0x7dfd
                              LDWI                              0x71ea
                              PrintAcHexWord                    
                              PrintString                       _str_0x7dfd
                              LDWI                              0x71ba
                              PrintAcHexWord                    
                              NewLine                                                           ; print hexw$(@test1d);" ";hexw$(@test2d);" ";hexw$(@test3d);" ";hexw$(@arr3d)

                              LDWI                              0x7dde
                              PEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7ddc
                              PEEK                              
                              PrintAcInt16                      
                              STW                               0xc0
                              LDWI                              _page_0x09a0
                              CALL                              giga_vAC
_page_0x09a0                  LDW                               0xc0
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7dd3
                              PEEK                              
                              PrintAcHexWord                    
                              PrintString                       _str_0x7dfd
                              LDWI                              0x71df
                              PEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; print peek(addr(test1d, 0));" ";peek(addr(test2d, 0, 0));" ";hexw$(peek(addr(test3d, 0, 0, 2)));" ";peek(addr(arr3d, 1, 1, 1));" ";

                              LDI                               0
                              STW                               _index0
                              LDWI                              0x7dde
                              ADDW                              _index0
                              PEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; index0=0 : print peek(addr(test1d, index0));" ";

                              LDI                               0
                              STW                               _index0
                              LDI                               0
                              STW                               0xc0
                              LDWI                              _page_0x0aa0
                              CALL                              giga_vAC
_page_0x0aa0                  LDW                               0xc0
                              STW                               _index1
                              LDW                               _index0
                              STW                               memIndex0
                              LDW                               _index1
                              STW                               memIndex1
                              LDWI                              0x7dd6
                              CALL                              convert8Arr2dAddr
                              PEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; index0=0 : index1=0 : print peek(addr(test2d, index0, index1));" ";

                              LDI                               0
                              STW                               _index0
                              LDI                               0
                              STW                               _index1
                              LDI                               2
                              STW                               _index2
                              LDW                               _index0
                              STW                               memIndex0
                              LDW                               _index1
                              STW                               memIndex1
                              LDW                               _index2
                              STW                               memIndex2
                              LDWI                              0x71ea
                              CALL                              convert8Arr3dAddr
                              PEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; index0=0 : index1=0 : index2=2 : print peek(addr(test3d, index0, index1, index2));" ";

                              LDI                               1
                              STW                               _index0
                              LDI                               1
                              STW                               0xc0
                              LDWI                              _page_0x0ba0
                              CALL                              giga_vAC
_page_0x0ba0                  LDW                               0xc0
                              STW                               _index1
                              LDI                               1
                              STW                               _index2
                              LDW                               _index0
                              STW                               memIndex0
                              LDW                               _index1
                              STW                               memIndex1
                              LDW                               _index2
                              STW                               memIndex2
                              LDWI                              0x71ba
                              CALL                              convert8Arr3dAddr
                              PEEK                              
                              PrintAcInt16                      
                              NewLine                                                           ; index0=1 : index1=1 : index2=1 : print peek(addr(arr3d, index0, index1, index2))

                              LDWI                              29114
                              STW                               _aaa                            ; aaa = @arr3d

                              LDW                               _aaa
                              ADDI                              2
                              DEEK                              
                              STW                               _aaa                            ; aaa = deek(aaa + 2) ' arrays k pointers are always 2 bytes, so multiply your k index by 2

                              LDW                               _aaa
                              ADDI                              2
                              DEEK                              
                              STW                               _aaa                            ; aaa = deek(aaa + 2) ' arrays j pointers are always 2 bytes, so multiply your j index by 2

                              LDW                               _aaa
                              ADDI                              2
                              DEEK                              
                              PrintAcInt16                                                      ; print deek(aaa + 2);' arrays i values are always 2 bytes,   so multiply your i index by 2

                              LDI                               0
                              STW                               _x
                              STW                               _y
                              STW                               _z                              ; x = 0 : y = x : z = y

                              LDI                               20
                              STW                               _x                              ; x = 20

                              LDW                               _x
                              STW                               mathX
                              LDI                               20
                              STW                               0xc0
                              LDWI                              _page_0x0ca0
                              CALL                              giga_vAC
_page_0x0ca0                  LDW                               0xc0
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              ADDI                              32
                              STW                               _blah                           ; blah = (53 - 12 - 9) + x*20

                              PrintString                       _str_0x7dfd
                              LDW                               _blah
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; print " ";blah;" ";

                              LDI                               10
                              STW                               _x                              ; x = 10

                              LDW                               _x
                              STW                               mathX
                              LDI                               2
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              STW                               mathX
                              LDWI                              -995
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              STW                               _blah                           ; blah = x*2*(50*exp(-1.232455)*sin(45)*cos(57.324786234) - 1000.342876324) 'transcendentals use degrees by default

                              LDW                               _blah
                              PrintAcInt16                      
                              NewLine                                                           ; print blah

                              STW                               0xc0
                              LDWI                              _page_0x0da0
                              CALL                              giga_vAC
_page_0x0da0                  LDW                               0xc0
                              PrintInt16                        0x000c
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x0010
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x2000
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x0094
                              PrintString                       _str_0x7dfd
                              STW                               0xc0
                              LDWI                              _page_0x0ea0
                              CALL                              giga_vAC
_page_0x0ea0                  LDW                               0xc0
                              PrintInt16                        0x0005
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x000b
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x0004
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x0087
                              NewLine                                                           ; print pow(144, 0.5);" ";sqrt(256.0);" ";exp2(13);" ";exp(5);" ";log(148);" ";log2(2048);" ";log10(10000);" ";atan2(10.0, -10.0)

                              LDWI                              0x0920
                              LUP                               0x00
                              STW                               0xc0
                              LDWI                              _page_0x0fa0
                              CALL                              giga_vAC
_page_0x0fa0                  LDW                               0xc0
                              PrintAcHexByte                    
                              PrintString                       _str_0x7dfd
                              LDWI                              0x0920
                              LUP                               0x01
                              PrintAcHexByte                    
                              NewLine                                                           ; print hex$(lup(&h0920, 0));" ";hex$(lup(&h0920, 1))

                              LDI                               255
                              STW                               _kk                             ; kk = 255

                              LDW                               _a
                              Sign                              
                              STW                               0xe8
                              LDI                               1
                              STW                               mathX
                              LDW                               0xe8
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              ADDW                              _a
                              STW                               0xd8
                              LDW                               _x
                              STW                               0xda
                              LDW                               _y
                              STW                               0xdc
                              LDI                               0x08
                              STW                               0xde
                              LDWI                              _doStuff
                              CALL                              giga_vAC                        ; call doStuff, a + 1 * sgn(a), x, y, fgBgColour

_loop                         LD                                giga_serialRaw
                              STW                               0xc0
                              LDWI                              _page_0x10a0
                              CALL                              giga_vAC
_page_0x10a0                  LDW                               0xc0
                              STW                               _k                              ; k = get("SERIAL_RAW")

                              LDW                               _kk
                              XORI                              255
                              JumpEQ                            _endif_0x0a6c 1                 ; if kk &= 255

                              LDW                               _k
                              XORI                              255
                              JumpNE                            _endif_0x0a6c 0
                              LDW                               _k
                              STW                               numericLabel
                              LDI                               0
                              STW                               defaultLabel
                              GosubNumeric                                                      ; if k &<>255 then gosub k

_endif_0x0a6c                 LDW                               _k
                              STW                               _kk                             ; kk = k

                              LDWI                              _loop
                              CALL                              giga_vAC                        ; goto loop

_49                           PUSH                              
                              PrintString                       _str_0x71b7
                              NewLine                           
                              Return                                                            ; print "1" : return

_50                           PUSH                              
                              PrintString                       _str_0x71b4
                              NewLine                           
                              Return                                                            ; print "2" : return

_51                           PUSH                              
                              STW                               0xc0
                              LDWI                              _page_0x11a0
                              CALL                              giga_vAC
_page_0x11a0                  LDW                               0xc0
                              PrintString                       _str_0x71b1
                              NewLine                           
                              Return                                                            ; print "3" : return

_asmTest                      PUSH                                                              ; asm

                              LDW                               _i                              ; LDW _i
                              STW                               _i                              ; STW _i

                              Return                                                            ; return

_doStuff                      PUSH                                                              ; proc doStuff, a, b, c, d

                              LDI                               3
                              STW                               _doStuff_e                      ; e = 3

                              LDW                               _doStuff_a
                              ADDW                              _doStuff_e
                              STW                               _doStuff_f                      ; f = a + e

                              LDW                               _doStuff_a
                              ADDW                              _doStuff_b
                              ADDW                              _doStuff_c
                              ADDW                              _doStuff_d
                              STW                               _doStuff_g                      ; g = a + b + c + d

                              LDW                               _doStuff_e
                              STW                               mathX
                              LDW                               _doStuff_f
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              STW                               _doStuff_h                      ; h = e*f

                              LDW                               _doStuff_a
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDW                               _doStuff_b
                              STW                               0xc0
                              LDWI                              _page_0x12a0
                              CALL                              giga_vAC
_page_0x12a0                  LDW                               0xc0
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDW                               _doStuff_c
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDW                               _doStuff_d
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDW                               _doStuff_e
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDW                               _doStuff_f
                              PrintAcInt16                      
                              STW                               0xc0
                              LDWI                              _page_0x13a0
                              CALL                              giga_vAC
_page_0x13a0                  LDW                               0xc0
                              PrintString                       _str_0x7dfd
                              LDW                               _doStuff_g
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDW                               _doStuff_h
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDI                               0xd8
                              PrintAcHexByte                    
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x0002
                              NewLine                                                           ; print a;" ";b;" ";c;" ";d;" ";e;" ";f;" ";g;" ";h;" ";hex$(@a);" ";#b

                              LDI                               1
                              STW                               intSrcA
                              STW                               0xc0
                              LDWI                              _page_0x14a0
                              CALL                              giga_vAC
_page_0x14a0                  LDW                               0xc0
                              LDI                               2
                              IntMin                            
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDI                               3
                              STW                               intSrcA
                              LDWI                              -1
                              IntMax                            
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDI                               8
                              STW                               intSrcX
                              LDW                               _doStuff_c
                              STW                               intSrcA
                              LDW                               _doStuff_f
                              IntClamp                          
                              PrintAcInt16                      
                              STW                               0xc0
                              LDWI                              _page_0x15a0
                              CALL                              giga_vAC
_page_0x15a0                  LDW                               0xc0
                              PrintString                       _str_0x7dfd                     ; print min(1, 2);" ";max(3, -1);" ";clamp(8, c, f);" ";

                              Return                                                            ; endproc

_end_0x0c0b                   BRA                               _end_0x0c0b                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeStub                  EQU     0x67a2
convert8Arr2d                 EQU     0x65d0
convert8Arr3d                 EQU     0x69a1
sign                          EQU     0x66c1
integerMin                    EQU     0x6ca1
integerMax                    EQU     0x66a5
integerClamp                  EQU     0x69b0
multiply16bit                 EQU     0x68cd
readIntVar                    EQU     0x66d3
readStrVar                    EQU     0x66b2
gosubNumericLabel             EQU     0x67cd
waitVBlank                    EQU     0x65e6
waitVBlanks                   EQU     0x68a1
resetVideoFlags               EQU     0x65da
initClearFuncs                EQU     0x66e8
clearVertBlinds               EQU     0x6ac5
clearCursorRow                EQU     0x6bb6
printInit                     EQU     0x6ba0
printText                     EQU     0x68b4
printDigit                    EQU     0x6aa3
printInt16                    EQU     0x6cae
printChar                     EQU     0x6da7
printHexByte                  EQU     0x69ca
printHexWord                  EQU     0x67b4
newLineScroll                 EQU     0x6ea4
stringCopy                    EQU     0x65f2
convertEqOpAddr               EQU     0x00c2
convertNeOpAddr               EQU     0x00c4
convertLeOpAddr               EQU     0x00c6
convertGeOpAddr               EQU     0x00c8
convertLtOpAddr               EQU     0x00ca
convertGtOpAddr               EQU     0x00cc
convert8Arr2dAddr             EQU     0x00ce
convert8Arr3dAddr             EQU     0x00d0
convert16Arr2dAddr            EQU     0x00d2
convert16Arr3dAddr            EQU     0x00d4
realTimeStubAddr              EQU     0x00d6


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


convert8Arr2d       ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    STW     memAddr
                    RET


convert8Arr3d       ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    DEEK
                    ADDW    memIndex2
                    STW     memAddr
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


sign                LDW     mathX
                    BLE     sign_le
                    LDI     1
                    RET
                    
sign_le             BLT     sign_lt
                    LDI     0
                    RET
                    
sign_lt             LDWI    0xFFFF
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


integerMin          LDW     intSrcA
                    SUBW    intSrcB
                    BLE     integerMi_A
                    LDW     intSrcB
                    RET

integerMi_A         LDW     intSrcA
                    RET


integerMax          LDW     intSrcA
                    SUBW    intSrcB
                    BGE     integerMa_A
                    LDW     intSrcB
                    RET

integerMa_A         LDW     intSrcA
                    RET


integerClamp        LDW     intSrcX
                    SUBW    intSrcA
                    BGE     integerCl_X
                    BRA     integerCl_A0

integerCl_X         LDW     intSrcX
                    STW     intSrcA

integerCl_A0        LDW     intSrcA
                    SUBW    intSrcB
                    BLE     integerCl_A1
                    LDW     intSrcB
                    RET

integerCl_A1        LDW     intSrcA
                    RET


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

multiply16_exit     PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSum
                    RET


readIntVar          LDWI    _dataIndex_
                    STW     memAddr
                    DEEK
                    STW     memIndex0
                    ADDI    1
                    DOKE    memAddr
                    LDWI    _data_
                    ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    RET


readStrVar          PUSH
                    LDWI    readIntVar
                    CALL    giga_vAC
                    STW     strSrcAddr
                    LDWI    stringCopy
                    CALL    giga_vAC
                    POP
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y8        EQU     register2
drawVLine_y2        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15


waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
                    PUSH
                    CALL    realTimeStubAddr
                    POP
                    RET


waitVBlanks         PUSH

waitVB_loop         LDW     waitVBlankNum
                    SUBI    0x01
                    STW     waitVBlankNum
                    BGE     waitVB_vblank
                    POP
                    RET
    
waitVB_vblank       LDWI    waitVBlank
                    CALL    giga_vAC
                    BRA     waitVB_loop


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
    

resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeStubAddr
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


                    ; print hex byte in textHex
printHexByte        PUSH
                    LDWI    SYS_LSRW4_50                    ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LD      textHex
                    SYS     50
                    SUBI    10
                    BLT     printH_skip0
                    ADDI    7
printH_skip0        ADDI    0x3A
                    ST      textChr
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    LD      textHex
                    ANDI    0x0F
                    SUBI    10
                    BLT     printH_skip1
                    ADDI    7
printH_skip1        ADDI    0x3A
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; print hex word in textHex
printHexWord        PUSH
                    LD      textHex
                    ST      textBak
                    LD      textHex + 1
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    LD      textBak
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    POP
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
                    CALL    realTimeStubAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
strChr              EQU     register0
strHex              EQU     register1
strCmpRes           EQU     register2
strDstLen           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strTmpAddr          EQU     register10
strLutAddr          EQU     register11
strBakAddr          EQU     register12
strInteger          EQU     register0
strDigit            EQU     register1
strMult             EQU     register3


                    ; copy one string to another
stringCopy          LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    BNE     stringCopy                          ; copy char until terminating char
                    RET

