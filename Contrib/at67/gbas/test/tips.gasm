_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0x7fa0

; Includes
%includePath                  "../runtime"
%include                      util.i
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_loop                         EQU                               0x0edc
_49                           EQU                               0x0fb8
_50                           EQU                               0x0fca
_51                           EQU                               0x0fdc
_asmTest                      EQU                               0x0fee
_next_0x0224                  EQU                               0x022e
_next_0x0286                  EQU                               0x0290
_end_0x02db                   EQU                               0x02e5
_page_0x0300                  EQU                               0x0300
_page_0x0400                  EQU                               0x0400
_next_0x042a                  EQU                               0x0424
_next_0x0440                  EQU                               0x043a
_next_0x044f                  EQU                               0x0449
_page_0x0500                  EQU                               0x0500
_next_0x0580                  EQU                               0x056d
_next_0x0584                  EQU                               0x0571
_next_0x0588                  EQU                               0x0575
_next_0x05f7                  EQU                               0x05da
_next_0x05fb                  EQU                               0x05de
_next_0x05ff                  EQU                               0x05e2
_page_0x0600                  EQU                               0x0600
_page_0x08a0                  EQU                               0x08a0
_page_0x09a0                  EQU                               0x09a0
_page_0x0aa0                  EQU                               0x0aa0
_page_0x0ba0                  EQU                               0x0ba0
_page_0x0ca0                  EQU                               0x0ca0
_page_0x0da0                  EQU                               0x0da0
_page_0x0ea0                  EQU                               0x0ea0
_page_0x0fa0                  EQU                               0x0fa0
_endif_0x09ec                 EQU                               0x0faf
_end_0x0a32                   EQU                               0x0ff5

; Variables
_i                            EQU                               0x0030
_a                            EQU                               0x0032
_j                            EQU                               0x0034
_k                            EQU                               0x0036
_index0                       EQU                               0x0038
_index1                       EQU                               0x003a
_index2                       EQU                               0x003c
_aaa                          EQU                               0x003e
_x                            EQU                               0x0040
_y                            EQU                               0x0042
_z                            EQU                               0x0044
_blah                         EQU                               0x0046
_kk                           EQU                               0x0048

; Arrays
_test1d_array                 EQU                               0x7dd8
_test1d_array                 DW                                0x0001 0x0002 0x0003 0xffff 0xffff 0xffff 
_test2d_array                 EQU                               0x7dcc
_test2d_array                 DW                                0x7dd4 0x7dd0 
_test2d_0x7dd4                EQU                               0x7dd4
_test2d_0x7dd4                DW                                0x0000 0x0001 
_test2d_0x7dd0                EQU                               0x7dd0
_test2d_0x7dd0                DW                                0x0001 0x0001 
_test3d_array                 EQU                               0x71b2
_test3d_array                 DW                                0x71c8 0x71c2 0x71bc 
_test3d_lut_0                 EQU                               0x71c8
_test3d_lut_0                 DW                                0x7dc2 0x7db8 0x7dae 
_test3d_lut_1                 EQU                               0x71c2
_test3d_lut_1                 DW                                0x7da4 0x71f6 0x71ec 
_test3d_lut_2                 EQU                               0x71bc
_test3d_lut_2                 DW                                0x71e2 0x71d8 0x71ce 
_test3d_0x7dc2                EQU                               0x7dc2
_test3d_0x7dc2                DW                                0x0001 0x0002 0x0003 0x0004 0x0000 
_test3d_0x7db8                EQU                               0x7db8
_test3d_0x7db8                DW                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x7dae                EQU                               0x7dae
_test3d_0x7dae                DW                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x7da4                EQU                               0x7da4
_test3d_0x7da4                DW                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x71f6                EQU                               0x71f6
_test3d_0x71f6                DW                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x71ec                EQU                               0x71ec
_test3d_0x71ec                DW                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x71e2                EQU                               0x71e2
_test3d_0x71e2                DW                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x71d8                EQU                               0x71d8
_test3d_0x71d8                DW                                0x0000 0x0000 0x0000 0x0000 0x0000 
_test3d_0x71ce                EQU                               0x71ce
_test3d_0x71ce                DW                                0x0000 0x0000 0x0000 0x0000 0x0000 
_arr3d_array                  EQU                               0x70c4
_arr3d_array                  DW                                0x70d6 0x70d0 0x70ca 
_arr3d_lut_0                  EQU                               0x70d6
_arr3d_lut_0                  DW                                0x71ac 0x71a6 0x71a0 
_arr3d_lut_1                  EQU                               0x70d0
_arr3d_lut_1                  DW                                0x70fa 0x70f4 0x70ee 
_arr3d_lut_2                  EQU                               0x70ca
_arr3d_lut_2                  DW                                0x70e8 0x70e2 0x70dc 
_arr3d_0x71ac                 EQU                               0x71ac
_arr3d_0x71ac                 DW                                0x0001 0x0002 0x0003 
_arr3d_0x71a6                 EQU                               0x71a6
_arr3d_0x71a6                 DW                                0x0004 0x0005 0x0006 
_arr3d_0x71a0                 EQU                               0x71a0
_arr3d_0x71a0                 DW                                0x0007 0x0008 0x0009 
_arr3d_0x70fa                 EQU                               0x70fa
_arr3d_0x70fa                 DW                                0x0000 0x0000 0x0000 
_arr3d_0x70f4                 EQU                               0x70f4
_arr3d_0x70f4                 DW                                0x0000 0x0000 0x0000 
_arr3d_0x70ee                 EQU                               0x70ee
_arr3d_0x70ee                 DW                                0x0000 0x0000 0x0000 
_arr3d_0x70e8                 EQU                               0x70e8
_arr3d_0x70e8                 DW                                0x0000 0x0000 0x0000 
_arr3d_0x70e2                 EQU                               0x70e2
_arr3d_0x70e2                 DW                                0x0000 0x0000 0x0000 
_arr3d_0x70dc                 EQU                               0x70dc
_arr3d_0x70dc                 DW                                0x0000 0x0000 0x0000 

; Strings
_a$                           EQU                               0x7ea0
_a$                           DB                                0 '' 0
_string$                      EQU                               0x7de4
_string$                      DW                                0x7ca0 0x7ba0 0x7aa0 0x79a0 0x78a0 0x77a0 0x76a0 0x75a0 0x74a0 0x73a0 
_string$_0x7ca0               EQU                               0x7ca0
_string$_0x7ca0               DB                                4 'test' 0
_string$_0x7ba0               EQU                               0x7ba0
_string$_0x7ba0               DB                                3 'dog' 0
_string$_0x7aa0               EQU                               0x7aa0
_string$_0x7aa0               DB                                3 'cat' 0
_string$_0x79a0               EQU                               0x79a0
_string$_0x79a0               DB                                4 'fish' 0
_string$_0x78a0               EQU                               0x78a0
_string$_0x78a0               DB                                0 '' 0
_string$_0x77a0               EQU                               0x77a0
_string$_0x77a0               DB                                0 '' 0
_string$_0x76a0               EQU                               0x76a0
_string$_0x76a0               DB                                0 '' 0
_string$_0x75a0               EQU                               0x75a0
_string$_0x75a0               DB                                0 '' 0
_string$_0x74a0               EQU                               0x74a0
_string$_0x74a0               DB                                0 '' 0
_string$_0x73a0               EQU                               0x73a0
_string$_0x73a0               DB                                0 '' 0
_oops$                        EQU                               0x72a0
_oops$                        DB                                0 '' 0
_strTest$                     EQU                               0x6fa0
_strTest$                     DB                                6 'dogcat' 0

; Constant Strings
_str_0x7dfd                   EQU                               0x7dfd
_str_0x7dfd                   DB                                1 ' ' 0
_str_0x7df8                   EQU                               0x7df8
_str_0x7df8                   DB                                3 ' : ' 0
_str_0x7da1                   EQU                               0x7da1
_str_0x7da1                   DB                                1 '1' 0
_str_0x70c1                   EQU                               0x70c1
_str_0x70c1                   DB                                1 '2' 0
_str_0x70be                   EQU                               0x70be
_str_0x70be                   DB                                1 '3' 0

; Data
_data_0x6dbc                  EQU                               0x6dbc
_data_0x6dbc                  DW                                1
_data_0x6db7                  EQU                               0x6db7
_data_0x6db7                  DB                                3 'one' 0
_data_0x6db5                  EQU                               0x6db5
_data_0x6db5                  DW                                2
_data_0x6db0                  EQU                               0x6db0
_data_0x6db0                  DB                                3 'two' 0
_data_0x6dae                  EQU                               0x6dae
_data_0x6dae                  DW                                3
_data_0x6da7                  EQU                               0x6da7
_data_0x6da7                  DB                                5 'three' 0
_data_0x6da5                  EQU                               0x6da5
_data_0x6da5                  DW                                4
_data_0x6ca8                  EQU                               0x6ca8
_data_0x6ca8                  DB                                4 'four' 0
_data_0x6da3                  EQU                               0x6da3
_data_0x6da3                  DW                                5
_data_0x6ca2                  EQU                               0x6ca2
_data_0x6ca2                  DB                                4 'five' 0
_data_0x6da1                  EQU                               0x6da1
_data_0x6da1                  DW                                6
_data_0x6ac7                  EQU                               0x6ac7
_data_0x6ac7                  DB                                4 'test' 0
_data_0x6ca0                  EQU                               0x6ca0
_data_0x6ca0                  DW                                7
_data_0x6ac2                  EQU                               0x6ac2
_data_0x6ac2                  DB                                3 'yes' 0
_data_0x6ba2                  EQU                               0x6ba2
_data_0x6ba2                  DW                                8
_data_0x6abe                  EQU                               0x6abe
_data_0x6abe                  DB                                2 'no' 0
_data_                        EQU                               0x69a8
_data_                        DW                                0x6dbc 0x6db7 0x6db5 0x6db0 0x6dae 0x6da7 0x6da5 0x6ca8 0x6da3 0x6ca2 0x6da1 0x6ac7 0x6ca0 0x6ac2 0x6ba2 0x6abe 0
_dataIndex_                   EQU                               0x6ba0
_dataIndex_                   DW                                0

; Time

; Define Bytes

; Define Words

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables
_lut_numericLabs              EQU                               0x6ab6
_lut_numericLabs              DW                                49 50 51 0x0000
_lut_numericAddrs             EQU                               0x6ab0
_lut_numericAddrs             DW                                0x0fb8 0x0fca 0x0fdc 

; Code
_entryPoint_                  Initialise                        
                              InitArray2d                     
                              InitArray3d                     
                              InitRealTimeStub                                                  ; INIT

                              LDI                               8
                              STW                               fgbgColour                      ; set FGBG_COLOUR, fgBgColour

                              ClearVertBlinds                                                   ; cls

                              LDI                               1
                              STW                               _i                              ; for i=1 to 4

_next_0x0224                  ReadIntVar                        
                              DEEK                              
                              STW                               _a
                              LDWI                              _a$
                              STW                               strDstAddr
                              ReadStrVar                                                        ; read a, a$

                              LDW                               _i
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDW                               _a
                              PrintAcHexWord                    
                              PrintString                       _str_0x7df8
                              PrintString                       _a$
                              NewLine                                                           ; print i;" ";hexw$(a);" : ";a$

                              ForNextFarInc                     _i _next_0x0224 4               ; next i

                              LDWI                              _dataIndex_
                              STW                               memAddr
                              LDI                               2
                              DOKE                              memAddr                         ; restore 2

                              LDI                               1
                              STW                               _i                              ; for i=1 to 4

_next_0x0286                  ReadIntVar                        
                              DEEK                              
                              STW                               _a
                              LDWI                              _a$
                              STW                               strDstAddr
                              ReadStrVar                                                        ; read a, a$

                              LDW                               _i
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDW                               _a
                              PrintAcHexWord                    
                              PrintString                       _str_0x7df8
                              PrintString                       _a$
                              NewLine                                                           ; print i;" ";hexw$(a);" : ";a$

                              ForNextFarInc                     _i _next_0x0286 4               ; next i

_end_0x02db                   BRA                               _end_0x02db                     ; end

                              LDI                               6
                              STW                               _a                              ; a = 6

                              LDWI                              _dataIndex_
                              STW                               memAddr
                              LDW                               _a
                              STW                               0xe2
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xe2
                              DOKE                              memAddr                         ; restore a

                              LDI                               2
                              STW                               _a                              ; a = 2

                              LDWI                              0x7de4
                              ADDW                              _a
                              ADDW                              _a
                              DEEK                              
                              STW                               strSrcAddr
                              LDWI                              0x72a0
                              StringCopy                                                        ; oops$ = string$(a)

                              PrintString                       _oops$
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7de4
                              ADDW                              _a
                              ADDW                              _a
                              DEEK                              
                              PrintAcString                     
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7de4
                              DEEK                              
                              PrintAcString                     
                              PrintString                       _str_0x7dfd
                              LDW                               _a
                              ADDI                              1
                              STW                               memIndex0
                              LDWI                              0x7de4
                              ADDW                              memIndex0
                              ADDW                              memIndex0
                              DEEK                              
                              PrintAcString                     
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7de4
                              PrintAcHexWord                    
                              NewLine                                                           ; print oops$;" ";string$(a);" ";string$(0);" ";string$(a + 1);" ";hexw$(@string$)

                              PrintInt16                        0x005e
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x03d4
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7ba0
                              PrintAcHexWord                    
                              PrintString                       _str_0x7dfd
                              LDW                               _a
                              ADDI                              1
                              STW                               0xc4
                              LDWI                              0x7de4
                              ADDW                              0xc4
                              ADDW                              0xc4
                              DEEK                              
                              PrintAcHexWord                    
                              NewLine                                                           ; print #oops$;" ";#string$;" ";hexw$(addr(string$, 1));" ";hexw$(addr(string$, a + 1))

                              LDI                               10
                              STW                               _j                              ; j = 10

                              LDI                               24
                              ADDW                              _j
                              STW                               0xc0
                              LDI                               3
                              ADDW                              _j
                              ADDW                              0xc0
                              STW                               0xe2
                              LDWI                              _page_0x0400
                              CALL                              giga_vAC
_page_0x0400                  LDW                               0xe2
                              STW                               0xc2
                              LDI                               9
                              ADDW                              _j
                              ADDW                              0xc2
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; print func(8, 8, 8) + func(1, 1, 1) + func(3, 3, 3);" ";

                              LDWI                              _asmTest
                              CALL                              giga_vAC                        ; gosub asmTest

                              LDI                               10
                              STW                               _i                              ; for i=10 &downto 0

_next_0x042a                  ForNextDecZero                    _i _next_0x042a                 ; next i

                              LDWI                              -10
                              STW                               _i
                              LDI                               0
                              STW                               0xb0
                              LDI                               1
                              STW                               0xb2                            ; for i=-10 &to 0

_next_0x0440                  ForNextVarAdd                     _i _next_0x0440 0xb0 0xb2       ; next i

                              LDI                               10
                              STW                               _i                              ; for i=10 &downto 1

_next_0x044f                  ForNextDec                        _i _next_0x044f 1               ; next i

                              LDI                               2
                              STW                               _a                              ; a = 2

                              LDWI                              0x7dd8
                              ADDW                              _a
                              ADDW                              _a
                              DEEK                              
                              STW                               _a                              ; a = test1d(a)

                              LDW                               _a
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; print a;" ";

                              LDI                               0
                              STW                               memIndex0
                              LDI                               0
                              STW                               memIndex1
                              LDWI                              0x7dcc
                              CALL                              convertArr2dAddr
                              DEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDI                               0
                              STW                               memIndex0
                              LDI                               1
                              STW                               memIndex1
                              LDWI                              0x7dcc
                              CALL                              convertArr2dAddr
                              DEEK                              
                              PrintAcInt16                      
                              NewLine                                                           ; print test2d(0, 0);" ";test2d(0, 1)

                              LDWI                              -16657
                              STW                               memValue
                              LDI                               0
                              STW                               memIndex0
                              LDI                               1
                              STW                               memIndex1
                              LDWI                              0x7dcc
                              CALL                              convertArr2dAddr
                              LDW                               memValue
                              DOKE                              memAddr                         ; test2d(0, 1) = &hBEEF

                              LDI                               0
                              STW                               memIndex0
                              LDI                               0
                              STW                               memIndex1
                              LDWI                              0x7dcc
                              CALL                              convertArr2dAddr
                              DEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDI                               0
                              STW                               memIndex0
                              LDI                               1
                              STW                               memIndex1
                              LDWI                              0x7dcc
                              CALL                              convertArr2dAddr
                              DEEK                              
                              STW                               0xe2
                              LDWI                              _page_0x0500
                              CALL                              giga_vAC
_page_0x0500                  LDW                               0xe2
                              PrintAcHexWord                    
                              NewLine                                                           ; print test2d(0, 0);" ";hexw$(test2d(0, 1))

                              LDI                               1
                              STW                               memIndex0
                              LDI                               2
                              STW                               memIndex1
                              LDI                               3
                              STW                               memIndex2
                              LDWI                              0x71b2
                              CALL                              convertArr3dAddr
                              DEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; print test3d(1, 2, 3);" ";

                              LDWI                              -21931
                              STW                               memValue
                              LDI                               1
                              STW                               memIndex0
                              LDI                               2
                              STW                               memIndex1
                              LDI                               3
                              STW                               memIndex2
                              LDWI                              0x71b2
                              CALL                              convertArr3dAddr
                              LDW                               memValue
                              DOKE                              memAddr                         ; test3d(1, 2, 3) = &hAA55

                              LDI                               1
                              STW                               memIndex0
                              LDI                               2
                              STW                               memIndex1
                              LDI                               3
                              STW                               memIndex2
                              LDWI                              0x71b2
                              CALL                              convertArr3dAddr
                              DEEK                              
                              PrintAcHexWord                    
                              NewLine                                                           ; print hexw$(test3d(1, 2, 3))

                              LDI                               0
                              STW                               _i                              ; for i=0 to 2

_next_0x0580                  LDI                               0
                              STW                               _j                              ; for j=0 to 2

_next_0x0584                  LDI                               0
                              STW                               _k                              ; for k=0 to 2

_next_0x0588                  LDW                               _i
                              STW                               mathX
                              LDI                               9
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              STW                               0xc0
                              LDW                               _j
                              STW                               mathX
                              LDI                               3
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              ADDW                              0xc0
                              ADDW                              _k
                              STW                               memValue
                              LDW                               _i
                              STW                               memIndex0
                              LDW                               _j
                              STW                               memIndex1
                              LDW                               _k
                              STW                               memIndex2
                              LDWI                              0x70c4
                              CALL                              convertArr3dAddr
                              LDW                               memValue
                              DOKE                              memAddr                         ; arr3d(i, j, k) = i*9 + j*3 + k

                              ForNextFarInc                     _k _next_0x0588 2               ; next k

                              ForNextFarInc                     _j _next_0x0584 2               ; next j

                              ForNextFarInc                     _i _next_0x0580 2               ; next i

                              LDI                               0
                              STW                               _i                              ; for i=0 to 2

_next_0x05f7                  LDI                               0
                              STW                               _j                              ; for j=0 to 2

_next_0x05fb                  LDI                               0
                              STW                               _k                              ; for k=0 to 2

_next_0x05ff                  LDW                               _i
                              STW                               memIndex0
                              LDW                               _j
                              STW                               memIndex1
                              LDW                               _k
                              STW                               memIndex2
                              LDWI                              0x70c4
                              CALL                              convertArr3dAddr
                              PEEK                              
                              STW                               0xe2
                              LDWI                              _page_0x0600
                              CALL                              giga_vAC
_page_0x0600                  LDW                               0xe2
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; print arr3d(i, j, k).lo;" ";

                              ForNextFarInc                     _k _next_0x05ff 2               ; next k

                              ForNextFarInc                     _j _next_0x05fb 2               ; next j

                              ForNextFarInc                     _i _next_0x05f7 2               ; next i

                              NewLine                                                           ; print

                              LDI                               12
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDI                               8
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDI                               90
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDI                               54
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDWI                              0x6fa0
                              PEEK                              
                              PrintAcInt16                      
                              NewLine                                                           ; print len(test1d);" ";len(test2d);" ";len(test3d);" ";len(arr3d);" ";len(strTest$)

                              LDWI                              0x7dd8
                              PrintAcHexWord                    
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7dcc
                              PrintAcHexWord                    
                              PrintString                       _str_0x7dfd
                              LDWI                              0x71b2
                              PrintAcHexWord                    
                              PrintString                       _str_0x7dfd
                              LDWI                              0x70c4
                              PrintAcHexWord                    
                              NewLine                                                           ; print hexw$(@test1d);" ";hexw$(@test2d);" ";hexw$(@test3d);" ";hexw$(@arr3d)

                              LDWI                              0x7dd8
                              DEEK                              
                              PrintAcInt16                      
                              STW                               0xe2
                              LDWI                              _page_0x08a0
                              CALL                              giga_vAC
_page_0x08a0                  LDW                               0xe2
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7dd4
                              DEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd
                              LDWI                              0x7dc6
                              DEEK                              
                              PrintAcHexWord                    
                              PrintString                       _str_0x7dfd
                              LDWI                              0x70f6
                              DEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; print deek(addr(test1d, 0));" ";deek(addr(test2d, 0, 0));" ";hexw$(deek(addr(test3d, 0, 0, 2)));" ";deek(addr(arr3d, 1, 1, 1));" ";

                              LDI                               0
                              STW                               _index0
                              LDWI                              0x7dd8
                              ADDW                              _index0
                              ADDW                              _index0
                              DEEK                              
                              STW                               0xe2
                              LDWI                              _page_0x09a0
                              CALL                              giga_vAC
_page_0x09a0                  LDW                               0xe2
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; index0=0 : print deek(addr(test1d, index0));" ";

                              LDI                               0
                              STW                               _index0
                              LDI                               0
                              STW                               _index1
                              LDW                               _index0
                              STW                               memIndex0
                              LDW                               _index1
                              STW                               memIndex1
                              LDWI                              0x7dcc
                              CALL                              convertArr2dAddr
                              DEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; index0=0 : index1=0 : print deek(addr(test2d, index0, index1));" ";

                              LDI                               0
                              STW                               _index0
                              LDI                               0
                              STW                               _index1
                              LDI                               2
                              STW                               _index2
                              LDW                               _index0
                              STW                               memIndex0
                              LDW                               _index1
                              STW                               memIndex1
                              LDW                               _index2
                              STW                               memIndex2
                              LDWI                              0x71b2
                              CALL                              convertArr3dAddr
                              DEEK                              
                              STW                               0xe2
                              LDWI                              _page_0x0aa0
                              CALL                              giga_vAC
_page_0x0aa0                  LDW                               0xe2
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; index0=0 : index1=0 : index2=2 : print deek(addr(test3d, index0, index1, index2));" ";

                              LDI                               1
                              STW                               _index0
                              LDI                               1
                              STW                               _index1
                              LDI                               1
                              STW                               _index2
                              LDW                               _index0
                              STW                               memIndex0
                              LDW                               _index1
                              STW                               memIndex1
                              LDW                               _index2
                              STW                               memIndex2
                              LDWI                              0x70c4
                              CALL                              convertArr3dAddr
                              DEEK                              
                              PrintAcInt16                      
                              NewLine                                                           ; index0=1 : index1=1 : index2=1 : print deek(addr(arr3d, index0, index1, index2))

                              LDWI                              28868
                              STW                               _aaa                            ; aaa = @arr3d

                              LDW                               _aaa
                              ADDI                              2
                              DEEK                              
                              STW                               _aaa                            ; aaa = deek(aaa + 2) ' arrays k pointers are always 2 bytes, so multiply your k index by 2

                              LDW                               _aaa
                              ADDI                              2
                              DEEK                              
                              STW                               _aaa                            ; aaa = deek(aaa + 2) ' arrays j pointers are always 2 bytes, so multiply your j index by 2

                              LDW                               _aaa
                              ADDI                              2
                              DEEK                              
                              STW                               0xe2
                              LDWI                              _page_0x0ba0
                              CALL                              giga_vAC
_page_0x0ba0                  LDW                               0xe2
                              PrintAcInt16                                                      ; print deek(aaa + 2); ' arrays i values are always 2 bytes,   so multiply your i index by 2

                              LDI                               0
                              STW                               _x
                              STW                               _y
                              STW                               _z                              ; x = 0 : y = x : z = y

                              LDI                               20
                              STW                               _x                              ; x = 20

                              LDW                               _x
                              STW                               mathX
                              LDI                               20
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              ADDI                              32
                              STW                               _blah                           ; blah = (53 - 12 - 9) + x*20

                              PrintString                       _str_0x7dfd
                              LDW                               _blah
                              PrintAcInt16                      
                              PrintString                       _str_0x7dfd                     ; print " ";blah;" ";

                              LDI                               10
                              STW                               _x                              ; x = 10

                              LDW                               _x
                              STW                               mathX
                              LDI                               2
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              STW                               mathX
                              STW                               0xe2
                              LDWI                              _page_0x0ca0
                              CALL                              giga_vAC
_page_0x0ca0                  LDW                               0xe2
                              LDWI                              -995
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              STW                               _blah                           ; blah = x*2*(50*exp(-1.232455)*sin(45)*cos(57.324786234) - 1000.342876324)

                              LDW                               _blah
                              PrintAcInt16                      
                              NewLine                                                           ; print blah

                              PrintInt16                        0x000c
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x0010
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x2000
                              PrintString                       _str_0x7dfd
                              STW                               0xe2
                              LDWI                              _page_0x0da0
                              CALL                              giga_vAC
_page_0x0da0                  LDW                               0xe2
                              PrintInt16                        0x0094
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x0005
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x000b
                              PrintString                       _str_0x7dfd
                              PrintInt16                        0x0004
                              PrintString                       _str_0x7dfd
                              STW                               0xe2
                              LDWI                              _page_0x0ea0
                              CALL                              giga_vAC
_page_0x0ea0                  LDW                               0xe2
                              PrintInt16                        0x0087
                              NewLine                                                           ; print pow(144, 0.5);" ";sqrt(256.0);" ";exp2(13);" ";exp(5);" ";log(148);" ";log2(2048);" ";log10(10000);" ";atan2(10.0, -10.0)

                              LDWI                              0x0920
                              LUP                               0x00
                              PrintAcHexByte                    
                              PrintString                       _str_0x7dfd
                              LDWI                              0x0920
                              LUP                               0x01
                              PrintAcHexByte                    
                              NewLine                                                           ; print hex$(lup(&h0920, 0));" ";hex$(lup(&h0920, 1))

                              LDI                               255
                              STW                               _kk                             ; kk = 255

_loop                         LD                                giga_serialRaw
                              STW                               _k                              ; k = get("SERIAL_RAW")

                              LDW                               _kk
                              SUBI                              255
                              JumpEQ                            _endif_0x09ec 1                 ; if kk &= 255

                              LDW                               _k
                              SUBI                              255
                              JumpNE                            _endif_0x09ec 0
                              STW                               0xe2
                              LDWI                              _page_0x0fa0
                              CALL                              giga_vAC
_page_0x0fa0                  LDW                               0xe2
                              LDW                               _k
                              STW                               numericLabel
                              LDI                               0
                              STW                               defaultLabel
                              GosubNumeric                                                      ; if k &<>255 then gosub k

_endif_0x09ec                 LDW                               _k
                              STW                               _kk                             ; kk = k

                              LDWI                              _loop
                              CALL                              giga_vAC                        ; goto loop

_49                           PUSH                              
                              PrintString                       _str_0x7da1
                              NewLine                           
                              Return                                                            ; print "1" : return

_50                           PUSH                              
                              PrintString                       _str_0x70c1
                              NewLine                           
                              Return                                                            ; print "2" : return

_51                           PUSH                              
                              PrintString                       _str_0x70be
                              NewLine                           
                              Return                                                            ; print "3" : return

_asmTest                      PUSH                                                              ; asm

                              LDW                               _i                              ; LDW _i
                              STW                               _i                              ; STW _i

                              Return                                                            ; return

_end_0x0a32                   BRA                               _end_0x0a32                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeStub                  EQU     0x70a0
convertArr2d                  EQU     0x6aa4
convertArr3d                  EQU     0x68bc
multiply16bit                 EQU     0x6acd
readIntVar                    EQU     0x6ead
readStrVar                    EQU     0x6df0
gosubNumericLabel             EQU     0x68cd
resetVideoFlags               EQU     0x70b2
resetVideoTable               EQU     0x67db
initClearFuncs                EQU     0x68a5
clearVertBlinds               EQU     0x6ec5
clearCursorRow                EQU     0x66b6
printInit                     EQU     0x67c5
printText                     EQU     0x6dd7
printDigit                    EQU     0x67a3
printInt16                    EQU     0x6cae
printChar                     EQU     0x65a7
printHexByte                  EQU     0x69ca
printHexWord                  EQU     0x6dbe
newLineScroll                 EQU     0x6ba4
stringCopy                    EQU     0x6ea0
convertEqOpAddr               EQU     0x00d0
convertNeOpAddr               EQU     0x00d2
convertLeOpAddr               EQU     0x00d4
convertGeOpAddr               EQU     0x00d6
convertLtOpAddr               EQU     0x00d8
convertGtOpAddr               EQU     0x00da
convertArr2dAddr              EQU     0x00dc
convertArr3dAddr              EQU     0x00de
realTimeStubAddr              EQU     0x00e0


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


convertArr2d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    STW     memAddr
                    RET


convertArr3d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    DEEK
                    ADDW    memIndex2
                    ADDW    memIndex2
                    STW     memAddr
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

multiply16_exit     PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSum
                    RET


readIntVar          LDWI    _dataIndex_
                    STW     memAddr
                    DEEK
                    
readIV_loop         STW     memIndex0
                    ADDI    1
                    DOKE    memAddr
                    LDWI    _data_
                    ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    BEQ     readIV_loop                     ; reached end of list, so restart
                    RET


readStrVar          PUSH
                    LDWI    readIntVar
                    CALL    giga_vAC
                    STW     strSrcAddr
                    LDWI    stringCopy
                    CALL    giga_vAC
                    POP
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        LDW     lutIndex
                    DEEK
                    BNE     gosubNL_cont                    ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                    ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    INC     lutIndex
                    INC     lutIndex
                    BRA     gosubNL_loop                    ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                        ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    

resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET




                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeStubAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    
                    LDWI    resetVideoFlags
                    CALL    giga_vAC                    
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeStubAddr
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


                    ; print hex byte in textHex
printHexByte        PUSH
                    LDWI    SYS_LSRW4_50                    ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LD      textHex
                    SYS     50
                    SUBI    10
                    BLT     printH_skip0
                    ADDI    7
printH_skip0        ADDI    0x3A
                    ST      textChr
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    LD      textHex
                    ANDI    0x0F
                    SUBI    10
                    BLT     printH_skip1
                    ADDI    7
printH_skip1        ADDI    0x3A
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; print hex word in textHex
printHexWord        PUSH
                    LD      textHex
                    ST      textBak
                    LD      textHex + 1
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    LD      textBak
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    POP
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
                    CALL    realTimeStubAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
strChr              EQU     register0
strHex              EQU     register1
strCmpRes           EQU     register2
strLength           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strTmpAddr          EQU     register10
strLutAddr          EQU     register11
strBakAddr          EQU     register12
strInteger          EQU     register0
strDigit            EQU     register1
strMult             EQU     register3


                    ; copy one string to another
stringCopy          LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    BNE     stringCopy                          ; copy char until terminating char
                    RET

