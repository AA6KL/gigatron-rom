_startAddress_      EQU                     0x0200

; Internal variables
serialRawPrev       EQU                     0x0081
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
miscFlags           EQU                     register0 + 0x28
fontLutId           EQU                     0x00e0

; Internal buffers
textWorkArea        EQU                     0x7fa0

; Includes
%includePath        "../runtime"
%include            gigatron.i
%include            macros.i

; Labels
_entryPoint_        EQU                     0x0200
_page_0x0300        EQU                     0x0300
_page_0x0400        EQU                     0x0400
_page_0x0500        EQU                     0x0500
_end_0x04f9         EQU                     0x0513

; Variables
_aa_array           EQU                     0x4ed6
_aa_array           DW                      0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_cc                 EQU                     0x0030

; Strings
_ch$                EQU                     0x4da0
_ch$                DB                      0 '' 0
_hb$                EQU                     0x4ca0
_hb$                DB                      0 '' 0
_hw$                EQU                     0x4ba0
_hw$                DB                      0 '' 0
_str_0x7da4         EQU                     0x7da4
_str_0x7da4         DB                      4 'yes ' 0
_str_0x7da0         EQU                     0x7da0
_str_0x7da0         DB                      2 'no' 0
_str_0x4ec4         EQU                     0x4ec4
_str_0x4ec4         DB                      16 'hello test world' 0
_c$                 EQU                     0x4aa0
_c$                 DB                      0 '' 0
_d$                 EQU                     0x49a0
_d$                 DB                      0 '' 0
_e$                 EQU                     0x48a0
_e$                 DB                      0 '' 0
_f$                 EQU                     0x47a0
_f$                 DB                      0 '' 0
_g$                 EQU                     0x46a0
_g$                 DB                      0 '' 0
_str_0x7ea0         EQU                     0x7ea0
_str_0x7ea0         DB                      1 ' ' 0
_str_0x7ca5         EQU                     0x7ca5
_str_0x7ca5         DB                      3 'dog' 0
_str_0x7ca0         EQU                     0x7ca0
_str_0x7ca0         DB                      3 'cat' 0
_str_0x7ba6         EQU                     0x7ba6
_str_0x7ba6         DB                      2 'gc' 0

; Define Bytes

; Define Words

; Define Images

; Define Sprites
; Define Fonts
def_char_0x7ed5     EQU                     0x7ed5
def_char_0x7ed5     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x7eaa     EQU                     0x7eaa
def_char_0x7eaa     DB                      8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 249 
def_char_0x7dd5     EQU                     0x7dd5
def_char_0x7dd5     DB                      8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x7daa     EQU                     0x7daa
def_char_0x7daa     DB                      8 0 8 0 8 8 8 0 8 0 8 8 0 0 0 0 0 8 8 0 8 0 8 8 0 0 0 0 0 8 8 0 8 0 8 8 8 0 8 0 8 8 249 
def_char_0x7cd5     EQU                     0x7cd5
def_char_0x7cd5     DB                      8 8 0 8 8 8 8 0 0 0 0 8 0 8 0 8 8 8 8 0 0 0 8 8 8 8 0 8 0 8 0 0 0 0 8 8 8 8 0 8 8 8 249 
def_char_0x7caa     EQU                     0x7caa
def_char_0x7caa     DB                      0 0 8 8 0 8 0 0 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 0 0 8 0 8 8 0 0 8 249 
def_char_0x7bd5     EQU                     0x7bd5
def_char_0x7bd5     DB                      8 0 8 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 8 0 8 8 8 8 0 8 0 8 0 8 0 8 8 0 8 8 8 0 0 8 0 8 249 
def_char_0x7baa     EQU                     0x7baa
def_char_0x7baa     DB                      8 8 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x7ad5     EQU                     0x7ad5
def_char_0x7ad5     DB                      8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 249 
def_char_0x7aaa     EQU                     0x7aaa
def_char_0x7aaa     DB                      8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 249 
def_char_0x79d5     EQU                     0x79d5
def_char_0x79d5     DB                      8 8 0 8 8 8 0 8 0 8 0 8 8 0 0 0 8 8 8 8 0 8 8 8 8 0 0 0 8 8 0 8 0 8 0 8 8 8 0 8 8 8 249 
def_char_0x79aa     EQU                     0x79aa
def_char_0x79aa     DB                      8 8 8 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 0 0 0 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 8 8 8 249 
def_char_0x78d5     EQU                     0x78d5
def_char_0x78d5     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 249 
def_char_0x78aa     EQU                     0x78aa
def_char_0x78aa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 0 0 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x77d5     EQU                     0x77d5
def_char_0x77d5     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 8 8 8 8 0 0 8 8 8 249 
def_char_0x77aa     EQU                     0x77aa
def_char_0x77aa     DB                      8 8 8 8 8 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x76d5     EQU                     0x76d5
def_char_0x76d5     DB                      8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x76aa     EQU                     0x76aa
def_char_0x76aa     DB                      8 8 0 8 8 8 8 0 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 0 0 8 8 249 
def_char_0x75d5     EQU                     0x75d5
def_char_0x75d5     DB                      8 0 0 0 8 8 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 0 0 0 0 8 249 
def_char_0x75aa     EQU                     0x75aa
def_char_0x75aa     DB                      8 0 0 0 8 8 0 8 8 8 0 8 8 8 8 8 0 8 8 8 0 0 8 8 8 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x74d5     EQU                     0x74d5
def_char_0x74d5     DB                      8 8 0 0 8 8 8 0 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 0 0 0 0 8 8 8 8 0 8 8 8 8 8 0 8 8 249 
def_char_0x74aa     EQU                     0x74aa
def_char_0x74aa     DB                      0 0 0 0 0 8 0 8 8 8 8 8 0 0 0 0 8 8 8 8 8 8 0 8 8 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x73d5     EQU                     0x73d5
def_char_0x73d5     DB                      8 0 0 0 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x73aa     EQU                     0x73aa
def_char_0x73aa     DB                      0 0 0 0 0 8 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 249 
def_char_0x72d5     EQU                     0x72d5
def_char_0x72d5     DB                      8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x72aa     EQU                     0x72aa
def_char_0x72aa     DB                      8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 0 0 8 8 8 249 
def_char_0x71d5     EQU                     0x71d5
def_char_0x71d5     DB                      8 8 8 8 8 8 8 0 0 8 8 8 8 0 0 8 8 8 8 8 8 8 8 8 8 0 0 8 8 8 8 0 0 8 8 8 8 8 8 8 8 8 249 
def_char_0x71aa     EQU                     0x71aa
def_char_0x71aa     DB                      8 8 8 8 8 8 8 0 0 8 8 8 8 0 0 8 8 8 8 8 8 8 8 8 8 0 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 249 
def_char_0x70d5     EQU                     0x70d5
def_char_0x70d5     DB                      8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 249 
def_char_0x70aa     EQU                     0x70aa
def_char_0x70aa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 0 0 8 8 8 8 8 8 8 0 0 0 0 0 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x6fd5     EQU                     0x6fd5
def_char_0x6fd5     DB                      0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 249 
def_char_0x6faa     EQU                     0x6faa
def_char_0x6faa     DB                      8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 249 
def_char_0x6ed5     EQU                     0x6ed5
def_char_0x6ed5     DB                      8 0 0 0 8 8 0 8 8 8 0 8 8 8 8 8 0 8 8 0 8 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 8 0 0 0 8 8 249 
def_char_0x6eaa     EQU                     0x6eaa
def_char_0x6eaa     DB                      8 8 0 8 8 8 8 0 8 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 0 0 0 0 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x6dd5     EQU                     0x6dd5
def_char_0x6dd5     DB                      0 0 0 0 8 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 0 0 8 8 8 0 8 8 0 8 8 0 8 8 0 8 0 0 0 0 8 8 249 
def_char_0x6daa     EQU                     0x6daa
def_char_0x6daa     DB                      8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x6cd5     EQU                     0x6cd5
def_char_0x6cd5     DB                      0 0 0 0 8 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 8 0 0 0 0 8 8 249 
def_char_0x6caa     EQU                     0x6caa
def_char_0x6caa     DB                      0 0 0 0 0 8 0 8 8 8 8 8 0 8 8 8 8 8 0 0 0 0 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 0 0 0 0 8 249 
def_char_0x6bd5     EQU                     0x6bd5
def_char_0x6bd5     DB                      0 0 0 0 0 8 0 8 8 8 8 8 0 8 8 8 8 8 0 0 0 0 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 249 
def_char_0x6baa     EQU                     0x6baa
def_char_0x6baa     DB                      8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 8 8 0 8 0 0 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x6ad5     EQU                     0x6ad5
def_char_0x6ad5     DB                      0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 0 0 0 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x6aaa     EQU                     0x6aaa
def_char_0x6aaa     DB                      8 0 0 0 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 0 0 8 8 249 
def_char_0x69d5     EQU                     0x69d5
def_char_0x69d5     DB                      8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x69aa     EQU                     0x69aa
def_char_0x69aa     DB                      0 8 8 8 0 8 0 8 8 0 8 8 0 8 0 8 8 8 0 0 8 8 8 8 0 8 0 8 8 8 0 8 8 0 8 8 0 8 8 8 0 8 249 
def_char_0x68d5     EQU                     0x68d5
def_char_0x68d5     DB                      0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 0 0 0 0 8 249 
def_char_0x68aa     EQU                     0x68aa
def_char_0x68aa     DB                      0 8 8 8 0 8 0 0 8 0 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x67d5     EQU                     0x67d5
def_char_0x67d5     DB                      0 8 8 8 0 8 0 0 8 8 0 8 0 8 0 8 0 8 0 8 8 0 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x67aa     EQU                     0x67aa
def_char_0x67aa     DB                      0 0 0 0 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 0 0 0 0 8 249 
def_char_0x66d5     EQU                     0x66d5
def_char_0x66d5     DB                      0 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 0 0 0 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 249 
def_char_0x66aa     EQU                     0x66aa
def_char_0x66aa     DB                      8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 0 8 0 8 0 8 8 0 8 8 8 0 0 8 0 8 249 
def_char_0x65d5     EQU                     0x65d5
def_char_0x65d5     DB                      0 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 0 0 0 8 8 0 8 0 8 8 8 0 8 8 0 8 8 0 8 8 8 0 8 249 
def_char_0x65aa     EQU                     0x65aa
def_char_0x65aa     DB                      8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 8 8 8 0 0 0 8 8 8 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x64d5     EQU                     0x64d5
def_char_0x64d5     DB                      0 0 0 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 249 
def_char_0x64aa     EQU                     0x64aa
def_char_0x64aa     DB                      0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x63d5     EQU                     0x63d5
def_char_0x63d5     DB                      0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 8 0 8 8 8 8 0 8 8 8 249 
def_char_0x63aa     EQU                     0x63aa
def_char_0x63aa     DB                      0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 8 0 8 0 8 8 249 
def_char_0x62d5     EQU                     0x62d5
def_char_0x62d5     DB                      0 8 8 8 0 8 0 8 8 8 0 8 8 0 8 0 8 8 8 8 0 8 8 8 8 0 8 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x62aa     EQU                     0x62aa
def_char_0x62aa     DB                      0 8 8 8 0 8 0 8 8 8 0 8 8 0 8 0 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 249 
def_char_0x61d5     EQU                     0x61d5
def_char_0x61d5     DB                      0 0 0 0 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 0 0 0 0 0 8 249 
def_char_0x61aa     EQU                     0x61aa
def_char_0x61aa     DB                      8 0 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 0 0 8 8 249 
def_char_0x60d5     EQU                     0x60d5
def_char_0x60d5     DB                      8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 8 249 
def_char_0x60aa     EQU                     0x60aa
def_char_0x60aa     DB                      8 0 0 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 0 0 0 8 8 249 
def_char_0x5fd5     EQU                     0x5fd5
def_char_0x5fd5     DB                      8 8 0 8 8 8 8 0 8 0 8 8 0 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x5faa     EQU                     0x5faa
def_char_0x5faa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 0 0 0 249 
def_char_0x5ed5     EQU                     0x5ed5
def_char_0x5ed5     DB                      8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x5eaa     EQU                     0x5eaa
def_char_0x5eaa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 8 8 8 0 8 8 8 0 0 0 8 8 0 8 8 0 8 8 8 0 0 8 0 8 249 
def_char_0x5dd5     EQU                     0x5dd5
def_char_0x5dd5     DB                      0 8 8 8 8 8 0 8 8 8 8 8 0 8 0 0 8 8 0 0 8 8 0 8 0 8 8 8 0 8 0 0 8 8 0 8 0 8 0 0 8 8 249 
def_char_0x5daa     EQU                     0x5daa
def_char_0x5daa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 8 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x5cd5     EQU                     0x5cd5
def_char_0x5cd5     DB                      8 8 8 8 0 8 8 8 8 8 0 8 8 0 0 8 0 8 0 8 8 0 0 8 0 8 8 8 0 8 0 8 8 0 0 8 8 0 0 8 0 8 249 
def_char_0x5caa     EQU                     0x5caa
def_char_0x5caa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 0 8 8 8 0 8 0 0 0 0 0 8 0 8 8 8 8 8 8 0 0 0 8 8 249 
def_char_0x5bd5     EQU                     0x5bd5
def_char_0x5bd5     DB                      8 8 8 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 0 0 0 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 249 
def_char_0x5baa     EQU                     0x5baa
def_char_0x5baa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 0 8 8 8 0 8 8 0 0 0 0 8 8 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x5ad5     EQU                     0x5ad5
def_char_0x5ad5     DB                      0 8 8 8 8 8 0 8 8 8 8 8 0 8 0 0 8 8 0 0 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x5aaa     EQU                     0x5aaa
def_char_0x5aaa     DB                      8 8 0 8 8 8 8 8 8 8 8 8 8 0 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 0 0 8 8 249 
def_char_0x59d5     EQU                     0x59d5
def_char_0x59d5     DB                      8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 0 8 8 0 8 8 8 0 0 8 8 8 249 
def_char_0x59aa     EQU                     0x59aa
def_char_0x59aa     DB                      0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 0 8 0 8 8 0 8 8 0 8 0 8 8 8 0 0 8 0 8 8 0 8 8 8 0 8 249 
def_char_0x58d5     EQU                     0x58d5
def_char_0x58d5     DB                      8 0 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 0 0 8 8 249 
def_char_0x58aa     EQU                     0x58aa
def_char_0x58aa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 0 0 8 0 8 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 249 
def_char_0x57d5     EQU                     0x57d5
def_char_0x57d5     DB                      8 8 8 8 8 8 8 8 8 8 8 8 0 8 0 0 8 8 0 0 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 249 
def_char_0x57aa     EQU                     0x57aa
def_char_0x57aa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x56d5     EQU                     0x56d5
def_char_0x56d5     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 8 0 8 8 0 8 8 0 8 8 0 8 8 0 0 0 8 8 8 0 8 8 8 8 249 
def_char_0x56aa     EQU                     0x56aa
def_char_0x56aa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 8 8 0 8 8 0 8 8 0 8 8 0 8 8 8 0 0 0 8 8 8 8 8 0 8 249 
def_char_0x55d5     EQU                     0x55d5
def_char_0x55d5     DB                      8 8 8 8 8 8 8 8 8 8 8 8 0 8 0 0 8 8 0 0 8 8 0 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 249 
def_char_0x55aa     EQU                     0x55aa
def_char_0x55aa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 0 8 0 8 8 8 8 8 8 0 0 0 8 8 8 8 8 8 0 8 0 0 0 0 8 8 249 
def_char_0x54d5     EQU                     0x54d5
def_char_0x54d5     DB                      8 8 0 8 8 8 8 8 0 8 8 8 0 0 0 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 0 0 8 249 
def_char_0x54aa     EQU                     0x54aa
def_char_0x54aa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 0 0 8 8 0 0 8 0 8 249 
def_char_0x53d5     EQU                     0x53d5
def_char_0x53d5     DB                      8 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 0 8 0 8 8 8 0 8 0 8 8 8 0 8 8 0 8 0 8 8 8 8 0 8 8 8 249 
def_char_0x53aa     EQU                     0x53aa
def_char_0x53aa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 0 8 8 0 8 0 8 8 249 
def_char_0x52d5     EQU                     0x52d5
def_char_0x52d5     DB                      8 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 0 8 8 0 8 0 8 8 8 8 0 8 8 8 8 0 8 0 8 8 0 8 8 8 0 8 249 
def_char_0x52aa     EQU                     0x52aa
def_char_0x52aa     DB                      8 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 0 8 0 8 8 0 0 8 8 0 0 8 0 8 8 8 8 8 0 8 8 0 0 0 8 8 249 
def_char_0x51d5     EQU                     0x51d5
def_char_0x51d5     DB                      8 8 8 8 8 8 8 8 8 8 8 8 0 0 0 0 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 8 8 8 8 0 0 0 0 0 8 249 
def_char_0x51aa     EQU                     0x51aa
def_char_0x51aa     DB                      8 8 8 0 0 8 8 8 0 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 0 0 8 249 
def_char_0x50d5     EQU                     0x50d5
def_char_0x50d5     DB                      8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 249 
def_char_0x50aa     EQU                     0x50aa
def_char_0x50aa     DB                      0 0 8 8 8 8 8 8 0 8 8 8 8 8 0 8 8 8 8 8 8 0 8 8 8 8 0 8 8 8 8 8 0 8 8 8 0 0 8 8 8 8 249 
def_char_0x4fd5     EQU                     0x4fd5
def_char_0x4fd5     DB                      8 8 8 8 8 8 8 8 8 8 8 8 8 0 8 8 8 8 0 8 0 8 0 8 8 8 8 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 249 
def_char_0x4faa     EQU                     0x4faa
def_char_0x4faa     DB                      0 8 0 8 0 8 8 0 8 0 8 8 0 8 0 8 0 8 8 0 8 0 8 8 0 8 0 8 0 8 8 0 8 0 8 8 0 8 0 8 0 8 249 
def_baseline_0x7ea3 EQU                     0x7ea3
def_baseline_0x7ea3 DB                      0x08 0x08 0x08 0x08 0x08 0x08 255

; Lookup Tables
_concat_0x4eb6      EQU                     0x4eb6
_concat_0x4eb6      DW                      0x4ec4 0x4ec4 0x4ec4 0x4ec4 0x4ec4 0x4ec4 0x0000 
_fontLut_0x063c     EQU                     0x063c
_fontLut_0x063c     DW                      0x0000 0x7ea3 0x7ed5 0x7eaa 0x7dd5 0x7daa 0x7cd5 0x7caa 0x7bd5 0x7baa 0x7ad5 0x7aaa 0x79d5 0x79aa 0x78d5 0x78aa 0x77d5 0x77aa 0x76d5 0x76aa 0x75d5 0x75aa 0x74d5 0x74aa 0x73d5 0x73aa 0x72d5 0x72aa 0x71d5 0x71aa 0x70d5 0x70aa 0x6fd5 0x6faa 0x6ed5 0x6eaa 0x6dd5 0x6daa 0x6cd5 0x6caa 0x6bd5 0x6baa 0x6ad5 0x6aaa 0x69d5 0x69aa 0x68d5 0x68aa 0x67d5 0x67aa 0x66d5 0x66aa 0x65d5 0x65aa 0x64d5 0x64aa 0x63d5 0x63aa 0x62d5 0x62aa 0x61d5 0x61aa 0x60d5 0x60aa 0x5fd5 0x5faa 0x5ed5 0x5eaa 0x5dd5 0x5daa 0x5cd5 0x5caa 0x5bd5 0x5baa 0x5ad5 0x5aaa 0x59d5 0x59aa 0x58d5 0x58aa 0x57d5 0x57aa 0x56d5 0x56aa 0x55d5 0x55aa 0x54d5 0x54aa 0x53d5 0x53aa 0x52d5 0x52aa 0x51d5 0x51aa 0x50d5 0x50aa 0x4fd5 0x4faa 
_fontsLut_          EQU                     0x7ba4
_fontsLut_          DW                      0x063c 

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    LDI                     8
                    STW                     fgbgColour                      ; set FGBGCOLOUR, fgBgColour

                    ClearVertBlinds                                         ; cls

                    LDI                     120
                    STW                     strChr
                    LDWI                    0x4da0
                    STW                     strDstAddr
                    StringChr                                               ; ch$ = chr$(a)

                    LDI                     0x78
                    STW                     strChr
                    LDWI                    0x4ca0
                    STW                     strDstAddr
                    StringHex                                               ; hb$ = hex$(a)

                    LDWI                    0xaa77
                    STW                     strHex
                    LDWI                    0x4ba0
                    STW                     strDstAddr
                    StringHexw                                              ; hw$ = hexw$(bb)

                    LDI                     5
                    STW                     _cc                             ; cc = 5

                    LDW                     _cc
                    STW                     strLength
                    LDWI                    0x4ec4
                    STW                     strSrcAddr
                    LDWI                    0x4aa0
                    STW                     strDstAddr
                    StringLeft                                              ; c$=left$(b$, cc)

                    LDI                     5
                    STW                     strLength
                    LDWI                    0x4ec4
                    STW                     strSrcAddr
                    LDWI                    0x49a0
                    STW                     strDstAddr
                    StringRight                                             ; d$ = right$ (b$,5)

                    LDW                     _cc
                    ADDI                    1
                    STW                     0xc0
                    LDW                     _cc
                    SUBI                    1
                    STW                     0xc2
                    LDW                     0xc0
                    STW                     strOffset
                    LDW                     0xc2
                    STW                     strLength
                    LDWI                    0x4ec4
                    STW                     strSrcAddr
                    LDWI                    0x48a0
                    STW                     strDstAddr
                    StringMid                                               ; e$=mid$(b$, cc+1, cc-1)

                    LDWI                    0x4eb6
                    STW                     strLutAddr
                    LDWI                    0x7fa0
                    STW                     strDstAddr
                    StringConcat            
                    LDWI                    0x7fa0
                    STW                     strSrcAddr
                    LDWI                    0x47a0
                    STW                     strDstAddr
                    StringCopy                                              ; f$ = b$ + b$ + b$ + b$ + b$ + b$

                    LDWI                    0x4ec4
                    STW                     strSrcAddr
                    LDWI                    0x46a0
                    STW                     strDstAddr
                    StringCopy                                              ; g$ = b$

                    PrintString             _str_0x7da4
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    PrintString             _str_0x7ea0
                    PrintString             _str_0x4ec4
                    PrintString             _str_0x7ea0
                    LDWI                    0x4ed6
                    DEEK                    
                    PrintAcInt16            
                    NewLine                                                 ; print a$;" ";b$;" ";aa(0)

                    PrintString             _c$
                    PrintString             _str_0x7ea0
                    PrintString             _d$
                    PrintString             _str_0x7ea0
                    PrintString             _e$
                    NewLine                                                 ; print c$;" ";d$;" ";e$

                    LDWI                    0x7ca5
                    PrintAcString           
                    PrintString             _str_0x7ea0
                    LDW                     _cc
                    STW                     textLen
                    LDWI                    0x4ec4
                    PrintAcLeft             
                    NewLine                                                 ; print left$("dogcat", 3);" ";left$(b$, cc)

                    LDWI                    0x7ca0
                    PrintAcString           
                    PrintString             _str_0x7ea0
                    LDI                     5
                    STW                     textLen
                    LDWI                    0x4ec4
                    PrintAcRight            
                    NewLine                                                 ; print right$("dogcat", 3);" ";right$(b$, 5)

                    LDWI                    0x7ba6
                    PrintAcString           
                    PrintString             _str_0x7ea0
                    LDW                     _cc
                    ADDI                    1
                    STW                     0xc0
                    LDW                     _cc
                    SUBI                    1
                    STW                     0xc2
                    LDW                     0xc0
                    STW                     textOfs
                    LDW                     0xc2
                    STW                     textLen
                    LDWI                    0x4ec4
                    PrintAcMid              
                    NewLine                                                 ; print mid$("dogcat", 2, 2);" ";mid$(b$, cc+1, cc-1)

                    STW                     0xde
                    LDWI                    _page_0x0400
                    CALL                    giga_vAC
_page_0x0400        LDW                     0xde
                    PrintString             _c$
                    PrintString             _str_0x7ea0
                    PrintString             _d$
                    PrintString             _str_0x7ea0
                    PrintString             _e$
                    NewLine                                                 ; print c$;" ";d$;" ";e$

                    PrintString             _f$
                    PrintString             _str_0x7ea0
                    LDWI                    0x47a0
                    PEEK                    
                    PrintAcInt16            
                    NewLine                                                 ; print f$;" ";len(f$)

                    PrintString             _g$
                    NewLine                                                 ; print g$

                    PrintString             _ch$
                    PrintString             _str_0x7ea0
                    PrintString             _hb$
                    PrintString             _str_0x7ea0
                    PrintString             _hw$
                    NewLine                                                 ; print ch$;" ";hb$;" ";hw$

                    LDI                     65
                    PrintAcChar             
                    PrintString             _str_0x7ea0
                    LDI                     0x0f
                    PrintAcHexByte          
                    PrintString             _str_0x7ea0
                    LDWI                    0xaa77
                    PrintAcHexWord          
                    PrintString             _str_0x7ea0
                    LDWI                    0x7ca5
                    PrintAcString           
                    PrintString             _str_0x7ea0
                    LDI                     5
                    STW                     0xde
                    LDWI                    _page_0x0500
                    CALL                    giga_vAC
_page_0x0500        LDW                     0xde
                    STW                     textLen
                    LDWI                    0x4ec4
                    PrintAcLeft             
                    NewLine                                                 ; print chr$(65);" ";hex$(15);" ";hexw$(bb);" ";left$("dogcat", 3);" ";left$(b$, 5)

_end_0x04f9         BRA                     _end_0x04f9                     ; end



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0x7aa1
convertEqOp         EQU     0x79a1
convertNeOp         EQU     0x78a1
convertLeOp         EQU     0x77a1
convertGeOp         EQU     0x76a1
convertLtOp         EQU     0x75a1
convertGtOp         EQU     0x74a1
resetVideoTable     EQU     0x3ce0
initClearFuncs      EQU     0x45dd
clearVertBlinds     EQU     0x45a3
clearCursorRow      EQU     0x3bb6
printInit           EQU     0x41a4
printText           EQU     0x43a5
printLeft           EQU     0x42a5
printRight          EQU     0x3ed4
printMid            EQU     0x3eac
printDigit          EQU     0x3cbe
printInt16          EQU     0x40ae
printChr            EQU     0x41b6
printChar           EQU     0x3aa6
printHexByte        EQU     0x3dca
printHexWord        EQU     0x3db1
newLineScroll       EQU     0x3fa2
stringChr           EQU     0x4ea5
stringHex           EQU     0x44ed
stringHexw          EQU     0x44ce
createHex           EQU     0x39d7
stringCopy          EQU     0x43be
stringAdd           EQU     0x38c3
stringConcat        EQU     0x44a6
stringMid           EQU     0x41c3
stringLeft          EQU     0x43cb
stringRight         EQU     0x42c7
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI routine
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDI     0x02                                ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
fontId              EQU     register9
fontAddrs           EQU     register10
fontBase            EQU     register11
fontPosXY           EQU     register15

    
printInit           LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      fontPosXY + 1
                    LD      cursorXY
                    ST      fontPosXY                       ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints left sub string pointed to by the accumulator
printLeft           PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LD      textLen
                    BEQ     printL_exit
    
printL_char         ST      textLen
                    INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC

                    LD      textLen
                    SUBI    1
                    BNE     printL_char
printL_exit         POP
                    RET


                    ; prints right sub string pointed to by the accumulator
printRight          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDW     textStr
                    PEEK                                    ; text length
                    ADDW    textStr
                    SUBW    textLen
                    STW     textStr                         ; text offset
                    LD      textLen
                    BEQ     printR_exit
    
printR_char         ST      textLen
                    INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC

                    LD      textLen
                    SUBI    1
                    BNE     printR_char
printR_exit         POP
                    RET


                    ; prints sub string pointed to by the accumulator
printMid            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDW     textStr
                    ADDW    textOfs
                    STW     textStr                         ; textStr += textOfs
                    LD      textLen
                    BEQ     printM_exit
    
printM_char         ST      textLen
                    INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC

                    LD      textLen
                    SUBI    1
                    BNE     printM_char
printM_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    32
                    BLT     printCF_exit
                    STW     textChr                         ; char-32                    

                    LDWI    _fontsLut_                      ; fonts table
                    ADDW    fontLutId
                    ADDW    fontLutId
                    DEEK
                    STW     fontAddrs                       ; get font address table
                    INC     fontAddrs
                    INC     fontAddrs
                    DEEK                                    ; get font mapping table
                    BEQ     printCF_noMap                   ; no mapping table means font contains all chars 32 -> 127 in the correct order
                    ADDW    textChr
                    PEEK
                    STW     textChr                         ; get mapped char
                    
printCF_noMap       LDW     fontAddrs
                    DEEK
                    STW     fontBase                        ; baseline address, shared by all chars in a font
                    INC     fontAddrs
                    INC     fontAddrs
                    LDW     textChr
                    LSLW
                    ADDW    fontAddrs
                    DEEK                                    ; get char address
                    STW     giga_sysArg0
                    LDW     fontPosXY                       ; XY pos generated in printInit
                    SYS     64                              ; draw char
                    STW     fontPosXY
                    
                    LDW     fontBase
                    STW     giga_sysArg0
                    LDWI    0x0F00
                    ADDW    cursorXY
                    SYS     64                              ; draw baseline for char
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printCF_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printCF_pop         POP

printCF_exit        RET


                    ; print hex byte in textHex
printHexByte        PUSH
                    LDWI    SYS_LSRW4_50                    ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LD      textHex
                    SYS     50
                    SUBI    10
                    BLT     printH_skip0
                    ADDI    7
printH_skip0        ADDI    0x3A
                    ST      textChr
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    LD      textHex
                    ANDI    0x0F
                    SUBI    10
                    BLT     printH_skip1
                    ADDI    7
printH_skip1        ADDI    0x3A
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; print hex word in textHex
printHexWord        PUSH
                    LD      textHex
                    ST      textBak
                    LD      textHex + 1
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    LD      textBak
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    POP
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     8

clearCR_loopy       ST      clearLoop
                    CALL    realTimeProcAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      fontPosXY
                    LDI     0x01
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
strChr              EQU     register0
strHex              EQU     register1
strLength           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strTmpAddr          EQU     register10
strLutAddr          EQU     register11
strBakAddr          EQU     register12


                    ; create a char string, (parameter in strChr)
stringChr           LDI     1
                    POKE    strDstAddr                          ; set destination buffer length                    
                    INC     strDstAddr
                    LD      strChr
                    POKE    strDstAddr                          ; copy char
                    INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET



                    ; create a hex byte string, (parameter in strChr)
stringHex           PUSH
                    LDI     2
                    POKE    strDstAddr                          ; set destination buffer length                    
                    INC     strDstAddr
                    LDWI    createHex
                    CALL    giga_vAC
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    POP
                    RET


                    ; create a hex word string, (parameter in strHex)
stringHexw          PUSH
                    LDI     4
                    POKE    strDstAddr                          ; set destination buffer length                    
                    INC     strDstAddr
                    LD      strHex + 1
                    ST      strChr
                    LDWI    createHex
                    CALL    giga_vAC
                    LD      strHex
                    ST      strChr
                    LDWI    createHex
                    CALL    giga_vAC
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    POP
                    RET


                    ; updates a hex byte
createHex           LDWI    SYS_LSRW4_50                        ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LD      strChr
                    SYS     50
                    SUBI    10
                    BLT     createH_skip0
                    ADDI    7

createH_skip0       ADDI    0x3A
                    POKE    strDstAddr                          ; save first char
                    INC     strDstAddr
                    LD      strChr
                    ANDI    0x0F
                    SUBI    10
                    BLT     createH_skip1
                    ADDI    7
                    
createH_skip1       ADDI    0x3A                    
                    POKE    strDstAddr                          ; save second char
                    INC     strDstAddr
                    RET


                    ; copy one string to another
stringCopy          LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    BNE     stringCopy                          ; copy char until terminating char
                    RET



                    ; adds two strings together
stringAdd           LDW     strDstAddr
                    STW     strTmpAddr
                    INC     strSrcAddr
                    INC     strDstAddr                          ; skip lengths
                    LDI     0
                    STW     strLength
                    
stringA_copy0       LDW     strSrcAddr
                    PEEK
                    BEQ     stringA_copy1
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    INC     strLength
                    BRA     stringA_copy0
                    
stringA_copy1       LDW     strLength
                    SUBI    94
                    BGE     stringA_exit                        ; maximum destination length reached
                    INC     strSrcAddr2                         ; skips length first time
                    LDW     strSrcAddr2
                    PEEK
                    BEQ     stringA_exit                        ; copy char until terminating char
                    POKE    strDstAddr                          ; copy char
                    INC     strDstAddr
                    INC     strLength
                    BRA     stringA_copy1

stringA_exit        LDW     strLength
                    POKE    strTmpAddr                          ; save concatenated string length
                    LDI     0
                    POKE    strDstAddr                          ; terminating zero
                    RET


                    ; concatenates multiple strings together
stringConcat        PUSH
                    LDW     strLutAddr
                    DEEK
                    BEQ     stringC_exit
                    STW     strSrcAddr
                    LDW     strDstAddr
                    STW     strBakAddr
                    
stringC_loop        INC     strLutAddr
                    INC     strLutAddr
                    LDW     strLutAddr
                    DEEK
                    BEQ     stringC_exit
                    STW     strSrcAddr2
                    LDWI    stringAdd
                    CALL    giga_vAC
                    LDW     strBakAddr
                    STW     strDstAddr
                    STW     strSrcAddr
                    BRA     stringC_loop
                    
stringC_exit        POP
                    RET


                    ; copies length sub string from source offset to destination string
stringMid           LD      strLength
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringM_exit                        ; exit if right length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strOffset                           
                    SUBW    strLength
                    BGE     stringM_skip                        ; length + offset <= srcLength
                    LD      strSrcLen
                    SUBW    strOffset
                    STW     strLength
                    POKE    strDstAddr                          ; new destination length
                    
stringM_skip        LDW     strSrcAddr
                    ADDW    strOffset
                    STW     strSrcAddr                          ; copy from (source address + (source length - right length)) to destination address
                    ADDW    strLength
                    STW     strFinish                           ; end source address

stringM_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringM_loop                        ; until finished
                    
stringM_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET


                    ; copies sub string from left hand side of source string to destination string
stringLeft          LD      strLength
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringL_exit                        ; exit if left length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strLength
                    BGE     stringL_skip                        ; is left length <= source length
                    LD      strSrcLen
                    STW     strLength
                    POKE    strDstAddr                          ; new destination length
                    
stringL_skip        LDW     strSrcAddr
                    ADDW    strLength
                    STW     strFinish                           ; end source address
                    
stringL_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringL_loop                        ; until finished
                    
stringL_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET


                    ; copies sub string from right hand side of source string to destination string
stringRight         LD      strLength
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringR_exit                        ; exit if right length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strLength
                    BGE     stringR_skip                        ; length <= srcLength
                    LD      strSrcLen
                    STW     strLength
                    POKE    strDstAddr                          ; new destination length
                    LDI     0
                    
stringR_skip        ADDW    strSrcAddr
                    STW     strSrcAddr                          ; copy from (source address + (source length - right length)) to destination address
                    ADDW    strLength
                    STW     strFinish                           ; end source address

stringR_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringR_loop                        ; until finished
                    
stringR_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET

