_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0x7fa0

; Includes
%includePath                  "../runtime"
%include                      util.i
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_page_0x0300                  EQU                               0x0300
_page_0x0400                  EQU                               0x0400
_next_0x04db                  EQU                               0x04e0
_page_0x0500                  EQU                               0x0500
_end_0x04f2                   EQU                               0x0510

; Variables
_cc                           EQU                               0x0030
_i                            EQU                               0x0032

; Arrays
_aa_array                     EQU                               0x7ed6
_aa_array                     DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 

; Strings
_ch$                          EQU                               0x7da0
_ch$                          DB                                0 '' 0
_hb$                          EQU                               0x7ca0
_hb$                          DB                                0 '' 0
_hw$                          EQU                               0x7ba0
_hw$                          DB                                0 '' 0
_c$                           EQU                               0x7aa0
_c$                           DB                                0 '' 0
_d$                           EQU                               0x79a0
_d$                           DB                                0 '' 0
_e$                           EQU                               0x78a0
_e$                           DB                                0 '' 0
_f$                           EQU                               0x77a0
_f$                           DB                                0 '' 0
_g$                           EQU                               0x76a0
_g$                           DB                                0 '' 0

; Constant Strings
_str_0x7ed0                   EQU                               0x7ed0
_str_0x7ed0                   DB                                4 'yes ' 0
_str_0x7ecc                   EQU                               0x7ecc
_str_0x7ecc                   DB                                2 'no' 0
_str_0x7eba                   EQU                               0x7eba
_str_0x7eba                   DB                                16 'hello test world' 0
_str_0x7ea9                   EQU                               0x7ea9
_str_0x7ea9                   DB                                1 ' ' 0
_str_0x7ea4                   EQU                               0x7ea4
_str_0x7ea4                   DB                                3 'dog' 0
_str_0x75fb                   EQU                               0x75fb
_str_0x75fb                   DB                                3 'cat' 0
_str_0x7ea0                   EQU                               0x7ea0
_str_0x7ea0                   DB                                2 'gc' 0

; Data
_data_                        EQU                               0x75a1
_data_                        DW                                0
_dataIndex_                   EQU                               0x74a1
_dataIndex_                   DW                                0

; Time

; Define Bytes

; Define Words

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables
_concat_0x7eac                EQU                               0x7eac
_concat_0x7eac                DW                                0x7eba 0x7eba 0x7eba 0x7eba 0x7eba 0x7eba 0x0000 

; Code
_entryPoint_                  Initialise                        
                              InitRealTimeStub                                                  ; INIT

                              LDI                               8
                              STW                               fgbgColour                      ; set FGBG_COLOUR, fgBgColour

                              ClearVertBlinds                                                   ; cls

                              LDI                               120
                              STW                               strChr
                              LDWI                              0x7da0
                              StringChr                                                         ; ch$ = chr$(a)

                              LDI                               0x78
                              STW                               strChr
                              LDWI                              0x7ca0
                              StringHex                                                         ; hb$ = hex$(a)

                              LDWI                              0xaa77
                              STW                               strHex
                              LDWI                              0x7ba0
                              StringHexw                                                        ; hw$ = hexw$(bb)

                              LDI                               5
                              STW                               _cc                             ; cc = 5

                              LDW                               _cc
                              STW                               strLength
                              LDWI                              0x7eba
                              STW                               strSrcAddr
                              LDWI                              0x7aa0
                              StringLeft                                                        ; c$=left$(b$, cc)

                              LDI                               5
                              STW                               strLength
                              LDWI                              0x7eba
                              STW                               strSrcAddr
                              LDWI                              0x79a0
                              StringRight                                                       ; d$ = right$ (b$,5)

                              LDW                               _cc
                              ADDI                              1
                              STW                               0xc0
                              LDW                               _cc
                              SUBI                              1
                              STW                               0xc2
                              LDW                               0xc0
                              STW                               strOffset
                              LDW                               0xc2
                              STW                               strLength
                              LDWI                              0x7eba
                              STW                               strSrcAddr
                              LDWI                              0x78a0
                              StringMid                                                         ; e$=mid$(b$, cc+1, cc-1)

                              LDWI                              0x7eac
                              STW                               strLutAddr
                              LDWI                              0x7fa0
                              StringConcat                      
                              LDWI                              0x7fa0
                              STW                               strSrcAddr
                              LDWI                              0x77a0
                              StringCopy                                                        ; f$ = b$ + b$ + b$ + b$ + b$ + b$

                              LDWI                              0x7eba
                              STW                               strSrcAddr
                              LDWI                              0x76a0
                              StringCopy                                                        ; g$ = b$

                              PrintString                       _str_0x7ed0
                              PrintString                       _str_0x7ea9
                              PrintString                       _str_0x7eba
                              PrintString                       _str_0x7ea9
                              LDWI                              0x7ed6
                              DEEK                              
                              STW                               0xe2
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xe2
                              PrintAcInt16                      
                              NewLine                                                           ; print a$;" ";b$;" ";aa(0)

                              PrintString                       _c$
                              PrintString                       _str_0x7ea9
                              PrintString                       _d$
                              PrintString                       _str_0x7ea9
                              PrintString                       _e$
                              NewLine                                                           ; print c$;" ";d$;" ";e$

                              LDWI                              0x7ea4
                              PrintAcString                     
                              PrintString                       _str_0x7ea9
                              LDW                               _cc
                              STW                               textLen
                              LDWI                              0x7eba
                              PrintAcLeft                       
                              NewLine                                                           ; print left$("dogcat", 3);" ";left$(b$, cc)

                              LDWI                              0x75fb
                              PrintAcString                     
                              PrintString                       _str_0x7ea9
                              LDI                               5
                              STW                               textLen
                              LDWI                              0x7eba
                              PrintAcRight                      
                              NewLine                                                           ; print right$("dogcat", 3);" ";right$(b$, 5)

                              LDWI                              0x7ea0
                              PrintAcString                     
                              PrintString                       _str_0x7ea9
                              LDW                               _cc
                              ADDI                              1
                              STW                               0xc0
                              LDW                               _cc
                              SUBI                              1
                              STW                               0xc2
                              LDW                               0xc0
                              STW                               textOfs
                              LDW                               0xc2
                              STW                               textLen
                              LDWI                              0x7eba
                              PrintAcMid                        
                              NewLine                                                           ; print mid$("dogcat", 2, 2);" ";mid$(b$, cc+1, cc-1)

                              PrintString                       _c$
                              PrintString                       _str_0x7ea9
                              PrintString                       _d$
                              PrintString                       _str_0x7ea9
                              STW                               0xe2
                              LDWI                              _page_0x0400
                              CALL                              giga_vAC
_page_0x0400                  LDW                               0xe2
                              PrintString                       _e$
                              NewLine                                                           ; print c$;" ";d$;" ";e$

                              PrintString                       _f$
                              PrintString                       _str_0x7ea9
                              LDWI                              0x77a0
                              PEEK                              
                              PrintAcInt16                      
                              NewLine                                                           ; print f$;" ";len(f$)

                              PrintString                       _g$
                              NewLine                                                           ; print g$

                              PrintString                       _ch$
                              PrintString                       _str_0x7ea9
                              PrintString                       _hb$
                              PrintString                       _str_0x7ea9
                              PrintString                       _hw$
                              NewLine                                                           ; print ch$;" ";hb$;" ";hw$

                              LDI                               65
                              PrintAcChar                       
                              PrintString                       _str_0x7ea9
                              LDI                               0x0f
                              PrintAcHexByte                    
                              PrintString                       _str_0x7ea9
                              LDWI                              0xaa77
                              PrintAcHexWord                    
                              PrintString                       _str_0x7ea9
                              LDWI                              0x7ea4
                              PrintAcString                     
                              PrintString                       _str_0x7ea9
                              LDI                               5
                              STW                               textLen
                              LDWI                              0x7eba
                              PrintAcLeft                       
                              NewLine                                                           ; print chr$(65);" ";hex$(15);" ";hexw$(bb);" ";left$("dogcat", 3);" ";left$(b$, 5)

                              LDI                               32
                              STW                               _i                              ; for i=32 to 127

_next_0x04db                  LDW                               _i
                              PrintAcChar                                                       ; print chr$(i);

                              STW                               0xe2
                              LDWI                              _page_0x0500
                              CALL                              giga_vAC
_page_0x0500                  LDW                               0xe2
                              ForNextFarInc                     _i _next_0x04db 127             ; next i

_end_0x04f2                   BRA                               _end_0x04f2                     ; end



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeStub                  EQU     0x75dd
resetVideoFlags               EQU     0x75ef
resetVideoTable               EQU     0x6cdb
initClearFuncs                EQU     0x6cc4
clearVertBlinds               EQU     0x75a3
clearCursorRow                EQU     0x6bb6
printInit                     EQU     0x6cae
printText                     EQU     0x72ae
printLeft                     EQU     0x71a1
printRight                    EQU     0x6ed4
printMid                      EQU     0x6eac
printDigit                    EQU     0x6add
printInt16                    EQU     0x70ae
printChr                      EQU     0x74a3
printChar                     EQU     0x69a7
printHexByte                  EQU     0x6dca
printHexWord                  EQU     0x6db1
newLineScroll                 EQU     0x6fa4
stringChr                     EQU     0x74ee
stringHex                     EQU     0x74dc
stringHexw                    EQU     0x74bd
createHex                     EQU     0x6ab5
stringCopy                    EQU     0x74b0
stringAdd                     EQU     0x68c3
stringConcat                  EQU     0x73a3
stringMid                     EQU     0x71c3
stringLeft                    EQU     0x73cb
stringRight                   EQU     0x72c7
convertEqOpAddr               EQU     0x00d0
convertNeOpAddr               EQU     0x00d2
convertLeOpAddr               EQU     0x00d4
convertGeOpAddr               EQU     0x00d6
convertLtOpAddr               EQU     0x00d8
convertGtOpAddr               EQU     0x00da
convertArr2dAddr              EQU     0x00dc
convertArr3dAddr              EQU     0x00de
realTimeStubAddr              EQU     0x00e0


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    

resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET




                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeStubAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    
                    LDWI    resetVideoFlags
                    CALL    giga_vAC                    
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints left sub string pointed to by textStr
printLeft           PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LD      textLen
                    BEQ     printL_exit
    
printL_char         ST      textLen
                    INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC

                    LD      textLen
                    SUBI    1
                    BNE     printL_char
printL_exit         POP
                    RET


                    ; prints right sub string pointed to by textStr
printRight          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDW     textStr
                    PEEK                                    ; text length
                    ADDW    textStr
                    SUBW    textLen
                    STW     textStr                         ; text offset
                    LD      textLen
                    BEQ     printR_exit
    
printR_char         ST      textLen
                    INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC

                    LD      textLen
                    SUBI    1
                    BNE     printR_char
printR_exit         POP
                    RET


                    ; prints sub string pointed to by textStr
printMid            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDW     textStr
                    ADDW    textOfs
                    STW     textStr                         ; textStr += textOfs
                    LD      textLen
                    BEQ     printM_exit
    
printM_char         ST      textLen
                    INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC

                    LD      textLen
                    SUBI    1
                    BNE     printM_char
printM_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeStubAddr
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


                    ; print hex byte in textHex
printHexByte        PUSH
                    LDWI    SYS_LSRW4_50                    ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LD      textHex
                    SYS     50
                    SUBI    10
                    BLT     printH_skip0
                    ADDI    7
printH_skip0        ADDI    0x3A
                    ST      textChr
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    LD      textHex
                    ANDI    0x0F
                    SUBI    10
                    BLT     printH_skip1
                    ADDI    7
printH_skip1        ADDI    0x3A
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; print hex word in textHex
printHexWord        PUSH
                    LD      textHex
                    ST      textBak
                    LD      textHex + 1
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    LD      textBak
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    POP
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
                    CALL    realTimeStubAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
strChr              EQU     register0
strHex              EQU     register1
strCmpRes           EQU     register2
strLength           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strTmpAddr          EQU     register10
strLutAddr          EQU     register11
strBakAddr          EQU     register12
strInteger          EQU     register0
strDigit            EQU     register1
strMult             EQU     register3


                    ; create a char string, (parameter in strChr)
stringChr           LDI     1
                    POKE    strDstAddr                          ; set destination buffer length                    
                    INC     strDstAddr
                    LD      strChr
                    POKE    strDstAddr                          ; copy char
                    INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET



                    ; create a hex byte string, (parameter in strChr)
stringHex           PUSH
                    LDI     2
                    POKE    strDstAddr                          ; set destination buffer length                    
                    INC     strDstAddr
                    LDWI    createHex
                    CALL    giga_vAC
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    POP
                    RET


                    ; create a hex word string, (parameter in strHex)
stringHexw          PUSH
                    LDI     4
                    POKE    strDstAddr                          ; set destination buffer length                    
                    INC     strDstAddr
                    LD      strHex + 1
                    ST      strChr
                    LDWI    createHex
                    CALL    giga_vAC
                    LD      strHex
                    ST      strChr
                    LDWI    createHex
                    CALL    giga_vAC
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    POP
                    RET


                    ; updates a hex byte
createHex           LDWI    SYS_LSRW4_50                        ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LD      strChr
                    SYS     50
                    SUBI    10
                    BLT     createH_skip0
                    ADDI    7

createH_skip0       ADDI    0x3A
                    POKE    strDstAddr                          ; save first char
                    INC     strDstAddr
                    LD      strChr
                    ANDI    0x0F
                    SUBI    10
                    BLT     createH_skip1
                    ADDI    7
                    
createH_skip1       ADDI    0x3A                    
                    POKE    strDstAddr                          ; save second char
                    INC     strDstAddr
                    RET


                    ; copy one string to another
stringCopy          LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    BNE     stringCopy                          ; copy char until terminating char
                    RET



                    ; adds two strings together, (internal sub)
stringAdd           LDW     strDstAddr
                    STW     strTmpAddr
                    INC     strSrcAddr
                    INC     strDstAddr                          ; skip lengths
                    LDI     0
                    STW     strLength
                    
stringA_copy0       LDW     strSrcAddr
                    PEEK
                    BEQ     stringA_copy1
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    INC     strLength
                    BRA     stringA_copy0
                    
stringA_copy1       LDW     strLength
                    SUBI    94
                    BGE     stringA_exit                        ; maximum destination length reached
                    INC     strSrcAddr2                         ; skips length first time
                    LDW     strSrcAddr2
                    PEEK
                    BEQ     stringA_exit                        ; copy char until terminating char
                    POKE    strDstAddr                          ; copy char
                    INC     strDstAddr
                    INC     strLength
                    BRA     stringA_copy1

stringA_exit        LDW     strLength
                    POKE    strTmpAddr                          ; save concatenated string length
                    LDI     0
                    POKE    strDstAddr                          ; terminating zero
                    RET


                    ; concatenates multiple strings together
stringConcat        PUSH
                    LDW     strLutAddr
                    DEEK
                    BEQ     stringCC_exit
                    STW     strSrcAddr
                    LDW     strDstAddr
                    STW     strBakAddr
                    
stringCC_loop       INC     strLutAddr
                    INC     strLutAddr
                    LDW     strLutAddr
                    DEEK
                    BEQ     stringCC_exit
                    STW     strSrcAddr2
                    LDWI    stringAdd
                    CALL    giga_vAC
                    LDW     strBakAddr
                    STW     strDstAddr
                    STW     strSrcAddr
                    BRA     stringCC_loop
                    
stringCC_exit       POP
                    RET


                    ; copies length sub string from source offset to destination string
stringMid           LD      strLength
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringM_exit                        ; exit if right length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strOffset                           
                    SUBW    strLength
                    BGE     stringM_skip                        ; length + offset <= srcLength
                    LD      strSrcLen
                    SUBW    strOffset
                    STW     strLength
                    POKE    strDstAddr                          ; new destination length
                    
stringM_skip        LDW     strSrcAddr
                    ADDW    strOffset
                    STW     strSrcAddr                          ; copy from (source address + (source length - right length)) to destination address
                    ADDW    strLength
                    STW     strFinish                           ; end source address

stringM_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringM_loop                        ; until finished
                    
stringM_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET


                    ; copies sub string from left hand side of source string to destination string
stringLeft          LD      strLength
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringL_exit                        ; exit if left length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strLength
                    BGE     stringL_skip                        ; is left length <= source length
                    LD      strSrcLen
                    STW     strLength
                    POKE    strDstAddr                          ; new destination length
                    
stringL_skip        LDW     strSrcAddr
                    ADDW    strLength
                    STW     strFinish                           ; end source address
                    
stringL_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringL_loop                        ; until finished
                    
stringL_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET


                    ; copies sub string from right hand side of source string to destination string
stringRight         LD      strLength
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringR_exit                        ; exit if right length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strLength
                    BGE     stringR_skip                        ; length <= srcLength
                    LD      strSrcLen
                    STW     strLength
                    POKE    strDstAddr                          ; new destination length
                    LDI     0
                    
stringR_skip        ADDW    strSrcAddr
                    STW     strSrcAddr                          ; copy from (source address + (source length - right length)) to destination address
                    ADDW    strLength
                    STW     strFinish                           ; end source address

stringR_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringR_loop                        ; until finished
                    
stringR_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET

