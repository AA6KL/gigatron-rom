_startAddress_      EQU                     0x0200

; Internal variables
serialRawPrev       EQU                     0x0081
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
miscFlags           EQU                     register0 + 0x28
fontLutId           EQU                     0x00e0

; Internal buffers
textWorkArea        EQU                     0x7fa0

; Includes
%includePath        "../runtime"
%include            gigatron.i
%include            macros.i

; Labels
_entryPoint_        EQU                     0x0200
_page_0x0300        EQU                     0x0300
_next_0x0307        EQU                     0x030f
_page_0x0400        EQU                     0x0400
_page_0x0500        EQU                     0x0500
_end_0x059c         EQU                     0x058c

; Variables
_dog_array          EQU                     0x7df8
_dog_array          DW                      0x7ea0 0x0003 0x573d 0xd8fb 
_j                  EQU                     0x0030
_a                  EQU                     0x0032
_b                  EQU                     0x0034
_c                  EQU                     0x0036
_d                  EQU                     0x0038
_e                  EQU                     0x003a
_f                  EQU                     0x003c
_g                  EQU                     0x003e
_h                  EQU                     0x0040
_i                  EQU                     0x0042
_zzz                EQU                     0x0044

; Strings
_yup$               EQU                     0x7ea0
_yup$               DB                      3 'dog' 0
_str_0x7de6         EQU                     0x7de6
_str_0x7de6         DB                      16 'hello test world' 0
_b$                 EQU                     0x7ca0
_b$                 DB                      16 'hello test world' 0
_c$                 EQU                     0x7ba0
_c$                 DB                      0 '' 0
_d$                 EQU                     0x7aa0
_d$                 DB                      0 '' 0
_e$                 EQU                     0x79a0
_e$                 DB                      0 '' 0
_str_0x7de3         EQU                     0x7de3
_str_0x7de3         DB                      1 ' ' 0
_x$                 EQU                     0x78a0
_x$                 DB                      22 'YOUR TEXT BACKWARDS IS' 0
_str_0x7dde         EQU                     0x7dde
_str_0x7dde         DB                      3 'yes' 0
_str_0x7dd7         EQU                     0x7dd7
_str_0x7dd7         DB                      5 'world' 0

; Define Bytes

; Define Words
def_words_0x08a0    EQU                     0x08a0
def_words_0x08a0    DW                      1011 1262 

; Define Images

; Define Sprites
; Define Fonts

; Lookup Tables

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    ClearVertBlinds                                         ; cls

                    LDWI                    0x7de6
                    STW                     strSrcAddr
                    LDWI                    0x7ca0
                    STW                     strDstAddr
                    StringCopy                                              ; b$="hello test world"

                    LDI                     5
                    STW                     strLength
                    LDWI                    0x7ca0
                    STW                     strSrcAddr
                    LDWI                    0x7ba0
                    STW                     strDstAddr
                    StringLeft                                              ; c$=left$(b$, 5)

                    LDI                     5
                    STW                     strLength
                    LDWI                    0x7ca0
                    STW                     strSrcAddr
                    LDWI                    0x7aa0
                    STW                     strDstAddr
                    StringRight                                             ; d$ = right$ (b$,5)

                    LDI                     6
                    STW                     strOffset
                    LDI                     4
                    STW                     strLength
                    LDWI                    0x7ca0
                    STW                     strSrcAddr
                    LDWI                    0x79a0
                    STW                     strDstAddr
                    StringMid                                               ; e$=mid$(b$, 6, 4)

                    PrintString             _str_0x7de6
                    PrintString             _str_0x7de3
                    PrintString             _b$
                    PrintString             _str_0x7de3
                    NewLine                                                 ; print a$;" ";b$;" "

                    PrintString             _c$
                    PrintString             _str_0x7de3
                    PrintString             _d$
                    PrintString             _str_0x7de3
                    PrintString             _e$
                    NewLine                                                 ; print c$;" ";d$;" ";e$

                    LDWI                    0x78a0
                    PEEK                    
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    SUBI                    1
                    STW                     _j
                    LDI                     0
                    STW                     0xb0
                    LDWI                    -1
                    STW                     0xb2                            ; for j = len(x$)-1 to 0 step -1

_next_0x0307        LDW                     _j
                    STW                     textOfs
                    LDI                     1
                    STW                     textLen
                    LDWI                    0x78a0
                    PrintAcMid                                              ; print mid$(x$, j, 1);

                    ForNextFarVarNeg        _j _next_0x0307 0xb0 0xb2       ; next j

                    LDI                     1
                    STW                     _a                              ; a = strcmp("dog", "dog")

                    LDI                     0
                    STW                     _b                              ; b = strcmp("dog", "Dog")

                    LDI                     0
                    STW                     _c                              ; c = strcmp("dog", "dog1")

                    LDWI                    0x7dde
                    STW                     strSrcAddr
                    LDWI                    0x7de6
                    STW                     strSrcAddr2
                    StringCmp               
                    STW                     _d                              ; d = strcmp("yes", a$)

                    LDWI                    0x7de6
                    STW                     strSrcAddr
                    LDWI                    0x7ca0
                    STW                     strSrcAddr2
                    StringCmp               
                    STW                     _e                              ; e = strcmp(a$, b$)

                    NewLine                                                 ; print

                    LDWI                    0x7ea0 + 1
                    PEEK                    
                    STW                     _f                              ; f = asc("dog")

                    LDI                     0x05
                    STW                     _g                              ; g = abs(-5)

                    LDI                     50
                    STW                     _h                              ; h = @a

                    LDI                     2
                    STW                     _i                              ; i = len(a)

                    LDWI                    -4
                    STW                     _zzz                            ; zzz = -4

                    LDW                     _a
                    PrintAcInt16            
                    PrintString             _str_0x7de3
                    LDW                     _b
                    PrintAcInt16            
                    PrintString             _str_0x7de3
                    LDW                     _c
                    PrintAcInt16            
                    PrintString             _str_0x7de3
                    LDW                     _d
                    PrintAcInt16            
                    PrintString             _str_0x7de3
                    LDW                     _e
                    PrintAcInt16            
                    PrintString             _str_0x7de3
                    NewLine                                                 ; print a;" ";b;" ";c;" ";d;" ";e;" "

                    LDI                     0x03
                    PrintAcInt16            
                    PrintString             _str_0x7de3
                    STW                     0xde
                    LDWI                    _page_0x0400
                    CALL                    giga_vAC
_page_0x0400        LDW                     0xde
                    LDW                     _zzz
                    Absolute                
                    PrintAcInt16            
                    PrintString             _str_0x7de3
                    LDWI                    0x7dd7
                    STW                     strSrcAddr
                    LDWI                    0x7aa0
                    STW                     strSrcAddr2
                    StringCmp               
                    PrintAcInt16            
                    PrintString             _str_0x7de3
                    LDWI                    0x7ea0 + 1
                    PEEK                    
                    PrintAcInt16            
                    PrintString             _str_0x7de3
                    LDW                     _f
                    PrintAcInt16            
                    PrintString             _str_0x7de3
                    LDW                     _g
                    PrintAcInt16            
                    NewLine                                                 ; print abs(-3);" ";abs(zzz);" ";strcmp("world", d$);" ";asc("dog");" ";f;" ";g

                    LDW                     _h
                    PrintAcHexByte          
                    PrintString             _str_0x7de3
                    LDW                     _i
                    PrintAcInt16            
                    PrintString             _str_0x7de3
                    LDI                     0x32
                    PrintAcHexByte          
                    PrintString             _str_0x7de3
                    LDI                     2
                    PrintAcInt16            
                    NewLine                                                 ; print hex$(h);" ";i;" ";hex$(@a);" ";len(a)

                    LDWI                    0x7df8
                    DEEK                    
                    PrintAcHexWord          
                    PrintString             _str_0x7de3
                    LDWI                    0x7dfa
                    DEEK                    
                    PrintAcInt16            
                    PrintString             _str_0x7de3
                    LDWI                    0x7dfc
                    DEEK                    
                    PrintAcInt16            
                    STW                     0xde
                    LDWI                    _page_0x0500
                    CALL                    giga_vAC
_page_0x0500        LDW                     0xde
                    PrintString             _str_0x7de3
                    LDWI                    0x7dfe
                    DEEK                    
                    PrintAcInt16            
                    NewLine                                                 ; print hexw$(dog(0));" ";dog(1);" ";dog(2);" ";dog(3)

                    LDWI                    0x08a0
                    DEEK                    
                    PrintAcInt16            
                    PrintString             _str_0x7de3
                    LDWI                    0x08a2
                    DEEK                    
                    PrintAcInt16            
                    NewLine                                                 ; print deek(&h08A0);" ";deek(&h08A2)

                    PrintString             _str_0x7de6
                    NewLine                                                 ; print a$

                    PrintString             _b$
                    NewLine                                                 ; print b$

                    PrintString             _c$
                    NewLine                                                 ; print c$

                    PrintString             _d$
                    NewLine                                                 ; print d$

                    PrintString             _e$
                    NewLine                                                 ; print e$

_end_0x059c         BRA                     _end_0x059c                     ; end



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0x7dce
convertEqOp         EQU     0x7dc5
convertNeOp         EQU     0x7dbc
convertLeOp         EQU     0x7db3
convertGeOp         EQU     0x7daa
convertLtOp         EQU     0x7da1
convertGtOp         EQU     0x77f6
absolute            EQU     0x77a4
resetVideoTable     EQU     0x70a2
initClearFuncs      EQU     0x77d4
clearVertBlinds     EQU     0x76c5
clearCursorRow      EQU     0x6fb6
printInit           EQU     0x73ad
printText           EQU     0x77ae
printMid            EQU     0x75a3
printDigit          EQU     0x6edd
printInt16          EQU     0x71ae
printChar           EQU     0x6da7
printHexByte        EQU     0x70ca
printHexWord        EQU     0x74ae
newLineScroll       EQU     0x72a2
stringCopy          EQU     0x77c7
stringCmp           EQU     0x76a6
stringMid           EQU     0x73c3
stringLeft          EQU     0x75cb
stringRight         EQU     0x74c7
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI routine
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


absolute            LDW     mathX
                    BGE     abs_exit
                    LDI     0
                    SUBW    mathX
abs_exit            RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    
                    LDWI    giga_videoTop                       ; reset videoTop
                    STW     register0
                    LDI     0
                    POKE    register0
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDI     0x02                                ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET


                    ; prints sub string pointed to by textStr
printMid            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDW     textStr
                    ADDW    textOfs
                    STW     textStr                         ; textStr += textOfs
                    LD      textLen
                    BEQ     printM_exit
    
printM_char         ST      textLen
                    INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC

                    LD      textLen
                    SUBI    1
                    BNE     printM_char
printM_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


                    ; print hex byte in textHex
printHexByte        PUSH
                    LDWI    SYS_LSRW4_50                    ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LD      textHex
                    SYS     50
                    SUBI    10
                    BLT     printH_skip0
                    ADDI    7
printH_skip0        ADDI    0x3A
                    ST      textChr
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    LD      textHex
                    ANDI    0x0F
                    SUBI    10
                    BLT     printH_skip1
                    ADDI    7
printH_skip1        ADDI    0x3A
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; print hex word in textHex
printHexWord        PUSH
                    LD      textHex
                    ST      textBak
                    LD      textHex + 1
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    LD      textBak
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    POP
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     8

clearCR_loopy       ST      clearLoop
                    CALL    realTimeProcAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     0x01
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
strChr              EQU     register0
strHex              EQU     register1
strCmpRes           EQU     register2
strLength           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strTmpAddr          EQU     register10
strLutAddr          EQU     register11
strBakAddr          EQU     register12


                    ; copy one string to another
stringCopy          LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    BNE     stringCopy                          ; copy char until terminating char
                    RET


                    ; compares two strings
stringCmp           LDI     0
                    STW     strCmpRes

stringC_cmp         LDW     strSrcAddr
                    PEEK
                    BEQ     stringC_one
                    STW     strChr
                    LDW     strSrcAddr2
                    PEEK
                    SUBW    strChr
                    BNE     stringC_zero
                    INC     strSrcAddr
                    INC     strSrcAddr2
                    BRA     stringC_cmp
                    
stringC_one         INC     strCmpRes                           ; return 1

stringC_zero        LDW     strCmpRes
                    RET


                    ; copies length sub string from source offset to destination string
stringMid           LD      strLength
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringM_exit                        ; exit if right length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strOffset                           
                    SUBW    strLength
                    BGE     stringM_skip                        ; length + offset <= srcLength
                    LD      strSrcLen
                    SUBW    strOffset
                    STW     strLength
                    POKE    strDstAddr                          ; new destination length
                    
stringM_skip        LDW     strSrcAddr
                    ADDW    strOffset
                    STW     strSrcAddr                          ; copy from (source address + (source length - right length)) to destination address
                    ADDW    strLength
                    STW     strFinish                           ; end source address

stringM_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringM_loop                        ; until finished
                    
stringM_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET


                    ; copies sub string from left hand side of source string to destination string
stringLeft          LD      strLength
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringL_exit                        ; exit if left length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strLength
                    BGE     stringL_skip                        ; is left length <= source length
                    LD      strSrcLen
                    STW     strLength
                    POKE    strDstAddr                          ; new destination length
                    
stringL_skip        LDW     strSrcAddr
                    ADDW    strLength
                    STW     strFinish                           ; end source address
                    
stringL_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringL_loop                        ; until finished
                    
stringL_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET


                    ; copies sub string from right hand side of source string to destination string
stringRight         LD      strLength
                    POKE    strDstAddr                          ; destination length
                    BEQ     stringR_exit                        ; exit if right length = 0
                    LDW     strSrcAddr
                    PEEK                                        ; get source length
                    STW     strSrcLen
                    SUBW    strLength
                    BGE     stringR_skip                        ; length <= srcLength
                    LD      strSrcLen
                    STW     strLength
                    POKE    strDstAddr                          ; new destination length
                    LDI     0
                    
stringR_skip        ADDW    strSrcAddr
                    STW     strSrcAddr                          ; copy from (source address + (source length - right length)) to destination address
                    ADDW    strLength
                    STW     strFinish                           ; end source address

stringR_loop        INC     strSrcAddr                          ; skip lengths the first time in
                    INC     strDstAddr
                    LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr                          ; copy char
                    LDW     strSrcAddr
                    SUBW    strFinish
                    BLT     stringR_loop                        ; until finished
                    
stringR_exit        INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET

