_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0x7fa0

; Includes
%includePath                  "../runtime"
%include                      util.i
%include                      gigatron.i
%include                      macros_ROMv5a.i

; Labels
_entryPoint_                  EQU                               0x0200
_loop                         EQU                               0x02b1
_userProc                     EQU                               0x03e8
_page_0x0300                  EQU                               0x0300
_endif_0x0446                 EQU                               0x03e3
_end_0x0449                   EQU                               0x03e6
_end_0x045b                   EQU                               0x03f0

; Variables
_vram                         EQU                               0x0034
_seconds                      EQU                               0x0036

; Arrays

; Strings

; Constant Strings
_str_0x7ef6                   EQU                               0x7ef6
_str_0x7ef6                   DB                                8 '00:00:00' 0
_str_0x7eeb                   EQU                               0x7eeb
_str_0x7eeb                   DB                                9 'Gigatron!' 0
_str_0x7ee8                   EQU                               0x7ee8
_str_0x7ee8                   DB                                1 ' ' 0

; Data

; Time
_timeArray_                   EQU                               0x7ea7
_timeArray_                   DB                                00 00 00
_timeString_                  EQU                               0x7ca6
_timeString_                  DB                                8 '00:00:00' 0

; Define Bytes
def_bytes_0x0aa0              EQU                               0x0aa0
def_bytes_0x0aa0              DB                                144 71 71 145 54 73 14 144 70 85 145 61 65 4 144 71 74 4 144 70 81 7 144 66 76 145 54 76 14 144 73 76 145 59 67 7 144 75 72 8 144 73 77 145 54 75 7 144 75 76 7 144 71 73 145 61 65 7 144 73 73 7 144 71 72 145 54 74 8 144 70 73 7 144 66 77 145 59 75 14 144 71 71 145 54 73 15 144 70 85 145 61 65 208 160 11 
def_bytes_0x0ba0              EQU                               0x0ba0
def_bytes_0x0ba0              DB                                4 144 71 74 5 144 70 81 5 144 66 76 145 54 76 14 144 73 76 145 59 67 8 144 75 72 7 144 73 77 145 54 75 146 66 64 144 73 64 147 38 64 145 54 64 7 144 75 76 7 144 71 73 145 61 65 7 144 73 73 8 144 69 72 145 54 74 7 144 68 73 7 146 66 77 144 59 75 129 14 145 69 71 144 54 73 130 15 145 68 85 208 160 12 
def_bytes_0x0ca0              EQU                               0x0ca0
def_bytes_0x0ca0              DB                                144 61 65 3 145 69 74 4 145 68 81 7 145 64 76 144 54 76 15 145 73 76 144 59 67 7 145 74 72 7 145 73 77 144 54 75 7 145 74 76 7 145 73 73 144 61 65 8 145 71 73 7 145 69 72 144 54 74 7 145 68 73 7 145 66 77 144 59 75 15 145 69 71 144 54 73 14 145 68 85 144 61 65 5 145 69 74 5 145 68 81 4 208 160 13 
def_bytes_0x0da0              EQU                               0x0da0
def_bytes_0x0da0              DB                                145 64 76 144 54 76 15 145 73 76 144 59 67 7 145 74 72 7 145 73 77 144 54 75 7 145 74 76 8 145 73 73 144 61 65 7 145 71 73 7 145 69 72 144 54 74 7 145 68 73 7 145 66 77 144 59 75 15 145 69 71 144 54 73 14 145 68 85 144 61 65 5 145 69 74 5 145 68 81 5 145 64 76 144 54 76 14 145 73 76 144 59 67 208 160 14 
def_bytes_0x0ea0              EQU                               0x0ea0
def_bytes_0x0ea0              DB                                7 145 74 72 7 145 73 77 144 54 75 8 145 74 76 7 145 73 73 144 61 65 7 145 71 73 7 145 69 72 144 54 74 7 145 68 73 4 146 76 90 4 145 66 77 144 59 75 146 81 89 3 146 76 86 4 146 81 83 3 146 76 78 146 78 89 4 144 81 70 146 78 70 144 80 86 145 76 86 130 4 145 76 65 144 80 65 144 78 83 145 81 83 208 160 15 
def_bytes_0x0fa0              EQU                               0x0fa0
def_bytes_0x0fa0              DB                                3 145 81 65 144 78 65 144 80 78 145 76 78 4 145 76 64 144 80 64 144 78 70 145 81 70 3 145 81 64 144 78 64 144 80 65 145 76 65 4 145 76 64 144 80 64 144 78 65 145 81 65 4 145 81 64 144 78 64 144 80 64 145 76 64 3 145 76 64 144 80 64 144 78 64 145 81 64 4 145 81 64 144 78 64 144 80 64 145 76 64 3 208 160 16 
def_bytes_0x10a0              EQU                               0x10a0
def_bytes_0x10a0              DB                                145 76 64 144 80 64 144 78 64 145 81 64 4 145 81 64 144 78 64 144 80 64 145 76 64 4 145 76 64 144 80 64 144 78 64 145 81 64 3 145 81 64 144 78 64 144 80 64 145 76 64 4 145 76 64 144 80 64 144 78 64 145 81 64 3 145 81 65 144 78 65 144 80 64 145 76 64 4 145 76 66 144 80 66 144 78 64 145 81 64 4 208 160 17 
def_bytes_0x11a0              EQU                               0x11a0
def_bytes_0x11a0              DB                                145 81 66 144 78 66 144 80 64 145 76 64 3 145 76 67 144 80 67 144 78 65 145 81 65 4 145 81 67 144 78 67 144 80 66 145 76 66 3 145 76 67 144 80 67 144 78 66 145 81 66 4 145 81 68 144 78 68 144 80 67 145 76 67 4 145 76 68 144 80 68 144 78 67 145 81 67 3 145 81 67 144 78 67 144 80 67 145 76 67 4 208 160 18 
def_bytes_0x12a0              EQU                               0x12a0
def_bytes_0x12a0              DB                                145 76 67 144 80 67 144 78 68 145 81 68 3 145 81 67 144 78 67 144 80 68 145 76 68 4 145 76 67 144 80 67 144 78 67 145 81 67 4 145 81 66 144 78 66 144 80 67 145 76 67 3 145 76 65 144 80 65 144 78 67 145 81 67 4 145 81 64 144 78 64 144 80 67 145 76 67 3 145 76 76 144 80 76 144 78 66 145 81 66 4 208 160 19 
def_bytes_0x13a0              EQU                               0x13a0
def_bytes_0x13a0              DB                                145 81 87 144 78 87 144 80 65 145 76 65 4 145 76 99 144 80 99 144 78 64 145 81 64 3 146 54 73 144 80 78 145 76 78 4 144 78 91 145 81 91 3 144 80 105 145 76 105 4 128 129 4 144 61 65 145 66 64 130 131 14 144 54 76 14 144 59 67 145 68 64 15 144 54 75 145 68 64 14 144 61 65 15 144 54 74 14 144 59 75 208 160 20 
def_bytes_0x14a0              EQU                               0x14a0
def_bytes_0x14a0              DB                                145 69 64 14 144 54 73 145 69 64 15 144 61 65 14 144 54 76 15 144 59 67 145 71 64 14 144 54 75 145 71 64 14 144 61 65 15 144 54 74 14 144 59 75 145 68 64 4 146 69 65 3 145 68 66 130 4 145 69 68 4 144 54 73 145 68 69 145 68 64 3 145 69 71 145 69 65 4 145 68 72 145 68 66 3 145 69 74 145 69 68 4 208 160 21 
def_bytes_0x15a0              EQU                               0x15a0
def_bytes_0x15a0              DB                                144 61 65 145 68 75 145 68 69 4 145 69 75 145 69 71 3 145 68 75 145 68 72 4 145 69 76 145 69 74 3 144 54 76 145 68 76 145 68 75 4 145 69 76 145 69 75 4 145 68 76 145 68 75 3 145 69 76 145 69 76 4 144 59 67 145 68 76 145 68 76 3 145 69 76 145 69 76 4 145 68 76 145 68 76 4 145 69 76 145 69 76 3 208 160 22 
def_bytes_0x16a0              EQU                               0x16a0
def_bytes_0x16a0              DB                                144 54 75 145 68 76 145 68 76 4 145 69 76 145 69 76 3 145 68 76 145 68 76 4 145 69 76 145 69 76 4 144 61 65 145 68 76 145 68 76 3 145 69 76 145 69 76 4 145 68 76 145 68 76 3 145 69 76 145 69 76 4 144 54 74 145 68 76 145 68 76 4 145 69 77 145 69 76 3 145 68 77 145 68 76 4 145 69 64 145 69 76 3 208 160 23 
def_bytes_0x17a0              EQU                               0x17a0
def_bytes_0x17a0              DB                                144 59 75 145 80 67 146 68 76 4 147 81 69 146 69 77 4 145 80 72 146 68 77 131 3 145 81 75 146 69 64 4 144 54 73 145 80 75 145 80 67 130 3 145 81 75 145 81 69 4 145 80 75 145 80 72 4 145 81 76 145 81 75 3 144 61 65 145 80 76 145 80 75 4 145 81 76 145 81 75 3 145 80 76 145 80 75 4 145 81 76 208 160 24 
def_bytes_0x18a0              EQU                               0x18a0
def_bytes_0x18a0              DB                                145 81 76 4 144 54 76 145 80 76 145 80 76 3 145 81 76 145 81 76 4 145 80 76 145 80 76 3 145 81 77 145 81 76 4 144 59 67 145 75 64 146 80 76 4 147 76 67 146 81 76 3 145 75 70 146 80 76 131 4 145 76 73 146 81 77 3 144 54 75 145 75 76 145 75 64 130 4 145 76 79 145 76 67 4 145 75 79 145 75 70 3 208 160 25 
def_bytes_0x19a0              EQU                               0x19a0
def_bytes_0x19a0              DB                                145 76 79 145 76 73 4 144 61 65 145 75 80 145 75 76 3 145 76 80 145 76 79 4 145 75 80 145 75 79 4 145 76 80 145 76 79 3 144 54 74 145 75 81 145 75 80 4 145 76 81 145 76 80 3 145 75 81 145 75 80 4 145 76 81 145 76 80 4 146 61 64 144 59 75 145 66 82 147 75 81 3 147 76 81 4 147 75 81 3 147 76 81 208 160 26 
def_bytes_0x1aa0              EQU                               0x1aa0
def_bytes_0x1aa0              DB                                4 144 54 73 145 66 82 131 14 146 61 65 128 15 144 54 76 130 14 146 69 64 144 59 67 145 68 64 15 144 54 75 145 68 64 14 144 61 65 14 144 54 74 15 146 64 64 144 59 75 145 69 64 14 144 54 73 145 69 64 15 144 61 65 14 144 54 76 14 146 63 64 144 59 67 145 71 64 15 144 54 75 145 71 64 14 144 61 65 15 144 54 74 208 160 27 
def_bytes_0x1ba0              EQU                               0x1ba0
def_bytes_0x1ba0              DB                                14 146 61 64 144 59 75 145 68 64 4 147 69 65 3 145 68 66 131 4 145 69 68 3 144 54 73 145 68 69 145 68 64 4 145 69 71 145 69 65 4 145 68 72 145 68 66 3 145 69 74 145 69 68 4 146 61 65 144 68 75 144 68 69 129 3 144 69 75 144 69 71 4 144 68 75 144 68 72 4 144 69 76 144 69 74 3 145 54 76 144 68 76 208 160 28 
def_bytes_0x1ca0              EQU                               0x1ca0
def_bytes_0x1ca0              DB                                144 68 75 130 4 144 69 76 144 69 75 3 144 68 76 144 68 75 4 144 69 76 144 69 76 4 144 69 64 145 59 67 144 68 76 144 68 76 3 144 69 76 144 69 76 4 144 68 76 144 68 76 3 144 69 76 144 69 76 4 145 54 75 144 68 76 144 68 76 4 144 69 76 144 69 76 3 144 68 76 144 68 76 4 144 69 76 144 69 76 3 208 160 29 
def_bytes_0x1da0              EQU                               0x1da0
def_bytes_0x1da0              DB                                145 61 65 144 68 76 144 68 76 4 144 69 76 144 69 76 4 144 68 76 144 68 76 3 144 69 76 144 69 76 4 145 54 74 144 68 76 144 68 76 3 144 69 77 144 69 76 4 144 68 77 144 68 76 4 144 69 64 144 69 76 3 144 64 64 145 59 75 146 80 67 147 68 76 4 147 69 77 3 146 80 72 147 68 77 4 146 81 75 147 69 64 4 208 160 30 
def_bytes_0x1ea0              EQU                               0x1ea0
def_bytes_0x1ea0              DB                                145 54 73 146 80 75 146 80 67 131 3 146 81 75 146 81 69 4 146 80 75 146 80 72 3 146 81 76 146 81 75 4 145 61 65 146 80 76 146 80 75 4 146 81 76 146 81 75 3 146 80 76 146 80 75 4 146 81 76 146 81 76 3 145 54 76 146 80 76 146 80 76 4 146 81 76 146 81 76 4 146 80 76 146 80 76 3 146 81 77 146 81 76 208 160 31 
def_bytes_0x1fa0              EQU                               0x1fa0
def_bytes_0x1fa0              DB                                4 144 63 64 145 59 67 146 75 64 147 80 76 3 147 81 76 4 146 75 70 147 80 76 4 146 76 73 147 81 77 3 145 54 75 146 75 76 146 75 64 131 4 146 76 79 146 76 67 3 146 75 79 146 75 70 4 146 76 79 146 76 73 4 145 61 65 146 75 80 146 75 76 3 146 76 80 146 76 79 4 146 75 80 146 75 79 3 146 76 80 208 160 32 
def_bytes_0x20a0              EQU                               0x20a0
def_bytes_0x20a0              DB                                146 76 79 4 145 54 74 146 75 81 146 75 80 4 146 76 81 146 76 80 3 146 75 81 146 75 80 4 146 76 81 146 76 80 3 144 68 70 145 59 75 146 75 81 147 30 64 147 30 64 4 146 76 81 4 146 75 81 3 146 76 81 4 145 54 73 130 14 144 61 65 129 15 145 66 76 144 54 76 14 145 69 64 144 59 67 146 42 64 146 42 64 208 160 33 
def_bytes_0x21a0              EQU                               0x21a0
def_bytes_0x21a0              DB                                131 7 145 68 74 7 145 66 78 144 54 75 15 145 64 64 144 61 65 7 145 63 74 7 144 61 77 144 54 74 145 33 64 145 33 64 130 15 146 71 64 144 59 75 145 35 64 145 35 64 7 146 69 71 7 146 68 78 144 54 73 145 37 64 145 37 64 14 146 64 71 144 61 65 145 40 64 145 40 64 15 146 66 76 144 54 76 14 146 68 75 208 160 34 
def_bytes_0x22a0              EQU                               0x22a0
def_bytes_0x22a0              DB                                144 59 67 15 146 69 71 144 54 75 145 33 64 145 33 64 14 146 71 67 144 61 65 145 35 64 145 35 64 14 146 73 68 144 54 74 145 37 64 145 37 64 15 146 68 70 144 59 75 145 30 64 145 30 64 14 144 54 73 15 144 61 65 130 14 146 66 76 144 54 76 14 146 69 64 144 59 67 145 42 64 145 42 64 8 146 68 74 7 146 66 78 208 160 35 
def_bytes_0x23a0              EQU                               0x23a0
def_bytes_0x23a0              DB                                144 54 75 14 146 64 64 144 61 65 7 146 63 74 8 144 61 77 144 54 74 145 33 64 145 33 64 130 14 146 71 64 144 59 75 145 35 64 145 35 64 7 146 69 71 7 146 68 78 144 54 73 145 37 64 145 37 64 15 146 64 71 144 61 65 145 40 64 145 40 64 14 146 66 76 144 54 76 15 146 68 75 144 59 67 14 146 69 71 144 54 75 208 160 36 
def_bytes_0x24a0              EQU                               0x24a0
def_bytes_0x24a0              DB                                145 33 64 145 33 64 14 146 71 67 144 61 65 145 35 64 145 35 64 15 146 73 68 144 54 74 145 37 64 145 37 64 14 146 68 70 144 59 75 145 30 64 145 30 64 15 144 54 73 147 62 64 144 54 64 7 147 62 64 144 54 64 7 144 61 65 130 14 146 66 76 144 54 76 145 42 64 145 42 64 15 146 69 64 144 59 67 7 146 68 74 7 208 160 37 
def_bytes_0x25a0              EQU                               0x25a0
def_bytes_0x25a0              DB                                146 66 78 144 54 75 15 146 64 64 144 61 65 145 40 64 145 40 64 7 146 63 74 7 144 61 77 144 54 74 130 14 146 71 64 144 59 75 8 146 69 71 7 146 68 78 144 54 73 145 37 64 145 37 64 14 146 64 71 144 61 65 145 40 64 145 40 64 15 146 66 76 144 54 76 145 37 64 145 37 64 14 146 68 75 144 59 67 145 42 64 208 160 38 
def_bytes_0x26a0              EQU                               0x26a0
def_bytes_0x26a0              DB                                145 42 64 14 146 69 71 144 54 75 145 37 64 145 37 64 15 146 71 67 144 61 65 145 40 64 145 40 64 14 146 73 68 144 54 74 145 37 64 145 37 64 15 146 68 70 144 59 75 145 30 64 145 30 64 14 144 54 73 14 144 61 65 130 15 146 66 76 144 54 76 145 42 64 145 42 64 14 146 69 64 144 59 67 7 146 68 74 8 146 66 78 208 160 39 
def_bytes_0x27a0              EQU                               0x27a0
def_bytes_0x27a0              DB                                144 54 75 14 146 64 64 144 61 65 145 40 64 145 40 64 7 146 63 74 7 144 61 77 144 54 74 130 15 146 71 64 144 59 75 7 146 69 71 7 146 68 78 144 54 73 145 37 64 145 37 64 15 146 64 71 144 61 65 145 40 64 145 40 64 14 146 66 76 144 54 76 145 37 64 145 37 64 14 146 68 75 144 59 67 145 42 64 145 42 64 15 208 160 40 
def_bytes_0x28a0              EQU                               0x28a0
def_bytes_0x28a0              DB                                146 69 71 144 54 75 145 37 64 145 37 64 14 146 71 67 144 61 65 145 40 64 145 40 64 15 146 73 68 144 54 74 145 37 64 145 37 64 14 146 64 76 144 59 75 145 30 64 145 30 64 14 144 54 73 128 131 15 144 61 65 7 129 7 144 54 76 145 30 64 145 30 64 130 15 146 64 77 147 69 64 144 59 67 145 32 64 145 32 64 7 208 160 41 
def_bytes_0x29a0              EQU                               0x29a0
def_bytes_0x29a0              DB                                146 63 79 147 68 74 7 146 61 82 147 66 78 144 54 75 145 30 64 145 30 64 14 146 59 77 147 64 64 144 61 65 129 8 145 57 80 146 63 74 131 7 144 61 83 145 56 83 144 54 74 146 33 64 146 33 64 14 145 66 78 147 71 64 144 59 75 146 30 64 146 30 64 7 145 64 80 147 69 71 8 145 63 82 147 68 78 144 54 73 130 14 208 160 42 
def_bytes_0x2aa0              EQU                               0x2aa0
def_bytes_0x2aa0              DB                                145 61 83 146 64 71 145 61 65 144 35 64 144 35 64 131 14 145 59 82 146 66 76 147 54 76 144 33 64 144 33 64 15 145 61 79 146 68 75 147 59 67 144 35 64 144 35 64 14 145 63 79 146 69 71 147 54 75 144 37 64 144 37 64 15 145 64 79 146 71 67 147 61 65 144 40 64 144 40 64 14 145 66 82 146 73 68 147 54 74 144 42 64 208 160 43 
def_bytes_0x2ba0              EQU                               0x2ba0
def_bytes_0x2ba0              DB                                144 42 64 14 145 64 80 146 68 64 147 59 75 144 30 64 144 30 64 15 147 54 73 14 147 61 65 7 128 8 144 54 76 145 30 64 145 30 64 130 131 14 146 64 77 147 69 64 144 59 67 145 32 64 145 32 64 7 146 63 79 147 68 74 7 146 61 82 147 66 78 144 54 75 145 30 64 145 30 64 15 146 59 77 147 64 64 144 61 65 129 7 208 160 44 
def_bytes_0x2ca0              EQU                               0x2ca0
def_bytes_0x2ca0              DB                                145 57 80 146 63 74 131 7 144 61 83 145 56 83 144 54 74 146 33 64 146 33 64 15 145 66 78 147 71 64 144 59 75 146 30 64 146 30 64 7 145 64 80 147 69 71 7 145 63 82 147 68 78 144 54 73 130 14 145 61 83 146 64 71 145 61 65 144 35 64 144 35 64 131 15 145 59 82 146 66 76 147 54 76 144 33 64 144 33 64 14 208 160 45 
def_bytes_0x2da0              EQU                               0x2da0
def_bytes_0x2da0              DB                                145 61 79 146 68 75 147 59 67 144 35 64 144 35 64 15 145 63 79 146 69 71 147 54 75 144 37 64 144 37 64 14 145 64 79 146 71 67 147 61 65 144 40 64 144 40 64 14 145 66 82 146 73 68 147 54 74 144 42 64 144 42 64 15 145 64 80 146 68 64 147 59 75 144 30 64 144 30 64 14 147 54 73 147 54 64 7 147 54 64 8 208 160 46 
def_bytes_0x2ea0              EQU                               0x2ea0
def_bytes_0x2ea0              DB                                147 61 65 14 145 66 76 146 54 76 144 42 64 144 42 64 131 14 145 69 64 146 59 67 8 145 68 74 7 145 66 78 146 54 75 14 145 64 64 146 61 65 144 40 64 144 40 64 7 145 63 74 8 146 61 77 145 54 74 130 14 146 71 64 145 59 75 7 146 69 71 7 146 68 78 145 54 73 144 37 64 144 37 64 15 146 64 71 145 61 65 208 160 47 
def_bytes_0x2fa0              EQU                               0x2fa0
def_bytes_0x2fa0              DB                                144 40 64 144 40 64 14 146 66 76 145 54 76 144 37 64 144 37 64 15 146 68 75 145 59 67 144 42 64 144 42 64 14 146 69 71 145 54 75 144 37 64 144 37 64 14 146 71 67 145 61 65 144 40 64 144 40 64 15 146 73 68 145 54 74 144 37 64 144 37 64 14 146 68 64 145 59 75 144 30 64 144 30 64 15 145 54 73 14 145 61 65 14 208 160 48 
def_bytes_0x30a0              EQU                               0x30a0
def_bytes_0x30a0              DB                                146 66 76 145 54 76 144 42 64 144 42 64 15 146 69 64 145 59 67 7 146 68 74 7 146 66 78 145 54 75 15 146 64 64 145 61 65 144 40 64 144 40 64 7 146 63 74 7 145 61 77 145 54 74 130 14 146 71 64 145 59 75 8 146 69 71 7 146 68 78 145 54 73 144 37 64 144 37 64 14 146 64 71 145 61 65 144 40 64 144 40 64 15 208 160 49 
def_bytes_0x31a0              EQU                               0x31a0
def_bytes_0x31a0              DB                                146 66 76 145 54 76 144 37 64 144 37 64 14 146 68 75 145 59 67 144 42 64 144 42 64 14 146 69 71 145 54 75 144 37 64 144 37 64 15 146 71 67 145 61 65 144 40 64 144 40 64 14 146 73 68 145 54 74 144 37 64 144 37 64 15 146 68 64 145 59 75 146 68 64 147 61 64 144 30 64 144 30 64 14 145 52 82 147 61 82 146 68 82 208 160 50 
def_bytes_0x32a0              EQU                               0x32a0
def_bytes_0x32a0              DB                                29 144 42 64 144 42 64 130 7 145 49 64 146 52 64 147 61 64 7 129 130 131 22 145 49 82 146 52 82 147 61 82 7 144 40 64 144 40 64 43 144 37 64 144 37 64 15 144 40 64 144 40 64 14 144 37 64 144 37 64 14 144 42 64 144 42 64 15 144 37 64 144 37 64 14 144 40 64 144 40 64 15 144 37 64 144 37 64 14 144 30 64 208 160 51 
def_bytes_0x33a0              EQU                               0x33a0
def_bytes_0x33a0              DB                                144 30 64 36 145 49 64 146 52 64 147 61 64 7 144 42 64 144 42 64 22 145 49 82 146 52 82 147 61 82 21 144 40 64 144 40 64 44 144 37 64 144 37 64 14 144 40 64 144 40 64 14 144 37 64 144 37 64 15 144 42 64 144 42 64 14 144 37 64 144 37 64 15 144 40 64 144 40 64 14 144 37 64 144 37 64 14 144 30 64 144 30 64 208 160 52 
def_bytes_0x34a0              EQU                               0x34a0
def_bytes_0x34a0              DB                                36 145 54 64 146 57 64 147 66 64 8 144 42 64 144 42 64 21 145 54 82 146 57 82 147 66 82 22 144 40 64 144 40 64 43 144 37 64 144 37 64 14 144 40 64 144 40 64 15 144 37 64 144 37 64 14 144 42 64 144 42 64 15 144 37 64 144 37 64 14 144 40 64 144 40 64 14 144 37 64 144 37 64 15 144 30 64 144 30 64 21 208 160 53 
def_bytes_0x35a0              EQU                               0x35a0
def_bytes_0x35a0              DB                                145 54 64 146 57 64 147 66 64 22 144 42 64 144 42 64 7 145 54 82 146 57 82 147 66 82 36 144 40 64 144 40 64 43 144 37 64 144 37 64 15 144 40 64 144 40 64 14 144 37 64 144 37 64 15 144 42 64 144 42 64 14 144 37 64 144 37 64 14 144 40 64 144 40 64 15 144 37 64 144 37 64 14 144 30 64 144 30 64 15 145 54 64 208 160 54 
def_bytes_0x36a0              EQU                               0x36a0
def_bytes_0x36a0              DB                                146 57 64 147 66 64 28 145 54 82 146 57 82 147 66 82 144 42 64 144 42 64 44 144 40 64 144 40 64 43 145 75 64 146 68 64 147 59 64 144 37 64 144 37 64 14 144 40 64 144 40 64 15 145 75 82 146 68 82 147 59 82 144 37 64 144 37 64 14 144 42 64 144 42 64 14 144 37 64 144 37 64 15 144 40 64 144 40 64 14 144 37 64 208 160 55 
def_bytes_0x37a0              EQU                               0x37a0
def_bytes_0x37a0              DB                                144 37 64 15 144 30 64 144 30 64 14 145 76 64 146 69 64 147 60 64 29 145 76 82 146 69 82 147 60 82 144 42 64 144 42 64 43 144 40 64 144 40 64 43 145 75 64 146 68 64 147 59 64 144 37 64 144 37 64 15 144 40 64 144 40 64 14 145 75 82 146 68 82 147 59 82 144 37 64 144 37 64 14 144 42 64 144 42 64 15 144 37 64 208 160 56 
def_bytes_0x38a0              EQU                               0x38a0
def_bytes_0x38a0              DB                                144 37 64 14 144 40 64 144 40 64 15 144 37 64 144 37 64 14 144 30 64 144 30 64 14 145 54 64 146 57 64 147 66 64 4 147 66 82 4 131 3 147 69 82 4 131 3 147 73 82 4 147 73 64 131 4 147 78 82 3 145 54 82 146 57 82 144 42 64 144 42 64 131 4 147 73 82 3 131 4 147 69 82 4 131 3 147 66 82 4 147 66 64 208 160 57 
def_bytes_0x39a0              EQU                               0x39a0
def_bytes_0x39a0              DB                                131 3 147 61 82 4 131 4 147 66 82 3 131 4 147 69 82 3 144 40 64 144 40 64 131 4 147 73 82 4 147 73 64 131 3 147 78 82 4 131 3 147 73 82 4 131 4 147 69 82 3 131 4 147 66 82 3 131 4 147 63 82 4 145 75 64 146 68 64 144 37 64 144 37 64 131 3 146 68 82 4 145 75 64 130 3 145 71 82 4 144 40 64 208 160 58 
def_bytes_0x3aa0              EQU                               0x3aa0
def_bytes_0x3aa0              DB                                144 40 64 146 80 64 129 4 145 75 82 130 3 145 75 64 129 4 145 80 82 3 146 75 82 147 68 82 144 37 64 144 37 64 129 4 146 75 82 4 147 68 64 130 3 145 71 82 131 4 144 42 64 144 42 64 146 63 64 129 3 145 68 82 130 4 145 68 64 129 4 145 63 82 3 144 37 64 144 37 64 146 71 64 129 4 145 68 82 130 3 208 160 59 
def_bytes_0x3ba0              EQU                               0x3ba0
def_bytes_0x3ba0              DB                                146 75 64 129 4 145 71 82 130 4 144 40 64 144 40 64 146 80 64 129 3 145 75 82 130 4 145 75 64 129 3 145 80 82 4 144 37 64 144 37 64 146 71 64 129 4 145 75 82 130 3 146 68 64 129 4 145 71 82 130 3 144 30 64 144 30 64 146 64 64 129 4 145 68 82 130 4 146 69 64 129 3 145 64 82 130 4 146 76 64 147 69 64 208 160 60 
def_bytes_0x3ca0              EQU                               0x3ca0
def_bytes_0x3ca0              DB                                129 3 147 69 82 4 146 76 64 131 4 145 72 82 130 3 146 81 64 129 4 145 76 82 130 3 145 76 64 129 4 145 81 82 4 146 76 82 147 69 82 144 42 64 144 42 64 129 3 146 76 82 4 147 69 64 130 3 145 72 82 131 4 146 64 64 129 4 145 69 82 130 3 145 69 64 129 4 145 64 82 3 146 72 64 129 4 145 69 82 130 4 208 160 61 
def_bytes_0x3da0              EQU                               0x3da0
def_bytes_0x3da0              DB                                146 76 64 129 3 145 72 82 130 4 144 40 64 144 40 64 146 81 64 129 3 145 76 82 130 4 145 76 64 129 4 145 81 82 3 146 72 64 129 4 145 76 82 130 3 146 69 64 129 4 145 72 82 130 4 146 63 64 129 3 145 69 82 130 4 146 68 64 129 3 145 63 82 130 4 146 75 64 147 68 64 144 37 64 144 37 64 129 4 147 68 82 3 208 160 62 
def_bytes_0x3ea0              EQU                               0x3ea0
def_bytes_0x3ea0              DB                                146 75 64 131 4 145 71 82 130 3 144 40 64 144 40 64 146 80 64 129 4 145 75 82 130 4 145 75 64 129 3 145 80 82 4 146 75 82 147 68 82 144 37 64 144 37 64 129 3 146 75 82 4 147 68 64 130 4 145 71 82 131 3 144 42 64 144 42 64 146 63 64 129 4 145 68 82 130 3 145 68 64 129 4 145 63 82 4 144 37 64 208 160 63 
def_bytes_0x3fa0              EQU                               0x3fa0
def_bytes_0x3fa0              DB                                144 37 64 146 71 64 129 3 145 68 82 130 4 146 75 64 129 3 145 71 82 130 4 144 40 64 144 40 64 146 80 64 129 4 145 75 82 130 3 145 75 64 129 4 145 80 82 3 144 37 64 144 37 64 146 71 64 129 4 145 75 82 130 4 146 68 64 129 3 145 71 82 130 4 144 30 64 144 30 64 146 61 64 129 3 145 68 82 130 4 146 66 64 208 160 64 
def_bytes_0x40a0              EQU                               0x40a0
def_bytes_0x40a0              DB                                129 4 145 61 82 130 3 146 54 64 147 57 64 129 4 145 66 82 3 129 4 145 69 82 4 129 3 145 73 82 4 145 73 64 129 3 145 78 82 4 146 54 82 147 57 82 144 42 64 144 42 64 129 4 145 73 82 3 129 4 145 69 82 3 129 4 145 66 82 4 145 66 64 129 3 145 61 82 4 129 3 145 66 82 4 129 4 145 69 82 3 208 160 65 
def_bytes_0x41a0              EQU                               0x41a0
def_bytes_0x41a0              DB                                144 40 64 144 40 64 129 4 145 73 82 3 145 73 64 129 4 145 78 82 4 129 3 145 73 82 4 129 3 145 69 82 4 129 4 145 66 82 3 129 4 145 63 82 3 146 75 64 147 68 64 144 37 64 144 37 64 129 4 147 68 82 4 146 75 64 131 3 145 71 82 130 4 144 40 64 144 40 64 146 80 64 129 3 145 75 82 130 4 145 75 64 208 160 66 
def_bytes_0x42a0              EQU                               0x42a0
def_bytes_0x42a0              DB                                129 4 145 80 82 3 146 75 82 147 68 82 144 37 64 144 37 64 129 4 146 75 82 3 147 68 64 130 4 145 71 82 131 4 144 42 64 144 42 64 146 63 64 129 3 145 68 82 130 4 145 68 64 129 3 145 63 82 4 144 37 64 144 37 64 146 71 64 129 4 145 68 82 130 3 146 75 64 129 4 145 71 82 130 3 144 40 64 144 40 64 208 160 67 
def_bytes_0x43a0              EQU                               0x43a0
def_bytes_0x43a0              DB                                146 80 64 129 4 145 75 82 130 4 145 75 64 129 3 145 80 82 4 144 37 64 144 37 64 146 71 64 129 3 145 75 82 130 4 146 68 64 129 4 145 71 82 130 3 144 30 64 144 30 64 146 64 64 129 4 145 68 82 130 3 146 69 64 129 4 145 64 82 130 4 146 76 64 147 69 64 129 3 147 69 82 4 146 76 64 131 3 145 72 82 130 4 208 160 68 
def_bytes_0x44a0              EQU                               0x44a0
def_bytes_0x44a0              DB                                146 81 64 129 4 145 76 82 130 3 145 76 64 129 4 145 81 82 3 146 76 82 147 69 82 144 42 64 144 42 64 129 4 146 76 82 4 147 69 64 130 3 145 72 82 131 4 146 64 64 129 3 145 69 82 130 4 145 69 64 129 4 145 64 82 3 146 72 64 129 4 145 69 82 130 3 146 76 64 129 4 145 72 82 130 4 144 40 64 144 40 64 208 160 69 
def_bytes_0x45a0              EQU                               0x45a0
def_bytes_0x45a0              DB                                146 81 64 129 3 145 76 82 130 4 145 76 64 129 3 145 81 82 4 146 72 64 129 4 145 76 82 130 3 146 69 64 129 4 145 72 82 130 3 146 63 64 129 4 145 69 82 130 4 146 68 64 129 3 145 63 82 130 4 146 75 64 147 68 64 144 37 64 144 37 64 129 3 147 68 82 4 146 75 64 131 4 145 71 82 130 3 144 40 64 144 40 64 208 160 70 
def_bytes_0x46a0              EQU                               0x46a0
def_bytes_0x46a0              DB                                146 80 64 129 4 145 75 82 130 3 145 75 64 129 4 145 80 82 4 146 75 82 147 68 82 144 37 64 144 37 64 129 3 146 75 82 4 147 68 64 130 3 145 71 82 131 4 144 42 64 144 42 64 146 63 64 129 4 145 68 82 130 3 145 68 64 129 4 145 63 82 3 144 37 64 144 37 64 146 71 64 129 4 145 68 82 130 4 146 75 64 129 3 208 160 71 
def_bytes_0x47a0              EQU                               0x47a0
def_bytes_0x47a0              DB                                145 71 82 130 4 144 40 64 144 40 64 146 80 64 129 3 145 75 82 130 4 145 75 64 129 4 145 80 82 3 144 37 64 144 37 64 146 71 64 129 4 145 75 82 130 3 146 68 64 129 4 145 71 82 130 4 144 30 64 144 30 64 146 61 64 129 3 145 68 82 130 4 146 66 64 129 3 145 61 82 130 4 146 54 64 147 57 64 129 4 145 66 83 208 160 72 
def_bytes_0x48a0              EQU                               0x48a0
def_bytes_0x48a0              DB                                3 129 4 145 69 83 3 129 4 145 73 84 4 145 73 66 129 3 145 78 85 4 146 54 82 147 57 82 129 3 145 73 85 4 129 4 145 69 86 3 129 4 145 66 87 3 145 66 69 129 4 145 61 87 4 129 3 145 66 88 4 129 3 145 69 89 4 129 4 145 73 90 3 145 73 72 129 4 145 78 90 3 129 4 145 73 91 4 129 3 145 69 92 208 160 73 
def_bytes_0x49a0              EQU                               0x49a0
def_bytes_0x49a0              DB                                4 129 3 145 66 92 4 145 66 76 129 4 145 61 93 3 129 4 145 66 94 3 129 4 145 69 94 4 129 3 145 73 95 4 145 73 79 129 3 145 78 96 4 129 4 145 73 96 3 129 4 145 69 97 3 129 4 145 66 98 4 145 66 82 129 3 145 61 98 4 129 3 145 66 99 4 129 4 145 69 100 3 129 4 145 73 100 3 145 73 85 129 4 208 160 74 
def_bytes_0x4aa0              EQU                               0x4aa0
def_bytes_0x4aa0              DB                                145 78 101 4 129 3 145 73 102 4 129 3 145 69 102 4 129 4 145 66 103 3 145 66 88 129 4 145 61 104 3 144 69 89 129 4 144 66 105 4 145 73 90 128 3 144 69 105 129 4 145 78 91 128 3 144 73 106 129 4 144 73 92 128 4 144 78 107 3 145 69 92 128 4 144 73 107 129 3 145 66 93 128 4 144 69 108 129 4 145 61 94 208 160 75 
def_bytes_0x4ba0              EQU                               0x4ba0
def_bytes_0x4ba0              DB                                128 3 144 66 109 129 4 144 66 95 128 3 144 61 109 4 145 69 96 128 4 144 66 110 129 3 145 73 96 128 4 144 69 111 129 3 145 78 97 128 4 144 73 111 129 4 144 73 98 128 3 144 78 112 4 145 69 99 128 3 144 73 113 129 4 145 66 100 128 4 144 69 113 129 3 145 61 100 128 4 144 66 114 129 3 144 66 101 128 4 144 61 115 208 160 10 

; Define Words

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                  LDI                               0x40
                              STW                               romType
                              RomCheck                          
                              Initialise                                                        ; INIT

                              LDI                               2
                              STW                               graphicsMode
                              ScanlineMode                                                      ; mode 2

                              ClearVertBlinds                                                   ; cls

                              LDWI                              0xFFFE
                              ANDW                              miscFlags
                              STW                               miscFlags                       ; scroll off

                              LDI                               0
                              STW                               timerTick
                              STW                               timerPrev
                              LDWI                              tickTime
                              STW                               realTimeProc0
                              LDWI                              playMidiVol
                              STW                               realTimeProc1
                              LDWI                              _userProc
                              STW                               realTimeProc2
                              CALLI                             setRealTimeProc2
                              LDWI                              giga_vblankProc
                              STW                               register0
                              LDWI                              realTimeStub
                              DOKE                              register0                       ; init time, midiv, userProc

                              LDI                               2
                              ST                                waveType
                              LDWI                              2720
                              PlayMidiV                                                         ; play midiv, &h0AA0, 2

                              LDWI                              32512
                              STW                               _vram                           ; vram = 0x7F00

                              LDWI                              16160
                              STW                               fgbgColour                      ; set FGBG_COLOUR, 0x3F20

                              LDI                               65
                              ST                                cursorXY
                              LDI                               112
                              ST                                cursorXY + 1
                              AtTextCursor                      
                              PrintString                       _str_0x7ef6
                              NewLine                                                           ; at TIMER_POS, 112 : print "00:00:00"

                              LDWI                              handleT_mode + 1
                              STW                               register0
                              LDI                               12
                              POKE                              register0                       ; set TIME_MODE, 12

                              LDWI                              32000
                              STW                               timerTick                       ; set TIMER, 32000

                              LDWI                              _timeArray_ + 2
                              STW                               register0
                              LDI                               11
                              POKE                              register0
                              LDWI                              _timeArray_ + 1
                              STW                               register0
                              LDI                               11
                              POKE                              register0
                              LDWI                              _timeArray_ + 0
                              STW                               register0
                              LDI                               11
                              POKE                              register0                       ; set TIME_H, 11 : set TIME_M, 11 : set TIME_S, 11

                              LDWI                              realTS_rti + 2
                              STW                               register0
                              LDI                               1
                              STW                               register1
                              LDWI                              256
                              SUBW                              register1
                              POKE                              register0                       ; set VBLANK_FREQ, 1

                              LDI                               0
                              STW                               _seconds                        ; seconds = 0

_loop                         Rand                              
                              ANDI                              63
                              ST                                fgbgColour                      ; set BG_COLOUR, rnd(0) AND &h3F

                              Rand                              
                              ANDI                              63
                              ST                                fgbgColour + 1                  ; set FG_COLOUR, rnd(0) AND &h3F

                              LDI                               0xa0
                              RandMod                           
                              STW                               drawRectF_x1
                              LDI                               0x6e
                              RandMod                           
                              STW                               drawRectF_y1
                              LDI                               0xa0
                              RandMod                           
                              STW                               drawRectF_x2
                              LDI                               0x6e
                              RandMod                           
                              STW                               drawRectF_y2
                              DrawRectF                                                         ; rectf rnd(160), rnd(110), rnd(160), rnd(110)

                              LDI                               0x64
                              RandMod                           
                              ADDI                              30
                              STW                               drawCircle_cx
                              LDI                               0x32
                              CALLI                             _page_0x0300
_page_0x0300                  RandMod                           
                              ADDI                              38
                              STW                               drawCircle_cy
                              LDI                               0x1e
                              RandMod                           
                              ADDI                              1
                              STW                               drawCircle_r
                              DrawCircle                                                        ; circle rnd(100) + (- 50 + 80), rnd(50) + (- 20 + 50), rnd(30) + 1

                              LDI                               0xa0
                              RandMod                           
                              STW                               drawLine_x1
                              LDI                               0x6e
                              RandMod                           
                              STW                               drawLine_y1
                              LDI                               0xa0
                              RandMod                           
                              STW                               drawLine_x2
                              LDI                               0x6e
                              RandMod                           
                              STW                               drawLine_y2
                              DrawLine                                                          ; line rnd(160), rnd(110), rnd(160), rnd(110)

                              LDI                               0xa0
                              RandMod                           
                              ST                                cursorXY
                              LDI                               0x66
                              RandMod                           
                              ST                                cursorXY + 1
                              AtTextCursor                                                      ; at rnd(160), rnd(102)

                              PrintString                       _str_0x7eeb                     ; print "Gigatron!";

                              LDWI                              16160
                              STW                               fgbgColour                      ; set FGBG_COLOUR, 0x3F20

                              LDI                               0
                              ST                                cursorXY
                              LDI                               112
                              ST                                cursorXY + 1
                              AtTextCursor                      
                              LDW                               timerTick
                              PrintAcInt16                      
                              PrintString                       _str_0x7ee8                     ; at 0, 112 : print get("TIMER");" ";

                              LDI                               38
                              ST                                cursorXY
                              LDI                               112
                              ST                                cursorXY + 1
                              AtTextCursor                      
                              LDW                               timerTick
                              PrintAcHexWord                    
                              NewLine                                                           ; at 38, 112 : print hexw$(get("TIMER"))

                              LDWI                              _timeArray_ + 0
                              PEEK                              
                              XORW                              _seconds
                              JumpNE                            _endif_0x0446 0                 ; if get("TIME_S") &<> seconds

                              LDWI                              _timeArray_ + 0
                              PEEK                              
                              STW                               _seconds                        ; seconds = get("TIME_S")

                              LDI                               65
                              ST                                cursorXY
                              LDI                               112
                              ST                                cursorXY + 1
                              AtTextCursor                                                      ; at TIMER_POS, 112

                              TimeString                        
                              PrintString                       _timeString_
                              NewLine                                                           ; print time$

                              LDI                               116
                              ST                                cursorXY
                              AtTextCursor                      
                              LDWI                              _timeArray_ + 2
                              PEEK                              
                              PrintAcInt16                      
                              NewLine                                                           ; at 116 : print get("TIME_H")

                              LDI                               131
                              ST                                cursorXY
                              AtTextCursor                      
                              LDWI                              _timeArray_ + 1
                              PEEK                              
                              PrintAcInt16                      
                              NewLine                                                           ; at 131 : print get("TIME_M")

                              LDI                               146
                              ST                                cursorXY
                              AtTextCursor                      
                              LDWI                              _timeArray_ + 0
                              PEEK                              
                              PrintAcInt16                      
                              NewLine                                                           ; at 146 : print get("TIME_S")

_endif_0x0446                 CALLI                             _loop                           ; goto loop

_end_0x0449                   BRA                               _end_0x0449                     ; end

_userProc                     LDW                               _vram
                              PEEK                              
                              ADDI                              1
                              POKE                              _vram                           ; poke vram, peek(vram) + 1

                              RET                                                               ; ret

_end_0x045b                   BRA                               _end_0x045b                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                      EQU     0x7ed1
realTimeStub                  EQU     0x7bd6
setRealTimeProc0              EQU     0x7aa0
setRealTimeProc1              EQU     0x77a2
setRealTimeProc2              EQU     0x7bea
divide16bit                   EQU     0x74ac
rand16bit                     EQU     0x7eaa
randMod16bit                  EQU     0x7ab2
scanlineMode                  EQU     0x7eb2
resetVideoFlags               EQU     0x7ebc
resetVideoTable               EQU     0x75a2
initClearFuncs                EQU     0x78a9
clearVertBlinds               EQU     0x7dc9
clearCursorRow                EQU     0x73d3
drawHLine                     EQU     0x73aa
drawLine                      EQU     0x76ae
drawLineExt                   EQU     0x72ca
drawLineLoop                  EQU     0x71c7
drawLineLoadXY                EQU     0x70d4
drawCircle                    EQU     0x77b7
drawCircleExt1                EQU     0x6fb3
drawCircleExt2                EQU     0x70a2
drawRectF                     EQU     0x78d9
resetAudio                    EQU     0x7ba3
playMidiVol                   EQU     0x7cb0
midiStartNote                 EQU     0x6eb3
printInit                     EQU     0x72b4
printText                     EQU     0x7ac3
printDigit                    EQU     0x71a5
printInt16                    EQU     0x75c2
printChar                     EQU     0x6dab
printHexByte                  EQU     0x6cce
printHexWord                  EQU     0x7da1
atTextCursor                  EQU     0x7ada
newLineScroll                 EQU     0x79aa
tickTime                      EQU     0x7db0
handleTime                    EQU     0x6bc7
timeDigits                    EQU     0x6caa
timeString                    EQU     0x78b4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; runs real time, (vblank interrupt), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    CALLI   0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
realTimeStub1       BRA     realTS_rti
                    RET                                     ; BRA + RET gets replaced by CALLI realTimeProc1 address
realTimeStub2       BRA     realTS_rti
                    RET                                     ; BRA + RET gets replaced by CALLI realTimeProc2 address

realTS_rti          POP
                    LDI     255                             ; (256 - n) = vblank interrupt frequency
                    ST      giga_frameCount
                    LDWI    &h0400
                    LUP 0                                   ; RTI




setRealTimeProc0    LDWI    realTimeStub
                    STW     realTimeAddr
                    LDI     0x75
                    POKE    realTimeAddr                    ; replace RET with PUSH
                    INC     realTimeAddr
                    INC     realTimeAddr                    ; realTimeStub + 2
                    LDW     realTimeProc0
                    DOKE    realTimeAddr                    ; replace 0x0000 with proc
                    RET


setRealTimeProc1    PUSH
                    CALLI   setRealTimeProc0
                    LDWI    realTimeStub1
                    STW     realTimeAddr
                    LDI     0x85
                    POKE    realTimeAddr                    ; replace POP with CALLI
                    INC     realTimeAddr                    ; realTimeStub + 1
                    LDW     realTimeProc1
                    DOKE    realTimeAddr                    ; replace 2xRET with proc
                    POP
                    RET


setRealTimeProc2    PUSH
                    CALLI   setRealTimeProc1
                    LDWI    realTimeStub2
                    STW     realTimeAddr
                    LDI     0x85
                    POKE    realTimeAddr                    ; replace POP with CALLI
                    INC     realTimeAddr                    ; realTimeStub + 1
                    LDW     realTimeProc2
                    DOKE    realTimeAddr                    ; replace 2xRET with proc
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET



                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


randMod16bit        PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    STW     mathX
                    CALLI   divide16bit
                    LDW     mathRem
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_tmp        EQU     register15

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    

resetVideoFlags     LDWI    giga_videoTop                       ; reset videoTop
                    STW     register0
                    LDI     0
                    POKE    register0
                    
                    LDI     0x02                                ; starting cursor position
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET




                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop

                    CALLI   resetVideoFlags
                    POP
                    RET


initClearFuncs      PUSH
                    CALLI   resetVideoTable
                    
                    LDWI    SYS_SetMemory_v2_54                 ; setup fill memory SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    CALLI   initClearFuncs
                    LD      fgbgColour
                    ST      giga_sysArg1                        ; fill value
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LD      top
                    ST      giga_sysArg3                        ; top line
                    SYS     54                                  ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        ; bottom line
                    SYS     54                                  ; fill memory
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET




drawLine            PUSH                        ; matches drawLineLoop's POP
                    LDI     1
                    STW     drawLine_dx1
                    STW     drawLine_dx2
                    STW     drawLine_dy1
                    LDI     0
                    STW     drawLine_dy2                
    
                    LDWI    0x8000
                    STW     drawLine_tmp
                    
                    LDW     drawLine_x2         ; sx = x2 - x1
                    SUBW    drawLine_x1
                    STW     drawLine_sx
                    ANDW    drawLine_tmp        
                    BEQ     drawL_dy
                    LDWI    -1
                    STW     drawLine_dx1        
                    STW     drawLine_dx2        ; dx1 = dx2 = (sx & 0x8000) ? -1 : 1
                    LDI     0                   ; sx = (sx & 0x8000) ? 0 - sx : sx
                    SUBW    drawLine_sx
                    STW     drawLine_sx                
                    
drawL_dy            LDW     drawLine_y2
                    SUBW    drawLine_y1
                    STW     drawLine_sy
                    STW     drawLine_h          ; h = sy
                    ANDW    drawLine_tmp
                    BEQ     drawL_ext
                    
                    LDWI    -1
                    STW     drawLine_dy1        ; dy1 = (sy & 0x8000) ? -1 : 1
                    LDI     0                   
                    SUBW    drawLine_sy
                    STW     drawLine_sy         ; sy = (sy & 0x8000) ? 0 - sy : sy
                    SUBW    drawLine_sx
                    BLE     drawL_ext           
                    LDW     drawLine_dy1
                    STW     drawLine_dy2        ; if(sx < sy) dy2 = -1
    
drawL_ext           CALLI    drawLineLoadXY
                    CALLI    drawLineExt



drawLineExt         LDW     drawLine_sy
                    SUBW    drawLine_sx
                    BLE     drawL_num
                    LDI     0
                    STW     drawLine_dx2        ; if(sx < sy) dx2 = 0
                    LDW     drawLine_sy       
                    STW     drawLine_tmp
                    LDW     drawLine_sx
                    STW     drawLine_sy
                    LDW     drawLine_tmp
                    STW     drawLine_sx         ; swap sx with sy
                    LDW     drawLine_h
                    BLE     drawL_num
                    LDI     1
                    STW     drawLine_dy2        ; if(h > 0) dy2 = 1
    
drawL_num           LDWI    SYS_LSRW1_48
                    STW     giga_sysFn          
                    LDW     drawLine_sx
                    SYS     48
                    ADDI    1
                    STW     drawLine_num        ; numerator = sx>>1
                    STW     drawLine_count      ; for(count=sx>>1; counti>=0; --i)
                    
                    CALLI    drawLineLoadDXY
                    CALLI    drawLineLoop


drawLineLoop        LD      fgbgColour + 1
                    POKE    drawLine_xy1        ; plot start pixel
                    POKE    drawLine_xy2        ; plot end pixel, (meet in middle)
                    
                    LDW     drawLine_num        ; numerator += sy
                    ADDW    drawLine_sy
                    STW     drawLine_num
                    SUBW    drawLine_sx
                    BLE     drawL_flip          ; if(numerator <= sx) goto flip
                    STW     drawLine_num        ; numerator -= sx
                    
                    LDW     drawLine_xy1
                    ADDW    drawLine_dxy1
                    STW     drawLine_xy1        ; xy1 += dxy1
                    
                    LDW     drawLine_xy2
                    SUBW    drawLine_dxy1
                    STW     drawLine_xy2        ; xy2 -= dxy1
                    BRA     drawL_count
                    
drawL_flip          LDW     drawLine_xy1        
                    ADDW    drawLine_dxy2
                    STW     drawLine_xy1        ; xy1 += dxy2
                    
                    LDW     drawLine_xy2        
                    SUBW    drawLine_dxy2
                    STW     drawLine_xy2        ; xy2 -= dxy2
                    
drawL_count         LDW     drawLine_count
                    SUBI    0x01
                    STW     drawLine_count
                    BGT     drawLineLoop
                    POP                         ; matches drawLine's PUSH
                    RET


drawLineLoadXY      LD      drawLine_x1
                    ST      drawLine_xy1
                    LD      drawLine_y1
                    ADDI    8
                    ST      drawLine_xy1 + 1    ; xy1 = x1 | ((y1+8)<<8)
                    
                    LD      drawLine_x2
                    ST      drawLine_xy2
                    LD      drawLine_y2
                    ADDI    8
                    ST      drawLine_xy2 + 1    ; xy2 = x2 | ((y2+8)<<8)
                    RET
                    
drawLineLoadDXY     LDWI    SYS_LSLW8_24
                    STW     giga_sysFn          
                    LDW     drawLine_dy1
                    SYS     28
                    ADDW    drawLine_dx1
                    STW     drawLine_dxy1       ; dxy1 = dx1 + (dy1<<8)
    
                    LDW     drawLine_dy2
                    SYS     28
                    ADDW    drawLine_dx2
                    STW     drawLine_dxy2       ; dxy2 = dx2 + (dy2<<8)
                    RET



drawCircle          PUSH
                    LDI     0
                    STW     drawCircle_ch0
                    STW     drawCircle_ch1
                    STW     drawCircle_ch2
                    STW     drawCircle_ch3
                    STW     drawCircle_x
                    LDW     drawCircle_r
                    STW     drawCircle_y
                    LDI     1
                    SUBW    drawCircle_r
                    STW     drawCircle_d
                    
drawC_loop          CALLI   drawCircleExt1
                    
                    LDW     drawCircle_d
                    BGE     drawC_skip
                    LDW     drawCircle_x
                    LSLW
                    LSLW
                    ADDW    drawCircle_d
                    ADDI    3
                    STW     drawCircle_d
                    BRA     drawC_cont
                    
drawC_skip          LDW     drawCircle_x
                    SUBW    drawCircle_y
                    LSLW
                    LSLW
                    ADDW    drawCircle_d
                    ADDI    5
                    STW     drawCircle_d
                    LDW     drawCircle_y
                    SUBI    1
                    STW     drawCircle_y

drawC_cont          INC     drawCircle_x
                    LDW     drawCircle_x
                    SUBW    drawCircle_y
                    BLE     drawC_loop

                    POP
                    RET



drawCircleExt1      PUSH
                    LDW     drawCircle_cy
                    ADDW    drawCircle_y
                    ST      drawCircle_ch0 + 1
                    LDW     drawCircle_cy
                    SUBW    drawCircle_y
                    ST      drawCircle_ch1 + 1
                    LDW     drawCircle_cy
                    ADDW    drawCircle_x
                    ST      drawCircle_ch2 + 1
                    LDW     drawCircle_cy
                    SUBW    drawCircle_x
                    ST      drawCircle_ch3 + 1

                    LDW     drawCircle_cx
                    ADDW    drawCircle_x
                    ADDW    drawCircle_ch0
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a

                    LDW     drawCircle_cx
                    SUBW    drawCircle_x
                    ADDW    drawCircle_ch0
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a
                    
                    LDW     drawCircle_cx
                    ADDW    drawCircle_x
                    ADDW    drawCircle_ch1
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a

                    LDW     drawCircle_cx
                    SUBW    drawCircle_x
                    ADDW    drawCircle_ch1
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a
                    
                    CALLI   drawCircleExt2      ; doesn't return to here


drawCircleExt2      LDW     drawCircle_cx
                    ADDW    drawCircle_y
                    ADDW    drawCircle_ch2
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a

                    LDW     drawCircle_cx
                    SUBW    drawCircle_y
                    ADDW    drawCircle_ch2
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a
                    
                    LDW     drawCircle_cx
                    ADDW    drawCircle_y
                    ADDW    drawCircle_ch3
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a

                    LDW     drawCircle_cx
                    SUBW    drawCircle_y
                    ADDW    drawCircle_ch3
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a

                    POP
                    RET



drawHLine           LD      drawHLine_x1
                    ST      giga_sysArg2                    ; low start address
                    LD      drawHLine_x2
                    SUBW    drawHLine_x1
                    BGE     drawHL_cont
                    LD      drawHLine_x2
                    ST      giga_sysArg2                    ; low start address
                    LD      drawHLine_x1
                    SUBW    drawHLine_x2
                    
drawHL_cont         ADDI    1
                    ST      giga_sysArg0                    ; count
                    LD      fgbgColour + 1
                    ST      giga_sysArg1                    ; fill value
                    LD      drawHLine_y1
                    ADDI    8
                    ST      giga_sysArg3                    ; high start address
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn
                    SYS     54                              ; fill memory
                    RET


drawRectF           PUSH
                    LDW     drawRectF_y2
                    SUBW    drawRectF_y1
                    BGE     drawRF_loop
                    LDW     drawRectF_y2
                    STW     drawLine_tmp
                    LDW     drawRectF_y1
                    STW     drawRectF_y2
                    LDW     drawLine_tmp
                    STW     drawRectF_y1        ; if y2 < y1 then swap y2 with y1
                    
drawRF_loop         LDW     drawRectF_y1
                    STW     drawHLine_y1
                    CALLI   drawHLine
                    INC     drawRectF_y1
                    LDW     drawRectF_y1
                    SUBW    drawRectF_y2
                    BLE     drawRF_loop

                    POP
                    RET


audioAddr           EQU     register1
waveType            EQU     register2
midiNote            EQU     register4                       ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11


resetAudio          LDI     1
                    STW     midiDelay                       ; instant MIDI startup
                    LDWI    giga_soundChan1
                    STW     audioAddr
                    LD      waveType
                    ANDI    0x03
                    ST      waveType + 1                    ; wavX
                    LDI     0
                    ST      waveType                        ; wavA

resetA_loop         LDI     giga_soundChan1
                    ST      audioAddr                       ; reset low byte
                    LDW     waveType
                    DOKE    audioAddr                       ; wavA and wavX
                    INC     audioAddr
                    INC     audioAddr    
                    LDI     0
                    DOKE    audioAddr                       ; keyL and keyH
                    INC     audioAddr
                    INC     audioAddr
                    DOKE    audioAddr                       ; oscL and oscH
                    INC     audioAddr + 1                   ; increment high byte
                    
                    LD      audioAddr + 1
                    SUBI    4
                    BLE     resetA_loop
                    RET



playMidiVol         LDW     midiStream
                    BEQ     playMV_exit0                    ; 0x0000 = stop
                    LDI     5                               ; keep pumping soundTimer
                    ST      giga_soundTimer
                    LD      midiDelay
                    SUBI    1
                    ST      midiDelay
                    BLE     playMV_start

playMV_exit0        RET

playMV_start        PUSH

playMV_process      LDW     midiStream
                    PEEK                                    ; get midi stream byte
                    STW     midiCommand
                    LDW     midiStream
                    ADDI    0x01
                    STW     midiStream
                    LDI     0xF0
                    ANDW    midiCommand
                    XORI    0x90                            ; check for start note
                    BNE     playMV_endnote
    
                    CALLI   midiStartNote                   ; start note
                    CALLI   midiSetVolume                   ; set note volume
                    BRA     playMV_process
                    
playMV_endnote      XORI    0x10                            ; check for end note
                    BNE     playMV_segment
    
                    CALLI   midiEndNote                     ; end note
                    BRA     playMV_process

playMV_segment      XORI    0x50                            ; check for new segment
                    BNE     playMV_delay
    
                    LDW     midiStream                      ; midi score
                    DEEK
                    STW     midiStream                      ; 0xD0 new midi segment address
                    BEQ     playMV_exit1                    ; 0x0000 = stop
                    BRA     playMV_process
    
playMV_delay        LD      midiCommand
                    ST      midiDelay

playMV_exit1        POP
                    RET


midiStartNote       LDWI    giga_notesTable                 ; note table in ROM
                    STW     midiPtr
                    LDW     midiStream                      ; midi note
                    PEEK
                    SUBI    11
                    LSLW
                    ADDW    midiPtr
                    STW     midiPtr
                    LUP     0x00                            ; get ROM midi note low byte
                    ST      midiNote
                    LDW     midiPtr
                    LUP     0x01                            ; get ROM midi note high byte
                    ST      midiNote + 1
                    LDW     midiCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr                         ; note address 0x01FC <-> 0x04FC
                    LDW     midiNote
                    DOKE    midiPtr                         ; set note
                    
midiSN_exit         LDW     midiStream
                    ADDI    0x01                            ; midiStream++
                    STW     midiStream
                    RET

midiSetVolume       LDI     0xFA
                    ST      midiPtr                         ; wavA address 0x01FA <-> 0x04FA, (midiPtr is still valid from midiStartNote)
                    LDW     midiStream                      ; midi volume
                    PEEK
                    POKE    midiPtr
                    BRA     midiSN_exit                     ; save a few bytes by using midiStartNote's epilogue
                    
midiEndNote         LDW     midiCommand
                    ANDI    0x03                            ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr                         ; channels address 0x01FC <-> 0x04FC
                    LDI     0
                    DOKE    midiPtr                         ; end note
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by the accumulator
printText           PUSH
                    STW     textStr
                    CALLI   printInit

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    CALLI   printChar
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    STW     digitMult
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    CALLI   printChar
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    STW     textNum
                    CALLI   printInit
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    CALLI   printChar
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    CALLI   printDigit
                    LDWI    1000
                    CALLI   printDigit
                    LDI     100
                    CALLI   printDigit
                    LDI     10
                    CALLI   printDigit
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    CALLI   printChar
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    CALLI   newLineScroll                   ; next row, scroll at bottom
                    
printC_pop          POP

printC_exit         RET



                    ; print hex byte in textHex
printHexByte        PUSH
                    ST      textHex
                    LDWI    SYS_LSRW4_50                    ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LD      textHex
                    SYS     50
                    SUBI    10
                    BLT     printH_skip0
                    ADDI    7
printH_skip0        ADDI    0x3A
                    ST      textChr
                    CALLI   printInit
                    CALLI   printChar
                    LD      textHex
                    ANDI    0x0F
                    SUBI    10
                    BLT     printH_skip1
                    ADDI    7
printH_skip1        ADDI    0x3A
                    ST      textChr
                    CALLI   printChar
                    POP
                    RET


                    ; print hex word in textHex
printHexWord        PUSH
                    STW     textBak
                    LD      textBak + 1
                    CALLI   printHexByte
                    LD      textBak
                    CALLI   printHexByte
                    POP
                    RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres - giga_xfont
                    BLE     atTC_checkY
                    LDI     0
                    ST      cursorXY
                    
atTC_checkY         LD      cursorXY + 1
                    SUBI    giga_yres - giga_yfont
                    BLT     atTC_resbot
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET
                    
atTC_resbot         LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
                    CALLI   printInit                       ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         CALLI   clearCursorRow
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        LDW     scanLine
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
        
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          CALLI   printInit                       ; re-initialise the SYS registers
                    POP
                    RET



timeByte            EQU     register0
timeDigit           EQU     register1
timeStrAddr         EQU     register2
timeArrayExt        EQU     register3                           ; reg0-3 are used outside of the interrupt
timeArrayInt        EQU     register4                           ; reg4 is used within the interrupt


tickTime            LDW     timerTick
                    ADDI    1
                    STW     timerTick                           ; 1/60 user timer, (max time = 546.116 seconds)
                    INC     timerPrev                           ; 1/60 internal counter
                    LD      timerPrev
                    SUBI    60
                    BLT     tickT_exit
                    LDI     0
                    ST      timerPrev
                    PUSH
                    CALLI   handleTime                          ; handle time every second
                    POP

tickT_exit          RET                    


handleTime          LDWI    _timeArray_
                    STW     timeArrayInt
                    PEEK
                    ADDI    1
                    POKE    timeArrayInt                        ; seconds
                    SUBI    60
                    BLT     handleT_exit
                    LDI     0
                    POKE    timeArrayInt                        ; reset seconds
                    
                    INC     timeArrayInt
                    LDW     timeArrayInt
                    PEEK
                    ADDI    1
                    POKE    timeArrayInt                        ; minutes
                    SUBI    60
                    BLT     handleT_exit
                    LDI     0
                    POKE    timeArrayInt                        ; reset minutes
                    
                    INC     timeArrayInt
                    LDW     timeArrayInt
                    PEEK
                    ADDI    1
                    POKE    timeArrayInt                        ; hours
handleT_mode        SUBI    24                                  ; [handleT_mode + 1] = 12 hour/24 hour
                    BLT     handleT_exit
handleT_epoch       LDI     0                                   ; [handleT_epoch + 1] = start hour
                    POKE    timeArrayInt                        ; reset hours

handleT_exit        RET                    



timeDigits          STW     timeByte

timeD_index         SUBI    10
                    BLT     timeD_cont
                    STW     timeByte
                    INC     timeDigit                           ; calculate 10's digit
                    BRA     timeD_index
    
timeD_cont          LD      timeDigit
                    ORI     0x30
                    POKE    timeStrAddr                         ; store 10's digit
                    INC     timeStrAddr
                    LD      timeByte
                    ORI     0x30
                    POKE    timeStrAddr                         ; store 1's digit
                    INC     timeStrAddr                         ; skip colon
                    INC     timeStrAddr                         ; next 10's digit
                    LDI     0x30
                    ST      timeDigit                           ; reset 10's digit
                    RET


                    ; create a time string
timeString          PUSH
                    LDI     0
                    STW     timeDigit
                    LDWI    _timeString_ + 1
                    STW     timeStrAddr                         ; skip length byte

                    LDWI    _timeArray_
                    STW     timeArrayExt
                    ADDI    2
                    PEEK                                        ; hours
                    CALLI   timeDigits

                    LDW     timeArrayExt
                    ADDI    1
                    PEEK                                        ; minutes
                    CALLI   timeDigits

                    LDW     timeArrayExt
                    PEEK                                        ; seconds
                    CALLI   timeDigits
                    POP
                    RET

