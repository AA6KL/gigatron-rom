_startAddress_      EQU                     0x0200

; Internal variables
serialRawPrev       EQU                     0x0081
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
frameCountPrev      EQU                     register0 + 0x28
miscFlags           EQU                     register0 + 0x2A
highByteMask        EQU                     register0 + 0x2C

; Internal buffers
textWorkArea        EQU                     0xffa0

; Includes
%includePath        "../runtime"
%include            gigatron.i
%include            macros.i

; Labels
_entryPoint_        EQU                     0x0200
_math               EQU                     0x0368
_div                EQU                     0x03a0
_next_0x026b        EQU                     0x0267
_else_0x0291        EQU                     0x027f
_next_0x02bd        EQU                     0x02a9
_page_0x0300        EQU                     0x0300
_end_0x0378         EQU                     0x0366
_else_0x03de        EQU                     0x03b4
_while_0x03e3       EQU                     0x03b9
_else_0x0416        EQU                     0x03da
_page_0x0400        EQU                     0x0400
_else_0x0438        EQU                     0x0404
_wend_0x044a        EQU                     0x0414
_end_0x044c         EQU                     0x0416

; Variables
_result             EQU                     0x0030
_timer              EQU                     0x0032
_tick               EQU                     0x0034
_i                  EQU                     0x0036
_ticks              EQU                     0x0038
_q                  EQU                     0x003a
_r                  EQU                     0x003c
_n                  EQU                     0x003e
_d                  EQU                     0x0040
_a                  EQU                     0x0042
_b                  EQU                     0x0044
_mask               EQU                     0x0046

; Strings
_str_0xff9d         EQU                     0xff9d
_str_0xff9d         DB                      1 ' ' 0
_str_0xff98         EQU                     0xff98
_str_0xff98         DB                      3 '/60' 0

; Define Bytes

; Define Words
def_words_0x8000    EQU                     0x8000
def_words_0x8000    DW                      -176 150 -78 33 168 45 42 164 -132 -105 175 140 -157 -45 -123 62 -175 26 157 -162 -60 -79 -78 -103 146 -126 54 -35 98 -112 -14 -37 -176 114 -2 -92 45 -38 45 146 13 38 -163 8 91 46 -91 -83 -69 -97 128 84 -18 159 90 -25 35 -62 0 14 -37 -27 -43 -29 -10 41 -111 -112 -99 98 -84 67 -48 169 13 -168 -71 110 -124 15 -120 -54 134 80 152 132 -110 -68 57 18 111 -82 -169 163 -71 -46 -132 131 -68 -83 -174 142 120 -122 84 64 -178 10 -131 -83 49 174 144 140 136 -167 -79 -55 27 63 -100 -149 28 -2 158 99 -119 -102 104 143 79 108 91 -130 153 -109 136 133 121 25 -41 17 109 -159 107 -3 46 -73 27 126 -107 -39 20 157 39 -20 174 -178 -85 163 -44 87 -175 27 128 -134 14 34 -154 -50 -83 -110 55 -37 -160 -104 -47 21 63 -14 13 -157 79 -95 -174 96 23 147 40 -158 -112 -21 135 -127 83 125 -79 42 -177 -124 77 76 -29 143 -107 123 -112 116 -134 -100 -13 -149 -33 152 -134 -177 -164 -180 157 -136 132 -1 143 28 -39 30 -108 -57 46 69 -179 49 -68 -113 -118 47 153 -160 -56 -76 87 -71 -101 -151 -159 20 86 -29 -117 104 -144 109 -22 -113 65 -91 -150 -98 29 -85 -169 21 0 79 -11 111 -61 122 -108 4 174 153 150 -67 -153 141 171 -56 -79 -114 -160 173 -103 -151 11 -144 -115 -97 -86 -175 166 -88 -84 72 135 -136 119 -92 6 -31 -140 109 155 -167 1 24 166 -26 -115 116 86 167 -31 -141 -49 44 165 19 -36 -47 -79 14 -122 -9 69 103 123 3 -118 173 -126 99 -85 116 -66 150 -34 -174 73 -172 -48 112 3 -26 -168 2 -45 15 -110 169 61 -45 47 -122 149 -2 -86 81 -37 1 -42 -140 24 80 135 49 64 111 55 -37 151 15 98 -68 -79 -124 131 -118 -171 -31 -104 -153 49 -179 132 161 100 -33 4 56 168 72 -36 15 143 25 98 28 120 149 -62 -141 -143 -80 -100 23 -137 96 148 122 124 -86 57 104 -56 160 40 63 -125 82 25 146 -94 58 -70 127 -136 -139 -46 -132 175 -33 57 -79 31 -178 -129 -174 -18 98 -86 148 -88 51 84 -110 -135 131 59 120 -71 -11 -110 -168 -56 151 -103 -61 -142 36 57 -157 52 -11 163 110 0 161 25 -59 165 74 -139 38 11 -5 -104 63 77 -34 126 60 -65 -134 64 114 50 174 -39 -179 -2 87 -90 -73 80 -104 24 -94 140 130 -124 -40 101 -151 92 105 90 -86 7 109 -125 -118 -145 -150 -131 41 162 -88 145 -65 -117 51 116 85 -63 -159 -21 79 -176 141 45 136 -154 -61 -59 -74 33 -163 128 152 40 -59 116 86 -17 99 2 -48 7 26 -91 -54 173 62 -13 -106 66 73 -68 -166 131 94 -48 51 -135 -27 -34 122 -157 81 51 118 -141 -74 -9 51 -177 -145 -154 -79 1 -113 -131 8 -63 -66 44 -70 65 126 -69 -111 105 39 64 -68 92 -80 -144 -164 98 126 83 123 -120 146 -123 -49 -171 -130 -70 59 31 88 -70 -104 125 -29 -58 42 -74 -54 50 -107 10 134 171 -22 159 42 138 -60 -57 -115 41 -80 15 39 -58 -20 107 80 6 -49 -160 -123 164 82 -93 52 10 -107 -143 -101 142 -179 174 76 -23 -147 -87 -36 21 170 32 -116 37 164 48 -154 89 -79 80 -44 121 52 118 -10 2 -34 -62 -69 143 36 -86 98 -158 18 -155 -159 -109 101 148 141 -80 -65 -74 -157 126 -129 -53 -129 6 -65 -69 -53 -76 -78 -56 -173 116 13 177 -10 -154 110 1 -9 -44 82 128 -3 -135 -5 55 -17 12 42 -15 92 -52 17 -72 170 -137 157 -122 45 78 10 78 -61 -165 -49 -94 142 -18 -77 -98 -166 -4 -33 -3 -57 -174 78 130 88 -120 -148 -142 133 177 -45 24 119 -71 -13 152 138 96 -174 32 -136 71 -142 -132 -141 -64 163 -62 -38 -53 -15 -115 56 -18 -57 5 42 -51 171 -49 96 -21 -68 161 -83 -89 -86 -23 10 -174 165 -98 -32 47 168 127 -83 108 -89 -61 64 -71 47 -79 -104 143 109 -119 -125 50 -31 -14 11 -94 -4 77 -163 -25 32 9 60 115 168 1 -60 -172 -144 75 -53 113 -170 -29 -83 173 88 -113 -9 58 160 172 51 129 30 73 150 87 4 122 -129 57 88 -104 -118 -37 -131 119 -61 -19 43 -176 174 -104 48 -80 78 -40 15 -23 61 130 -144 63 36 -89 16 6 -21 -95 -13 114 83 -130 151 -2 42 107 -165 -79 175 91 47 -82 22 40 142 -100 134 137 81 46 81 -3 -146 34 92 -50 -23 -25 -47 81 145 99 -95 -42 -57 27 -91 155 82 -8 -114 -106 -105 -170 -133 -6 -161 -123 76 -127 168 -19 -83 -45 -119 70 -163 -146 -80 -178 39 -121 111 -33 -80 -88 -129 64 -149 10 67 58 161 -51 -40 158 5 -99 139 45 -9 -97 164 88 47 -115 -151 -7 61 70 -146 170 126 -78 68 -171 81 156 -1 -125 123 -103 149 57 24 -136 -124 
def_words_0x87d0    EQU                     0x87d0
def_words_0x87d0    DW                      79 -93 162 42 67 56 -12 -85 -58 160 -29 -169 -155 173 87 130 -149 -18 67 -8 4 45 -180 -8 -11 166 -33 120 131 11 88 -6 -102 23 73 149 -169 151 48 -1 -81 176 -20 74 -103 36 -111 20 -87 7 121 44 -50 -87 -66 -119 -145 37 -43 -43 -70 26 133 -62 -51 -33 -47 156 169 -132 90 -97 35 -82 -7 -86 -116 -52 -77 -147 -20 136 173 -178 58 -120 -126 50 79 46 -77 147 29 44 -34 29 -118 -4 43 -67 -47 -17 -101 172 2 -172 9 -72 136 -77 53 -53 84 -149 -73 169 -152 -175 -167 124 -177 57 -168 -78 147 114 60 -134 103 -106 -162 -134 71 -121 122 -100 -100 -112 5 155 116 58 -80 -103 -79 -42 86 -54 136 107 162 110 118 176 -3 122 -162 20 -81 113 -42 52 -173 162 -173 133 64 -14 -127 -5 -124 59 -144 169 -28 4 -61 98 -142 -21 162 55 -137 -8 -173 49 -79 -60 -27 -30 -98 -13 -75 63 97 117 173 -79 -124 -149 73 -83 -169 16 -45 136 104 -178 -86 142 -148 179 79 173 -115 83 48 -42 149 -168 176 -116 113 126 142 120 -31 -108 133 -21 -145 1 -19 53 22 -157 159 -57 -59 6 -1 -100 -116 -78 -91 -59 -154 -2 92 69 80 68 -57 153 81 85 72 -27 122 -138 11 11 32 -133 -165 -11 -176 -109 59 -11 -30 92 24 130 81 169 -115 22 -142 33 23 79 147 -14 42 131 166 117 -77 -41 126 164 -48 176 -136 -95 -116 -85 -2 -55 176 51 72 -23 -130 58 148 -89 96 74 152 132 -63 -37 -11 -175 33 -16 135 112 -57 -11 -158 44 -22 -20 7 -116 81 -72 159 -36 -172 -31 -97 -100 146 -110 108 84 108 -177 1 -136 -22 -45 -73 1 44 -31 -123 -43 36 -143 152 8 -38 101 156 -101 32 36 -124 100 -48 31 -50 101 82 99 -86 25 90 166 -115 -148 -54 165 -135 3 60 45 127 -139 178 -31 80 -8 -31 -156 120 38 99 111 100 -87 -76 -115 110 69 -8 -44 -178 -75 51 -105 43 1 57 -102 -6 -138 -89 -98 -42 54 -31 -66 41 106 -58 32 -142 22 -31 -48 -72 -116 49 -30 46 19 -117 87 47 168 -170 81 115 -154 167 162 107 123 14 10 -30 19 169 -56 36 -80 32 147 155 -94 65 -15 -168 -76 125 95 -97 143 146 -62 -2 -141 -118 30 -105 -13 -156 53 -69 80 -102 -134 -158 -63 99 118 1 -126 -127 83 123 106 141 136 -125 121 146 124 -56 -78 151 -82 154 77 129 -116 -28 -72 113 10 -141 -105 49 94 78 -6 -147 98 -177 -130 40 -166 73 -50 -28 -90 57 20 -10 41 -166 -126 -23 -5 164 -106 -6 -164 12 -114 -148 11 -134 -96 85 -18 -121 -3 -88 162 54 -18 -115 174 85 -161 102 131 -21 36 99 -138 108 178 144 25 27 15 -179 174 159 76 166 -66 -127 -87 172 -30 -3 114 61 119 87 73 47 167 8 132 11 78 -119 41 23 74 -49 -105 84 111 16 -153 -166 178 -43 -30 24 -92 104 -140 0 -151 -137 122 138 17 18 -168 -48 39 162 142 -61 25 -30 76 -68 151 131 -109 13 -73 2 62 97 -73 157 113 -152 -27 6 -120 176 -140 142 164 9 -168 -146 -158 -57 92 -78 -156 166 130 15 -5 161 11 87 -59 171 95 154 60 154 -57 -177 -56 128 64 60 -90 92 -53 154 0 -79 140 -76 111 -139 -24 -143 -34 -76 98 104 -175 -138 -1 124 158 110 64 -128 130 149 104 -44 -1 -73 15 -55 53 60 158 66 111 161 -12 131 111 120 153 -50 108 -91 -111 -92 99 163 -158 -79 -68 135 -94 -77 7 58 3 -124 63 133 -96 38 -147 -104 -139 174 -128 -21 113 -36 -149 -71 79 -54 -121 146 78 107 107 -80 30 15 81 -140 -44 -44 -52 81 40 110 -81 -111 84 -94 126 -16 -9 -177 91 94 83 -57 -142 112 12 61 -42 -39 67 -90 0 -27 89 5 -27 22 80 -78 31 -85 -26 -133 47 157 91 166 25 -148 78 -83 136 170 58 155 100 -50 -81 -66 -79 155 -122 -115 123 -38 -35 -60 30 -42 44 62 138 174 -17 -94 -145 152 61 -79 -19 -60 128 31 72 -89 126 -64 10 -23 -145 37 65 129 136 -153 -102 79 40 19 -34 106 -135 -153 -43 -93 -15 60 152 170 49 36 -141 -152 -170 -106 -46 141 -106 -25 -93 -118 -51 -125 -59 33 -55 -115 0 20 58 -173 -171 -148 -153 150 62 171 -19 -111 -39 -149 -7 -137 50 96 55 57 -169 -84 -37 -152 -97 -70 49 -176 173 61 97 62 178 57 -155 164 17 66 149 -45 135 60 19 -176 83 -61 91 137 42 -27 -51 105 94 116 102 154 -65 -120 99 3 -46 60 -161 3 10 -49 31 149 -156 -138 157 13 0 -16 -94 57 -124 123 96 115 -149 77 166 134 47 -147 -12 -18 106 43 82 -67 -117 -67 133 12 -41 36 -126 111 54 175 -163 -68 23 -162 -132 165 111 137 7 60 22 121 27 -17 74 95 -96 172 -32 -99 104 -2 -176 
def_words_0x8fa0    EQU                     0x8fa0
def_words_0x8fa

; Define Images

; Lookup Tables

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC
                    LDI                     2
                    STW                     graphicsMode
                    ScanlineMode                                            ; cls : mode 2

                    LDI                     0
                    STW                     _result
                    STW                     _timer
                    LD                      0x0e
                    STW                     _tick                           ; result=0 : timer=result : tick=peek(14)

                    LDWI                    0
                    STW                     _i
                    LDWI                    999
                    STW                     0xb0
                    LDWI                    1
                    STW                     0xb2                            ; for i=0 to SIZE-1

_next_0x026b        LDW                     _tick
                    STW                     _ticks
                    LD                      0x0e
                    STW                     _tick
                    SUBW                    _ticks
                    STW                     _ticks                          ; ticks=tick : tick=peek(14) : ticks=tick-ticks

                    LDW                     _ticks
                    BGE                     _else_0x0291
                    LDWI                    256
                    ADDW                    _ticks
                    STW                     _ticks                          ; if ticks &&< 0 then ticks=ticks+256

_else_0x0291        LDW                     _timer
                    ADDW                    _ticks
                    STW                     _timer                          ; timer=timer+ticks

                    LDWI                    _math
                    CALL                    giga_vAC                        ; gosub math

                    ForNextFarVarPos        _i _next_0x026b 0xb0 0xb2       ; next i

                    LDWI                    0
                    STW                     _i
                    LDWI                    999
                    STW                     0xb0
                    LDWI                    1
                    STW                     0xb2                            ; for i=0 to SIZE-1

_next_0x02bd        ForNextFarVarPos        _i _next_0x02bd 0xb0 0xb2       ; next i

                    NewLine                 
                    LDW                     _timer
                    STW                     mathX
                    LDI                     60
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    PrintAcInt16            
                    PrintString             _str_0xff9d
                    LDW                     _timer
                    STW                     mathX
                    LDI                     60
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    LDW                     mathRem
                    PrintAcInt16            
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    PrintString             _str_0xff98
                    NewLine                                                 ; print : print timer/60;" ";timer % 60;"/60"

                    LDI                     0
                    STW                     _q
                    STW                     _r                              ; q=0 : r=q

                    LDWI                    15000
                    STW                     _n
                    LDI                     153
                    STW                     _d                              ; n=15000 : d=153

                    LDW                     _n
                    STW                     mathX
                    LDW                     _d
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    STW                     _q                              ; q = n/d

                    LDW                     _n
                    STW                     mathX
                    LDW                     _d
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    LDW                     mathRem
                    STW                     _r                              ; r = n%d

                    NewLine                 
                    LDW                     _q
                    PrintAcInt16            
                    PrintString             _str_0xff9d
                    LDW                     _r
                    PrintAcInt16            
                    NewLine                                                 ; print : print q;" ";r

_end_0x0378         BRA                     _end_0x0378                     ; end

_math               PUSH                    
                    LDW                     _i
                    LSLW                    
                    STW                     0xc2
                    LDWI                    -32768
                    ADDW                    0xc2
                    DEEK                    
                    STW                     _a                              ; a = deek(ADDR + SIZE*0 + (i LSL 1))

                    LDW                     _i
                    LSLW                    
                    STW                     0xc2
                    LDWI                    -30768
                    ADDW                    0xc2
                    DEEK                    
                    STW                     _b                              ; b = deek(ADDR + SIZE*2 + (i LSL 1))

                    LDW                     _i
                    LSLW                    
                    STW                     0xc2
                    LDWI                    -28768
                    ADDW                    0xc2
                    STW                     0xc2
                    LDW                     _a
                    STW                     mathX
                    LDW                     _b
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    DOKE                    0xc2                            ; doke ADDR + SIZE*4 + (i LSL 1), a / b

                    POP                     
                    RET                                                     ; return

_div                LDI                     0
                    STW                     _q
                    STW                     _r                              ; q=0 : r=q

                    LDW                     _d
                    CALL                    convertEqOpAddr
                    JumpFalse               _else_0x03de 1
                    POP                     
                    RET                                                     ; if d = 0 then return

_else_0x03de        LDWI                    -32768
                    STW                     _mask                           ; mask = &h8000

_while_0x03e3       LDW                     _mask
                    CALL                    convertNeOpAddr
                    JumpFalse               _wend_0x044a 4                  ; while mask <> 0

                    LDW                     _r
                    LSLW                    
                    STW                     _r                              ; r = r LSL 1

                    LDW                     _n
                    ANDW                    _mask
                    CALL                    convertNeOpAddr
                    JumpFalse               _else_0x0416 2
                    INC                     _r                              ; if n AND mask <> 0 then inc r

_else_0x0416        LDW                     _r
                    SUBW                    _d
                    CALL                    convertGeOpAddr
                    JumpFalse               _else_0x0438 3
                    LDW                     _r
                    SUBW                    _d
                    STW                     _r
                    LDW                     _q
                    ORW                     _mask
                    STW                     0xde
                    LDWI                    _page_0x0400
                    CALL                    giga_vAC
_page_0x0400        LDW                     0xde
                    STW                     _q                              ; if r >= d then r = r - d : q = q OR mask

_else_0x0438        LDW                     _mask
                    STW                     mathShift
                    ShiftRight1bit          
                    STW                     _mask                           ; mask = mask LSR 1

                    LDWI                    _while_0x03e3
                    CALL                    giga_vAC                        ; wend

_wend_0x044a        POP                     
                    RET                                                     ; return

_end_0x044c         BRA                     _end_0x044c                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0xff8f
convertEqOp         EQU     0xff86
convertNeOp         EQU     0xff7d
convertLeOp         EQU     0xff74
convertGeOp         EQU     0xff6b
convertLtOp         EQU     0xff62
convertGtOp         EQU     0xff59
divide16bit         EQU     0xfe10
shiftRight1bit      EQU     0xfe06
scanlineMode        EQU     0xff22
resetVideoTable     EQU     0xfd8c
initClearFuncs      EQU     0xff36
clearVertBlinds     EQU     0xfec5
clearCursorRow      EQU     0xfd43
printInit           EQU     0xfd28
printText           EQU     0xff09
printDigit          EQU     0xfd06
printInt16          EQU     0xfdab
printChar           EQU     0xfca7
newLineScroll       EQU     0xfe67
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4           ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_addr       EQU     register13
drawLine_tmp        EQU     register14
  
drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_addr       EQU     register15

    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    
                    LDWI    giga_videoTable
                    STW     giga_sysArg4
                    LD      cursorXY + 1
                    LSLW
                    ADDW    giga_sysArg4
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDWI    0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     8

clearCR_loopy       ST      clearLoop
                    CALL    realTimeProcAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

