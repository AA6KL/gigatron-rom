_startAddress_      EQU                     0x0200

; Internal variables
serialRawPrev       EQU                     0x0081
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
miscFlags           EQU                     register0 + 0x28

; Internal buffers
textWorkArea        EQU                     0xffa0

; Includes
%includePath        "../runtime"
%include            gigatron.i
%include            macros.i

; Labels
_entryPoint_        EQU                     0x0200
_math               EQU                     0x0368
_div                EQU                     0x03a0
_next_0x0266        EQU                     0x0262
_else_0x028c        EQU                     0x027a
_next_0x02b8        EQU                     0x02a4
_page_0x0300        EQU                     0x0300
_end_0x0373         EQU                     0x0366
_else_0x03d9        EQU                     0x03b4
_while_0x03de       EQU                     0x03b9
_else_0x0411        EQU                     0x03da
_page_0x0400        EQU                     0x0400
_else_0x0433        EQU                     0x0404
_wend_0x0445        EQU                     0x0414
_end_0x0447         EQU                     0x0416

; Variables
_result             EQU                     0x0030
_timer              EQU                     0x0032
_tick               EQU                     0x0034
_i                  EQU                     0x0036
_ticks              EQU                     0x0038
_q                  EQU                     0x003a
_r                  EQU                     0x003c
_n                  EQU                     0x003e
_d                  EQU                     0x0040
_a                  EQU                     0x0042
_b                  EQU                     0x0044
_mask               EQU                     0x0046

; Strings
_str_0xff9d         EQU                     0xff9d
_str_0xff9d         DB                      1 ' ' 0
_str_0xff98         EQU                     0xff98
_str_0xff98         DB                      3 '/60' 0

; Define Bytes

; Define Words
def_words_0x8000    EQU                     0x8000
def_words_0x8000    DW                      89 157 141 -106 -86 41 103 123 3 -140 14 91 5 79 100 136 89 -107 -51 47 -98 81 -31 -67 59 172 101 -171 -65 -170 -4 61 159 66 -51 34 88 -161 -99 -136 54 -117 -162 79 92 -141 -41 154 -139 41 -58 -175 -134 86 11 -126 -20 -24 -73 -60 -59 -19 78 116 -110 80 -48 -124 -12 51 14 24 112 166 -109 -110 -149 -113 89 -47 81 -133 -66 38 176 -124 86 143 105 -100 11 -57 111 -176 -111 -107 -141 -128 -41 -148 -26 -122 -116 76 -160 141 -2 -18 -6 164 25 38 -169 -93 -11 -20 -32 141 169 51 -104 71 -113 46 76 -40 48 -89 152 129 -23 -70 118 95 -2 -118 -96 -89 134 -54 -168 89 55 -113 -123 -64 20 -108 -111 -79 -172 22 130 -166 -11 -55 -66 29 112 34 50 61 151 -97 -157 143 116 67 142 -131 108 -41 -138 -81 60 93 165 19 82 -145 -43 159 95 168 54 -84 -164 -88 -141 174 -37 142 160 -127 87 137 119 -42 -9 -136 -69 -2 -129 35 -60 6 -81 -167 173 171 39 163 -94 128 163 -111 -98 -90 -156 83 84 -92 -168 155 -68 103 -77 137 168 -37 86 -49 -17 -133 -81 47 -22 133 -120 121 14 -7 -60 -103 -95 -44 -41 89 152 88 -146 83 -136 -26 -48 17 140 135 -45 -8 15 -33 113 -30 -174 59 -172 91 -16 -163 144 -145 47 93 -16 146 -166 -126 92 -120 109 -87 -103 94 -39 149 169 88 1 24 -51 -11 139 -79 169 -24 -13 31 79 104 45 -147 -146 106 178 -34 -165 45 36 -102 97 -138 53 -94 166 165 133 -31 -18 16 99 123 171 -81 -2 -110 -51 32 140 -97 -145 -116 -46 -34 -78 -159 -163 117 30 33 -175 158 -138 -53 160 146 -53 -143 -131 -167 -76 -142 177 8 -3 144 -138 74 -131 -116 -109 90 -28 161 -41 87 173 -162 177 -87 -160 32 55 -173 -29 80 157 -54 130 -16 161 -123 -163 68 -115 -66 49 159 77 56 -31 35 153 -112 -33 77 28 -119 69 -144 70 123 169 -175 -153 -5 -79 -133 22 17 -29 172 -63 30 -128 31 -139 85 25 28 -7 -76 -78 -67 -34 -46 -105 66 -175 -125 133 15 92 -6 -118 132 -159 86 -89 45 -15 -104 -20 -117 -11 -44 -163 -84 -102 -138 172 30 98 -121 119 162 41 -176 -4 70 -171 -26 154 139 2 -177 -142 81 45 4 149 -49 -177 -169 119 -129 116 -178 -123 -95 60 81 163 -41 -102 -111 -167 -134 -60 57 -49 -141 -118 -126 -90 76 170 177 33 96 170 148 92 7 -64 -27 147 31 -177 -99 127 -136 -37 21 -139 150 55 41 159 53 -179 70 -26 160 -106 94 -104 50 154 161 175 89 26 -58 -85 -33 -117 75 1 99 158 -95 -5 48 175 11 2 92 -133 -160 -7 -53 93 -49 76 109 -142 -157 -127 -11 115 -105 -147 -164 -149 19 130 -10 -134 -152 152 51 65 -15 -46 16 111 -38 58 -161 156 -35 31 -108 12 75 86 122 -155 -96 -49 -170 141 138 -134 33 -50 67 -174 -116 -21 -11 144 47 16 85 99 106 148 75 30 32 10 177 -118 -103 153 66 6 127 17 86 -148 -77 -177 -173 127 176 3 -115 -158 -136 -153 97 57 111 -150 -98 174 -51 -170 158 93 63 47 -28 -151 32 -82 -163 3 -108 -132 -28 40 -91 123 -15 -6 -62 129 130 -46 -172 70 53 148 131 -175 -12 -117 -63 77 -70 -153 -83 -118 53 -116 2 33 -36 46 121 72 -13 -135 -155 79 133 61 -43 154 113 -78 39 80 48 104 -157 -69 -82 27 134 -135 167 173 152 -78 -172 -76 -72 67 -114 -83 -50 -61 -38 97 169 84 118 24 -14 4 27 -157 105 -68 -141 174 -89 -127 133 -59 -84 -95 134 -66 81 -56 -110 -128 -24 -172 76 -69 139 -67 -150 80 -85 58 69 97 -6 8 160 -180 18 -84 -74 13 135 162 96 26 139 62 111 -14 -23 164 -129 8 -44 108 -147 -147 -112 -128 91 -148 -39 176 66 -54 179 -106 -137 -74 146 -122 -104 -171 -180 -64 136 -39 -109 105 -23 -110 -57 134 -94 -139 99 162 -54 -35 30 34 156 159 117 176 132 131 -137 157 40 -121 -158 -77 114 6 -100 -135 -27 130 84 79 -91 109 -46 -131 -132 38 -76 -136 -77 2 179 29 14 -63 -114 32 -117 -62 5 -49 -84 98 -104 50 115 1 104 -34 174 -179 -130 -101 19 -157 -164 179 149 59 89 52 23 -124 177 -81 120 -80 -125 -15 -48 -95 5 -62 -69 -92 93 157 116 165 9 -25 -21 115 -110 124 26 -123 -28 150 148 141 -167 47 79 28 62 -151 -45 102 14 163 179 7 -178 151 -84 71 -150 42 -84 -70 134 76 -139 -77 70 113 -78 98 -103 15 137 147 -140 136 -150 -31 84 26 -145 106 -98 -106 20 37 -6 -42 -160 -102 101 122 -28 1 110 165 12 -51 36 -141 20 -142 69 102 125 -99 -142 137 136 131 1 44 -77 -107 -125 -175 -63 -46 -176 -89 142 109 -33 -3 -28 145 163 -143 71 154 146 -38 -136 85 95 98 -88 -37 -133 
def_words_0x87d0    EQU                     0x87d0
def_words_0x87d0    DW                      136 -133 -5 135 -99 23 166 -27 158 -35 -114 -72 -95 -49 -7 81 -125 -101 -54 -4 -63 143 137 90 -154 13 100 135 109 121 150 -1 119 89 -41 -51 62 140 141 -108 -93 102 137 26 -75 -37 -83 18 -132 49 -116 -96 165 84 -158 -62 -82 -116 94 -147 -11 73 -91 22 -36 -14 -126 -165 -17 18 122 81 137 -68 92 78 20 -87 -159 89 -9 -64 -120 25 37 -99 -74 164 124 -76 100 -142 3 -81 113 88 176 119 89 33 -96 -96 30 -46 16 33 30 -108 -20 18 109 -48 150 101 21 -10 -151 50 -60 -169 -66 166 -83 -132 159 -52 -176 38 82 -80 78 -81 169 143 152 24 63 -118 24 -163 5 -91 -46 -18 159 -53 -132 7 -32 76 164 -165 165 -142 -103 -172 160 -168 -100 110 -36 -156 168 -179 97 142 24 123 -32 -39 -32 151 41 43 48 -93 82 -104 -172 124 124 -37 134 24 97 -1 -152 -86 168 122 109 -167 28 -69 176 -101 -175 150 -89 132 25 -18 -63 -157 94 -61 -35 175 -111 -36 149 -83 123 -162 99 -74 -7 101 83 119 45 11 -175 -112 19 167 44 177 -87 175 44 -63 91 -47 144 -78 -98 -50 -13 -158 163 104 159 -141 -146 -34 -54 -179 7 -43 25 -47 112 -78 -118 -135 -87 117 -90 159 -71 -16 -57 -164 -98 -167 -81 -166 -9 -165 33 156 -57 -148 75 -68 -4 -6 -116 21 177 39 -22 -134 41 39 8 142 -26 8 86 -58 -119 -166 -175 172 -174 -114 -179 -67 -103 -165 8 -115 -18 127 -80 -23 -121 59 136 150 120 42 47 144 -72 -52 -87 30 -7 14 -53 -172 -160 108 -103 -152 118 -47 -126 89 -66 -42 150 -19 -160 2 -106 35 -11 65 -170 -136 28 -41 159 -139 -27 71 15 -32 19 -113 133 -22 -17 -122 -1 -6 -133 178 -98 8 156 -29 -11 -12 45 -76 -18 16 159 43 -130 -61 21 94 34 88 71 -120 26 62 5 60 20 33 -178 114 -44 -47 -143 -56 -102 -7 -27 131 109 -133 -28 -82 15 42 -51 129 89 104 98 -34 -55 -39 -145 56 -16 95 157 165 -151 -145 45 142 -49 -163 32 -4 30 164 -57 93 20 -64 -49 -33 -39 71 87 -116 -82 117 173 135 -54 -81 109 -41 -85 -125 -133 169 59 -114 -44 114 136 134 -104 -35 -104 177 -5 10 -92 -140 -140 0 -27 -63 -75 76 -107 131 60 -6 -80 -116 -111 148 -158 -22 -151 -55 154 61 50 -49 -49 -60 -79 124 2 -128 120 121 -11 40 -164 -135 10 31 -26 128 151 -13 168 -9 -96 -17 138 -137 134 -84 21 52 -178 163 145 45 -99 -177 130 -16 -53 33 56 123 69 -173 -97 97 -168 -120 123 -31 115 -109 112 141 124 -152 82 -70 77 -31 177 -77 -16 -174 167 -141 105 15 68 74 -164 -140 -55 152 -26 68 4 88 96 -34 -52 15 -95 109 110 45 -133 47 87 -166 2 89 27 -19 -48 -23 109 25 -20 76 -89 154 -37 -159 28 127 -144 173 -27 -105 -175 -120 -143 81 -6 -160 -80 -26 62 -83 -94 -86 -102 -108 -117 -85 -100 -24 34 -111 -28 -50 83 -81 59 -40 -95 88 -127 -19 -112 -122 19 142 -46 87 125 140 -64 129 -29 88 59 -88 87 123 -29 45 -162 95 96 -7 -165 -19 -161 82 33 57 -24 -155 155 43 110 -19 30 80 70 106 26 -80 60 -42 132 -39 98 52 160 116 50 -70 -83 110 173 -95 9 178 133 -118 -49 -180 -7 35 109 -95 159 82 115 -74 111 -46 145 -66 116 -92 161 -120 -18 -33 61 -64 127 139 130 5 -157 58 -163 -141 -5 -72 52 -126 139 -3 -136 -162 -174 16 -31 128 75 -58 179 -115 -174 19 -160 38 128 129 71 80 131 127 -117 -12 -136 -77 119 -150 -174 43 40 -7 -17 -103 -125 162 -127 -83 177 -82 19 143 -161 -139 -132 -75 -157 121 -55 57 125 -22 -130 -9 -142 99 -28 165 -177 -115 -94 12 124 131 -139 47 -122 141 -118 -126 49 177 86 28 -114 14 140 -89 -54 27 6 112 127 160 143 146 167 -93 -7 152 62 118 59 -85 -33 126 -155 144 -39 167 62 -114 172 -153 142 -90 -17 137 32 -148 59 -126 -118 45 -34 145 -168 -135 25 -126 -171 75 146 20 -4 135 137 12 87 12 -179 -79 157 -63 -177 -135 137 -115 170 68 -47 -87 -56 -16 -60 121 -111 172 -105 156 -104 -14 -174 -97 94 158 78 -80 -85 52 82 -38 -111 -135 159 -67 -100 -40 88 152 95 48 174 -127 -135 -180 -101 -13 136 171 102 -166 28 81 46 83 -81 62 162 -104 -164 -11 159 66 -146 120 -28 87 50 74 91 -41 111 -27 -175 138 -116 133 -72 140 -157 109 122 155 158 -175 -94 96 -33 27 45 -68 -124 137 -41 166 106 119 107 -174 57 -7 -30 115 -143 156 56 4 -85 101 -85 108 -45 -22 -122 176 157 -152 -19 -66 -131 -3 106 -177 -173 -33 -41 -141 -33 60 -91 -20 -102 83 -19 124 21 -149 140 136 -11 -173 172 -70 -57 162 -87 -39 81 -104 -151 52 -38 -28 
def_words_0x8fa0    EQU                     0x8fa0
def_words_0x8fa

; Define Images

; Define Sprites

; Lookup Tables

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC
                    LDI                     2
                    STW                     graphicsMode
                    ScanlineMode                                            ; cls : mode 2

                    LDI                     0
                    STW                     _result
                    STW                     _timer
                    LD                      0x0e
                    STW                     _tick                           ; result=0 : timer=result : tick=peek(14)

                    LDWI                    0
                    STW                     _i
                    LDWI                    999
                    STW                     0xb0
                    LDWI                    1
                    STW                     0xb2                            ; for i=0 to SIZE-1

_next_0x0266        LDW                     _tick
                    STW                     _ticks
                    LD                      0x0e
                    STW                     _tick
                    SUBW                    _ticks
                    STW                     _ticks                          ; ticks=tick : tick=peek(14) : ticks=tick-ticks

                    LDW                     _ticks
                    BGE                     _else_0x028c
                    LDWI                    256
                    ADDW                    _ticks
                    STW                     _ticks                          ; if ticks &&< 0 then ticks=ticks+256

_else_0x028c        LDW                     _timer
                    ADDW                    _ticks
                    STW                     _timer                          ; timer=timer+ticks

                    LDWI                    _math
                    CALL                    giga_vAC                        ; gosub math

                    ForNextFarVarPos        _i _next_0x0266 0xb0 0xb2       ; next i

                    LDWI                    0
                    STW                     _i
                    LDWI                    999
                    STW                     0xb0
                    LDWI                    1
                    STW                     0xb2                            ; for i=0 to SIZE-1

_next_0x02b8        ForNextFarVarPos        _i _next_0x02b8 0xb0 0xb2       ; next i

                    NewLine                 
                    LDW                     _timer
                    STW                     mathX
                    LDI                     60
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    PrintAcInt16            
                    PrintString             _str_0xff9d
                    LDW                     _timer
                    STW                     mathX
                    LDI                     60
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    LDW                     mathRem
                    PrintAcInt16            
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    PrintString             _str_0xff98
                    NewLine                                                 ; print : print timer/60;" ";timer % 60;"/60"

                    LDI                     0
                    STW                     _q
                    STW                     _r                              ; q=0 : r=q

                    LDWI                    15000
                    STW                     _n
                    LDI                     153
                    STW                     _d                              ; n=15000 : d=153

                    LDW                     _n
                    STW                     mathX
                    LDW                     _d
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    STW                     _q                              ; q = n/d

                    LDW                     _n
                    STW                     mathX
                    LDW                     _d
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    LDW                     mathRem
                    STW                     _r                              ; r = n%d

                    NewLine                 
                    LDW                     _q
                    PrintAcInt16            
                    PrintString             _str_0xff9d
                    LDW                     _r
                    PrintAcInt16            
                    NewLine                                                 ; print : print q;" ";r

_end_0x0373         BRA                     _end_0x0373                     ; end

_math               PUSH                    
                    LDW                     _i
                    LSLW                    
                    STW                     0xc2
                    LDWI                    -32768
                    ADDW                    0xc2
                    DEEK                    
                    STW                     _a                              ; a = deek(ADDR + SIZE*0 + (i LSL 1))

                    LDW                     _i
                    LSLW                    
                    STW                     0xc2
                    LDWI                    -30768
                    ADDW                    0xc2
                    DEEK                    
                    STW                     _b                              ; b = deek(ADDR + SIZE*2 + (i LSL 1))

                    LDW                     _i
                    LSLW                    
                    STW                     0xc2
                    LDWI                    -28768
                    ADDW                    0xc2
                    STW                     0xc2
                    LDW                     _a
                    STW                     mathX
                    LDW                     _b
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    DOKE                    0xc2                            ; doke ADDR + SIZE*4 + (i LSL 1), a / b

                    POP                     
                    RET                                                     ; return

_div                LDI                     0
                    STW                     _q
                    STW                     _r                              ; q=0 : r=q

                    LDW                     _d
                    CALL                    convertEqOpAddr
                    JumpFalse               _else_0x03d9 1
                    POP                     
                    RET                                                     ; if d = 0 then return

_else_0x03d9        LDWI                    -32768
                    STW                     _mask                           ; mask = &h8000

_while_0x03de       LDW                     _mask
                    CALL                    convertNeOpAddr
                    JumpFalse               _wend_0x0445 4                  ; while mask <> 0

                    LDW                     _r
                    LSLW                    
                    STW                     _r                              ; r = r LSL 1

                    LDW                     _n
                    ANDW                    _mask
                    CALL                    convertNeOpAddr
                    JumpFalse               _else_0x0411 2
                    INC                     _r                              ; if n AND mask <> 0 then inc r

_else_0x0411        LDW                     _r
                    SUBW                    _d
                    CALL                    convertGeOpAddr
                    JumpFalse               _else_0x0433 3
                    LDW                     _r
                    SUBW                    _d
                    STW                     _r
                    LDW                     _q
                    ORW                     _mask
                    STW                     0xde
                    LDWI                    _page_0x0400
                    CALL                    giga_vAC
_page_0x0400        LDW                     0xde
                    STW                     _q                              ; if r >= d then r = r - d : q = q OR mask

_else_0x0433        LDW                     _mask
                    STW                     mathShift
                    ShiftRight1bit          
                    STW                     _mask                           ; mask = mask LSR 1

                    LDWI                    _while_0x03de
                    CALL                    giga_vAC                        ; wend

_wend_0x0445        POP                     
                    RET                                                     ; return

_end_0x0447         BRA                     _end_0x0447                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0xff8b
convertEqOp         EQU     0xff82
convertNeOp         EQU     0xff79
convertLeOp         EQU     0xff70
convertGeOp         EQU     0xff67
convertLtOp         EQU     0xff5e
convertGtOp         EQU     0xff55
divide16bit         EQU     0xfe10
shiftRight1bit      EQU     0xfe06
scanlineMode        EQU     0xff1e
resetVideoTable     EQU     0xfd8c
initClearFuncs      EQU     0xff32
clearVertBlinds     EQU     0xfec5
clearCursorRow      EQU     0xfd43
printInit           EQU     0xfd28
printText           EQU     0xff05
printDigit          EQU     0xfd06
printInt16          EQU     0xfdab
printChar           EQU     0xfca7
newLineScroll       EQU     0xfe67
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDI     0x08                            ; keep pumping soundTimer
                    ST      giga_soundTimer
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI routine
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4           ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_addr       EQU     register13
drawLine_tmp        EQU     register14
  
drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_addr       EQU     register15

    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    
                    LDWI    giga_videoTable
                    STW     giga_sysArg4
                    LD      cursorXY + 1
                    LSLW
                    ADDW    giga_sysArg4
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDWI    0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     8

clearCR_loopy       ST      clearLoop
                    CALL    realTimeProcAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

