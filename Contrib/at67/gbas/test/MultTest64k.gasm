_startAddress_      EQU                     0x0200

; Internal variables
serialRawPrev       EQU                     0x0081
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
miscFlags           EQU                     register0 + 0x28
fontLutId           EQU                     0x00e0

; Internal buffers
textWorkArea        EQU                     0xffa0

; Includes
%includePath        "../runtime"
%include            gigatron.i
%include            macros.i

; Labels
_entryPoint_        EQU                     0x0200
_math               EQU                     0x0368
_div                EQU                     0x03a0
_next_0x0264        EQU                     0x0260
_else_0x028a        EQU                     0x0278
_next_0x02b6        EQU                     0x02a2
_page_0x0300        EQU                     0x0300
_end_0x0371         EQU                     0x0366
_else_0x03d7        EQU                     0x03b4
_while_0x03dc       EQU                     0x03b9
_else_0x040f        EQU                     0x03da
_page_0x0400        EQU                     0x0400
_else_0x0431        EQU                     0x0404
_wend_0x0443        EQU                     0x0414
_end_0x0445         EQU                     0x0416

; Variables
_result             EQU                     0x0030
_timer              EQU                     0x0032
_tick               EQU                     0x0034
_i                  EQU                     0x0036
_ticks              EQU                     0x0038
_q                  EQU                     0x003a
_r                  EQU                     0x003c
_n                  EQU                     0x003e
_d                  EQU                     0x0040
_a                  EQU                     0x0042
_b                  EQU                     0x0044
_mask               EQU                     0x0046

; Strings
_str_0xff9d         EQU                     0xff9d
_str_0xff9d         DB                      1 ' ' 0
_str_0xff98         EQU                     0xff98
_str_0xff98         DB                      3 '/60' 0

; Define Bytes

; Define Words
def_words_0x8000    EQU                     0x8000
def_words_0x8000    DW                      90 41 170 50 -89 63 23 -52 -11 -42 179 -31 156 54 20 -4 115 161 -30 131 -155 -78 4 -25 4 -86 -121 -158 4 4 176 -30 -55 138 51 77 107 -130 -99 -43 -143 -67 39 -154 164 -23 36 141 -74 127 -115 12 -126 169 138 -133 93 4 -35 -71 -51 156 -30 -12 -95 30 169 69 98 86 -121 -65 73 -13 49 25 -175 -136 26 -46 61 116 48 -19 29 -12 -6 -99 -75 -65 108 27 55 43 63 -35 -21 -50 114 113 -101 -161 -3 51 4 62 -136 51 122 -30 -112 91 -118 114 74 -1 -42 -59 -78 61 -131 -43 174 79 1 105 94 167 5 -5 -89 66 -113 82 177 72 -78 -8 -82 -84 -153 -138 84 71 29 -65 36 161 30 -77 163 -110 84 -171 105 174 -156 102 -39 88 -47 83 8 -120 68 -3 -102 55 -85 176 25 123 -64 -146 -57 86 -156 -11 70 -44 -116 -138 125 -35 -158 -137 -66 143 -18 -149 174 -120 -1 16 -131 26 68 -111 -49 16 -144 134 66 -144 -114 -47 105 -102 -55 178 31 71 -136 78 -152 93 15 -118 109 -61 81 -122 78 16 101 144 118 -15 -137 87 -15 -102 176 -30 1 -140 -104 -177 33 -64 19 -112 -143 -101 -54 -165 -4 3 -164 -96 110 17 165 65 -7 175 45 -11 -6 108 147 -123 -136 -34 12 -4 -123 -89 151 -120 -175 -133 -69 166 -78 8 83 -115 32 119 161 -168 -176 -142 -144 -54 119 -17 126 -42 -70 140 146 37 100 51 115 36 168 -80 122 -140 167 0 64 107 -37 37 -134 -76 53 56 -156 106 -51 166 -116 179 -144 85 113 -5 54 -48 172 -90 20 -62 -27 106 0 -64 -39 -101 -140 -110 -94 113 156 91 -40 40 51 118 79 -41 -165 -52 -128 -5 -61 3 -75 -132 -138 -119 159 -33 -86 74 -54 86 -2 102 -172 150 144 95 178 55 21 49 -69 1 -78 178 49 -83 -29 140 141 129 -86 -79 10 -71 -6 55 21 -6 -4 132 -133 56 162 -13 -124 99 -38 47 -17 45 -90 -104 53 -25 169 60 -150 5 -148 16 -70 -113 -53 -41 -96 34 113 -7 45 166 -5 79 79 -24 -141 -9 -128 -29 -20 -156 17 35 -146 127 -130 155 122 -101 83 87 136 45 -89 52 110 179 56 -121 -67 64 112 -29 -89 -163 15 -1 -53 -71 -64 39 36 -117 88 -175 -18 -97 5 35 83 104 99 -108 117 86 13 16 13 -128 -39 96 4 19 125 17 -9 -13 9 131 -56 97 173 -131 -141 142 141 159 150 -56 -30 -111 -91 -13 122 82 -123 145 170 -85 -129 76 44 93 -169 123 -52 -128 53 -21 -177 -106 163 -176 -18 159 177 -163 -33 -162 -74 41 5 11 48 -142 -167 83 -42 -34 -63 -91 179 -33 160 -146 109 23 173 -168 127 -91 137 70 -84 14 147 -165 142 -88 -146 20 22 74 -33 11 164 -16 159 -91 -120 174 -73 -162 -126 107 -43 -68 160 -144 -55 -111 -178 -160 -35 -115 27 -101 45 19 -71 174 -85 -62 165 77 62 -112 136 -165 44 130 -27 33 38 -50 -44 -75 11 21 102 -107 175 59 58 125 -35 -159 -40 -107 91 54 -68 39 69 105 164 175 133 33 141 -68 17 112 -68 54 141 142 -111 -136 -53 10 144 159 -24 47 -133 -12 -143 -52 -6 -169 -19 59 101 -92 45 159 -101 -61 9 176 -125 2 93 145 -132 109 124 12 112 -39 -52 36 -154 78 -110 -69 -16 28 -105 45 98 39 124 164 -59 157 89 -18 42 102 -148 36 18 78 56 -4 -2 -128 -180 -119 -117 -165 -10 57 -72 -79 95 -168 -53 77 161 -140 -16 -139 -177 -176 -93 9 -93 -4 -87 115 -155 125 58 151 -117 33 -126 -163 -180 134 152 116 -142 -101 94 97 23 -97 -62 -104 158 17 148 -126 -178 -17 1 89 106 147 -9 -120 125 -109 115 126 77 104 -129 -92 -60 89 -16 -44 -129 -39 159 29 176 -18 6 -67 -65 -52 101 38 129 137 133 -148 -9 -150 118 173 115 -98 -156 -110 -130 -87 63 126 13 -172 123 -108 157 131 -20 22 -28 -81 118 -157 59 -11 141 88 33 -138 113 171 145 176 -164 76 -41 38 -122 -36 94 92 -120 -94 -154 174 152 20 -68 160 -115 107 -93 -24 140 -53 -158 -4 -86 -127 -139 -178 -13 53 -136 -89 -134 -126 121 -157 33 100 -42 49 -69 -111 -41 -154 -103 35 21 2 -94 109 75 83 -170 156 -172 17 -107 96 -34 2 91 -125 45 -162 -80 -6 -6 -3 5 -7 -91 136 176 123 153 102 164 -54 -33 -168 147 -36 -122 -153 -66 -49 26 -28 -114 134 -54 48 -77 -27 -25 -123 149 -119 33 109 146 20 -133 -167 -81 47 -157 69 -126 56 -141 42 79 79 115 -28 2 -148 -133 -19 157 -149 115 17 -46 -94 -178 156 58 -158 -26 -167 -57 116 -111 -99 0 -58 -131 3 -13 -114 -56 136 -24 -73 155 146 -142 -46 63 29 -63 -34 49 -2 -161 -109 -86 -53 -40 -53 -126 -54 -99 170 -130 -102 -110 -129 -9 176 -73 -4 -74 -126 -180 171 53 57 -64 -63 
def_words_0x87d0    EQU                     0x87d0
def_words_0x87d0    DW                      39 -62 28 -136 50 109 -133 79 44 163 -123 12 172 161 28 21 -149 -62 -138 3 -46 -172 101 145 21 -103 36 164 -119 177 -149 154 106 118 -180 152 24 128 -162 -129 147 154 -87 6 -172 -131 -100 158 46 -13 -92 -78 -147 23 94 61 -82 27 55 105 31 -94 -166 173 24 111 -110 94 -109 -99 -160 26 -9 177 -90 -7 -37 -43 53 -51 137 -113 92 35 137 65 114 121 176 -95 103 -61 -176 140 30 -143 82 31 157 -180 -95 -10 -168 -167 -127 -8 107 -180 -104 -133 -138 137 -44 28 -146 -178 149 18 -111 -67 83 132 122 121 3 -9 87 111 39 -148 -73 -48 -52 -62 55 -69 -120 -48 143 168 -5 -162 9 -38 -139 -52 121 -43 -55 -38 155 128 -168 66 121 140 -135 59 -44 -33 143 96 -2 122 -101 24 -90 -151 -68 -137 75 44 -83 93 28 73 30 110 143 141 -59 34 88 -165 126 -3 -148 -44 128 -111 -177 -136 123 98 163 123 -25 -142 147 131 86 143 31 17 -3 -142 48 -50 86 121 -82 -144 170 8 -169 -58 53 83 -149 24 59 135 118 154 -134 98 -34 -157 31 143 -18 -176 -115 -26 -110 70 -117 164 108 121 -170 159 -73 142 -49 101 177 168 -66 -34 22 -159 -1 62 130 70 148 -160 71 25 -93 -161 -47 89 81 174 -74 -60 -105 -85 146 -32 -75 -113 -15 15 -4 162 -2 -143 -96 -132 -36 110 -82 39 91 -124 113 3 166 101 155 82 146 -155 -157 -10 177 -149 -6 -129 0 -106 147 -87 -2 26 -30 93 -138 66 -77 -145 110 -144 119 97 145 123 154 30 18 -23 -128 -112 179 157 -102 -26 4 138 131 80 111 -103 72 -27 -60 167 -144 -176 -111 19 88 -146 -140 22 -158 -37 -20 -116 110 -50 172 58 -55 106 -54 -175 94 142 -57 -150 -109 -82 127 -95 173 19 -140 151 -2 50 78 -69 -18 1 158 -111 95 95 -109 -50 -2 4 -164 131 175 -178 -57 144 80 21 -118 -70 -79 -134 -80 160 1 -148 -82 -142 5 42 -2 3 37 -64 -148 -71 79 -76 87 10 -7 -88 90 114 -23 -59 -156 -174 30 85 165 11 133 90 18 115 5 -154 -54 -17 -164 -158 161 -22 165 -133 29 21 66 -14 -64 16 79 -6 -90 71 -161 -9 -49 56 -69 -91 103 -140 71 71 92 -91 63 -110 -104 -81 155 -135 -73 -63 79 -158 59 166 -50 136 158 -97 64 35 -177 155 -103 -131 106 138 -60 38 -159 86 -8 18 103 -37 -111 49 127 -111 -174 -137 -24 -112 18 149 116 139 -3 -112 -63 -113 -91 57 63 -58 -96 -139 35 55 11 126 -69 -23 143 -151 -117 -64 75 -87 16 -106 -158 -36 171 142 23 -180 73 -179 62 -103 136 129 101 -83 -148 -145 -61 -39 99 96 -73 38 -51 20 28 -146 -88 146 -69 -5 99 53 130 -16 -78 -117 -52 -64 -95 -45 26 91 100 21 -120 64 -49 71 114 159 -167 140 -16 -122 -97 119 -128 -1 -178 121 35 -56 -104 -120 -133 123 -29 16 -180 -49 14 -50 95 119 134 -22 63 73 96 173 126 137 111 -12 -65 -65 -136 -68 -118 -66 -124 78 27 -25 103 116 19 -106 -129 -11 -164 -62 166 85 119 -13 91 1 -151 79 126 -134 53 -34 -109 120 43 15 1 -48 -102 50 -124 161 113 167 39 155 117 -73 174 -127 6 138 -166 1 -78 120 86 18 62 92 -62 69 -54 126 -138 -113 52 127 -166 110 104 51 -116 105 -89 82 -159 -99 22 175 -121 77 121 -43 26 -126 55 -130 126 -84 -130 -25 -123 15 -150 16 -152 1 -149 128 43 51 -43 57 -139 -57 -51 -129 61 89 -48 -122 35 -151 173 93 14 -41 -34 86 106 -113 66 144 21 144 151 -170 -15 56 -137 97 -52 -46 -16 -173 6 10 -159 -114 -101 144 114 141 163 -180 -45 0 -122 -55 167 -154 -149 60 162 166 130 -65 152 127 -111 -63 -40 -31 20 81 -30 -93 97 -117 85 -25 91 -39 -20 -78 37 -130 137 72 145 -25 91 56 129 147 -156 171 86 85 -130 67 -153 -145 -169 -118 101 120 66 144 132 137 -96 -166 -12 -59 103 23 49 160 130 -148 -48 -6 -127 -150 -164 179 42 166 167 -47 16 -70 20 -57 35 -157 101 -119 40 43 40 -139 147 119 120 -132 -70 -157 137 82 -141 164 -21 49 -7 -146 -93 109 59 -24 55 116 -146 29 96 -84 -116 60 13 9 -4 -118 -27 -105 12 -138 -11 13 -19 -123 131 59 158 -120 -94 -67 -149 -5 112 -160 88 31 -164 -163 88 -22 51 -180 -85 -115 -91 -149 63 -26 19 -58 -35 135 -84 73 48 -57 113 76 -142 -104 -163 -34 -96 -127 97 -51 135 -124 39 -67 -41 154 93 -33 134 -58 -52 -76 -24 -65 138 -5 -106 58 -51 -161 -92 -96 89 84 120 -124 -29 -173 -112 -153 159 -132 -6 -1 -153 -85 130 -107 -11 -81 -16 23 -12 -177 160 134 -159 5 -122 40 -177 -40 49 8 -68 -28 103 68 -154 69 -127 -49 98 52 9 16 -42 128 -159 -4 109 -103 
def_words_0x8fa0    EQU                     0x8fa0
def_words_0x8fa0    DW                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 

; Define Images

; Define Sprites
; Define Fonts

; Lookup Tables

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    ClearVertBlinds         
                    LDI                     2
                    STW                     graphicsMode
                    ScanlineMode                                            ; cls : mode 2

                    LDI                     0
                    STW                     _result
                    STW                     _timer
                    LD                      giga_frameCount
                    STW                     _tick                           ; result=0 : timer=result : tick=get("FRAMECOUNT")

                    LDWI                    0
                    STW                     _i
                    LDWI                    999
                    STW                     0xb0
                    LDWI                    1
                    STW                     0xb2                            ; for i=0 to SIZE-1

_next_0x0264        LDW                     _tick
                    STW                     _ticks
                    LD                      giga_frameCount
                    STW                     _tick
                    SUBW                    _ticks
                    STW                     _ticks                          ; ticks=tick : tick=get("FRAMECOUNT") : ticks=tick-ticks

                    LDW                     _ticks
                    BGE                     _else_0x028a
                    LDWI                    256
                    ADDW                    _ticks
                    STW                     _ticks                          ; if ticks &&< 0 then ticks=ticks+256

_else_0x028a        LDW                     _timer
                    ADDW                    _ticks
                    STW                     _timer                          ; timer=timer+ticks

                    LDWI                    _math
                    CALL                    giga_vAC                        ; gosub math

                    ForNextFarVarPos        _i _next_0x0264 0xb0 0xb2       ; next i

                    LDWI                    0
                    STW                     _i
                    LDWI                    999
                    STW                     0xb0
                    LDWI                    1
                    STW                     0xb2                            ; for i=0 to SIZE-1

_next_0x02b6        ForNextFarVarPos        _i _next_0x02b6 0xb0 0xb2       ; next i

                    NewLine                 
                    LDW                     _timer
                    STW                     mathX
                    LDI                     60
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    PrintAcInt16            
                    PrintString             _str_0xff9d
                    LDW                     _timer
                    STW                     mathX
                    LDI                     60
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    LDW                     mathRem
                    PrintAcInt16            
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    PrintString             _str_0xff98
                    NewLine                                                 ; print : print timer/60;" ";timer % 60;"/60"

                    LDI                     0
                    STW                     _q
                    STW                     _r                              ; q=0 : r=q

                    LDWI                    15000
                    STW                     _n
                    LDI                     153
                    STW                     _d                              ; n=15000 : d=153

                    LDW                     _n
                    STW                     mathX
                    LDW                     _d
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    STW                     _q                              ; q = n/d

                    LDW                     _n
                    STW                     mathX
                    LDW                     _d
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    LDW                     mathRem
                    STW                     _r                              ; r = n%d

                    NewLine                 
                    LDW                     _q
                    PrintAcInt16            
                    PrintString             _str_0xff9d
                    LDW                     _r
                    PrintAcInt16            
                    NewLine                                                 ; print : print q;" ";r

_end_0x0371         BRA                     _end_0x0371                     ; end

_math               PUSH                    
                    LDW                     _i
                    LSLW                    
                    STW                     0xc2
                    LDWI                    -32768
                    ADDW                    0xc2
                    DEEK                    
                    STW                     _a                              ; a = deek(ADDR + SIZE*0 + (i LSL 1))

                    LDW                     _i
                    LSLW                    
                    STW                     0xc2
                    LDWI                    -30768
                    ADDW                    0xc2
                    DEEK                    
                    STW                     _b                              ; b = deek(ADDR + SIZE*2 + (i LSL 1))

                    LDW                     _i
                    LSLW                    
                    STW                     0xc2
                    LDWI                    -28768
                    ADDW                    0xc2
                    STW                     0xc2
                    LDW                     _a
                    STW                     mathX
                    LDW                     _b
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    DOKE                    0xc2                            ; doke ADDR + SIZE*4 + (i LSL 1), a / b

                    Return                                                  ; return

_div                LDI                     0
                    STW                     _q
                    STW                     _r                              ; q=0 : r=q

                    LDW                     _d
                    CALL                    convertEqOpAddr
                    JumpFalse               _else_0x03d7 1
                    Return                                                  ; if d = 0 then return

_else_0x03d7        LDWI                    -32768
                    STW                     _mask                           ; mask = &h8000

_while_0x03dc       LDW                     _mask
                    CALL                    convertNeOpAddr
                    JumpFalse               _wend_0x0443 4                  ; while mask <> 0

                    LDW                     _r
                    LSLW                    
                    STW                     _r                              ; r = r LSL 1

                    LDW                     _n
                    ANDW                    _mask
                    CALL                    convertNeOpAddr
                    JumpFalse               _else_0x040f 2
                    INC                     _r                              ; if n AND mask <> 0 then inc r

_else_0x040f        LDW                     _r
                    SUBW                    _d
                    CALL                    convertGeOpAddr
                    JumpFalse               _else_0x0431 3
                    LDW                     _r
                    SUBW                    _d
                    STW                     _r
                    LDW                     _q
                    ORW                     _mask
                    STW                     0xde
                    LDWI                    _page_0x0400
                    CALL                    giga_vAC
_page_0x0400        LDW                     0xde
                    STW                     _q                              ; if r >= d then r = r - d : q = q OR mask

_else_0x0431        LDW                     _mask
                    STW                     mathShift
                    ShiftRight1bit          
                    STW                     _mask                           ; mask = mask LSR 1

                    LDWI                    _while_0x03dc
                    CALL                    giga_vAC                        ; wend

_wend_0x0443        Return                                                  ; return

_end_0x0445         BRA                     _end_0x0445                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0xff8f
convertEqOp         EQU     0xff86
convertNeOp         EQU     0xff7d
convertLeOp         EQU     0xff74
convertGeOp         EQU     0xff6b
convertLtOp         EQU     0xff62
convertGtOp         EQU     0xff59
divide16bit         EQU     0xfe11
shiftRight1bit      EQU     0xff00
scanlineMode        EQU     0xff23
resetVideoTable     EQU     0xfd8f
initClearFuncs      EQU     0xff37
clearVertBlinds     EQU     0xfec5
clearCursorRow      EQU     0xfd46
printInit           EQU     0xfd30
printText           EQU     0xff0a
printDigit          EQU     0xfd0e
printInt16          EQU     0xfdae
printChar           EQU     0xfca7
newLineScroll       EQU     0xfe68
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI routine
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4           ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_addr       EQU     register13
drawLine_tmp        EQU     register14
  
drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_addr       EQU     register15

    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDI     0x02                                ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     8

clearCR_loopy       ST      clearLoop
                    CALL    realTimeProcAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     0x01
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

