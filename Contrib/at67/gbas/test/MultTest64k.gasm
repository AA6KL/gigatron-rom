_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0xffa0

; Includes
%includePath                  "../runtime"
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_math                         EQU                               0x0337
_div                          EQU                               0x036f
_next_0x0270                  EQU                               0x0270
_page_0x0300                  EQU                               0x0300
_end_0x0336                   EQU                               0x0335
_else_0x039c                  EQU                               0x0383
_while_0x03a1                 EQU                               0x0388
_else_0x03d4                  EQU                               0x03a9
_else_0x03f6                  EQU                               0x03c3
_wend_0x0408                  EQU                               0x03d3
_end_0x040a                   EQU                               0x03d5

; Variables
_result                       EQU                               0x0030
_i                            EQU                               0x0032
_timer                        EQU                               0x0034
_q                            EQU                               0x0036
_r                            EQU                               0x0038
_n                            EQU                               0x003a
_d                            EQU                               0x003c
_a                            EQU                               0x003e
_b                            EQU                               0x0040
_mask                         EQU                               0x0042

; Strings
_timeArray_                   EQU                               0xff01
_timeArray_                   DB                                00 00 00
_timeString_                  EQU                               0xfe01
_timeString_                  DB                                8 '00:00:00' 0
_str_0xff9d                   EQU                               0xff9d
_str_0xff9d                   DB                                1 ' ' 0
_str_0xff98                   EQU                               0xff98
_str_0xff98                   DB                                3 '/60' 0

; Define Bytes

; Define Words
def_words_0x8000              EQU                               0x8000
def_words_0x8000              DW                                85 166 -16 163 -61 -138 -143 163 84 78 -50 17 -32 -34 113 120 -88 -11 149 131 111 -52 126 -21 52 -100 -178 -165 32 -101 98 81 43 -37 151 -32 -109 -157 -81 -68 40 -30 120 -178 145 -63 -169 41 91 -144 40 -156 -140 -148 10 49 -141 160 -135 -20 -22 -63 43 128 -98 -122 72 87 167 136 -93 137 -101 119 -106 -1 167 5 13 168 -151 55 -70 -149 152 72 -15 -26 -19 120 -108 54 166 -90 34 176 87 25 99 128 68 -170 -9 136 30 85 168 -60 -38 -76 -83 155 120 -128 73 -48 1 -159 83 -23 42 134 175 -152 49 -87 45 -159 -130 -68 56 107 132 140 34 -70 16 -60 -106 -164 -47 141 -114 -77 -32 -171 -122 42 2 -170 -23 -172 -53 9 138 -55 -58 26 101 58 -78 46 8 151 -81 106 -76 119 106 -59 24 -32 -43 17 -32 16 -142 -90 57 107 145 0 129 -115 -80 82 117 -62 -101 -38 -125 -116 124 -121 -151 86 -164 -160 -59 135 115 151 -66 -56 -75 -33 -157 145 -178 -111 67 -167 -177 -91 -76 69 120 135 -32 -141 104 152 -179 63 -36 -153 68 -162 68 -177 29 25 -164 59 -72 -156 -62 71 -9 -72 -141 96 -30 69 -13 -169 -117 -164 -68 122 92 164 158 -76 45 155 -71 159 -86 96 -169 142 -172 79 53 79 -177 172 171 -7 -180 -45 -110 -77 16 -57 -83 46 -171 -14 140 155 47 -43 141 39 -23 -8 107 134 -63 -132 -100 158 82 159 77 54 -23 72 -119 142 -158 3 146 24 -45 111 103 80 -31 126 -2 177 -54 -131 -116 160 171 5 155 -36 171 9 107 -50 119 -14 -131 -19 -89 -161 -141 -179 -87 96 92 145 125 -140 79 -169 -143 130 173 -92 134 -115 84 -49 114 -180 41 10 159 25 46 -82 35 -57 52 62 58 -142 -46 111 -102 162 -169 -178 -19 -16 -163 -118 124 116 -177 -4 73 54 92 141 54 35 44 95 4 -126 138 134 -49 -88 139 -80 0 -127 134 -54 67 40 172 -123 -85 -55 -110 106 26 125 -147 138 173 157 133 1 -90 75 13 -173 28 -67 -119 -105 25 51 -95 75 -109 60 134 32 -3 179 19 176 -178 -32 134 -10 -101 84 38 -131 -32 61 174 -125 20 -37 115 94 46 -54 -69 -32 91 65 -177 135 90 -46 179 -23 25 -172 59 62 168 37 -128 86 134 171 83 -43 -76 53 -40 91 -1 5 87 129 98 89 40 -7 11 -86 -67 -123 100 -99 -124 123 165 -31 172 120 176 167 -32 -118 86 112 3 -94 16 164 67 -94 -121 31 -24 67 48 -87 31 -29 35 158 -142 -27 -13 -61 58 56 91 26 -144 21 30 144 -32 -101 -160 -99 127 101 59 107 126 -25 77 138 135 -171 8 108 -104 -91 113 -171 -98 173 38 -139 -132 88 -118 25 -44 -27 106 150 -83 -48 -107 120 -10 30 87 74 -110 -117 -41 -42 140 -98 -78 16 84 143 -161 30 -69 39 29 -133 19 153 9 -76 -149 -16 -75 106 -30 -158 37 -150 161 59 -21 -55 -50 -84 22 99 -138 -178 -42 134 91 -78 -60 -46 126 26 -48 -107 -81 165 -110 -92 -69 -137 -67 4 45 55 120 -158 72 6 -161 63 -53 -3 58 -15 -146 53 133 -42 -100 -84 80 114 -102 31 31 -54 151 35 68 97 156 -23 83 -68 -178 26 -1 34 -174 -154 -21 102 -8 19 -84 31 -125 108 -43 135 -8 88 -22 -133 21 133 -54 123 12 28 31 107 95 110 167 33 -154 -136 -48 -96 167 107 -153 -156 -18 -112 162 -178 -10 66 -121 -37 -138 3 84 -96 143 -164 -23 -144 -27 39 27 -158 -28 -129 -158 -180 45 43 -83 -91 1 22 -172 -158 -75 -157 -10 -73 -138 143 -164 -104 -121 -49 -179 80 -119 -76 -108 129 -61 -68 -32 -179 -54 115 58 -34 106 -62 -148 41 -19 86 152 40 -60 116 54 87 164 20 -14 103 147 -157 69 162 -173 -114 35 174 -75 -69 166 94 122 74 161 140 -138 5 135 -164 -26 -124 -172 61 -53 -156 -36 -55 80 -88 -37 112 -159 -56 -35 175 -164 105 -113 47 60 -91 -99 -109 -157 -155 93 89 -32 -44 76 165 154 -130 -120 11 -60 -47 78 124 169 -165 5 -102 41 148 91 47 53 53 -162 -141 -105 57 -107 149 -178 75 8 4 137 -136 125 -3 -87 -17 101 32 84 -66 86 55 -145 -34 170 -145 164 -31 8 -54 -155 99 178 179 167 -152 -154 -101 -6 132 -103 148 -160 129 9 13 36 -60 145 13 -74 -32 35 179 -36 -48 41 117 90 -1 12 -41 -35 50 -79 -161 -44 -176 -151 -145 -120 -87 -17 146 118 85 -128 43 171 -10 -130 -86 -161 -143 45 72 165 -63 114 157 -150 93 80 56 36 -110 125 -73 -115 148 20 -57 48 -143 -28 62 -45 118 -102 -161 -99 -154 82 143 -6 144 -108 -34 69 -87 21 -81 -59 99 -134 123 -37 116 -108 154 -5 -87 153 -36 -111 -172 143 48 -66 -101 -65 139 -157 108 -17 75 -51 -106 112 -36 -22 1 -31 107 -94 -151 140 -63 
def_words_0x87d0              EQU                               0x87d0
def_words_0x87d0              DW                                -14 -25 -16 -46 93 -23 70 -26 -156 -134 -88 -56 8 149 -145 117 -172 78 84 -81 104 -30 177 91 100 168 32 88 130 -104 -108 -126 -96 -45 -64 -67 100 114 5 -59 -72 -156 -1 69 -96 139 -62 -57 1 -26 17 -44 -99 140 -25 -108 -108 159 122 15 53 39 -44 -115 -163 -15 -156 44 55 95 -156 96 110 121 -124 72 -145 -123 136 31 81 -173 5 167 -7 156 138 -91 -166 -99 5 137 -46 94 123 156 -173 176 27 -49 143 29 -115 -167 -59 -174 -33 49 -180 35 65 -11 101 174 98 -93 87 147 -110 -162 -19 -142 34 44 -134 -163 -160 61 -113 72 -49 126 -60 22 87 -114 -18 30 -175 -176 -88 -130 109 35 29 -66 -129 47 -20 -176 -72 25 -19 -74 41 128 -52 141 61 -63 -44 113 -9 40 -147 162 90 -176 24 -179 -72 5 -6 61 -43 -80 136 -13 172 98 -13 11 -86 -36 124 178 82 151 137 37 -63 40 -88 -156 27 -34 83 167 -82 -177 -180 -97 -99 -153 59 176 47 35 -73 -43 -94 5 170 61 -103 153 -49 141 54 -57 120 22 124 161 -45 24 156 -112 -163 111 2 -37 114 53 -71 128 -149 152 149 -83 -79 -19 -1 168 -7 21 -50 -114 17 -145 91 130 74 -177 -162 -26 -146 174 -32 -122 -76 41 72 -157 177 -130 74 -114 -31 -84 45 118 -137 18 132 -45 137 -37 -169 179 88 -87 155 -10 -66 -104 167 149 57 -36 -16 72 167 14 -80 64 -54 -166 -142 66 62 84 -79 -11 160 173 -127 -82 -46 -88 54 130 -100 -30 76 -53 133 -31 31 175 -149 -44 -140 -18 175 60 48 50 4 -126 127 -133 -111 -167 -1 -148 101 28 55 -40 11 -93 74 178 -178 -126 -112 155 119 115 -130 148 -68 174 -179 -89 19 -155 -55 177 176 109 115 19 59 138 177 -47 -34 41 -68 66 -99 -44 114 -62 -162 -22 -138 116 -141 29 117 60 -154 72 -47 -132 -92 105 -157 29 -155 67 21 -112 -140 151 14 45 2 116 57 -67 71 76 56 27 -157 105 93 136 138 128 -174 -177 159 4 -166 -35 178 111 23 141 -180 -163 -132 -4 146 89 -162 168 33 -29 111 54 26 -102 -165 -147 70 -129 -177 -115 75 74 -130 -52 -41 130 -26 26 -172 -145 43 -117 85 25 -86 -131 104 166 -7 -118 -172 -160 -11 -56 93 126 123 168 -58 157 -45 172 -1 -99 82 132 63 56 7 -70 179 33 -112 -27 -113 -38 -106 -165 116 -135 151 99 179 147 170 -110 17 8 -168 -165 -60 -166 153 108 -19 -7 -44 -25 158 -80 164 23 110 -98 -65 -76 -165 -115 120 -72 -33 95 16 178 30 34 -104 -93 6 -127 58 128 96 118 -63 -41 -122 -12 134 45 -138 34 156 7 94 133 -146 -120 128 172 56 -94 -72 -38 52 112 51 -113 62 84 67 24 161 61 49 -143 131 51 18 -128 166 102 -164 140 -103 11 2 -50 87 -112 -169 -42 70 -29 32 -23 11 133 149 -103 -12 -107 -71 54 -147 -21 87 -116 -33 89 144 -11 22 145 -46 176 -102 -125 179 9 17 -107 111 -36 58 41 78 -60 61 25 170 89 -94 -74 -153 -126 -9 129 91 110 -35 -143 112 -47 69 95 32 -131 151 -89 25 -137 156 88 -87 12 93 108 -13 4 50 -172 -94 -90 -72 158 158 132 13 -39 -115 -89 141 -85 -92 86 -13 120 -171 -156 136 118 147 160 -41 -153 -68 88 133 -106 159 -64 -165 -163 166 72 -2 -65 -75 4 120 -134 -44 -112 8 -153 -7 -37 -176 -76 138 155 -91 -135 170 58 -12 -101 97 0 -37 -90 57 -135 46 -106 -74 -1 -68 79 93 115 161 147 9 104 20 20 -118 -111 59 -165 -105 -19 118 40 -115 -177 138 139 -112 67 -24 27 -31 -115 -99 101 -127 20 114 103 -34 -24 62 -51 59 72 107 179 -67 151 94 76 123 79 171 179 -123 54 -39 -7 -152 57 18 -170 -56 110 94 75 -72 -90 48 -89 31 -173 97 72 67 -170 59 116 -94 -67 105 57 6 -53 37 -134 -175 -120 137 -125 82 -78 -173 79 174 -92 -93 87 -21 -34 -178 -122 -176 -107 -120 179 -71 -60 -98 95 34 -125 -70 152 106 -40 -86 -115 -150 -109 -78 114 -83 135 41 158 -126 69 106 -85 -168 -70 109 86 83 13 149 168 -148 74 -166 76 -27 -150 170 -70 -148 -26 -141 -5 -137 -79 61 -178 74 -114 94 -102 -171 -53 29 -19 -46 92 -21 -19 -123 19 -161 -171 -19 38 -63 106 -150 105 17 -66 39 -26 129 21 -111 162 -112 -161 128 -6 -15 -83 -113 -59 155 -130 63 172 162 156 -167 119 118 -45 51 -166 146 -46 -79 153 127 -130 -8 127 114 -93 80 85 -148 172 -24 0 -63 -155 -9 116 -92 150 152 72 160 -141 -20 106 -7 130 95 -11 -124 -179 -164 -160 117 88 50 73 168 -3 -21 -150 66 6 146 -38 16 107 -131 119 168 -155 172 -158 55 -166 113 164 -22 -134 96 112 -151 -8 97 104 9 102 123 -59 90 10 -5 -15 -24 -139 
def_words_0x8fa0              EQU                               0x8fa0
def_words_0x8fa

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                  LDI                               0x28
                              STW                               romType
                              RomCheck                          
                              InitEqOp                          
                              InitNeOp                          
                              InitLeOp                          
                              InitGeOp                          
                              InitLtOp                          
                              InitGtOp                          
                              InitArray2d                       
                              InitArray3d                       
                              InitRealTimeAddr                  
                              Initialise                                                        ; INIT

                              ClearVertBlinds                                                   ; cls

                              LDI                               0
                              STW                               timerTick
                              LDI                               giga_frameCount
                              STW                               timerPrev
                              LDWI                              tickTime
                              STW                               realTimeProc0
                              LDWI                              setRealTimeProc0
                              CALL                              giga_vAC                        ; init time

                              LDI                               0
                              STW                               _result                         ; result=0

                              LDI                               0
                              STW                               _i
                              LDWI                              999
                              STW                               0xb0
                              LDI                               1
                              STW                               0xb2                            ; for i=0 to SIZE-1

_next_0x0270                  LDWI                              _math
                              CALL                              giga_vAC                        ; gosub math

                              ForNextFarVarAdd                  _i _next_0x0270 0xb0 0xb2       ; next i

                              LDW                               timerTick
                              STW                               _timer                          ; timer = get("TIMER")

                              NewLine                           
                              LDW                               _timer
                              STW                               mathX
                              LDI                               60
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              PrintAcInt16                      
                              PrintString                       _str_0xff9d
                              LDW                               _timer
                              STW                               mathX
                              LDI                               60
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              LDW                               mathRem
                              PrintAcInt16                      
                              PrintString                       _str_0xff98
                              NewLine                                                           ; print : print timer/60;" ";timer % 60;"/60"

                              LDI                               0
                              STW                               _q
                              STW                               _r                              ; q=0 : r=q

                              LDWI                              15000
                              STW                               _n
                              LDI                               153
                              STW                               _d                              ; n=15000 : d=153

                              LDW                               _n
                              STW                               mathX
                              LDW                               _d
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              STW                               _q                              ; q = n/d

                              LDW                               _n
                              STW                               mathX
                              STW                               0xe2
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xe2
                              LDW                               _d
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              LDW                               mathRem
                              STW                               _r                              ; r = n%d

                              NewLine                           
                              LDW                               _q
                              PrintAcInt16                      
                              PrintString                       _str_0xff9d
                              LDW                               _r
                              PrintAcInt16                      
                              NewLine                                                           ; print : print q;" ";r

_end_0x0336                   BRA                               _end_0x0336                     ; end

_math                         PUSH                              
                              LDW                               _i
                              LSLW                              
                              STW                               0xc2
                              LDWI                              -32768
                              ADDW                              0xc2
                              DEEK                              
                              STW                               _a                              ; a = deek(START + SIZE*0 + (i LSL 1))

                              LDW                               _i
                              LSLW                              
                              STW                               0xc2
                              LDWI                              -30768
                              ADDW                              0xc2
                              DEEK                              
                              STW                               _b                              ; b = deek(START + SIZE*2 + (i LSL 1))

                              LDW                               _i
                              LSLW                              
                              STW                               0xc2
                              LDWI                              -28768
                              ADDW                              0xc2
                              STW                               0xc2
                              LDW                               _a
                              STW                               mathX
                              LDW                               _b
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              DOKE                              0xc2                            ; doke START + SIZE*4 + (i LSL 1), a / b

                              Return                                                            ; return

_div                          LDI                               0
                              STW                               _q
                              STW                               _r                              ; q=0 : r=q

                              LDW                               _d
                              CALL                              convertEqOpAddr
                              JumpFalse                         _else_0x039c 0
                              Return                                                            ; if d = 0 then return

_else_0x039c                  LDWI                              -32768
                              STW                               _mask                           ; mask = &h8000

_while_0x03a1                 LDW                               _mask
                              CALL                              convertNeOpAddr
                              JumpFalse                         _wend_0x0408 3                  ; while mask <> 0

                              LDW                               _r
                              LSLW                              
                              STW                               _r                              ; r = r LSL 1

                              LDW                               _n
                              ANDW                              _mask
                              CALL                              convertNeOpAddr
                              JumpFalse                         _else_0x03d4 1
                              INC                               _r                              ; if n AND mask <> 0 then inc r

_else_0x03d4                  LDW                               _r
                              SUBW                              _d
                              CALL                              convertGeOpAddr
                              JumpFalse                         _else_0x03f6 2
                              LDW                               _r
                              SUBW                              _d
                              STW                               _r
                              LDW                               _q
                              ORW                               _mask
                              STW                               _q                              ; if r >= d then r = r - d : q = q OR mask

_else_0x03f6                  LDW                               _mask
                              STW                               mathShift
                              ShiftRight1bit                    
                              STW                               _mask                           ; mask = mask LSR 1

                              LDWI                              _while_0x03a1
                              CALL                              giga_vAC                        ; wend

_wend_0x0408                  Return                                                            ; return

_end_0x040a                   BRA                               _end_0x040a                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                      EQU     0xff81
convertEqOp                   EQU     0xff78
convertNeOp                   EQU     0xff6f
convertLeOp                   EQU     0xff66
convertGeOp                   EQU     0xff5d
convertLtOp                   EQU     0xff54
convertGtOp                   EQU     0xff4b
convertArr2d                  EQU     0xff3f
convertArr3d                  EQU     0xff2e
realTimeStub                  EQU     0xff1c
setRealTimeProc0              EQU     0xfe89
divide16bit                   EQU     0xfda8
shiftRight1bit                EQU     0xfe0b
resetVideoTable               EQU     0xfd38
initClearFuncs                EQU     0xff04
clearVertBlinds               EQU     0xfec5
clearCursorRow                EQU     0xfd08
printInit                     EQU     0xfce9
printText                     EQU     0xfe15
printDigit                    EQU     0xfcc7
printInt16                    EQU     0xfd57
printChar                     EQU     0xfc6f
newLineScroll                 EQU     0xfe2e
tickTime                      EQU     0xfe9b
handleTime                    EQU     0xfc37
convertEqOpAddr               EQU     0x00d0
convertNeOpAddr               EQU     0x00d2
convertLeOpAddr               EQU     0x00d4
convertGeOpAddr               EQU     0x00d6
convertLtOpAddr               EQU     0x00d8
convertGtOpAddr               EQU     0x00da
convertArr2dAddr              EQU     0x00dc
convertArr3dAddr              EQU     0x00de
realTimeStubAddr              EQU     0x00e0


; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


memIndex0           EQU     register0
memIndex1           EQU     register1
memIndex2           EQU     register2
memValue            EQU     register8
memAddr             EQU     register9


convertArr2d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    STW     memAddr
                    RET


convertArr3d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    DEEK
                    ADDW    memIndex2
                    ADDW    memIndex2
                    STW     memAddr
                    RET


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


setRealTimeProc0    LDWI    realTimeStub
                    STW     realTimeAddr
                    LDI     0x75
                    POKE    realTimeAddr                    ; replace RET with PUSH
                    INC     realTimeAddr
                    INC     realTimeAddr                    ; realTimeStub + 2
                    LDW     realTimeProc0
                    DOKE    realTimeAddr                    ; replace 0x0000 with proc
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeStubAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
    
                    LDWI    SYS_SetMemory_v2_54                 ; setup fill memory SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LD      fgbgColour
                    ST      giga_sysArg1                        ; fill value
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LD      top
                    ST      giga_sysArg3                        ; top line
                    SYS     54                                  ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        ; bottom line
                    SYS     54                                  ; fill memory
                    INC     top                                 ; next top line
                    
                    CALL    realTimeStubAddr
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeStub
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeStubAddr
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
                    CALL    realTimeStubAddr
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET



timeByte            EQU     register0
timeDigit           EQU     register4
timeArrAddr         EQU     register5
timeStrAddr         EQU     register6
timeTmp             EQU     register7


tickTime            LD      giga_frameCount
                    STW     timeTmp
                    LD      timerPrev
                    XORW    timeTmp
                    BEQ     tickT_exit
                    LDW     timerTick
                    ADDI    1
                    STW     timerTick                           ; 1/60 user timer, (max time = 546.116 seconds)
                    LD      timeTmp
                    ST      timerPrev
                    INC     timerPrev + 1                       ; 1/60 internal counter
                    LD      timerPrev + 1
                    SUBI    60
                    BLT     tickT_exit
                    LDI     0
                    ST      timerPrev + 1
                    PUSH
                    LDWI    handleTime                          ; handle time every second
                    CALL    giga_vAC
                    POP

tickT_exit          RET                    


handleTime          LDWI    _timeArray_
                    STW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; seconds
                    SUBI    60
                    BLT     handleT_exit
                    LDI     0
                    POKE    timeArrAddr                         ; reset seconds
                    
                    INC     timeArrAddr
                    LDW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; minutes
                    SUBI    60
                    BLT     handleT_exit
                    LDI     0
                    POKE    timeArrAddr                         ; reset minutes
                    
                    INC     timeArrAddr
                    LDW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; hours
handleT_mode        SUBI    24                                  ; [handleT_mode + 1] = 12 hour/24 hour
                    BLT     handleT_exit
handleT_epoch       LDI     0                                   ; [handleT_epoch + 1] = start hour
                    POKE    timeArrAddr                         ; reset hours

handleT_exit        RET                    

