_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0xffa0

; Includes
%includePath                  "../runtime"
%include                      util.i
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_math                         EQU                               0x0323
_div                          EQU                               0x035b
_next_0x0248                  EQU                               0x0257
_page_0x0300                  EQU                               0x0300
_end_0x030e                   EQU                               0x0321
_else_0x0374                  EQU                               0x036f
_while_0x0379                 EQU                               0x0374
_else_0x03ac                  EQU                               0x0395
_else_0x03ce                  EQU                               0x03af
_wend_0x03e0                  EQU                               0x03bf
_end_0x03e2                   EQU                               0x03c1

; Variables
_result                       EQU                               0x0030
_i                            EQU                               0x0032
_timer                        EQU                               0x0034
_q                            EQU                               0x0036
_r                            EQU                               0x0038
_n                            EQU                               0x003a
_d                            EQU                               0x003c
_a                            EQU                               0x003e
_b                            EQU                               0x0040
_mask                         EQU                               0x0042

; Arrays

; Strings

; Constant Strings
_str_0xff9d                   EQU                               0xff9d
_str_0xff9d                   DB                                1 ' ' 0
_str_0xff98                   EQU                               0xff98
_str_0xff98                   DB                                3 '/60' 0

; Data
_data_                        EQU                               0xff0b
_data_                        DW                                0
_dataIndex_                   EQU                               0xff09
_dataIndex_                   DW                                0

; Time
_timeArray_                   EQU                               0xff06
_timeArray_                   DB                                00 00 00
_timeString_                  EQU                               0xfe00
_timeString_                  DB                                8 '00:00:00' 0

; Define Bytes

; Define Words
def_words_0x8000              EQU                               0x8000
def_words_0x8000              DW                                116 27 139 166 179 17 137 8 -23 -4 176 -158 127 -62 -160 -148 146 44 93 -33 -115 4 -112 -19 67 -176 -97 108 93 -104 -74 -177 35 -43 -11 102 22 -38 139 -59 -131 -88 132 171 102 68 -96 123 112 -140 -156 128 -66 -118 -92 77 -113 -145 -151 162 -29 164 -9 -114 113 -107 163 -79 -169 87 99 -31 -111 12 38 -47 -122 -148 -178 -36 -25 -106 -77 -32 178 120 18 24 134 19 -147 -158 159 154 45 11 20 36 -75 -72 31 112 41 -58 37 -143 6 172 -9 138 -108 -137 -24 75 114 -10 80 45 -47 152 128 123 27 163 47 137 -91 -122 -155 17 -21 113 -138 52 155 -69 17 -146 157 60 145 -107 -151 165 59 75 -151 4 97 26 -7 -84 -25 95 108 -3 29 -38 -55 135 132 -75 -82 125 -92 -101 75 -144 -20 -164 -142 -47 -52 -154 -51 -20 -96 61 -7 -127 -147 -2 -142 52 -134 0 -168 71 15 141 -32 -177 48 -8 53 20 -88 -90 -40 -155 152 98 -82 -124 -1 -60 -87 85 -2 -38 -38 -163 -36 -142 149 88 64 22 -3 51 -179 49 -46 -12 -69 -151 -24 -113 -93 -43 162 -118 139 -23 47 -133 59 64 -28 25 159 -175 -150 -168 -154 149 -143 112 -150 104 -51 8 -111 102 40 119 -173 -32 -24 -172 165 -169 82 175 -58 32 -49 16 144 49 -170 -74 -63 -173 139 154 -85 -72 -73 85 8 -41 111 38 -174 -99 -175 -111 -127 -145 -28 13 142 5 55 61 49 -143 46 65 -162 40 48 109 61 -96 -164 83 106 -5 21 149 -46 154 164 -99 -121 118 157 -72 -75 -109 -132 -104 -90 167 -174 162 -85 -119 2 176 29 109 -47 55 -141 127 110 -5 -92 5 5 -23 -89 -94 146 142 161 -104 -115 -10 -105 -177 -79 63 157 -53 41 -113 166 -46 -147 163 84 -73 89 155 -149 -48 -57 -46 137 -73 -121 154 -168 31 75 -129 0 132 -176 34 167 -88 26 41 34 12 95 -75 56 28 -18 -108 -20 -178 105 -56 -100 52 121 48 81 32 -166 38 94 8 -25 41 35 -142 -106 -109 100 161 39 118 38 -128 -127 106 10 -162 30 -38 -42 59 176 -112 -49 139 -28 38 -5 169 -146 -81 79 173 -163 -164 108 -127 168 -53 -145 -16 -159 -106 -175 80 -167 120 -180 -47 -12 -59 160 142 -74 -38 36 60 -114 74 33 145 99 -37 -45 -97 5 -79 -71 177 165 97 32 5 -2 88 59 43 -163 -147 46 -3 -144 149 -102 -137 -140 -34 -117 128 -95 6 -103 41 177 172 -4 118 111 -90 -141 -5 -43 77 -105 -111 -7 6 -165 -166 -40 155 -89 49 -53 -142 -170 52 -63 -60 52 62 29 40 -100 -79 -127 32 168 97 116 -179 138 -49 112 -145 179 140 7 71 -37 -180 47 -111 152 -3 -125 172 154 32 -59 124 62 87 -88 82 -110 128 -157 -15 169 -63 -21 36 -170 -116 -41 -49 -66 -51 -134 12 57 -30 140 -25 146 170 -54 67 -129 153 152 -106 -93 163 -100 66 -6 -138 -147 -50 133 -138 -4 -75 55 -61 49 29 86 77 97 -29 6 -173 70 60 67 -40 104 -1 69 -9 -37 -86 1 33 -15 -38 -146 93 177 71 -92 -129 112 -41 28 -173 39 -31 -172 -52 132 93 -46 -48 -154 58 155 -34 -92 96 -100 148 13 0 129 -86 117 121 100 -94 -162 -20 152 84 -115 -87 -34 -43 103 -133 -136 -152 116 -134 -68 145 11 48 36 -171 -2 159 -108 85 31 168 131 149 -86 -138 -179 160 165 -115 152 6 -58 -35 -43 -71 -124 28 -70 -164 176 -117 -114 141 -179 -10 116 21 -74 10 84 -75 -113 -69 -50 131 31 -29 169 -163 149 -158 3 13 -176 -30 1 30 -133 -118 161 70 89 46 14 -36 156 52 148 76 -59 -110 61 89 31 79 -44 75 53 -169 23 17 38 123 -142 -128 141 176 -14 116 54 166 79 119 -43 -68 37 -24 -103 -109 4 -3 -70 56 31 -108 -49 -147 -117 -2 -93 -62 -23 -59 -128 144 -27 -176 52 127 79 -3 -164 25 -6 46 -122 -130 -29 87 -101 113 -52 -82 109 82 98 -12 53 118 -100 3 -151 92 149 -127 -132 -110 -44 -108 142 151 -31 134 -115 -103 -69 35 -60 -133 56 177 107 71 4 104 -1 -54 -90 -71 -165 152 -97 -21 167 141 -148 12 57 -97 -154 -147 -103 -136 -40 -134 -46 88 1 24 -139 -38 91 55 -105 78 -125 -158 159 -1 82 -76 17 -171 -157 -66 6 -34 70 135 -97 -128 124 -37 -104 19 -76 -90 -38 13 38 83 75 -131 118 -160 -87 -68 99 -3 69 -87 56 117 77 -60 146 -13 -11 -163 -85 -23 135 70 -81 -99 -32 -74 -51 -155 5 39 -64 44 -99 59 95 -51 -119 -14 -174 128 -86 135 -106 -125 1 44 -150 51 -27 43 -173 -69 -160 -105 -131 163 -77 58 59 -91 -37 16 48 -132 116 -52 -137 38 61 129 96 -100 -132 43 -91 -41 -52 -65 -132 125 172 -143 141 -28 82 29 -34 -50 -64 152 149 -66 -75 15 78 -13 23 71 -106 42 159 56 
def_words_0x87d0              EQU                               0x87d0
def_words_0x87d0              DW                                -121 -176 94 124 -36 -16 -97 -36 144 -6 84 -3 10 21 -66 -66 -68 22 167 22 36 57 106 -36 162 -120 6 -90 -165 -142 39 70 -2 -171 29 -158 173 -121 1 -21 -58 -63 -107 169 -70 -50 59 20 -83 170 49 -155 136 -18 -149 -1 172 -109 73 80 -48 45 107 -51 -60 -53 179 117 -178 -133 178 44 69 -37 149 67 -59 -82 -127 174 171 -37 69 -154 65 100 79 96 35 94 -135 126 43 20 -147 60 -30 -7 -57 117 -88 126 -150 71 -33 -120 -58 -179 -29 37 25 132 -84 177 -5 -80 30 4 94 119 136 -10 85 6 173 -130 12 -117 88 -104 169 98 -101 37 18 -156 -126 -49 160 -75 -149 5 -86 -138 -96 -101 -60 2 161 -35 96 108 -149 -82 -10 49 -58 -20 65 -142 6 71 -126 21 -153 26 57 59 95 -136 -143 -155 30 179 148 -101 -103 137 -2 54 120 -168 78 -17 76 -28 -93 -73 -75 -42 -5 -104 -133 -33 -111 -148 92 101 -136 -171 -43 149 -85 156 148 146 111 -98 70 -124 -84 59 -180 117 -161 -127 -5 32 148 41 -108 91 -22 128 -95 -105 -65 -16 129 -163 -123 -64 -66 3 77 26 77 152 36 124 -18 28 131 65 165 -157 92 104 -73 75 -71 117 -151 -140 -18 -169 78 -88 82 90 95 -149 -21 -75 -144 -163 120 95 -23 21 -6 -82 -14 168 -19 136 146 130 -101 165 -70 -139 -85 -92 85 160 152 -82 35 -143 28 -112 14 -26 -145 -91 -3 -167 131 -45 -113 -102 -158 -28 130 17 -119 0 93 -124 -74 89 130 -19 9 -57 40 8 71 85 -104 35 -163 -132 166 -17 91 -138 -13 -73 -138 -42 105 -153 -14 78 -138 118 -104 153 -108 94 -51 138 32 84 131 37 154 179 -124 -116 -164 166 -93 172 23 -42 -10 -30 -110 176 97 120 125 -101 -100 -108 109 80 49 43 32 -53 -114 74 -92 -79 170 37 34 -54 -155 156 121 97 -104 -94 24 -78 104 -81 -148 52 -155 145 44 22 -32 7 96 -17 -4 -130 177 -48 -149 -144 133 117 12 -143 -78 -27 84 155 21 133 -164 -3 139 -148 89 -33 112 -134 -127 121 -139 122 12 141 -152 34 121 -133 -97 -112 99 27 68 -49 -100 136 -64 131 129 75 -55 17 77 -11 -98 3 114 -151 -115 50 -131 169 -166 45 10 -128 179 -167 65 -64 113 161 7 -91 -110 -80 47 106 109 -108 58 -54 37 -34 -83 153 162 -113 163 -107 -76 78 -118 95 129 -41 138 70 -159 -155 171 30 177 75 166 101 -171 -72 -41 134 17 97 121 42 161 -60 35 91 -121 18 18 -77 -35 -84 -65 77 75 -39 -6 25 156 -82 55 110 93 -72 -80 -13 -147 -2 179 -122 -173 98 14 113 -116 42 64 154 60 138 17 -45 -177 4 36 -15 -16 90 84 -48 34 35 54 -170 86 -11 -154 -105 4 -85 -180 130 5 -73 -57 113 -49 136 -46 14 -166 -65 -89 -116 140 -161 -166 77 72 -20 -16 -85 -115 -51 119 -48 -45 84 -10 -23 48 -50 153 -104 157 -114 -42 -135 83 -145 20 80 10 122 5 153 154 108 40 -65 99 -84 -180 -151 -165 -116 -166 -166 94 5 179 -87 163 144 -102 33 172 -118 -118 129 110 23 -157 94 -142 -93 49 7 -70 -172 -82 -127 72 140 -134 -116 108 -177 -144 -58 85 -168 82 -73 -69 -80 -81 -19 -174 129 92 57 -88 151 65 177 -22 -111 -42 -33 -36 -65 157 -110 -103 116 -143 27 -86 -106 104 59 138 -45 -139 123 49 -73 17 -68 -106 59 43 121 -173 -112 -107 129 -180 -99 169 49 120 60 -12 34 116 -53 50 110 -28 -22 130 1 -21 -7 -133 77 -124 -148 -41 119 -62 113 79 -95 -99 65 -65 143 134 62 -140 117 -34 -52 91 0 58 82 171 -163 25 67 -170 -8 -32 -144 -92 -50 -66 -128 -135 84 156 -13 0 -63 -97 -149 104 89 154 77 174 -92 -131 -178 35 -106 66 161 79 -152 -126 -72 -179 -104 3 137 -63 116 93 -93 -152 140 -67 8 119 -111 41 -26 -97 -127 94 -39 -105 84 -74 51 106 -157 -2 135 -165 -88 119 -174 -26 9 -118 -93 105 81 -62 20 11 -120 -19 113 -149 -15 -125 -151 -60 141 42 35 144 63 -55 27 -141 31 -28 -92 9 3 16 128 154 -85 15 14 -20 -69 -139 28 74 39 -172 174 -139 -39 141 93 72 151 8 -166 56 -133 -178 -11 -85 -77 21 42 -96 -46 -36 -109 -144 -42 0 132 35 -52 -26 -118 118 -64 -7 -10 -101 114 -170 1 146 -107 -97 -65 -1 66 -123 -47 164 133 65 -42 80 -178 92 91 8 154 38 -93 -163 -78 92 -1 -154 -3 158 49 -121 -126 -168 78 2 137 -130 114 158 27 157 40 125 -162 -80 115 178 -131 -135 47 82 -145 -112 -13 -166 -137 145 -133 34 -19 -71 56 -119 -13 17 -117 177 -126 -18 98 172 21 80 138 38 62 25 166 5 -143 -55 -97 -105 -154 -88 -83 -77 -22 91 148 11 16 -149 3 175 -53 2 153 134 -88 -169 -56 -167 -158 
def_words_0x8fa0              EQU                               0x8fa0
def_words_0x8fa

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                  LDI                               0x28
                              STW                               romType
                              RomCheck                          
                              Initialise                        
                              InitEqOp                        
                              InitNeOp                        
                              InitGeOp                        
                              InitRealTimeStub                                                  ; INIT

                              ClearVertBlinds                                                   ; cls

                              LDI                               0
                              STW                               timerTick
                              LDI                               giga_frameCount
                              STW                               timerPrev
                              LDWI                              tickTime
                              STW                               realTimeProc0
                              LDWI                              setRealTimeProc0
                              CALL                              giga_vAC                        ; init time

                              LDI                               0
                              STW                               _result                         ; result=0

                              LDI                               0
                              STW                               _i
                              LDWI                              999
                              STW                               0xb0
                              LDI                               1
                              STW                               0xb2                            ; for i=0 to SIZE-1

_next_0x0248                  LDWI                              _math
                              CALL                              giga_vAC                        ; gosub math

                              ForNextFarVarAdd                  _i _next_0x0248 0xb0 0xb2       ; next i

                              LDW                               timerTick
                              STW                               _timer                          ; timer = get("TIMER")

                              NewLine                           
                              LDW                               _timer
                              STW                               mathX
                              LDI                               60
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              PrintAcInt16                      
                              PrintString                       _str_0xff9d
                              LDW                               _timer
                              STW                               mathX
                              LDI                               60
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              LDW                               mathRem
                              PrintAcInt16                      
                              PrintString                       _str_0xff98
                              NewLine                                                           ; print : print timer/60;" ";timer % 60;"/60"

                              LDI                               0
                              STW                               _q
                              STW                               _r                              ; q=0 : r=q

                              LDWI                              15000
                              STW                               _n
                              LDI                               153
                              STW                               _d                              ; n=15000 : d=153

                              LDW                               _n
                              STW                               mathX
                              LDW                               _d
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              STW                               _q                              ; q = n/d

                              LDW                               _n
                              STW                               mathX
                              LDW                               _d
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              LDW                               mathRem
                              STW                               _r                              ; r = n%d

                              NewLine                           
                              LDW                               _q
                              STW                               0xe2
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xe2
                              PrintAcInt16                      
                              PrintString                       _str_0xff9d
                              LDW                               _r
                              PrintAcInt16                      
                              NewLine                                                           ; print : print q;" ";r

_end_0x030e                   BRA                               _end_0x030e                     ; end

_math                         PUSH                              
                              LDW                               _i
                              LSLW                              
                              STW                               0xc2
                              LDWI                              -32768
                              ADDW                              0xc2
                              DEEK                              
                              STW                               _a                              ; a = deek(START + SIZE*0 + (i LSL 1))

                              LDW                               _i
                              LSLW                              
                              STW                               0xc2
                              LDWI                              -30768
                              ADDW                              0xc2
                              DEEK                              
                              STW                               _b                              ; b = deek(START + SIZE*2 + (i LSL 1))

                              LDW                               _i
                              LSLW                              
                              STW                               0xc2
                              LDWI                              -28768
                              ADDW                              0xc2
                              STW                               0xc2
                              LDW                               _a
                              STW                               mathX
                              LDW                               _b
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              DOKE                              0xc2                            ; doke START + SIZE*4 + (i LSL 1), a / b

                              Return                                                            ; return

_div                          LDI                               0
                              STW                               _q
                              STW                               _r                              ; q=0 : r=q

                              LDW                               _d
                              CALL                              convertEqOpAddr
                              JumpFalse                         _else_0x0374 0
                              Return                                                            ; if d = 0 then return

_else_0x0374                  LDWI                              -32768
                              STW                               _mask                           ; mask = &h8000

_while_0x0379                 LDW                               _mask
                              CALL                              convertNeOpAddr
                              JumpFalse                         _wend_0x03e0 3                  ; while mask <> 0

                              LDW                               _r
                              LSLW                              
                              STW                               _r                              ; r = r LSL 1

                              LDW                               _n
                              ANDW                              _mask
                              CALL                              convertNeOpAddr
                              JumpFalse                         _else_0x03ac 1
                              INC                               _r                              ; if n AND mask <> 0 then inc r

_else_0x03ac                  LDW                               _r
                              SUBW                              _d
                              CALL                              convertGeOpAddr
                              JumpFalse                         _else_0x03ce 2
                              LDW                               _r
                              SUBW                              _d
                              STW                               _r
                              LDW                               _q
                              ORW                               _mask
                              STW                               _q                              ; if r >= d then r = r - d : q = q OR mask

_else_0x03ce                  LDW                               _mask
                              STW                               mathShift
                              ShiftRight1bit                    
                              STW                               _mask                           ; mask = mask LSR 1

                              LDWI                              _while_0x0379
                              CALL                              giga_vAC                        ; wend

_wend_0x03e0                  Return                                                            ; return

_end_0x03e2                   BRA                               _end_0x03e2                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                      EQU     0xff81
realTimeStub                  EQU     0xff63
convertEqOp                   EQU     0xfda5
convertNeOp                   EQU     0xfd9c
convertGeOp                   EQU     0xfd93
setRealTimeProc0              EQU     0xff17
divide16bit                   EQU     0xfe23
shiftRight1bit                EQU     0xff0d
resetVideoFlags               EQU     0xff75
resetVideoTable               EQU     0xfd6f
initClearFuncs                EQU     0xfd62
clearVertBlinds               EQU     0xff29
clearCursorRow                EQU     0xfd32
printInit                     EQU     0xfd1c
printText                     EQU     0xfe0a
printDigit                    EQU     0xfcdd
printInt16                    EQU     0xfdae
printChar                     EQU     0xfc85
newLineScroll                 EQU     0xfe7a
tickTime                      EQU     0xfed5
handleTime                    EQU     0xfc4d
convertEqOpAddr               EQU     0x00d0
convertNeOpAddr               EQU     0x00d2
convertLeOpAddr               EQU     0x00d4
convertGeOpAddr               EQU     0x00d6
convertLtOpAddr               EQU     0x00d8
convertGtOpAddr               EQU     0x00da
convertArr2dAddr              EQU     0x00dc
convertArr3dAddr              EQU     0x00de
realTimeStubAddr              EQU     0x00e0


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


setRealTimeProc0    LDWI    realTimeStub
                    STW     realTimeAddr
                    LDI     0x75
                    POKE    realTimeAddr                    ; replace RET with PUSH
                    INC     realTimeAddr
                    INC     realTimeAddr                    ; realTimeStub + 2
                    LDW     realTimeProc0
                    DOKE    realTimeAddr                    ; replace 0x0000 with proc
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    

resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET




                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeStubAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    SYS_SetMemory_v2_54                 ; setup fill memory SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LD      fgbgColour
                    ST      giga_sysArg1                        ; fill value
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LD      top
                    ST      giga_sysArg3                        ; top line
                    SYS     54                                  ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        ; bottom line
                    SYS     54                                  ; fill memory
                    INC     top                                 ; next top line
                    
                    CALL    realTimeStubAddr
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeStubAddr
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
                    CALL    realTimeStubAddr
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET



timeByte            EQU     register0
timeDigit           EQU     register4
timeArrAddr         EQU     register5
timeStrAddr         EQU     register6
timeTmp             EQU     register7


tickTime            LD      giga_frameCount
                    STW     timeTmp
                    LD      timerPrev
                    XORW    timeTmp
                    BEQ     tickT_exit
                    LDW     timerTick
                    ADDI    1
                    STW     timerTick                           ; 1/60 user timer, (max time = 546.116 seconds)
                    LD      timeTmp
                    ST      timerPrev
                    INC     timerPrev + 1                       ; 1/60 internal counter
                    LD      timerPrev + 1
                    SUBI    60
                    BLT     tickT_exit
                    LDI     0
                    ST      timerPrev + 1
                    PUSH
                    LDWI    handleTime                          ; handle time every second
                    CALL    giga_vAC
                    POP

tickT_exit          RET                    


handleTime          LDWI    _timeArray_
                    STW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; seconds
                    SUBI    60
                    BLT     handleT_exit
                    LDI     0
                    POKE    timeArrAddr                         ; reset seconds
                    
                    INC     timeArrAddr
                    LDW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; minutes
                    SUBI    60
                    BLT     handleT_exit
                    LDI     0
                    POKE    timeArrAddr                         ; reset minutes
                    
                    INC     timeArrAddr
                    LDW     timeArrAddr
                    PEEK
                    ADDI    1
                    POKE    timeArrAddr                         ; hours
handleT_mode        SUBI    24                                  ; [handleT_mode + 1] = 12 hour/24 hour
                    BLT     handleT_exit
handleT_epoch       LDI     0                                   ; [handleT_epoch + 1] = start hour
                    POKE    timeArrAddr                         ; reset hours

handleT_exit        RET                    

