_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
fontLutId                     EQU                               0x00e4

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0xffa0

; Includes
%includePath                  "../runtime"
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_math                         EQU                               0x0368
_div                          EQU                               0x03a0
_next_0x026c                  EQU                               0x0268
_else_0x0292                  EQU                               0x0280
_next_0x02bc                  EQU                               0x02a8
_page_0x0300                  EQU                               0x0300
_end_0x0377                   EQU                               0x0366
_else_0x03dd                  EQU                               0x03b4
_while_0x03e2                 EQU                               0x03b9
_else_0x0415                  EQU                               0x03da
_page_0x0400                  EQU                               0x0400
_else_0x0437                  EQU                               0x0404
_wend_0x0449                  EQU                               0x0414
_end_0x044b                   EQU                               0x0416

; Variables
_result                       EQU                               0x0030
_timer                        EQU                               0x0032
_tick                         EQU                               0x0034
_i                            EQU                               0x0036
_ticks                        EQU                               0x0038
_q                            EQU                               0x003a
_r                            EQU                               0x003c
_n                            EQU                               0x003e
_d                            EQU                               0x0040
_a                            EQU                               0x0042
_b                            EQU                               0x0044
_mask                         EQU                               0x0046

; Strings
_str_0xff9d                   EQU                               0xff9d
_str_0xff9d                   DB                                1 ' ' 0
_str_0xff98                   EQU                               0xff98
_str_0xff98                   DB                                3 '/60' 0

; Define Bytes

; Define Words
def_words_0x8000              EQU                               0x8000
def_words_0x8000              DW                                -131 78 22 -129 154 60 -38 21 -158 41 147 -98 -114 50 47 -138 -81 31 140 116 -130 33 173 -154 -36 -96 109 5 -77 -12 76 -31 -124 -13 -168 -74 99 -62 6 -121 -160 -145 129 -7 24 6 -78 -68 19 -5 176 93 31 24 -174 39 37 167 -93 92 34 -134 -44 -49 17 160 49 115 -138 43 5 145 -50 -48 167 -10 -146 167 -143 -141 -39 -4 38 121 30 140 -155 69 -79 164 83 128 169 -25 -35 -38 -22 22 -154 -40 68 -147 14 -148 107 132 100 -52 -168 171 -179 85 168 105 110 1 44 87 -10 -138 89 -168 95 -102 176 -4 -81 76 -159 -59 138 -123 115 -15 -158 -170 -105 66 57 91 -90 75 -138 -63 8 -60 39 36 127 -17 134 68 -29 59 39 81 111 25 121 -27 84 -147 -21 80 -27 79 144 178 26 75 110 100 -119 22 -172 -176 -15 83 98 -6 -175 45 -75 -129 113 -171 -29 78 -121 -115 -53 67 125 -58 161 -117 -176 -153 -87 -115 164 -8 -62 174 119 -114 30 152 -101 -33 174 164 -32 -160 -166 -115 10 -155 -126 167 -42 -150 -57 16 162 -81 5 -154 86 145 53 113 6 -73 -154 -30 145 -31 -164 -157 -41 -32 68 -71 158 90 118 0 -75 -19 60 102 -35 -106 82 -157 45 130 -177 -41 -82 132 147 -171 6 -136 121 30 32 -72 175 9 19 30 -93 -79 -134 177 65 88 148 -5 42 139 93 82 87 -91 29 101 -98 40 159 106 -84 177 -83 69 -124 -4 74 -141 -73 -87 8 -40 116 -147 -157 -114 170 11 -98 -80 4 -12 28 -178 172 -139 26 -39 83 80 43 89 -89 110 -100 -12 6 4 73 -54 -93 -77 -153 -137 -25 -28 -29 -167 -23 -21 -85 51 81 -93 20 74 -47 35 -4 109 -179 -128 105 -166 101 11 145 30 -112 44 27 85 -29 7 -114 84 171 -26 1 -22 -129 -161 -149 -162 -22 -56 -172 37 -121 40 -61 115 -75 87 25 -124 -163 -104 165 155 -78 -114 154 -101 113 134 127 140 -135 92 -115 1 -12 136 126 103 78 -47 131 88 -170 -158 -121 -167 90 133 35 113 72 134 -151 -149 99 -167 165 149 67 -105 -112 178 -16 -12 159 29 -105 -36 132 96 -26 -24 35 -29 133 115 -128 48 -51 -45 -129 167 38 -12 -140 -42 -20 -2 -20 -93 65 -38 -21 -115 -55 -128 119 -112 -31 -138 -19 63 -71 -156 -77 -154 -164 75 14 56 150 15 -147 103 -170 162 157 123 -180 -44 111 85 92 -88 135 -84 -165 112 5 -144 17 -21 -159 148 160 -66 43 -15 -115 9 57 97 -148 -125 141 41 40 -87 14 -109 140 147 -178 -85 -93 15 139 120 47 171 -86 -59 -40 93 -87 25 91 53 139 -20 -83 -163 -174 -37 -40 -33 39 -147 -66 -88 -162 159 -5 124 41 108 120 -174 177 -135 -164 33 140 -159 -154 -13 67 5 169 -167 155 -114 55 175 -145 61 -119 -166 124 -173 -35 111 53 -92 162 -51 112 50 0 -26 96 -129 -165 -150 132 91 -166 141 -160 -89 91 146 -85 -168 -175 -152 17 -24 40 -108 138 -22 16 86 27 -163 -64 -144 -61 -101 45 -27 144 34 -92 -41 -101 -174 -124 -60 -103 -160 -176 -127 147 26 -45 175 -143 -92 92 13 11 27 77 118 -88 161 -2 -91 18 -96 135 70 -127 153 -138 127 31 79 6 -153 -148 160 25 -139 4 28 -138 -52 29 -23 -10 -122 -107 158 -100 126 -132 -73 -124 -53 -27 24 -66 130 -37 -82 162 -62 -118 170 61 -50 59 31 -163 62 -60 -146 154 104 135 175 6 46 162 -109 102 15 95 -128 137 2 -3 -43 -64 7 30 7 143 -135 106 -165 -12 -30 -147 -36 157 -139 -100 -57 134 130 -170 45 -21 -171 -48 -78 -37 24 121 -76 -154 -94 136 173 48 -96 98 -91 166 -165 129 -7 -160 -30 17 24 16 -103 37 88 -45 -126 -135 109 53 115 65 -70 -30 41 -158 -101 170 20 -65 153 -68 18 -136 87 158 -72 -42 -178 172 -2 -63 148 -161 -101 5 178 -128 -127 -54 69 -34 -175 52 44 20 -62 -69 -116 62 167 -133 -175 101 159 134 -169 16 41 168 24 -130 102 116 -178 -6 113 14 170 -74 -51 -176 -122 107 -145 72 113 128 -68 2 -151 -143 -53 -86 -99 98 142 -59 139 -76 -107 113 -48 94 -37 10 -114 72 -115 158 107 -91 -95 -13 120 103 155 111 54 79 -138 65 32 -156 -111 -114 101 -29 127 166 92 9 76 56 110 -50 -52 -173 -18 -46 174 -9 100 92 -110 -101 178 -128 151 24 -138 136 -80 166 -150 -121 -64 -170 -136 -118 -101 -73 106 -8 -98 157 -15 139 66 167 4 -153 -59 32 -12 171 50 120 77 -2 162 -125 -8 -36 -53 19 63 129 -144 -6 151 109 -39 146 157 -112 -36 24 -117 31 -28 -138 130 -120 113 -80 36 -53 152 162 90 -62 -59 -64 -125 82 102 110 -130 -6 -55 121 178 -20 65 14 108 18 -91 -119 -174 -166 -6 -48 54 149 -6 -143 -108 76 -44 -55 23 172 126 -25 112 44 -175 
def_words_0x87d0              EQU                               0x87d0
def_words_0x87d0              DW                                -143 -175 -116 -44 173 -7 32 -28 170 65 -67 -62 128 -89 -108 116 53 96 -51 129 -86 -12 -123 -73 134 -52 27 96 -15 -65 -121 -3 155 30 156 144 -35 52 -160 144 -128 58 -158 41 -26 -46 -53 -61 174 114 -16 157 3 99 -97 168 -9 -165 -129 128 164 96 133 33 139 102 37 -114 -119 -158 -178 -40 -177 16 -104 28 -111 -150 -142 142 17 -126 159 -122 -84 107 89 40 -115 -86 2 -80 -167 2 -2 53 67 -63 133 149 161 -11 159 -159 55 99 -168 -117 -142 -71 -25 -59 23 114 -22 -12 -11 -46 148 -19 -127 -45 -38 71 -7 -161 -110 177 -158 38 -92 -99 -179 115 85 -123 -80 26 58 109 74 -115 59 -7 -47 24 -48 -80 55 33 -112 49 25 -28 -65 -75 26 -123 -25 150 160 95 -125 102 -106 -75 24 107 -126 143 -163 -62 -145 -153 -11 -151 -43 133 -150 -31 -176 80 4 -68 103 -99 66 51 -75 109 -152 75 -83 42 90 57 162 -70 176 -140 45 -48 178 -150 -165 31 110 149 -147 168 55 -97 -87 -66 -152 44 -111 -80 66 120 -141 -113 -85 25 -143 80 -136 -19 -54 -12 139 -97 -111 -50 -136 142 124 -3 -163 54 -128 91 -136 19 90 -155 -26 43 -63 116 -40 -28 -125 74 16 70 37 -31 -114 -118 175 41 -12 -116 -50 169 168 -164 -36 120 139 -173 -107 140 -83 44 -28 163 -13 -47 102 96 84 -40 -124 176 97 -91 -177 53 59 -55 -137 123 -63 -173 109 -175 121 -73 -103 122 -57 44 -138 84 101 -109 109 -127 -22 132 -96 117 -11 -85 -40 143 -141 -37 64 -124 -120 153 28 -49 -45 85 -76 173 140 116 -35 169 106 -134 82 -61 -112 -10 175 175 153 -138 -2 -61 -116 165 86 -8 -119 -102 -159 -43 -140 -46 92 88 137 -63 36 -129 -111 -51 47 142 172 -148 -159 9 120 -129 80 -131 136 -154 -30 -22 -64 142 86 -165 112 97 56 -7 104 45 65 61 -29 71 70 -19 23 -175 -113 9 156 -150 -125 110 146 -51 -78 -46 24 53 -173 153 -118 -177 -24 -152 -85 -128 -145 -72 -60 -175 161 -155 163 104 40 24 87 -15 173 161 -142 52 -112 -31 -15 73 44 103 33 97 -63 -54 138 39 -4 -66 -136 -72 -140 -6 71 -34 94 -143 103 -21 -20 152 -80 84 -15 16 -112 -93 -16 -77 -38 -70 -114 37 154 -91 12 171 -33 15 -110 71 -73 -88 9 -65 65 -131 151 -126 7 16 -40 44 19 -14 67 116 -61 -58 -77 -132 -24 64 -153 -63 139 166 141 101 25 -146 -30 -47 -151 160 -108 118 171 -179 108 101 -116 136 102 5 111 43 -61 22 166 -42 -127 -60 -127 132 177 46 -138 70 82 -17 -175 -164 44 85 -162 -88 -113 104 -171 -98 -43 117 -171 -94 -171 -132 -131 80 49 86 127 97 27 171 157 -44 -109 -13 40 -108 12 -37 -81 41 120 -45 -115 -135 17 53 -97 16 -94 -72 108 -42 29 87 -3 88 -10 36 -138 137 -97 144 -138 -133 29 167 68 -96 108 95 66 6 71 -142 95 -45 -6 37 79 -124 19 -16 -18 -164 -162 -42 30 -140 -88 15 -92 -162 118 61 97 30 32 -21 -160 -5 -112 -35 -21 146 -9 172 -13 124 -78 16 24 81 -152 91 -59 141 -144 83 -152 90 -168 -104 -159 22 -103 8 120 39 -86 15 84 52 -23 131 34 -19 169 -97 -94 -74 -79 -131 40 -40 -127 130 -111 32 11 -99 -36 -172 -25 0 68 83 -82 -6 -141 37 -76 179 -151 -53 -64 -6 -179 -104 46 -52 -28 8 175 62 32 80 95 84 -166 94 -113 179 138 90 67 -20 54 93 -153 -102 -94 -40 150 127 111 -111 108 -103 -33 106 -12 -173 72 -94 164 -87 -161 121 -32 -21 -90 -178 -164 158 57 -78 30 -41 110 138 67 -126 76 -87 161 -70 -179 109 132 114 -50 -85 -139 -125 -154 -131 112 55 -27 -101 -91 -59 16 144 -126 54 74 -50 23 112 -67 -68 -71 -24 121 175 123 133 -172 63 34 91 -77 -140 80 142 151 144 -53 -41 156 151 -177 -180 -170 164 49 -38 141 -83 37 -2 82 -125 -85 165 106 122 45 -127 43 -48 -99 -131 -27 -68 -123 26 155 -116 -42 51 57 -36 -172 -107 -143 75 98 -100 129 72 -70 -46 150 13 160 -87 39 -5 152 -157 147 -57 -179 144 149 -61 91 88 -119 7 135 -47 23 34 -106 155 8 36 131 130 -138 126 141 44 -135 20 112 52 -137 -127 155 78 -69 -156 -54 44 50 -150 20 -96 -174 19 120 -101 -28 154 -157 -35 -37 -153 -43 109 -147 -49 -146 44 130 -81 -21 -138 -173 -28 -11 -31 28 167 76 48 -19 167 -137 -174 -99 104 -41 31 120 -86 69 -166 -116 21 113 -107 158 -36 -51 -166 -150 79 9 -18 138 -11 152 83 126 -23 67 166 149 117 36 -67 123 84 94 21 -76 173 115 3 49 -35 102 162 80 3 34 61 -168 130 114 -155 -147 131 -61 -35 32 121 143 -52 19 -175 107 26 -68 137 -93 159 -144 136 69 73 146 175 
def_words_0x8fa0              EQU                               0x8fa0
def_words_0x8fa

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                  LDI                               0x28
                              STW                               romType
                              RomCheck                          
                              InitEqOp                          
                              InitNeOp                          
                              InitLeOp                          
                              InitGeOp                          
                              InitLtOp                          
                              InitGtOp                          
                              InitArray2d                       
                              InitArray3d                       
                              InitRealTimeProc                  
                              Initialise                                                ; INIT

                              ClearVertBlinds                                           ; cls

                              LDI                               0
                              STW                               _result
                              STW                               _timer
                              LD                                giga_frameCount
                              STW                               _tick                   ; result=0 : timer=result : tick=get("FRAMECOUNT")

                              LDI                               0
                              STW                               _i
                              LDWI                              999
                              STW                               0xb0
                              LDI                               1
                              STW                               0xb2                    ; for i=0 to SIZE-1

_next_0x026c                  LDW                               _tick
                              STW                               _ticks
                              LD                                giga_frameCount
                              STW                               _tick
                              SUBW                              _ticks
                              STW                               _ticks                  ; ticks=tick : tick=get("FRAMECOUNT") : ticks=tick-ticks

                              LDW                               _ticks
                              BGE                               _else_0x0292
                              LDWI                              256
                              ADDW                              _ticks
                              STW                               _ticks                  ; if ticks &&< 0 then ticks=ticks+256

_else_0x0292                  LDW                               _timer
                              ADDW                              _ticks
                              STW                               _timer                  ; timer=timer+ticks

                              LDWI                              _math
                              CALL                              giga_vAC                ; gosub math

                              ForNextFarVarAdd                  _i _next_0x026c 0xb0 0xb2                                                                                       ; next i

                              LDI                               0
                              STW                               _i
                              LDWI                              999
                              STW                               0xb0
                              LDI                               1
                              STW                               0xb2                    ; for i=0 to SIZE-1

_next_0x02bc                  ForNextFarVarAdd                  _i _next_0x02bc 0xb0 0xb2                                                                                       ; next i

                              NewLine                           
                              LDW                               _timer
                              STW                               mathX
                              LDI                               60
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              PrintAcInt16                      
                              PrintString                       _str_0xff9d
                              LDW                               _timer
                              STW                               mathX
                              LDI                               60
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              LDW                               mathRem
                              PrintAcInt16                      
                              STW                               0xe2
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xe2
                              PrintString                       _str_0xff98
                              NewLine                                                   ; print : print timer/60;" ";timer % 60;"/60"

                              LDI                               0
                              STW                               _q
                              STW                               _r                      ; q=0 : r=q

                              LDWI                              15000
                              STW                               _n
                              LDI                               153
                              STW                               _d                      ; n=15000 : d=153

                              LDW                               _n
                              STW                               mathX
                              LDW                               _d
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              STW                               _q                      ; q = n/d

                              LDW                               _n
                              STW                               mathX
                              LDW                               _d
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              LDW                               mathRem
                              STW                               _r                      ; r = n%d

                              NewLine                           
                              LDW                               _q
                              PrintAcInt16                      
                              PrintString                       _str_0xff9d
                              LDW                               _r
                              PrintAcInt16                      
                              NewLine                                                   ; print : print q;" ";r

_end_0x0377                   BRA                               _end_0x0377             ; end

_math                         PUSH                              
                              LDW                               _i
                              LSLW                              
                              STW                               0xc2
                              LDWI                              -32768
                              ADDW                              0xc2
                              DEEK                              
                              STW                               _a                      ; a = deek(ADDR + SIZE*0 + (i LSL 1))

                              LDW                               _i
                              LSLW                              
                              STW                               0xc2
                              LDWI                              -30768
                              ADDW                              0xc2
                              DEEK                              
                              STW                               _b                      ; b = deek(ADDR + SIZE*2 + (i LSL 1))

                              LDW                               _i
                              LSLW                              
                              STW                               0xc2
                              LDWI                              -28768
                              ADDW                              0xc2
                              STW                               0xc2
                              LDW                               _a
                              STW                               mathX
                              LDW                               _b
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              DOKE                              0xc2                    ; doke ADDR + SIZE*4 + (i LSL 1), a / b

                              Return                                                    ; return

_div                          LDI                               0
                              STW                               _q
                              STW                               _r                      ; q=0 : r=q

                              LDW                               _d
                              CALL                              convertEqOpAddr
                              JumpFalse                         _else_0x03dd 1
                              Return                                                    ; if d = 0 then return

_else_0x03dd                  LDWI                              -32768
                              STW                               _mask                   ; mask = &h8000

_while_0x03e2                 LDW                               _mask
                              CALL                              convertNeOpAddr
                              JumpFalse                         _wend_0x0449 4          ; while mask <> 0

                              LDW                               _r
                              LSLW                              
                              STW                               _r                      ; r = r LSL 1

                              LDW                               _n
                              ANDW                              _mask
                              CALL                              convertNeOpAddr
                              JumpFalse                         _else_0x0415 2
                              INC                               _r                      ; if n AND mask <> 0 then inc r

_else_0x0415                  LDW                               _r
                              SUBW                              _d
                              CALL                              convertGeOpAddr
                              JumpFalse                         _else_0x0437 3
                              LDW                               _r
                              SUBW                              _d
                              STW                               _r
                              LDW                               _q
                              ORW                               _mask
                              STW                               0xe2
                              LDWI                              _page_0x0400
                              CALL                              giga_vAC
_page_0x0400                  LDW                               0xe2
                              STW                               _q                      ; if r >= d then r = r - d : q = q OR mask

_else_0x0437                  LDW                               _mask
                              STW                               mathShift
                              ShiftRight1bit                    
                              STW                               _mask                   ; mask = mask LSR 1

                              LDWI                              _while_0x03e2
                              CALL                              giga_vAC                ; wend

_wend_0x0449                  Return                                                    ; return

_end_0x044b                   BRA                               _end_0x044b             ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                      EQU     0xff81
realTimeProc                  EQU     0xff25
convertEqOp                   EQU     0xff78
convertNeOp                   EQU     0xff6f
convertLeOp                   EQU     0xff66
convertGeOp                   EQU     0xff5d
convertLtOp                   EQU     0xff54
convertGtOp                   EQU     0xff4b
convertArr2d                  EQU     0xff3f
convertArr3d                  EQU     0xff2e
divide16bit                   EQU     0xfe13
shiftRight1bit                EQU     0xff03
resetVideoTable               EQU     0xfd76
initClearFuncs                EQU     0xff0d
clearVertBlinds               EQU     0xfec5
clearCursorRow                EQU     0xfd46
printInit                     EQU     0xfd30
printText                     EQU     0xfd95
printDigit                    EQU     0xfd0e
printInt16                    EQU     0xfdae
printChar                     EQU     0xfca7
newLineScroll                 EQU     0xfe6a
convertEqOpAddr               EQU     0x00d0
convertNeOpAddr               EQU     0x00d2
convertLeOpAddr               EQU     0x00d4
convertGeOpAddr               EQU     0x00d6
convertLtOpAddr               EQU     0x00d8
convertGtOpAddr               EQU     0x00da
convertArr2dAddr              EQU     0x00dc
convertArr3dAddr              EQU     0x00de
realTimeProcAddr              EQU     0x00e0


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI routine
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


memIndex0           EQU     register0
memIndex1           EQU     register1
memIndex2           EQU     register2
memValue            EQU     register8
memAddr             EQU     register9


convertArr2d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    STW     memAddr
                    RET


convertArr3d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    DEEK
                    ADDW    memIndex2
                    ADDW    memIndex2
                    STW     memAddr
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDI     0x02                                ; starting cursor position
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
    
                    LDWI    SYS_SetMemory_v2_54                 ; setup fill memory SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LD      fgbgColour
                    ST      giga_sysArg1                        ; fill value
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LD      top
                    ST      giga_sysArg3                        ; top line
                    SYS     54                                  ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        ; bottom line
                    SYS     54                                  ; fill memory
                    INC     top                                 ; next top line
                    
                    CALL    realTimeProcAddr
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     8

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
                    CALL    realTimeProcAddr
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

