_startAddress_      EQU                     0x0200

; Internal variables
serialRawPrev       EQU                     0x0081
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
miscFlags           EQU                     register0 + 0x28
fontLutId           EQU                     0x00e0

; Internal Constants
ENABLE_SCROLL_BIT   EQU                     0x0001
ON_BOTTOM_ROW_BIT   EQU                     0x0002
ENABLE_SCROLL_MSK   EQU                     0xfffe
ON_BOTTOM_ROW_MSK   EQU                     0xfffd

; Internal buffers
textWorkArea        EQU                     0xffa0

; Includes
%includePath        "../runtime"
%include            gigatron.i
%include            macros.i

; Labels
_entryPoint_        EQU                     0x0200
_math               EQU                     0x036f
_div                EQU                     0x03a7
_next_0x026d        EQU                     0x0269
_else_0x0293        EQU                     0x0281
_next_0x02bf        EQU                     0x02ab
_page_0x0300        EQU                     0x0300
_end_0x037a         EQU                     0x036d
_else_0x03e0        EQU                     0x03bb
_while_0x03e5       EQU                     0x03c0
_else_0x0418        EQU                     0x03e1
_page_0x0400        EQU                     0x0400
_else_0x043a        EQU                     0x040a
_wend_0x044c        EQU                     0x041a
_end_0x044e         EQU                     0x041c

; Variables
_result             EQU                     0x0030
_timer              EQU                     0x0032
_tick               EQU                     0x0034
_i                  EQU                     0x0036
_ticks              EQU                     0x0038
_q                  EQU                     0x003a
_r                  EQU                     0x003c
_n                  EQU                     0x003e
_d                  EQU                     0x0040
_a                  EQU                     0x0042
_b                  EQU                     0x0044
_mask               EQU                     0x0046

; Strings
_str_0xff9d         EQU                     0xff9d
_str_0xff9d         DB                      1 ' ' 0
_str_0xff98         EQU                     0xff98
_str_0xff98         DB                      3 '/60' 0

; Define Bytes

; Define Words
def_words_0x8000    EQU                     0x8000
def_words_0x8000    DW                      83 81 41 -113 50 -62 -96 86 -102 -52 -79 124 87 -66 135 6 -173 27 -152 -80 168 -58 62 43 37 155 -79 -151 144 96 171 170 -44 52 157 79 -85 -138 -8 143 21 137 -74 -39 -39 -113 97 -103 -6 84 36 78 -42 -116 -55 12 -52 -113 -85 -99 -60 -21 166 -179 -116 179 -53 134 -121 -56 -72 -31 -48 -59 7 -122 80 111 -138 78 -44 -36 -89 7 -93 155 33 96 -169 109 23 -130 -87 -62 -50 86 178 175 173 -149 135 -66 24 10 68 -65 166 157 -75 -106 -3 141 73 -75 73 -5 152 -125 20 65 -34 -51 -93 -28 56 -116 37 76 175 103 -174 8 67 122 73 68 153 -41 82 -148 16 141 -131 141 112 -146 75 -126 76 125 156 117 2 -49 -16 -58 -39 -87 58 49 66 19 89 179 98 -140 81 21 110 -162 179 124 80 131 120 -160 -30 -25 -149 59 64 -16 -161 165 99 -52 -26 158 -149 -78 -123 -5 -180 -36 28 -131 -132 138 -86 -162 -20 99 -152 -163 142 24 173 164 14 137 106 -168 83 164 127 -136 160 99 6 170 -74 -18 -83 -13 -139 -23 170 -106 58 -74 11 -90 -85 -162 -61 -65 -167 148 20 -38 45 -157 129 135 70 98 122 0 -126 -156 -138 139 -45 -35 100 145 44 74 19 -99 -164 -176 -69 -9 -166 -73 -85 169 154 -72 -123 -63 -50 -3 -34 25 -119 89 -134 11 120 56 112 129 18 -89 -151 -12 -23 -105 159 156 106 -122 -156 -81 129 135 -32 -163 -104 27 160 -165 122 64 51 -98 51 -87 -42 139 91 142 -126 108 130 37 -132 174 102 177 150 105 -54 -70 85 -25 -95 -115 -22 -63 -60 -146 77 158 1 -149 150 53 -35 -133 158 -34 -150 -122 142 -68 -108 14 -3 -3 -88 175 -48 173 151 11 158 151 162 18 -126 -90 54 40 108 67 -142 -106 33 -40 30 46 50 -107 -82 89 115 96 -65 19 -51 -86 114 -126 -98 -48 23 -70 118 151 -125 -91 -58 -172 -83 -23 -123 -126 85 -30 -117 53 -97 10 177 23 -121 158 120 -119 108 59 -22 101 82 -56 6 25 -102 62 -97 127 -59 22 175 34 -86 -87 -48 -13 148 -130 -76 -27 -121 -169 -155 -162 156 -179 151 -57 -165 -58 -139 102 48 -13 -31 154 49 -153 -8 -42 -56 85 -138 18 -28 -63 21 158 -52 66 36 -24 -161 126 14 -40 -163 -121 -113 90 -53 -4 -74 -124 -3 -61 -128 -7 -20 -27 18 -59 -54 171 129 -86 -12 -80 -19 -158 -88 -34 131 -162 -18 -122 58 22 -36 26 112 34 124 22 22 -160 41 102 -175 175 -142 -135 171 108 142 -25 -15 107 153 -90 -34 56 -146 35 -175 -42 77 24 -78 80 -122 -23 -166 126 -17 -29 179 131 67 30 -10 164 132 -158 164 -149 122 -79 -97 173 -108 132 -62 48 70 -8 174 -63 -148 -118 134 -74 134 121 -91 -137 172 -45 -57 -126 60 -13 -179 24 138 25 -107 66 -41 34 26 -89 -3 -111 87 -94 -103 -58 114 -32 34 22 -18 143 -14 148 145 102 -142 -81 152 80 155 -133 -88 90 -118 -28 -153 -72 -148 1 177 147 131 101 95 126 -105 -60 77 153 -120 92 51 -51 -142 81 23 160 -78 -50 48 36 -119 -72 150 -132 7 149 0 158 138 -178 -138 127 -90 49 -143 -141 7 50 135 132 5 -78 83 94 -41 -80 133 -32 132 -24 174 -171 -35 33 94 -140 39 100 178 92 168 -119 40 92 -40 -84 -164 130 -62 -32 72 163 -78 -142 -8 -45 -95 26 28 69 -169 62 -159 -28 -176 55 74 91 163 -97 67 -142 167 163 -73 -174 142 30 2 -116 -105 79 25 44 126 60 -56 68 143 46 4 -178 107 94 27 9 74 -159 81 120 146 152 -75 48 94 -69 -173 81 -109 -160 162 -66 -161 54 -160 -160 18 134 -59 -24 178 -60 30 -52 -167 139 107 -116 26 -49 147 133 61 -161 -138 -131 70 -118 100 72 36 16 -4 123 -143 -83 103 -145 -10 -134 -170 9 -15 53 128 -25 -23 50 41 13 177 -150 -40 -136 -69 -110 -160 59 -57 -25 50 1 -108 -31 96 -30 150 21 -20 -55 33 -88 58 -131 37 -40 -28 31 26 -139 -3 139 86 88 -8 11 61 -13 42 -8 64 162 93 -54 -175 -8 -154 -174 -27 -3 129 -130 75 30 179 37 -171 -19 -7 163 117 147 -1 119 146 99 3 100 10 -39 148 -155 178 19 -27 -84 124 -169 -82 100 152 -163 157 -3 -2 150 -24 17 82 45 -50 -43 -23 -171 -73 -143 156 51 162 -100 -21 -179 22 -127 164 -157 154 151 -60 133 112 -136 172 -138 63 -129 -17 -1 169 104 -172 71 -19 -29 -1 161 -130 73 29 79 -53 -174 112 102 144 38 23 -103 100 82 -175 -102 85 38 27 39 -111 29 145 -158 -130 -60 26 -21 -91 -58 159 57 138 127 -180 -49 -65 168 160 76 98 34 -126 102 -12 119 -107 87 75 -155 -179 -56 50 -180 -174 93 -129 -29 -36 18 -66 -122 0 45 164 162 59 171 47 44 139 -105 52 -9 
def_words_0x87d0    EQU                     0x87d0
def_words_0x87d0    DW                      -42 -24 56 -148 -131 51 155 15 145 -119 -70 -81 130 -69 76 6 132 82 -48 18 122 75 -43 52 -49 108 -151 -89 59 -128 30 107 -78 129 -158 -166 116 23 -74 -86 -88 139 33 -155 -70 121 -98 -59 47 54 -125 164 -33 -74 115 123 -86 -135 39 121 -178 158 -96 -42 -88 81 8 -175 -128 33 -118 79 -38 -99 151 69 -166 145 51 96 104 147 15 18 -4 -101 -16 24 140 -94 -105 -150 28 -38 122 -94 173 38 148 177 113 -61 33 46 -178 160 148 -96 49 42 -4 150 61 -133 -4 -123 -92 115 -134 -118 -164 -72 -173 -23 134 106 -83 37 11 -142 -83 73 -24 109 -111 126 -148 75 -120 -10 0 -4 137 -127 -170 125 -150 -35 52 127 -85 -133 163 2 -94 175 -109 160 143 145 -78 92 58 42 -35 5 -124 25 -170 -98 -12 143 142 16 35 175 156 49 -22 34 15 31 122 -103 -127 -168 -125 53 84 -148 114 108 -175 -147 -59 132 167 -3 -71 -147 1 -143 54 82 140 -91 152 -87 119 168 106 75 35 73 -18 -42 -3 170 -128 161 -7 148 36 -97 105 36 13 -49 -97 -132 -176 171 32 165 47 145 -31 19 98 151 -26 -63 3 18 -56 -25 -71 103 -105 -23 80 -93 -71 34 -9 -87 -158 81 66 75 -132 -29 -88 -157 48 -55 -8 -142 -82 131 72 -104 122 -132 -178 5 -121 -32 -110 127 128 -12 -29 -3 149 110 -86 -108 27 149 -100 -112 -17 65 59 -67 -28 117 -73 62 -149 -164 97 14 18 122 105 125 -96 93 -15 -123 -56 -148 169 -11 124 54 -52 54 -12 6 83 141 128 110 -48 168 -174 146 -66 77 -73 -2 71 31 -73 98 -2 -31 42 -163 -138 24 158 -72 -150 37 -9 76 95 -64 -114 158 135 11 102 -142 -121 -18 114 -161 116 -162 -94 178 97 -108 -88 -68 115 115 -98 -40 73 -142 -101 -160 54 -149 -154 -169 -166 -94 25 -3 -32 42 17 -34 -39 -19 45 84 -88 -101 -162 118 135 -3 142 97 34 -23 99 -82 -46 -151 -130 -68 46 111 55 -128 -35 20 84 -6 -114 -62 -62 161 -164 110 11 -54 -148 -14 80 101 1 97 -167 -32 74 -75 130 80 154 157 168 165 -168 -45 -107 -162 40 78 -112 -123 -118 26 -127 -12 41 57 179 -73 151 84 -133 -156 71 18 128 9 -141 -123 155 -115 55 -32 -55 130 -163 -147 -18 -111 -165 -49 101 110 -46 -172 117 -123 -72 -67 118 150 -15 89 157 -51 -119 30 115 -75 165 17 -107 29 10 -23 -96 123 126 -161 179 1 62 -56 65 22 160 174 -153 78 114 -76 -125 12 -14 136 54 127 -129 118 116 146 -48 59 129 -47 -148 -137 157 89 113 175 -69 -41 -167 81 -33 60 -150 17 -34 -81 5 -52 -5 -13 106 -77 71 -126 1 -6 -160 27 52 -23 110 -40 -21 131 -126 -69 -48 -42 63 74 -68 114 117 -104 -126 -3 -101 -34 -77 -10 38 162 -15 112 -96 -41 63 162 -166 -51 -127 5 124 179 -63 -91 116 -63 169 -13 -90 107 -104 -133 -116 -61 14 -54 86 -99 58 130 83 -110 -1 176 -48 -147 82 125 72 -38 -57 -83 61 168 -164 -163 -58 -12 -74 -128 169 -16 -141 -45 179 -140 88 -57 -170 -84 100 143 -46 -15 -148 -133 175 -59 -88 -179 -102 89 102 106 87 49 14 -70 -51 -29 -178 -157 80 163 150 3 -117 43 -41 -35 -172 17 -73 -97 -44 121 -24 -95 119 37 11 0 -111 -22 -138 139 -46 77 -82 -90 156 126 145 29 -134 -164 -118 83 171 112 -126 -107 -25 14 29 80 161 10 148 178 -2 135 -47 31 5 -10 -152 -166 103 -27 -53 -57 -15 -50 142 94 79 153 -179 -37 172 84 123 -140 135 -110 -11 -37 48 35 166 133 -28 35 -116 106 -3 124 2 21 165 -16 -9 -90 44 25 159 -26 129 -76 -151 -141 -139 -65 -71 -83 118 166 -9 32 -54 -132 -145 -173 138 71 162 112 66 -19 -58 -51 102 174 161 139 -2 -174 -133 -147 85 -83 101 82 55 -1 20 -17 10 73 67 95 -66 -115 168 -68 -177 13 -67 27 -165 -97 34 -134 167 32 41 -51 -1 -106 58 170 -34 -6 160 -86 -94 -122 60 -95 -133 99 89 63 -147 79 -81 -56 93 172 -4 -87 137 -164 -40 -76 -166 -36 167 174 -50 63 92 -170 89 -171 -140 177 109 -117 97 124 42 -171 169 -95 55 96 110 -33 153 -67 -97 -109 115 91 158 155 -25 173 -157 -60 -100 124 106 161 1 -19 -56 -40 57 -50 -133 -80 103 85 -117 46 -101 -85 4 32 -107 -49 157 -167 122 -115 6 142 -50 -64 29 -112 -7 -115 -102 -141 -92 91 -60 -130 -11 8 -141 -91 -71 61 127 -100 -30 -139 -39 28 -159 -46 40 10 -90 -151 23 86 149 167 94 2 147 -149 37 44 -46 -18 -48 -107 -102 -32 -121 -133 65 -163 -163 43 -109 -112 -4 139 133 -153 103 88 86 -97 25 91 -169 121 -28 1 61 141 19 -61 -115 6 -68 67 -89 111 112 -151 -82 44 -42 53 
def_words_0x8fa0    EQU                     0x8fa0
def_words_0x8fa

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_        LDI                     0x28
                    STW                     romType
                    RomCheck                
                    InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    ClearVertBlinds         
                    LDI                     2
                    STW                     graphicsMode
                    ScanlineMode                                            ; cls : mode 2

                    LDI                     0
                    STW                     _result
                    STW                     _timer
                    LD                      giga_frameCount
                    STW                     _tick                           ; result=0 : timer=result : tick=get("FRAMECOUNT")

                    LDWI                    0
                    STW                     _i
                    LDWI                    999
                    STW                     0xb0
                    LDWI                    1
                    STW                     0xb2                            ; for i=0 to SIZE-1

_next_0x026d        LDW                     _tick
                    STW                     _ticks
                    LD                      giga_frameCount
                    STW                     _tick
                    SUBW                    _ticks
                    STW                     _ticks                          ; ticks=tick : tick=get("FRAMECOUNT") : ticks=tick-ticks

                    LDW                     _ticks
                    BGE                     _else_0x0293
                    LDWI                    256
                    ADDW                    _ticks
                    STW                     _ticks                          ; if ticks &&< 0 then ticks=ticks+256

_else_0x0293        LDW                     _timer
                    ADDW                    _ticks
                    STW                     _timer                          ; timer=timer+ticks

                    LDWI                    _math
                    CALL                    giga_vAC                        ; gosub math

                    ForNextFarVarPos        _i _next_0x026d 0xb0 0xb2       ; next i

                    LDWI                    0
                    STW                     _i
                    LDWI                    999
                    STW                     0xb0
                    LDWI                    1
                    STW                     0xb2                            ; for i=0 to SIZE-1

_next_0x02bf        ForNextFarVarPos        _i _next_0x02bf 0xb0 0xb2       ; next i

                    NewLine                 
                    LDW                     _timer
                    STW                     mathX
                    LDI                     60
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    PrintAcInt16            
                    PrintString             _str_0xff9d
                    LDW                     _timer
                    STW                     mathX
                    LDI                     60
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    LDW                     mathRem
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    PrintAcInt16            
                    PrintString             _str_0xff98
                    NewLine                                                 ; print : print timer/60;" ";timer % 60;"/60"

                    LDI                     0
                    STW                     _q
                    STW                     _r                              ; q=0 : r=q

                    LDWI                    15000
                    STW                     _n
                    LDI                     153
                    STW                     _d                              ; n=15000 : d=153

                    LDW                     _n
                    STW                     mathX
                    LDW                     _d
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    STW                     _q                              ; q = n/d

                    LDW                     _n
                    STW                     mathX
                    LDW                     _d
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    LDW                     mathRem
                    STW                     _r                              ; r = n%d

                    NewLine                 
                    LDW                     _q
                    PrintAcInt16            
                    PrintString             _str_0xff9d
                    LDW                     _r
                    PrintAcInt16            
                    NewLine                                                 ; print : print q;" ";r

_end_0x037a         BRA                     _end_0x037a                     ; end

_math               PUSH                    
                    LDW                     _i
                    LSLW                    
                    STW                     0xc2
                    LDWI                    -32768
                    ADDW                    0xc2
                    DEEK                    
                    STW                     _a                              ; a = deek(ADDR + SIZE*0 + (i LSL 1))

                    LDW                     _i
                    LSLW                    
                    STW                     0xc2
                    LDWI                    -30768
                    ADDW                    0xc2
                    DEEK                    
                    STW                     _b                              ; b = deek(ADDR + SIZE*2 + (i LSL 1))

                    LDW                     _i
                    LSLW                    
                    STW                     0xc2
                    LDWI                    -28768
                    ADDW                    0xc2
                    STW                     0xc2
                    LDW                     _a
                    STW                     mathX
                    LDW                     _b
                    STW                     mathY
                    LDWI                    divide16bit
                    CALL                    giga_vAC
                    DOKE                    0xc2                            ; doke ADDR + SIZE*4 + (i LSL 1), a / b

                    Return                                                  ; return

_div                LDI                     0
                    STW                     _q
                    STW                     _r                              ; q=0 : r=q

                    LDW                     _d
                    CALL                    convertEqOpAddr
                    JumpFalse               _else_0x03e0 1
                    Return                                                  ; if d = 0 then return

_else_0x03e0        LDWI                    -32768
                    STW                     _mask                           ; mask = &h8000

_while_0x03e5       LDW                     _mask
                    CALL                    convertNeOpAddr
                    JumpFalse               _wend_0x044c 4                  ; while mask <> 0

                    LDW                     _r
                    LSLW                    
                    STW                     _r                              ; r = r LSL 1

                    LDW                     _n
                    ANDW                    _mask
                    CALL                    convertNeOpAddr
                    JumpFalse               _else_0x0418 2
                    INC                     _r                              ; if n AND mask <> 0 then inc r

_else_0x0418        LDW                     _r
                    SUBW                    _d
                    CALL                    convertGeOpAddr
                    JumpFalse               _else_0x043a 3
                    LDW                     _r
                    SUBW                    _d
                    STW                     0xde
                    LDWI                    _page_0x0400
                    CALL                    giga_vAC
_page_0x0400        LDW                     0xde
                    STW                     _r
                    LDW                     _q
                    ORW                     _mask
                    STW                     _q                              ; if r >= d then r = r - d : q = q OR mask

_else_0x043a        LDW                     _mask
                    STW                     mathShift
                    ShiftRight1bit          
                    STW                     _mask                           ; mask = mask LSR 1

                    LDWI                    _while_0x03e5
                    CALL                    giga_vAC                        ; wend

_wend_0x044c        Return                                                  ; return

_end_0x044e         BRA                     _end_0x044e                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck            EQU     0xff81
realTimeProc        EQU     0xff78
convertEqOp         EQU     0xff6f
convertNeOp         EQU     0xff66
convertLeOp         EQU     0xff5d
convertGeOp         EQU     0xff54
convertLtOp         EQU     0xff4b
convertGtOp         EQU     0xff42
divide16bit         EQU     0xfe13
shiftRight1bit      EQU     0xff0c
scanlineMode        EQU     0xff16
resetVideoTable     EQU     0xfd76
initClearFuncs      EQU     0xff2a
clearVertBlinds     EQU     0xfec5
clearCursorRow      EQU     0xfd46
printInit           EQU     0xfd30
printText           EQU     0xfd95
printDigit          EQU     0xfd0e
printInt16          EQU     0xfdae
printChar           EQU     0xfca7
newLineScroll       EQU     0xfe6a
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI routine
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_addr       EQU     register15

    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDI     0x02                                ; starting cursor position
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
    
                    LDWI    SYS_SetMemory_v2_54                 ; setup fill memory SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LD      fgbgColour
                    ST      giga_sysArg1                        ; fill value
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LD      top
                    ST      giga_sysArg3                        ; top line
                    SYS     54                                  ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        ; bottom line
                    SYS     54                                  ; fill memory
                    INC     top                                 ; next top line
                    
                    CALL    realTimeProcAddr
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                      ; setup fill memory SYS routine
                    LD      fgbgColour
                    ST      giga_sysArg1                    ; fill value
                    LDWI    giga_videoTable
                    PEEK
                    ST      giga_sysArg3                    ; row0 high byte address
                    LDI     8

clearCR_loopy       ST      clearLoop                    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                    ; low start address
                    SYS     54                              ; fill memory
                    INC     giga_sysArg3                    ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy
                    CALL    realTimeProcAddr
                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

