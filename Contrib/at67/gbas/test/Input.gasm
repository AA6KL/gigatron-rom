_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0x7fa0

; Includes
%includePath                  "../runtime"
%include                      util.i
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_page_0x0300                  EQU                               0x0300
_page_0x0400                  EQU                               0x0400
_page_0x0500                  EQU                               0x0500
_page_0x0600                  EQU                               0x0600
_end_0x0701                   EQU                               0x06a0

; Variables
_a                            EQU                               0x0030
_d                            EQU                               0x0032
_b                            EQU                               0x0034
_c                            EQU                               0x0036
_dog                          EQU                               0x0038
_hours                        EQU                               0x003a
_minutes                      EQU                               0x003c
_seconds                      EQU                               0x003e
_e                            EQU                               0x0040
_f                            EQU                               0x0042
_t                            EQU                               0x0044
_cs                           EQU                               0x0046
_db                           EQU                               0x0048

; Arrays
_arr_array                    EQU                               0x7ef4
_arr_array                    DW                                0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 

; Strings
_t1$                          EQU                               0x7da0
_t1$                          DB                                4 'yes ' 0
_t2$                          EQU                               0x7ca0
_t2$                          DB                                3 'no ' 0
_test$                        EQU                               0x7ba0
_test$                        DB                                16 'cat dog furries ' 0
_cat$                         EQU                               0x79a0
_cat$                         DB                                3 'cat' 0

; Constant Strings
_str_0x7eec                   EQU                               0x7eec
_str_0x7eec                   DB                                6 'const ' 0
_str_0x7ee4                   EQU                               0x7ee4
_str_0x7ee4                   DB                                6 'whoop ' 0
_str_0x7ee0                   EQU                               0x7ee0
_str_0x7ee0                   DB                                2 '1 ' 0
_str_0x7edc                   EQU                               0x7edc
_str_0x7edc                   DB                                2 '2 ' 0
_str_0x7ec9                   EQU                               0x7ec9
_str_0x7ec9                   DB                                1 ' ' 0
_str_0x7ac9                   EQU                               0x7ac9
_str_0x7ac9                   DB                                53 'aioujehfiadsuhgfaissuhfgdiughafpiusfghpdsiufghspi;udf' 0
_str_0x7eb9                   EQU                               0x7eb9
_str_0x7eb9                   DB                                14 'Testing INPUT:' 0
_str_0x7eac                   EQU                               0x7eac
_str_0x7eac                   DB                                11 'Cats Name ?' 0
_str_0x7ea7                   EQU                               0x7ea7
_str_0x7ea7                   DB                                3 'H ?' 0
_str_0x7ea2                   EQU                               0x7ea2
_str_0x7ea2                   DB                                3 'M ?' 0
_str_0x7ac4                   EQU                               0x7ac4
_str_0x7ac4                   DB                                3 'S ?' 0
_str_0x78f7                   EQU                               0x78f7
_str_0x78f7                   DB                                7 'Testing' 0

; Data
_data_                        EQU                               0x7ea0
_data_                        DW                                0
_dataIndex_                   EQU                               0x7aa2
_dataIndex_                   DW                                0

; Time

; Define Bytes

; Define Words

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables
_concat_0x7ecc                EQU                               0x7ecc
_concat_0x7ecc                DW                                0x7ba0 0x7da0 0x7ca0 0x7ee4 0x7ee0 0x7edc 0x7eec 0x0000 
_inputVars_0x7ab6             EQU                               0x7ab6
_inputVars_0x7ab6             DW                                0x79a0 0x003a 0x003c 0x003e 
_inputStrs_0x7aae             EQU                               0x7aae
_inputStrs_0x7aae             DW                                0x7eac 0x7ea7 0x7ea2 0x7ac4 
_inputTypes_0x7aa4            EQU                               0x7aa4
_inputTypes_0x7aa4            DW                                0x2143 0x0342 0x0342 0x0342 0x0000 
_input_0x7abe                 EQU                               0x7abe
_input_0x7abe                 DW                                0x7ab6 0x7aae 0x7aa4 

; Code
_entryPoint_                  Initialise                        
                              InitRealTimeStub                                                  ; INIT

                              ClearVertBlinds                                                   ; cls

                              LDWI                              0x7ecc
                              STW                               strLutAddr
                              LDWI                              0x7fa0
                              StringConcat                      
                              LDWI                              0x7fa0
                              STW                               strSrcAddr
                              LDWI                              0x7ba0
                              StringCopy                                                        ; test$ = "cat dog furries " + t1$ + t2$ + "whoop " + "1 " + "2 " + cs$

                              PrintString                       _test$
                              PrintString                       _str_0x7ec9
                              LDWI                              0x7ba0
                              PEEK                              
                              PrintAcInt16                      
                              NewLine                                                           ; print test$;" ";len(test$)

                              LDI                               1
                              STW                               _a                              ; a = 1

                              LDI                               48
                              STW                               _d                              ; d = @a

                              LDI                               1
                              ST                                _a + 1
                              LDI                               0
                              ST                                _a                              ; a.hi = 1 : a.lo = 0

                              LD                                _a + 1
                              ADDI                              1
                              STW                               _b                              ; b = a.hi + 1

                              LDI                               1
                              ST                                _c + 1                          ; c.hi = 1

                              LDWI                              2272
                              STW                               register0
                              LD                                _a
                              POKE                              register0                       ; poke &h08E0, a.lo

                              LD                                _b + 1
                              STW                               mathX
                              LDI                               3
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              STW                               0xc0
                              LD                                _a
                              SUBW                              0xc0
                              ADDI                              1
                              SUBW                              _a
                              STW                               0xc2
                              LDWI                              2272
                              STW                               register0
                              LDW                               0xc2
                              DOKE                              register0                       ; doke &h08E0, a.lo - b.hi * 3 + 1 - a

                              LDI                               0
                              STW                               _dog                            ; dog=0

                              PrintString                       _str_0x7eb9
                              LDWI                              0x7abe
                              Input                                                             ; input "Testing INPUT:", cat$,"Cats Name ?"32;, hours,"H ?"2;, minutes,"M ?"2;, seconds,"S ?"2;

                              NewLine                                                           ; print

                              PrintString                       _cat$
                              PrintString                       _str_0x7ec9
                              LDW                               _hours
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              LDW                               _minutes
                              PrintAcInt16                      
                              STW                               0xe2
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xe2
                              PrintString                       _str_0x7ec9
                              LDW                               _seconds
                              PrintAcInt16                      
                              NewLine                                                           ; print cat$;" ";hours;" ";minutes;" ";seconds

                              LDI                               2
                              RandMod                           
                              STW                               0xc2
                              LDI                               2
                              ADDW                              0xc2
                              STW                               0xc4
                              LDWI                              0x79a0
                              PEEK                              
                              ADDW                              0xc4
                              ADDI                              27
                              STW                               _a                              ; a = rnd(len(dog)) + len(dog) + len(cat$) + 27

                              LDI                               53
                              STW                               0xc0
                              LDI                               2
                              ADDW                              0xc0
                              STW                               0xc2
                              LDI                               65
                              STW                               strChr
                              LDWI                              0x7fa0
                              StringChr                         
                              LDWI                              0x7fa0
                              PEEK                              
                              ADDW                              0xc2
                              STW                               0xc4
                              LDI                               0xff
                              STW                               strChr
                              LDWI                              0x7fa0
                              StringHex                         
                              LDWI                              0x7fa0
                              PEEK                              
                              ADDW                              0xc4
                              STW                               0xc6
                              LDWI                              0xfde8
                              STW                               strHex
                              LDWI                              0x7fa0
                              StringHexw                        
                              LDWI                              0x7fa0
                              PEEK                              
                              ADDW                              0xc6
                              STW                               _b                              ; b = len(big$) + len(a) + len(chr$(65)) + len(hex$(255)) + len(HEXW$(65000))

                              NewLine                                                           ; print

                              LD                                _a
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              LD                                _b + 1
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              LDW                               _b
                              PrintAcInt16                      
                              NewLine                                                           ; print a.lo;" ";b.hi;" ";b

                              LDI                               64
                              ADDW                              _d
                              ADDI                              1
                              STW                               _e                              ; e = @e + d + 1

                              LDWI                              31433
                              STW                               _f                              ; f = @big$

                              LDWI                              0x0034
                              PrintAcHexWord                    
                              PrintString                       _str_0x7ec9
                              LDWI                              0x0036
                              PrintAcHexWord                    
                              PrintString                       _str_0x7ec9
                              LDW                               _d
                              STW                               0xe2
                              LDWI                              _page_0x0400
                              CALL                              giga_vAC
_page_0x0400                  LDW                               0xe2
                              PrintAcHexWord                    
                              PrintString                       _str_0x7ec9
                              LDW                               _e
                              PrintAcHexWord                    
                              PrintString                       _str_0x7ec9
                              LDW                               _f
                              PrintAcHexWord                    
                              NewLine                                                           ; print hexw$(@b);" ";hexw$(@c);" ";hexw$(d);" ";hexw$(e);" ";hexw$(f)

                              LDWI                              0x7ef4
                              PrintAcHexWord                    
                              PrintString                       _str_0x7ec9
                              LDWI                              0x79a0
                              PrintAcHexWord                    
                              PrintString                       _str_0x7ec9
                              LDWI                              0x003a
                              PrintAcHexWord                    
                              PrintString                       _str_0x7ec9
                              LDWI                              0x003c
                              PrintAcHexWord                    
                              PrintString                       _str_0x7ec9
                              LDWI                              0x003e
                              PrintAcHexWord                    
                              NewLine                                                           ; print hexw$(@arr);" ";hexw$(@cat$);" ";hexw$(@hours);" ";hexw$(@minutes);" ";hexw$(@seconds)

                              LDWI                              0x7ef4
                              STW                               memAddr
                              LDI                               52
                              POKE                              memAddr                         ; arr(0).lo = &h34

                              LDI                               18
                              STW                               memValue
                              LDWI                              0x7ef4
                              STW                               memAddr
                              LDW                               memValue
                              INC                               memAddr
                              POKE                              memAddr                         ; arr(0).hi = &h12

                              LDWI                              0x7ef4
                              DEEK                              
                              PrintAcHexWord                    
                              NewLine                                                           ; print hexw$(arr(0))

                              LDWI                              0x7ef6
                              STW                               memAddr
                              LD                                _f
                              POKE                              memAddr                         ; arr(1).lo = f.lo

                              LD                                _f + 1
                              STW                               memValue
                              LDWI                              0x7ef6
                              STW                               memAddr
                              LDW                               memValue
                              INC                               memAddr
                              POKE                              memAddr                         ; arr(1).hi = f.hi

                              LDWI                              0x7ef6
                              DEEK                              
                              PrintAcHexWord                    
                              NewLine                                                           ; print hexw$(arr(1))

                              LDWI                              0x7ef4 + 1
                              PEEK                              
                              PrintAcHexByte                    
                              STW                               0xe2
                              LDWI                              _page_0x0500
                              CALL                              giga_vAC
_page_0x0500                  LDW                               0xe2
                              PrintString                       _str_0x7ec9
                              LDWI                              0x7ef4
                              PEEK                              
                              PrintAcHexByte                    
                              PrintString                       _str_0x7ec9
                              LDWI                              0x7ef6 + 1
                              PEEK                              
                              PrintAcHexByte                    
                              PrintString                       _str_0x7ec9
                              LDWI                              0x7ef6
                              PEEK                              
                              PrintAcHexByte                    
                              NewLine                                                           ; print hex$(arr(0).hi);" ";hex$(arr(0).lo);" ";hex$(arr(1).hi);" ";hex$(arr(1).lo)

                              LDWI                              0x7ef4
                              DEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              LDWI                              0x7ef6
                              DEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              LDWI                              0x7ef4
                              DEEK                              
                              PrintAcHexWord                    
                              PrintString                       _str_0x7ec9
                              LDWI                              0x7ef6
                              DEEK                              
                              PrintAcHexWord                    
                              NewLine                                                           ; print arr(0);" ";arr(1);" ";hexw$(arr(0));" ";hexw$(arr(1))

                              Rand                              
                              ANDI                              63
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              LDI                               53
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              LD                                0x00
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              LDW                               0x00
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              PrintInt16                        0x7ac9
                              NewLine                                                           ; print rnd(0) AND 63;" ";len(big$);" ";peek(0);" ";deek(0);" ";@big$

                              LDI                               7
                              STW                               0xe2
                              LDWI                              _page_0x0600
                              CALL                              giga_vAC
_page_0x0600                  LDW                               0xe2
                              STW                               _t                              ; t = len("Testing")

                              LDI                               53
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              LDWI                              0x79a0
                              PEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              LDI                               7
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              LDW                               _t
                              PrintAcInt16                      
                              NewLine                                                           ; print len(big$);" ";len(cat$);" ";len("Testing");" ";t

                              LDWI                              985
                              STW                               _cs                             ; cs = cos(10)*1000

                              LDWI                              537
                              STW                               _db                             ; db = 231.5333333333 * 2.32

                              PrintInt16                        0x0345
                              PrintString                       _str_0x7ec9
                              LDW                               _cs
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              LDW                               _db
                              PrintAcInt16                      
                              PrintString                       _str_0x7ec9
                              PrintInt16                        0x0004
                              NewLine                                                           ; print sin(56.8333333)*1000;" ";cs;" ";db;" ";1.5333333333 * 2.32

_end_0x0701                   BRA                               _end_0x0701                     ; end



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeStub                  EQU     0x78d9
multiply16bit                 EQU     0x74cd
divide16bit                   EQU     0x71a8
rand16bit                     EQU     0x77a4
randMod16bit                  EQU     0x73ec
resetVideoFlags               EQU     0x78eb
resetVideoTable               EQU     0x70db
initClearFuncs                EQU     0x70c4
clearVertBlinds               EQU     0x77c5
clearCursorRow                EQU     0x6fb6
input                         EQU     0x74a6
inputExt1                     EQU     0x6eb0
inputExt2                     EQU     0x70a6
inputCursor                   EQU     0x6ddd
inputKeys                     EQU     0x6ca4
inputIntVar                   EQU     0x6fa2
inputStrVar                   EQU     0x6dc6
inputReturn                   EQU     0x6bc6
inputDelete                   EQU     0x6ab9
inputPrint                    EQU     0x6da7
inputNewline                  EQU     0x6bb1
printInit                     EQU     0x6aa3
printText                     EQU     0x77ac
printDigit                    EQU     0x69dd
printInt16                    EQU     0x76ae
printChr                      EQU     0x76a1
printChar                     EQU     0x68a7
printHexByte                  EQU     0x72b1
printHexWord                  EQU     0x72e6
newLineScroll                 EQU     0x75a4
integerStr                    EQU     0x67c0
stringChr                     EQU     0x73db
stringHex                     EQU     0x73c9
stringHexw                    EQU     0x73aa
createHex                     EQU     0x69b5
stringCopy                    EQU     0x78a4
stringAdd                     EQU     0x66c3
stringConcat                  EQU     0x78b1
convertEqOpAddr               EQU     0x00d0
convertNeOpAddr               EQU     0x00d2
convertLeOpAddr               EQU     0x00d4
convertGeOpAddr               EQU     0x00d6
convertLtOpAddr               EQU     0x00d8
convertGtOpAddr               EQU     0x00da
convertArr2dAddr              EQU     0x00dc
convertArr3dAddr              EQU     0x00de
realTimeStubAddr              EQU     0x00e0


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

multiply16_exit     PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSum
                    RET


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET



                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


randMod16bit        PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    STW     mathX
                    LDWI    divide16bit
                    CALL    giga_vAC
                    LDW     mathRem
                    POP                    
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    

resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET




                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeStubAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    
                    LDWI    resetVideoFlags
                    CALL    giga_vAC                    
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
inpLutAddr          EQU     register0
inpKeyBak           EQU     register0
inpVarsAddr         EQU     register1
inpStrsAddr         EQU     register2
inpTypesAddr        EQU     register4
inpTextAddr         EQU     register5
inpTextOfs          EQU     register6
inpTypeData         EQU     register7
inpTextEnd          EQU     register8
printXYBak          EQU     register11
cursXYBak           EQU     register12
cursFlash           EQU     register13
cursorChr           EQU     register14
cursXYOfs           EQU     register15

cursorDelay         EQU     30

    
                    ; inputs numerics and text into vars
input               PUSH
                    LDW     inpLutAddr
                    DEEK
                    STW     inpVarsAddr         ; vars LUT address
                    LDW     inpLutAddr
                    ADDI    2
                    DEEK
                    STW     inpStrsAddr         ; strings LUT address
                    LDW     inpLutAddr
                    ADDI    4
                    DEEK
                    STW     inpTypesAddr        ; types LUT address

                    LD      giga_serialRaw
                    ST      serialRawPrev       ; initialise previous keystroke
                    LD      giga_frameCount
                    ADDI    cursorDelay
                    STW     cursFlash           ; delay for cursor flash
                    LDI     127
                    STW     cursorChr           ; cursor char
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here




                    ; input extended 1
inputExt1           LDW     inpTypesAddr
                    DEEK
                    BEQ     inputE1_exit        ; exit on LUT delimiter
                    STW     inpTypeData         ; high byte is max string length, 8th and 7th bits of low byte are newlines, last 6 bits of low byte is type
                    ANDI    0x40
                    BEQ     inputE1_print       ; check for prefix newline
                    LDWI    inputNewline
                    CALL    giga_vAC
                    
inputE1_print       LDW     inpStrsAddr
                    DEEK
                    STW     textStr
                    LDWI    printText           ; print strings LUT
                    CALL    giga_vAC
                    LD      inpTypeData
                    ANDI    0x80
                    BEQ     inputE1_skip        ; check for suffix newline
                    LDWI    inputNewline
                    CALL    giga_vAC
                    
inputE1_skip        LDWI    textWorkArea + 1
                    STW     inpTextAddr         ; text work area, treated as a string so skip length
                    LDI     0
                    STW     inpTextOfs          ; print text offset
                    LDWI    textWorkArea
                    STW     inpTextEnd          ; print text end
                    LD      inpTypeData + 1
                    ADDW    inpTextEnd
                    STW     inpTextEnd          ; text max = textWorkArea + (highByte(inpTypeData) >> 8)
                    
                    LDW     cursorXY
                    STW     cursXYBak
                    STW     printXYBak
                    LDWI    inputExt2
                    CALL    giga_vAC            ; doesn't return to here
                    
inputE1_exit        LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    POP
                    RET




                    ; input extended 2
inputExt2           LDWI    inputCursor
                    CALL    giga_vAC
                    LDWI    inputKeys
                    CALL    giga_vAC
                    BEQ     inputExt2           ; loop until return key pressed

                    INC     inpVarsAddr
                    INC     inpVarsAddr
                    INC     inpStrsAddr
                    INC     inpStrsAddr
                    INC     inpTypesAddr
                    INC     inpTypesAddr
                    LDWI    inputExt1
                    CALL    giga_vAC            ; doesn't return to here



                    ; flashes cursor
inputCursor         LD      giga_frameCount
                    SUBW    cursFlash
                    BEQ     inputC_toggle
                    RET
                    
inputC_toggle       PUSH
                    LD      giga_frameCount
                    ADDI    cursorDelay
                    ST      cursFlash           ; delay for cursor flash
                    LD      cursorChr
                    ST      textChr
                    XORI    0xDF
                    ST      cursorChr           ; toggle between 127 and 32 for cursor char
                    LDW     cursXYBak
                    STW     cursorXY            ; restore cursor position after the printChr
                    LDWI    printChr
                    CALL    giga_vAC
                    POP
                    RET





                    ; saves key press into string work area buffer
inputKeys           PUSH
                    LD      giga_serialRaw
                    STW     inpKeyBak           ; save keystroke
                    LD      serialRawPrev
                    SUBW    inpKeyBak
                    BEQ     inputK_exit         ; if keystroke hasn't changed exit
                    LD      inpKeyBak
                    ST      serialRawPrev       ; save as previous keystroke
                    SUBI    127
                    BGT     inputK_exit
                    BNE     inputK_ret
                    LDWI    inputDelete         ; delete key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_ret          LD      inpKeyBak
                    SUBI    10
                    BNE     inputK_char
                    LDWI    inputReturn         ; return key
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_char         LDW     inpTextEnd
                    SUBW    inpTextAddr
                    BEQ     inputK_exit         ; text string bounds, (check after delete and return keys)
                    LD      inpKeyBak
                    SUBI    32
                    BLT     inputK_exit
                    LD      inpKeyBak
                    POKE    inpTextAddr         ; set char
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; set new end of text string
                    LD      cursXYBak
                    SUBI    giga_xres - 11
                    BLT     inputK_advance      ; cursor max bounds
                    INC     inpTextOfs
                    LDI     0
                    BRA     inputK_print
                    
inputK_advance      LDI     6
                    
inputK_print        STW     cursXYOfs           ; advance cursor
                    LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputK_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET                    



inputStrVar         LDWI    textWorkArea
                    STW     register11          ; src str address
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst var address

inputS_copy         LDW     register11
                    PEEK
                    POKE    register12
                    INC     register11
                    INC     register12
                    BNE     inputS_copy         ; copy char until terminating char
                    RET




inputIntVar         PUSH
                    LDWI    textWorkArea + 1
                    STW     intSrcAddr          ; src str address, (skip length)
                    LDW     inpVarsAddr
                    DEEK
                    STW     register12          ; dst int address
                    LDWI    integerStr
                    CALL    giga_vAC
                    DOKE    register12          ; convert string to integer
                    POP
                    RET


inputReturn         LDI     32
                    STW     cursorChr
                    LDWI    inputC_toggle
                    CALL    giga_vAC            ; erase cursor
                    
                    LDWI    textWorkArea
                    STW     register0
                    LDW     inpTextAddr
                    SUBW    register0
                    SUBI    1
                    POKE    register0           ; text length
                    ADDW    register0
                    ADDI    1
                    STW     register0
                    LDI     0
                    POKE    register0           ; text delimiter
                    
                    LD      inpTypeData         ; check var tye
                    ANDI    0x3F                ; var type is bottom 6 bits
                    SUBI    3                   ; var is string or integer?
                    BNE     inputR_int
                    LDWI    inputStrVar
                    CALL    giga_vAC            ; copy string
                    BRA     inputR_exit
                    
inputR_int          LDWI    inputIntVar
                    CALL    giga_vAC            ; convert numeric

inputR_exit         LDI     1                   ; return key pressed, next var
                    POP
                    RET


inputDelete         LD      inpTextOfs
                    BEQ     inputD_bounds
                    SUBI    1
                    STW     inpTextOfs          ; decrement print text offset
                    LDI     0
                    STW     cursXYOfs           ; stationary cursor
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    1
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    BRA     inputD_print

inputD_bounds       LDW     printXYBak
                    SUBW    cursXYBak
                    BGE     inputD_exit         ; cursor min bounds
                    LDWI    -6
                    STW     cursXYOfs           ; retreat cursor
                    LDI     32                  
                    POKE    inpTextAddr         ; delete cursor
                    INC     inpTextAddr
                    LDI     0
                    POKE    inpTextAddr         ; delimiter
                    LDW     inpTextAddr
                    SUBI    2
                    STW     inpTextAddr         ; decrement text pointer
                    LDI     32                  
                    POKE    inpTextAddr         ; delete char
                    
inputD_print        LDWI    inputPrint
                    CALL    giga_vAC            ; doesn't return to here
                    
inputD_exit         LDI     0                   ; keep looping on current var
                    POP
                    RET


inputPrint          LDWI    inputCursor
                    CALL    giga_vAC            ; call cursor flash frequently
                    LDWI    textWorkArea
                    ADDW    inpTextOfs
                    STW     textStr
                    LDW     printXYBak
                    STW     cursorXY            ; restore cursor position after the printText
                    LDWI    printText
                    CALL    giga_vAC
                    LDW     cursXYBak           ; new cursor position
                    ADDW    cursXYOfs
                    STW     cursXYBak
                    LDI     0                   ; keep looping on current var
                    POP
                    RET


inputNewline        PUSH
                    LDI     ENABLE_SCROLL_BIT
                    ORW     miscFlags
                    STW     miscFlags           ; enable text scrolling
                    LDWI    newLineScroll
                    CALL    giga_vAC            ; new line
                    LDWI    ENABLE_SCROLL_MSK
                    ANDW    miscFlags
                    STW     miscFlags           ; disable text scrolling
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr for standalone calls
printChr            PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeStubAddr
                    LD      cursorXY
                    ADDI    giga_xfont
                    ST      cursorXY
                    SUBI    giga_xres - giga_xfont          ; last possible char on line
                    BLE     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


                    ; print hex byte in textHex
printHexByte        PUSH
                    LDWI    SYS_LSRW4_50                    ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LD      textHex
                    SYS     50
                    SUBI    10
                    BLT     printH_skip0
                    ADDI    7
printH_skip0        ADDI    0x3A
                    ST      textChr
                    LDWI    printInit
                    CALL    giga_vAC
                    LDWI    printChar
                    CALL    giga_vAC
                    LD      textHex
                    ANDI    0x0F
                    SUBI    10
                    BLT     printH_skip1
                    ADDI    7
printH_skip1        ADDI    0x3A
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; print hex word in textHex
printHexWord        PUSH
                    LD      textHex
                    ST      textBak
                    LD      textHex + 1
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    LD      textBak
                    ST      textHex
                    LDWI    printHexByte
                    CALL    giga_vAC
                    POP
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     giga_yfont

clearCR_loopy       ST      clearLoop
                    CALL    realTimeStubAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                    ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    giga_yfont
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - giga_yfont
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeStubAddr
                    LDW     scanLine
                    PEEK
                    ADDI    giga_yfont
                    ANDI    0x7F
                    SUBI    giga_yfont
                    BGE     newLS_adjust
                    ADDI    giga_yfont
                    
newLS_adjust        ADDI    giga_yfont
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11


                    ; converts a string to a +/- integer, assumes string pointer is pointing to first char and not the string length, (no overflow or underflow checks)
integerStr          LDI     0
                    ST      intNegative
                    STW     intResult
                    LDW     intSrcAddr
                    PEEK
                    SUBI    45                  ; -ve
                    BNE     integerS_loop
                    LDI     1
                    ST      intNegative
                    INC     intSrcAddr          ; skip -ve

integerS_loop       LDW     intSrcAddr
                    PEEK
                    SUBI    48                  ; str[i] - '0'
                    BLT     integerS_neg
                    STW     intDigit
                    SUBI    9
                    BGT     integerS_neg
                    LDW     intResult
                    LSLW
                    LSLW
                    ADDW    intResult
                    LSLW
                    ADDW    intDigit
                    STW     intResult           ; result = result*10 + digit
                    INC     intSrcAddr
                    BRA     integerS_loop
          
integerS_neg        LD      intNegative
                    BEQ     integerS_exit
                    LDI     0
                    SUBW    intResult           ; result *= -1
                    RET
                    
integerS_exit       LDW     intResult
                    RET


; do *NOT* use register4 to register7 during time slicing
strChr              EQU     register0
strHex              EQU     register1
strCmpRes           EQU     register2
strLength           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strTmpAddr          EQU     register10
strLutAddr          EQU     register11
strBakAddr          EQU     register12
strInteger          EQU     register0
strDigit            EQU     register1
strMult             EQU     register3


                    ; create a char string, (parameter in strChr)
stringChr           LDI     1
                    POKE    strDstAddr                          ; set destination buffer length                    
                    INC     strDstAddr
                    LD      strChr
                    POKE    strDstAddr                          ; copy char
                    INC     strDstAddr
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET



                    ; create a hex byte string, (parameter in strChr)
stringHex           PUSH
                    LDI     2
                    POKE    strDstAddr                          ; set destination buffer length                    
                    INC     strDstAddr
                    LDWI    createHex
                    CALL    giga_vAC
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    POP
                    RET


                    ; create a hex word string, (parameter in strHex)
stringHexw          PUSH
                    LDI     4
                    POKE    strDstAddr                          ; set destination buffer length                    
                    INC     strDstAddr
                    LD      strHex + 1
                    ST      strChr
                    LDWI    createHex
                    CALL    giga_vAC
                    LD      strHex
                    ST      strChr
                    LDWI    createHex
                    CALL    giga_vAC
                    LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    POP
                    RET


                    ; updates a hex byte
createHex           LDWI    SYS_LSRW4_50                        ; shift right by 4 SYS routine
                    STW     giga_sysFn
                    LD      strChr
                    SYS     50
                    SUBI    10
                    BLT     createH_skip0
                    ADDI    7

createH_skip0       ADDI    0x3A
                    POKE    strDstAddr                          ; save first char
                    INC     strDstAddr
                    LD      strChr
                    ANDI    0x0F
                    SUBI    10
                    BLT     createH_skip1
                    ADDI    7
                    
createH_skip1       ADDI    0x3A                    
                    POKE    strDstAddr                          ; save second char
                    INC     strDstAddr
                    RET


                    ; copy one string to another
stringCopy          LDW     strSrcAddr
                    PEEK
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    BNE     stringCopy                          ; copy char until terminating char
                    RET



                    ; adds two strings together, (internal sub)
stringAdd           LDW     strDstAddr
                    STW     strTmpAddr
                    INC     strSrcAddr
                    INC     strDstAddr                          ; skip lengths
                    LDI     0
                    STW     strLength
                    
stringA_copy0       LDW     strSrcAddr
                    PEEK
                    BEQ     stringA_copy1
                    POKE    strDstAddr
                    INC     strSrcAddr
                    INC     strDstAddr
                    INC     strLength
                    BRA     stringA_copy0
                    
stringA_copy1       LDW     strLength
                    SUBI    94
                    BGE     stringA_exit                        ; maximum destination length reached
                    INC     strSrcAddr2                         ; skips length first time
                    LDW     strSrcAddr2
                    PEEK
                    BEQ     stringA_exit                        ; copy char until terminating char
                    POKE    strDstAddr                          ; copy char
                    INC     strDstAddr
                    INC     strLength
                    BRA     stringA_copy1

stringA_exit        LDW     strLength
                    POKE    strTmpAddr                          ; save concatenated string length
                    LDI     0
                    POKE    strDstAddr                          ; terminating zero
                    RET


                    ; concatenates multiple strings together
stringConcat        PUSH
                    LDW     strLutAddr
                    DEEK
                    BEQ     stringCC_exit
                    STW     strSrcAddr
                    LDW     strDstAddr
                    STW     strBakAddr
                    
stringCC_loop       INC     strLutAddr
                    INC     strLutAddr
                    LDW     strLutAddr
                    DEEK
                    BEQ     stringCC_exit
                    STW     strSrcAddr2
                    LDWI    stringAdd
                    CALL    giga_vAC
                    LDW     strBakAddr
                    STW     strDstAddr
                    STW     strSrcAddr
                    BRA     stringCC_loop
                    
stringCC_exit       POP
                    RET

