_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
fontLutId                     EQU                               0x00e4

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0xffa0

; Includes
%includePath                  "../runtime"
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_math                         EQU                               0x031a
_next_0x0263                  EQU                               0x025f
_else_0x0289                  EQU                               0x0277
_next_0x02a8                  EQU                               0x0294
_page_0x0300                  EQU                               0x0300
_end_0x032a                   EQU                               0x0318
_end_0x0374                   EQU                               0x0352

; Variables
_result                       EQU                               0x0030
_timer                        EQU                               0x0032
_tick                         EQU                               0x0034
_i                            EQU                               0x0036
_ticks                        EQU                               0x0038
_a                            EQU                               0x003a
_b                            EQU                               0x003c

; Strings
_str_0xff9d                   EQU                               0xff9d
_str_0xff9d                   DB                                1 ' ' 0
_str_0xff98                   EQU                               0xff98
_str_0xff98                   DB                                3 '/60' 0

; Define Bytes

; Define Words
def_words_0x8000              EQU                               0x8000
def_words_0x8000              DW                                -137 -171 -59 1 53 126 -143 116 -54 97 
def_words_0x8014              EQU                               0x8014
def_words_0x8014              DW                                82 173 -104 85 -50 114 -69 -92 78 -125 
def_words_0x8028              EQU                               0x8028
def_words_0x8028              DW                                0 0 0 0 0 0 0 0 0 0 

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                  LDI                               0x1c
                              STW                               romType
                              RomCheck                          
                              InitEqOp                          
                              InitNeOp                          
                              InitLeOp                          
                              InitGeOp                          
                              InitLtOp                          
                              InitGtOp                          
                              InitArray2d                       
                              InitArray3d                       
                              InitRealTimeProc                  
                              Initialise                                                ; INIT

                              ClearVertBlinds                                           ; cls

                              LDI                               0
                              STW                               _result
                              STW                               _timer
                              LD                                giga_frameCount
                              STW                               _tick                   ; result=0 : timer=result : tick=get("FRAMECOUNT")

                              LDI                               0
                              STW                               _i                      ; for i=0 to SIZE-1

_next_0x0263                  LDW                               _tick
                              STW                               _ticks
                              LD                                giga_frameCount
                              STW                               _tick
                              SUBW                              _ticks
                              STW                               _ticks                  ; ticks=tick : tick=get("FRAMECOUNT") : ticks=tick-ticks

                              LDW                               _ticks
                              BGE                               _else_0x0289
                              LDWI                              256
                              ADDW                              _ticks
                              STW                               _ticks                  ; if ticks &&< 0 then ticks=ticks+256

_else_0x0289                  LDW                               _timer
                              ADDW                              _ticks
                              STW                               _timer                  ; timer=timer+ticks

                              LDWI                              _math
                              CALL                              giga_vAC                ; gosub math

                              ForNextFarInc                     _i _next_0x0263 9       ; next i

                              LDI                               0
                              STW                               _i                      ; for i=0 to SIZE-1

_next_0x02a8                  LDW                               _i
                              LSLW                              
                              STW                               0xc2
                              LDWI                              -32728
                              ADDW                              0xc2
                              DEEK                              
                              PrintAcInt16                      
                              PrintString                       _str_0xff9d             ; print deek(ADDR + SIZE*4 + (i LSL 1));" ";

                              ForNextFarInc                     _i _next_0x02a8 9       ; next i

                              NewLine                           
                              LDW                               _timer
                              STW                               mathX
                              LDI                               60
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              PrintAcInt16                      
                              PrintString                       _str_0xff9d
                              LDW                               _timer
                              STW                               mathX
                              LDI                               60
                              STW                               mathY
                              LDWI                              divide16bit
                              CALL                              giga_vAC
                              LDW                               mathRem
                              STW                               0xe2
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xe2
                              PrintAcInt16                      
                              PrintString                       _str_0xff98
                              NewLine                                                   ; print : print timer/60;" ";timer % 60;"/60"

_end_0x032a                   BRA                               _end_0x032a             ; end

_math                         PUSH                              
                              LDW                               _i
                              LSLW                              
                              STW                               0xc2
                              LDWI                              -32768
                              ADDW                              0xc2
                              DEEK                              
                              STW                               _a                      ; a = deek(ADDR + SIZE*0 + (i LSL 1))

                              LDW                               _i
                              LSLW                              
                              STW                               0xc2
                              LDWI                              -32748
                              ADDW                              0xc2
                              DEEK                              
                              STW                               _b                      ; b = deek(ADDR + SIZE*2 + (i LSL 1))

                              LDW                               _i
                              LSLW                              
                              STW                               0xc2
                              LDWI                              -32728
                              ADDW                              0xc2
                              STW                               0xc2
                              LDW                               _a
                              STW                               mathX
                              LDW                               _b
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              DOKE                              0xc2                    ; doke ADDR + SIZE*4 + (i LSL 1), a * b

                              Return                                                    ; return

_end_0x0374                   BRA                               _end_0x0374             ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                      EQU     0xff81
realTimeProc                  EQU     0xff25
convertEqOp                   EQU     0xff78
convertNeOp                   EQU     0xff6f
convertLeOp                   EQU     0xff66
convertGeOp                   EQU     0xff5d
convertLtOp                   EQU     0xff54
convertGtOp                   EQU     0xff4b
convertArr2d                  EQU     0xff3f
convertArr3d                  EQU     0xff2e
multiply16bit                 EQU     0xfd76
divide16bit                   EQU     0xfda8
resetVideoTable               EQU     0xfd57
initClearFuncs                EQU     0xff03
clearVertBlinds               EQU     0xfec5
clearCursorRow                EQU     0xfd0e
printInit                     EQU     0xfce9
printText                     EQU     0xfe5b
printDigit                    EQU     0xfcc7
printInt16                    EQU     0xfe74
printChar                     EQU     0xfc6f
newLineScroll                 EQU     0xfe00
convertEqOpAddr               EQU     0x00d0
convertNeOpAddr               EQU     0x00d2
convertLeOpAddr               EQU     0x00d4
convertGeOpAddr               EQU     0x00d6
convertLtOpAddr               EQU     0x00d8
convertGtOpAddr               EQU     0x00da
convertArr2dAddr              EQU     0x00dc
convertArr3dAddr              EQU     0x00de
realTimeProcAddr              EQU     0x00e0


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI routine
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


memIndex0           EQU     register0
memIndex1           EQU     register1
memIndex2           EQU     register2
memValue            EQU     register8
memAddr             EQU     register9


convertArr2d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    STW     memAddr
                    RET


convertArr3d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    DEEK
                    ADDW    memIndex2
                    ADDW    memIndex2
                    STW     memAddr
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

multiply16_exit     PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathSum
                    RET


                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDI     0x02                                ; starting cursor position
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                    ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by textStr
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC

                    ; first byte is length
printT_char         INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    BEQ     printT_exit                     ; check for delimiting zero
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints single digit in textNum
printDigit          PUSH
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0x30
                    ST      digitIndex
printD_exit         POP
                    RET


                    ; prints 16bit int in textNum
printInt16          PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDI     0
                    ST      digitIndex
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    LDI     0
                    SUBW    textNum
                    STW     textNum    
    
printI16_pos        LDWI    10000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDWI    1000
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     100
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LDI     10
                    STW     digitMult
                    LDWI    printDigit
                    CALL    giga_vAC
                    LD      textNum
                    ORI     0x30
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC
                    POP
                    RET


                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                             ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     134                             ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor high byte address
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     8

clearCR_loopy       ST      clearLoop
                    CALL    realTimeProcAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     30
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDI     ENABLE_SCROLL_BIT
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    LDI     ON_BOTTOM_ROW_BIT
                    ANDW    miscFlags                       ; is on bottom row flag?
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDI     ON_BOTTOM_ROW_BIT
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

