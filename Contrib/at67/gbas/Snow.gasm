_startAddress_      EQU                     0x0200

; Internal variables
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
frameCountPrev      EQU                     register0 + 0x28
miscFlags           EQU                     register0 + 0x2A
highByteMask        EQU                     register0 + 0x2C

; Includes
%include            include/gigatron.i
%include            include/macros.i

; Labels
_entryPoint_        EQU                     0x0200
_10                 EQU                     0x0240
_20                 EQU                     0x0240
_30                 EQU                     0x0254
_40                 EQU                     0x0262
_50                 EQU                     0x0278
_60                 EQU                     0x0282
_70                 EQU                     0x02a1
_80                 EQU                     0x02b9
_90                 EQU                     0x02bd
_100                EQU                     0x02d9
_110                EQU                     0x0308
_120                EQU                     0x032e
_130                EQU                     0x033f
_140                EQU                     0x0357
_150                EQU                     0x036d
_160                EQU                     0x0387
_170                EQU                     0x0391
_180                EQU                     0x03ab
_190                EQU                     0x03be
_200                EQU                     0x03c8
_210                EQU                     0x03de
_220                EQU                     0x040c
_230                EQU                     0x042e
_page_0x0300        EQU                     0x0300
_page_0x0400        EQU                     0x0400
_end_0x04a2         EQU                     0x0433

; Variables
_X_array            EQU                     0x0600
_X_array            DW                      0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_Y_array            EQU                     0x0500
_Y_array            DW                      0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_C                  EQU                     0x0030
_D                  EQU                     0x0032
_I                  EQU                     0x0034
_J                  EQU                     0x0036
_W                  EQU                     0x0038
_S                  EQU                     0x003a
_y                  EQU                     0x003c
_x                  EQU                     0x003e

; Strings
_str_0x7ea0          EQU                     0x7ea0
_str_0x7ea0          DB                      16 'Merry Christmas!' 0

; Define Bytes
def_bytes_0x08a0    EQU                     0x08a0
def_bytes_0x08a0    DB                      144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 17 144 67 146 50 18 144 62 145 59 146 43 17 146 50 17 146 55 17 144 62 146 50 9 144 62 8 144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 18 144 67 146 50 17 144 64 145 60 146 48 17 146 52 17 146 55 17 146 52 17 144 64 145 60 146 45 17 144 72 208 160 9 
def_bytes_0x09a0    EQU                     0x09a0
def_bytes_0x09a0    DB                      146 52 18 144 71 146 57 17 144 69 146 52 17 144 66 145 62 146 50 17 146 54 17 146 57 17 146 54 17 144 74 145 66 146 50 18 144 74 146 54 17 144 72 145 66 146 57 17 144 69 146 50 17 144 71 145 67 146 43 17 146 50 17 146 55 17 146 50 18 144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 17 144 67 208 160 10 
def_bytes_0x0aa0    EQU                     0x0aa0
def_bytes_0x0aa0    DB                      146 50 17 144 62 145 59 146 43 17 146 50 17 146 55 18 144 62 146 50 8 144 62 9 144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 17 144 67 146 50 17 144 64 145 60 146 48 17 146 52 18 146 55 17 146 52 17 144 64 145 60 146 45 17 144 72 146 52 17 144 71 146 57 17 144 69 146 52 17 144 74 208 160 11 
def_bytes_0x0ba0    EQU                     0x0ba0
def_bytes_0x0ba0    DB                      145 67 146 47 18 144 74 146 50 17 144 74 145 67 146 55 17 144 74 146 50 17 144 76 145 66 146 45 17 144 74 146 50 17 144 72 145 66 146 54 17 144 69 146 50 18 144 67 145 62 146 43 17 146 50 17 144 74 145 67 146 55 34 144 67 145 71 146 43 17 144 67 145 71 17 145 67 144 71 18 146 50 17 144 67 145 71 208 160 12 
def_bytes_0x0ca0    EQU                     0x0ca0
def_bytes_0x0ca0    DB                      146 55 17 144 67 145 71 17 145 67 144 71 17 146 50 17 144 71 145 67 146 43 17 144 74 146 50 18 144 67 145 64 146 48 147 52 25 144 69 9 144 71 145 62 146 43 131 17 146 50 17 146 55 34 144 72 145 64 146 48 18 144 72 145 64 146 52 17 144 72 145 64 146 55 17 146 52 8 144 72 9 144 72 145 62 146 47 208 160 13 
def_bytes_0x0da0    EQU                     0x0da0
def_bytes_0x0da0    DB                      17 144 71 146 50 17 144 71 145 62 146 55 17 144 71 146 50 9 144 71 9 144 71 145 61 146 45 17 144 69 146 52 17 144 69 145 61 146 57 17 144 71 146 52 17 144 69 145 62 146 50 17 146 54 17 144 74 145 66 146 57 18 146 54 17 144 67 145 71 146 43 17 144 67 145 71 17 145 67 144 71 17 146 50 17 144 67 208 160 14 
def_bytes_0x0ea0    EQU                     0x0ea0
def_bytes_0x0ea0    DB                      145 71 146 55 17 144 67 145 71 18 145 67 144 71 17 146 50 17 144 71 145 67 146 43 17 144 74 146 50 17 144 67 145 64 146 48 147 52 26 144 69 8 144 71 145 62 146 43 131 18 146 50 17 146 55 34 144 72 145 64 146 48 17 144 72 145 64 146 52 17 144 72 145 64 146 55 17 146 52 9 144 72 9 144 72 145 62 208 160 15 
def_bytes_0x0fa0    EQU                     0x0fa0
def_bytes_0x0fa0    DB                      146 47 17 144 71 146 50 17 144 71 145 62 146 55 17 144 71 146 50 9 144 71 8 144 74 145 66 146 45 17 144 74 146 50 17 144 72 145 62 146 54 18 144 69 146 50 17 144 67 145 59 146 43 17 146 50 17 146 55 34 144 62 145 59 146 43 17 144 71 146 50 18 144 69 146 55 17 144 67 146 50 17 144 62 145 59 146 43 208 160 16 
def_bytes_0x10a0    EQU                     0x10a0
def_bytes_0x10a0    DB                      17 146 50 17 146 55 17 144 62 146 50 9 144 62 8 144 62 145 59 146 43 18 144 71 146 50 17 144 69 146 55 17 144 67 146 50 17 144 64 145 60 146 48 17 146 52 17 146 55 17 146 52 18 144 64 145 60 146 45 17 144 72 146 52 17 144 71 146 57 17 144 69 146 52 17 144 66 145 62 146 50 17 146 54 17 146 57 208 160 17 
def_bytes_0x11a0    EQU                     0x11a0
def_bytes_0x11a0    DB                      18 146 54 17 144 74 145 66 146 50 17 144 74 146 54 17 144 72 145 66 146 57 17 144 69 146 50 17 144 71 145 67 146 43 17 146 50 18 146 55 17 146 50 17 144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 17 144 67 146 50 17 144 62 145 59 146 43 18 146 50 17 146 55 17 144 62 146 50 8 144 62 208 160 18 
def_bytes_0x12a0    EQU                     0x12a0
def_bytes_0x12a0    DB                      9 144 62 145 59 146 43 17 144 71 146 50 17 144 69 146 55 17 144 67 146 50 18 144 64 145 60 146 48 17 146 52 17 146 55 17 146 52 17 144 64 145 60 146 45 17 144 72 146 52 17 144 71 146 57 18 144 69 146 52 17 144 74 145 67 146 47 17 144 74 146 50 17 144 74 145 67 146 55 17 144 74 146 50 17 144 76 208 160 19 
def_bytes_0x13a0    EQU                     0x13a0
def_bytes_0x13a0    DB                      145 66 146 45 17 144 74 146 50 18 144 72 145 66 146 54 17 144 69 146 50 17 144 67 145 62 146 43 17 146 50 17 144 74 145 67 146 55 34 144 67 145 71 146 43 18 144 67 145 71 17 145 67 144 71 17 146 50 17 144 67 145 71 146 55 17 144 67 145 71 17 145 67 144 71 17 146 50 18 144 71 145 67 146 43 17 144 74 208 160 20 
def_bytes_0x14a0    EQU                     0x14a0
def_bytes_0x14a0    DB                      146 50 17 144 67 145 64 146 48 147 52 26 144 69 8 144 71 145 62 146 43 131 17 146 50 17 146 55 35 144 72 145 64 146 48 17 144 72 145 64 146 52 17 144 72 145 64 146 55 17 146 52 9 144 72 8 144 72 145 62 146 47 17 144 71 146 50 18 144 71 145 62 146 55 17 144 71 146 50 8 144 71 9 144 71 145 61 208 160 21 
def_bytes_0x15a0    EQU                     0x15a0
def_bytes_0x15a0    DB                      146 45 17 144 69 146 52 17 144 69 145 61 146 57 17 144 71 146 52 17 144 69 145 62 146 50 18 146 54 17 144 74 145 66 146 57 17 146 54 17 144 67 145 71 146 43 17 144 67 145 71 17 145 67 144 71 17 146 50 18 144 67 145 71 146 55 17 144 67 145 71 17 145 67 144 71 17 146 50 17 144 71 145 67 146 43 208 160 22 
def_bytes_0x16a0    EQU                     0x16a0
def_bytes_0x16a0    DB                      17 144 74 146 50 17 144 67 145 64 146 48 147 52 26 144 69 9 144 71 145 62 146 43 131 17 146 50 17 146 55 34 144 72 145 64 146 48 17 144 72 145 64 146 52 18 144 72 145 64 146 55 17 146 52 8 144 72 9 144 72 145 62 146 47 17 144 71 146 50 17 144 71 145 62 146 55 17 144 71 146 50 9 144 71 8 144 74 208 160 23 
def_bytes_0x17a0    EQU                     0x17a0
def_bytes_0x17a0    DB                      145 66 146 45 18 144 74 146 50 17 144 72 145 62 146 54 17 144 69 146 50 17 144 67 145 59 146 43 17 146 50 17 146 55 35 128 129 130 208 160 8 

; Lookup Tables

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

_20                 LDI                     63
                    STW                     _C
                    LDI                     16
                    STW                     _D
                    LDI                     1
                    STW                     _I
                    LDI                     0
                    STW                     _J
                    LDI                     159
                    STW                     _W                              ; C=63 : D=16 : I=1 : J=0 : W=159

_30                 LDWI                    162
                    STW                     register0
                    LDW                     _D
                    POKE                    register0
                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC                        ; poke 162,D : cls

_40                 LDWI                    163
                    STW                     register0
                    LDI                     72
                    POKE                    register0
                    LDI                     32
                    ST                      cursorXY
                    LDI                     96
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC                        ; poke 163,72 : at 32,96

_50                 PrintString             _str_0x7ea0                     ; print "Merry Christmas!";

_60                 LDI                     0
                    ST                      cursorXY
                    LDI                     119
                    ST                      cursorXY + 1
                    LDWI                    atTextCursor
                    CALL                    giga_vAC
                    LDW                     _W
                    STW                     drawLine_x2
                    LDI                     0
                    STW                     drawLine_y2
                    AtLineCursor            
                    DrawVTLine                                              ; at 0,119 : line W,0

_70                 LDI                     3
                    ST                      waveType
                    LDWI                    2208
                    PlayMidi                                                ; play midi &h08a0,3

_80                 LDI                     1
                    STW                     _S                              ; for S=1 to N

_90                 TickMidi                
                    LDWI                    0x0500
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    CALL                    convertGtOpAddr
                    JumpFalse               _100 0
                    LDWI                    _120
                    CALL                    giga_vAC                        ; play midi : if Y(S)>0 then goto 120

_100                LDW                     _W
                    SUBI                    3
                    RandMod                 
                    ADDI                    2
                    STW                     register0
                    LDWI                    0x0600
                    ADDW                    _S
                    ADDW                    _S
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    STW                     register1
                    LDW                     register0
                    DOKE                    register1                       ; X(S)=2+rnd(W-3)

_110                LDI                     0x3c
                    RandMod                 
                    ADDI                    8
                    STW                     mathX
                    LDWI                    256
                    STW                     mathY
                    LDWI                    multiply16bit
                    CALL                    giga_vAC
                    STW                     register0
                    LDWI                    0x0500
                    ADDW                    _S
                    ADDW                    _S
                    STW                     register1
                    LDW                     register0
                    DOKE                    register1                       ; Y(S)=(8+rnd(60))*256

_120                LDWI                    0x0500
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    STW                     0xc0
                    LDWI                    256
                    ADDW                    0xc0
                    STW                     _y                              ; y=Y(S)+256

_130                LDWI                    0x0600
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    ADDW                    _I
                    STW                     _x
                    LDW                     _I
                    ADDW                    _J
                    STW                     _I
                    LDW                     _J
                    SUBW                    _I
                    STW                     _J                              ; x=X(S)+I : I=I+J : J=J-I

_140                LDW                     _y
                    ADDW                    _x
                    PEEK                    
                    SUBW                    _C
                    CALL                    convertGtOpAddr
                    JumpFalse               _150 1
                    LDWI                    _190
                    CALL                    giga_vAC                        ; if peek(y+x)>C then goto 190

_150                LDWI                    0x0500
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    STW                     0xc0
                    LDWI                    0x0600
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    ADDW                    0xc0
                    STW                     0xc2
                    LDW                     _D
                    POKE                    0xc2                            ; poke Y(S)+X(S),D

_160                LDW                     _x
                    ADDW                    _y
                    STW                     0xc0
                    LDW                     _C
                    POKE                    0xc0                            ; poke x+y,C

_170                LDWI                    0x0600
                    ADDW                    _S
                    ADDW                    _S
                    STW                     register1
                    LDW                     _x
                    DOKE                    register1
                    LDWI                    0x0500
                    ADDW                    _S
                    ADDW                    _S
                    STW                     register1
                    LDW                     _y
                    DOKE                    register1                       ; X(S)=x : Y(S)=y

_180                ForNextLoopUp           _S _90 121
                    LDWI                    _80
                    CALL                    giga_vAC                        ; next S : goto 80

_190                LDWI                    0x0600
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    STW                     _x                              ; x=X(S)

_200                LDW                     _x
                    ADDW                    _y
                    PEEK                    
                    SUBW                    _D
                    CALL                    convertEqOpAddr
                    JumpFalse               _210 2
                    LDWI                    _150
                    CALL                    giga_vAC                        ; if peek(x+y)=D then goto 150

_210                LDWI                    0x0500
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    STW                     0xc0
                    LDWI                    0x0600
                    ADDW                    _S
                    ADDW                    _S
                    DEEK                    
                    STW                     0xde
                    LDWI                    _page_0x0400
                    CALL                    giga_vAC
_page_0x0400        LDW                     0xde
                    ADDW                    0xc0
                    STW                     0xc2
                    LDW                     _C
                    ADDI                    64
                    POKE                    0xc2                            ; poke Y(S)+X(S),C+64

_220                LDWI                    0x0500
                    ADDW                    _S
                    ADDW                    _S
                    STW                     register1
                    LDI                     0
                    DOKE                    register1
                    INC                     _S
                    LDW                     _S
                    SUBI                    121
                    CALL                    convertLtOpAddr
                    JumpFalse               _230 3
                    LDWI                    _90
                    CALL                    giga_vAC                        ; Y(S)=0 : inc S : if S<N then goto 90

_230                LDWI                    _80
                    CALL                    giga_vAC                        ; goto 80

_end_0x04a2         BRA                     _end_0x04a2                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0x7eb2
convertEqOp         EQU     0x7ebb
convertNeOp         EQU     0x7ec4
convertLeOp         EQU     0x7ecd
convertGeOp         EQU     0x7ed6
convertLtOp         EQU     0x7edf
convertGtOp         EQU     0x7ee8
multiply16bit       EQU     0x79d9
divide16bit         EQU     0x77a0
randMod16bit        EQU     0x7bdf
resetVideoTable     EQU     0x76a0
initClearFuncs      EQU     0x7da0
clearVertBlinds     EQU     0x7dc3
clearCursorRow      EQU     0x75a0
drawVTLine          EQU     0x7aa0
drawVTLineExt       EQU     0x76bf
drawVTLineLoop      EQU     0x74a0
drawVTLineLoadXY    EQU     0x73a0
atLineCursor        EQU     0x7ba0
resetAudio          EQU     0x79a0
playMidi            EQU     0x78a0
midiStartNote       EQU     0x72a0
printInit           EQU     0x73c7
printText           EQU     0x7ccd
printChar           EQU     0x71a0
atTextCursor        EQU     0x7ca0
newLineScroll       EQU     0x70a0
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
lutLabel            EQU     register9


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register0
mathY               EQU     register1
mathSum             EQU     register2
mathMask            EQU     register3
mathRem             EQU     register8
mathSign            EQU     register9
mathScratch         EQU     register10
mathShift           EQU     register11
mathBase            EQU     register8
mathPow             EQU     register9
mathResult          EQU     register10


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDI     1
    
multiply16_loop     STW     mathMask
                    ANDW    mathY
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum
                    
multiply16_skip     LDW     mathX
                    ADDW    mathX
                    STW     mathX
                    LDW     mathMask
                    ADDW    mathMask
                    BNE     multiply16_loop
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathSum
                    RET



                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_skip0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_skip0      LDW     mathY                     
                    BGE     divide16_skip1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_skip1      LDI     0
                    STW     mathRem
    
divide16_loop       STW     mathScratch
                    LDW     mathRem
                    ADDW    mathRem
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_skip3
                    INC     mathRem
                    
divide16_skip3      LDW     mathX
                    ADDW    mathX
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_skip4
                    STW     mathRem
                    INC     mathX
                    
divide16_skip4      PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathScratch
                    ADDI    1
                    ANDI    0x0F
                    BNE     divide16_loop
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


randMod16bit        PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     0xFD
                    STW     mathX
                    LDWI    divide16bit
                    CALL    giga_vAC
                    LDW     mathRem
                    POP                    
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     0xFF                                ; SYS_Draw4_30, 270 - 30/2 = 0xFF
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET




; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_addr       EQU     register13
drawLine_tmp        EQU     register14
    
    
drawVTLine          PUSH                        ; matches drawVTLineLoop's POP
                    LDWI    giga_videoTable
                    STW     drawLine_addr
                    LDI     1
                    STW     drawLine_dx1
                    STW     drawLine_dx2
                    STW     drawLine_dy1
                    LDI     0
                    STW     drawLine_dy2                
    
                    LDWI    0x8000
                    STW     drawLine_tmp
                    
                    LDW     drawLine_x2         ; sx = x2 - x1
                    SUBW    drawLine_x1
                    STW     drawLine_sx
                    ANDW    drawLine_tmp        
                    BEQ     drawVTL_dy
                    LDWI    -1
                    STW     drawLine_dx1        
                    STW     drawLine_dx2        ; dx1 = dx2 = (sx & 0x8000) ? -1 : 1
                    LDI     0                   ; sx = (sx & 0x8000) ? 0 - sx : sx
                    SUBW    drawLine_sx
                    STW     drawLine_sx                
                    
drawVTL_dy          LDW     drawLine_y2
                    SUBW    drawLine_y1
                    STW     drawLine_sy
                    STW     drawLine_h          ; h = sy
                    ANDW    drawLine_tmp
                    BEQ     drawVTL_ext
                    
                    LDWI    -1
                    STW     drawLine_dy1        ; dy1 = (sy & 0x8000) ? -1 : 1
                    LDI     0                   
                    SUBW    drawLine_sy
                    STW     drawLine_sy         ; sy = (sy & 0x8000) ? 0 - sy : sy
                    SUBW    drawLine_sx
                    BLE     drawVTL_ext           
                    LDW     drawLine_dy1
                    STW     drawLine_dy2        ; if(sx < sy) dy2 = -1
    
drawVTL_ext         LDWI    drawVTLineLoadXY
                    CALL    giga_vAC
                    LDWI    drawVTLineExt
                    CALL    giga_vAC



drawVTLineExt       LDW     drawLine_sy
                    SUBW    drawLine_sx
                    BLE     drawVTL_num
                    LDI     0
                    STW     drawLine_dx2        ; if(sx < sy) dx2 = 0
                    LDW     drawLine_sy       
                    STW     drawLine_tmp
                    LDW     drawLine_sx
                    STW     drawLine_sy
                    LDW     drawLine_tmp
                    STW     drawLine_sx         ; swap sx with sy
                    LDW     drawLine_h
                    BLE     drawVTL_num
                    LDI     1
                    STW     drawLine_dy2        ; if(h > 0) dy2 = 1
    
drawVTL_num         LDWI    SYS_LSRW1_48
                    STW     giga_sysFn          
                    LDW     drawLine_sx
                    SYS     0xF6                ; 0xF6 = 270-max(14,48/2)
                    ADDI    1
                    STW     drawLine_num        ; numerator = sx>>1
                    STW     drawLine_count      ; for(count=sx>>1; counti>=0; --i)
                    
                    LDWI    drawVTLineLoadDXY
                    CALL    giga_vAC
                    LDWI    drawVTLineLoop
                    CALL    giga_vAC


drawVTLineLoop      LDW     drawLine_xy1
                    STW     drawLine_tmp
                    LDWI    drawVTLineAddress
                    CALL    giga_vAC            ; plot start pixel

                    LDW     drawLine_xy2
                    STW     drawLine_tmp
                    LDWI    drawVTLineAddress
                    CALL    giga_vAC            ; plot end pixel, (meet in middle)
                    
                    LDW     drawLine_num        ; numerator += sy
                    ADDW    drawLine_sy
                    STW     drawLine_num
                    SUBW    drawLine_sx
                    BLE     drawVTL_flip        ; if(numerator <= sx) goto flip
                    STW     drawLine_num        ; numerator -= sx
                    
                    LDW     drawLine_xy1
                    ADDW    drawLine_dxy1
                    STW     drawLine_xy1        ; xy1 += dxy1
                    
                    LDW     drawLine_xy2
                    SUBW    drawLine_dxy1
                    STW     drawLine_xy2        ; xy2 -= dxy1
                    BRA     drawVTL_count
                    
drawVTL_flip        LDW     drawLine_xy1        
                    ADDW    drawLine_dxy2
                    STW     drawLine_xy1        ; xy1 += dxy2
                    
                    LDW     drawLine_xy2        
                    SUBW    drawLine_dxy2
                    STW     drawLine_xy2        ; xy2 -= dxy2
                    
drawVTL_count       CALL    realTimeProcAddr
                    LDW     drawLine_count
                    SUBI    0x01
                    STW     drawLine_count
                    BGT     drawVTLineLoop
                    POP                         ; matches drawVTLine's PUSH
                    RET
                    
drawVTLineAddress   LD      drawLine_tmp + 1
                    LSLW
                    ADDW    drawLine_addr
                    PEEK
                    ST      drawLine_tmp + 1
                    LD      fgbgColour + 1
                    POKE    drawLine_tmp
                    RET


drawVTLineLoadXY    LD      drawLine_x1
                    ST      drawLine_xy1
                    LD      drawLine_y1
                    ST      drawLine_xy1 + 1    ; xy1 = x1 | (y1<<8)
                    
                    LD      drawLine_x2
                    ST      drawLine_xy2
                    LD      drawLine_y2
                    ST      drawLine_xy2 + 1    ; xy2 = x2 | (y2<<8)
                    RET
                    
drawVTLineLoadDXY   LDWI    SYS_LSLW8_24
                    STW     giga_sysFn          
                    LDW     drawLine_dy1
                    SYS     0x00                ; LSL 8, 0x00 = 270-max(14,24/2)
                    ADDW    drawLine_dx1
                    STW     drawLine_dxy1       ; dxy1 = dx1 + (dy1<<8)
    
                    LDW     drawLine_dy2
                    SYS     0x00                ; LSL 8, 0x00 = 270-max(14,24/2)
                    ADDW    drawLine_dx2
                    STW     drawLine_dxy2       ; dxy2 = dx2 + (dy2<<8)
                    RET


atLineCursor        LD      cursorXY
                    STW     drawLine_x1
                    SUBI    giga_xres
                    BLT     atLC_x1good
                    LDI     0
                    STW     drawLine_x1
                    
atLC_x1good         LD      cursorXY
                    ADDW    drawLine_x2
                    SUBI    giga_xres
                    BLT     atLC_x2good
                    LDWI    -giga_xres
                    
atLC_x2good         ADDI    giga_xres
                    STW     drawLine_x2
                    ST      cursorXY

                    LD      cursorXY + 1
                    STW     drawLine_y1
                    SUBI    giga_yres
                    BLT     atLC_y1good
                    LDI     giga_yres - 1
                    STW     drawLine_y1
                    
atLC_y1good         LD      cursorXY + 1
                    ADDW    drawLine_y2
                    SUBI    giga_yres
                    BLT     atLC_y2good
                    LDWI    -1
                    
atLC_y2good         ADDI    giga_yres
                    STW     drawLine_y2
                    ST      cursorXY + 1
                    RET


numChannels         EQU     register0
audioPtr            EQU     register1
waveType            EQU     register2
midiNote            EQU     register4           ; register4 to register7 are the only free registers during time slicing
midiCommand         EQU     register5
midiPtr             EQU     register6


resetAudio          LDWI    0x0000
                    STW     midiDelay
                    LDWI    giga_soundChan1
                    STW     audioPtr
                    LD      waveType
                    ANDI    0x03
                    ST      waveType + 1
                    LDI     0x00
                    ST      waveType            ; waveform type
                    LDI     0x04

resetA_loop         ST      numChannels
                    LDI     giga_soundChan1     ; reset low byte
                    ST      audioPtr
                    LDW     waveType
                    DOKE    audioPtr            ; wavA and wavX
                    INC     audioPtr
                    INC     audioPtr    
                    LDWI    0x0000
                    DOKE    audioPtr            ; keyL and keyH
                    INC     audioPtr
                    INC     audioPtr
                    DOKE    audioPtr            ; oscL and oscH
                    INC     audioPtr + 1        ; increment high byte
                    
                    LD      numChannels
                    SUBI    1
                    BNE     resetA_loop
                    RET



playMidi            LDW     midiStream
                    BEQ     playM_exit0         ; 0x0000 = stop
                    LDI     0x08                ; keep pumping soundTimer, so that global sound stays alive
                    ST      giga_soundTimer
                    LD      giga_frameCount
                    SUBW    midiDelay
                    BEQ     playM_start
playM_exit0         RET

playM_start         PUSH
playM_process       LDW     midiStream
                    PEEK                        ; get midi stream byte
                    STW     midiCommand
                    LDW     midiStream
                    ADDI    0x01
                    STW     midiStream
                    LDI     0xF0
                    ANDW    midiCommand
                    XORI    0x90                ; check for start note
                    BNE     playM_endnote
    
                    LDWI    midiStartNote
                    CALL    giga_vAC            ; start note
                    BRA     playM_process
                    
playM_endnote       XORI    0x10                ; check for end note
                    BNE     playM_segment
    
                    LDWI    midiEndNote         ; end note
                    CALL    giga_vAC
                    BRA     playM_process

playM_segment       XORI    0x50                ; check for new segment
                    BNE     playM_delay
    
                    LDW     midiStream          ; midi score
                    DEEK
                    STW     midiStream          ; 0xD0 new midi segment address
                    BEQ     playM_exit1         ; 0x0000 = stop
                    BRA     playM_process
    
playM_delay         LD      giga_frameCount     ; midiDelay = (midiCommand + peek(frameCount)) & 0x00FF 
                    ADDW    midiCommand
                    ST      midiDelay
playM_exit1         POP
                    RET


midiStartNote       LDWI    giga_notesTable     ; note table in ROM
                    STW     midiPtr
                    LDW     midiStream          ; midi score
                    PEEK
                    SUBI    11
                    LSLW
                    ADDW    midiPtr
                    STW     midiPtr
                    LUP     0x00                ; get ROM midi note low byte
                    ST      midiNote
                    LDW     midiPtr
                    LUP     0x01                ; get ROM midi note high byte
                    ST      midiNote + 1
                    LDW     midiCommand
                    ANDI    0x03                ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr             ; channels address 0x01FC <-> 0x04FC
                    LDW     midiNote
                    DOKE    midiPtr             ; set note
                    LDW     midiStream
                    ADDI    0x01                ; midiStream++
                    STW     midiStream
                    RET
                    
midiEndNote         LDW     midiCommand
                    ANDI    0x03                ; get channel
                    ADDI    0x01                
                    ST      midiPtr + 1
                    LDI     0xFC
                    ST      midiPtr             ; channels address 0x01FC <-> 0x04FC
                    LDWI    0x0000
                    DOKE    midiPtr             ; end note
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textLen             EQU     register1
textOfs             EQU     register2
textChr             EQU     register3
textHex             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    
                    LDWI    giga_videoTable
                    STW     giga_sysArg4
                    LD      cursorXY + 1
                    LSLW
                    ADDW    giga_sysArg4
                    PEEK
                    ST      giga_sysArg4 + 1
                    LD      cursorXY
                    ST      giga_sysArg4                    ; xy position
                    RET



                    ; prints text string pointed to by the accumulator
printText           PUSH
                    LDWI    printInit
                    CALL    giga_vAC
                    LDW     textStr             
                    PEEK                                    ; first byte is length
                    BEQ     printT_exit
    
printT_char         ST      textLen
                    INC     textStr                         ; next char
                    LDW     textStr             
                    PEEK
                    ST      textChr
                    LDWI    printChar
                    CALL    giga_vAC

                    LD      textLen
                    SUBI    1
                    BNE     printT_char
printT_exit         POP
                    RET



                    ; prints char in textChr
printChar           LD      textChr
                    ANDI    0x7F                            ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                     ; char<32 exit
                    STW     textChr                         ; char-32
                    LDWI    giga_text32                     ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                         ; char-82
                    LDWI    giga_text82                     ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                        ; char*5 + textFont
                    LDI     0x05

printC_slice        ST      textSlice
                    LDW     textFont                        ; text font slice base address
                    LUP     0x00                            ; get ROM slice
                    ST      giga_sysArg2
                    SYS     0xCB                            ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                        ; next vertical slice
                    INC     giga_sysArg4                    ; next x
                    LD      textSlice
                    SUBI    1
                    BNE     printC_slice
                    
                    ST      giga_sysArg2                    ; result of printC_slice is 0
                    SYS     0xCB                            ; draw last blank slice
                    INC     giga_sysArg4                    ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALL    realTimeProcAddr
                    LD      cursorXY
                    ADDI    0x06
                    ST      cursorXY
                    SUBI    giga_xres - 5                   ; giga_xres - 6, (154), is last possible char in row
                    BLT     printC_pop
                    LDWI    newLineScroll                   ; next row, scroll at bottom
                    CALL    giga_vAC
                    
printC_pop          POP

printC_exit         RET


atTextCursor        LD      cursorXY
                    SUBI    giga_xres
                    BLT     atTC_skip0
                    LDI     0
                    ST      cursorXY
                    
atTC_skip0          LD      cursorXY + 1
                    SUBI    giga_yres
                    BLT     atTC_skip1
                    LDI     giga_yres - 1
                    ST      cursorXY + 1
                    
atTC_skip1          LD      cursorXY + 1
                    SUBI    giga_yres - 8
                    BGE     atTC_skip2
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                       ; reset on bottom row flag
                    RET
                    
atTC_skip2          LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    RET



                    ; clears the top 8 lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                ; 4 pixels of colour
    
                    LDWI    SYS_Draw4_30                    ; setup 4 pixel SYS routine
                    STW     giga_sysFn
    
                    LDWI    giga_videoTable                 ; current cursor position
                    PEEK
                    ST      giga_sysArg4 + 1
                    LDI     8

clearCR_loopy       ST      clearLoop
                    CALL    realTimeProcAddr
                    LDI     giga_xres
                    
clearCR_loopx       SUBI    4                               ; loop is unrolled 4 times
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    SUBI    4
                    ST      giga_sysArg4
                    SYS     0xFF                            ; SYS_Draw4_30, 270 - 30/2 = 0xFF
                    BGT     clearCR_loopx
                    
                    INC     giga_sysArg4 + 1                ; next line
                    LD      clearLoop
                    SUBI    1
                    BNE     clearCR_loopy

                    LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     0x02                            ; x offset slightly
                    ST      cursorXY
                    ST      giga_sysArg4
                    LDWI    0x0001
                    ANDW    miscFlags
                    BNE     newLS_cont0                     ; scroll on or off
                    RET
                    
newLS_cont0         PUSH
                    LDWI    0x8000
                    ANDW    miscFlags                       ; on bottom row flag
                    BNE     newLS_cont1
                    LD      cursorXY + 1
                    ADDI    8
                    ST      cursorXY + 1
                    SUBI    giga_yres
                    BLT     newLS_exit
                    LDI     giga_yres - 8
                    ST      cursorXY + 1
                    
newLS_cont1         LDWI    clearCursorRow
                    CALL    giga_vAC
                    LDWI    giga_videoTable
                    STW     scanLine
    
newLS_scroll        CALL    realTimeProcAddr
                    LDW     scanLine
                    PEEK
                    ADDI    8
                    ANDI    0x7F
                    SUBI    8
                    BGE     newLS_adjust
                    ADDI    8
                    
newLS_adjust        ADDI    8
                    POKE    scanLine
                    INC     scanLine                        ; scanline pointers are 16bits
                    INC     scanLine
                    LD      scanLine
                    SUBI    0xF0                            ; scanline pointers end at 0x01EE
                    BLT     newLS_scroll
                    
                    LDWI    0x8000
                    ORW     miscFlags
                    STW     miscFlags                       ; set on bottom row flag
                    
newLS_exit          LDWI    printInit
                    CALL    giga_vAC                        ; re-initialise the SYS registers
                    POP
                    RET

