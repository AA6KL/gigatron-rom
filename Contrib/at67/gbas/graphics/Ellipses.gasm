_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0x7fa0

; Includes
%includePath                  "../runtime"
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_loop                         EQU                               0x024d
_ellipse                      EQU                               0x02b5
_else_0x0293                  EQU                               0x027d
_endif_0x0297                 EQU                               0x0281
_end_0x02dd                   EQU                               0x02b3
_page_0x0300                  EQU                               0x0300
_while_0x034e                 EQU                               0x031f
_else_0x037e                  EQU                               0x033f
_endif_0x039c                 EQU                               0x0357
_wend_0x03ce                  EQU                               0x0385
_end_0x03d0                   EQU                               0x0387

; Variables
_color                        EQU                               0x0030
_a                            EQU                               0x0032
_b                            EQU                               0x0034
_t                            EQU                               0x0036
_mx                           EQU                               0x0038
_my                           EQU                               0x003a
_pixel                        EQU                               0x003c
_mx1                          EQU                               0x003e
_my1                          EQU                               0x0040
_mx2                          EQU                               0x0042
_my2                          EQU                               0x0044
_aa                           EQU                               0x0046
_dx                           EQU                               0x0048
_bb                           EQU                               0x004a
_dy                           EQU                               0x004c
_r                            EQU                               0x004e
_rx                           EQU                               0x0050
_ry                           EQU                               0x0052
_x                            EQU                               0x0054

; Strings
_timeArray_                   EQU                               0x7ea3
_timeArray_                   DB                                00 00 00
_timeString_                  EQU                               0x7cbb
_timeString_                  DB                                8 '00:00:00' 0

; Define Bytes

; Define Words

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                  LDI                               0x20
                              STW                               romType
                              RomCheck                          
                              InitEqOp                          
                              InitNeOp                          
                              InitLeOp                          
                              InitGeOp                          
                              InitLtOp                          
                              InitGtOp                          
                              InitArray2d                       
                              InitArray3d                       
                              InitRealTimeAddr                  
                              Initialise                                                        ; INIT

                              ClearVertBlinds                                                   ; cls

_loop                         Rand                              
                              ANDI                              63
                              STW                               _color                          ; color = rnd(0) AND &h3F

                              LDI                               0x27
                              RandMod                           
                              ADDI                              1
                              STW                               _a
                              LDI                               0x27
                              RandMod                           
                              ADDI                              1
                              STW                               _b                              ; a = rnd(39) + 1 : b = rnd(39) + 1

                              LDW                               _a
                              SUBW                              _b
                              BLE                               _else_0x0293                    ; if a &&> b

                              LDW                               _a
                              STW                               _t
                              BRA                               _endif_0x0297                   ; t = a

_else_0x0293                  LDW                               _b
                              STW                               _t                              ; t = b

_endif_0x0297                 LDW                               _t
                              LSLW                              
                              STW                               0xc2
                              LDI                               160
                              SUBW                              0xc2
                              RandMod                           
                              ADDW                              _t
                              STW                               _mx                             ; mx = rnd(160 - (t LSL 1)) + t

                              LDW                               _t
                              LSLW                              
                              STW                               0xc2
                              LDI                               120
                              SUBW                              0xc2
                              RandMod                           
                              ADDW                              _t
                              STW                               _my                             ; my = rnd(120 - (t LSL 1)) + t

                              LDWI                              _ellipse
                              CALL                              giga_vAC                        ; gosub ellipse

                              LDWI                              _loop
                              CALL                              giga_vAC                        ; goto loop

_end_0x02dd                   BRA                               _end_0x02dd                     ; end

_ellipse                      PUSH                              
                              LDW                               _mx
                              ST                                _pixel
                              LDW                               _my
                              ADDI                              8
                              ST                                _pixel + 1                      ; pixel.lo = mx : pixel.hi = my + 8

                              LDW                               _pixel
                              ADDW                              _a
                              STW                               0xc0
                              LDW                               _color
                              POKE                              0xc0                            ; poke pixel + a, color

                              LDW                               _pixel
                              SUBW                              _a
                              STW                               0xc0
                              LDW                               _color
                              POKE                              0xc0                            ; poke pixel - a, color

                              LDW                               _mx
                              SUBW                              _a
                              STW                               _mx1
                              LDW                               _my
                              STW                               _my1                            ; mx1 = mx - a : my1 = my

                              LDW                               _mx
                              ADDW                              _a
                              STW                               _mx2
                              LDW                               _my
                              STW                               _my2                            ; mx2 = mx + a : my2 = my

                              LDW                               _a
                              STW                               _aa
                              LSLW                              
                              STW                               _dx                             ; aa = a      : dx = aa LSL 1

                              LDW                               _b
                              STW                               _bb
                              STW                               0xe2
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xe2
                              LSLW                              
                              STW                               _dy                             ; bb = b      : dy = bb LSL 1

                              LDW                               _a
                              STW                               mathX
                              LDW                               _bb
                              STW                               mathY
                              LDWI                              multiply16bit
                              CALL                              giga_vAC
                              STW                               _r
                              LSLW                              
                              STW                               _rx                             ; r  = a * bb : rx = r  LSL 1

                              LDI                               0
                              STW                               _ry                             ; ry = 0

                              LDW                               _a
                              STW                               _x                              ; x  = a

_while_0x034e                 LDW                               _x
                              BLE                               _wend_0x03ce                    ; while x &&> 0

                              LDW                               _r
                              BLE                               _else_0x037e                    ; if r &&> 0

                              INC                               _my1
                              LDW                               _my2
                              SUBI                              1
                              STW                               _my2                            ; inc my1 : dec my2

                              LDW                               _ry
                              ADDW                              _dx
                              STW                               _ry
                              LDW                               _r
                              SUBW                              _ry
                              STW                               _r
                              BRA                               _endif_0x039c                   ; ry = ry + dx : r = r - ry

_else_0x037e                  LDW                               _x
                              SUBI                              1
                              STW                               _x
                              INC                               _mx1
                              LDW                               _mx2
                              SUBI                              1
                              STW                               _mx2                            ; dec x : inc mx1 : dec mx2

                              LDW                               _rx
                              SUBW                              _dy
                              STW                               _rx
                              ADDW                              _r
                              STW                               _r                              ; rx = rx - dy : r = rx + r

_endif_0x039c                 LDW                               _my1
                              ADDI                              8
                              ST                                _pixel + 1                      ; pixel.hi = my1 + 8

                              LDW                               _mx1
                              ST                                _pixel
                              LDW                               _color
                              POKE                              _pixel                          ; pixel.lo = mx1 : poke pixel, color

                              LDW                               _mx2
                              ST                                _pixel
                              LDW                               _color
                              POKE                              _pixel                          ; pixel.lo = mx2 : poke pixel, color

                              LDW                               _my2
                              ADDI                              8
                              ST                                _pixel + 1                      ; pixel.hi = my2 + 8

                              LDW                               _mx1
                              ST                                _pixel
                              LDW                               _color
                              POKE                              _pixel                          ; pixel.lo = mx1 : poke pixel, color

                              LDW                               _mx2
                              ST                                _pixel
                              LDW                               _color
                              POKE                              _pixel                          ; pixel.lo = mx2 : poke pixel, color

                              BRA                               _while_0x034e                   ; wend

_wend_0x03ce                  Return                                                            ; return

_end_0x03d0                   BRA                               _end_0x03d0                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                      EQU     0x7ee8
convertEqOp                   EQU     0x7edf
convertNeOp                   EQU     0x7ed6
convertLeOp                   EQU     0x7ecd
convertGeOp                   EQU     0x7ec4
convertLtOp                   EQU     0x7ebb
convertGtOp                   EQU     0x7eb2
convertArr2d                  EQU     0x7ea6
convertArr3d                  EQU     0x7dee
realTimeStub                  EQU     0x7ddc
multiply16bit                 EQU     0x7bcd
divide16bit                   EQU     0x7aa8
rand16bit                     EQU     0x7dbc
randMod16bit                  EQU     0x7da9
resetVideoTable               EQU     0x7bae
initClearFuncs                EQU     0x7dc4
clearVertBlinds               EQU     0x7cc5
convertEqOpAddr               EQU     0x00d0
convertNeOpAddr               EQU     0x00d2
convertLeOpAddr               EQU     0x00d4
convertGeOpAddr               EQU     0x00d6
convertLtOpAddr               EQU     0x00d8
convertGtOpAddr               EQU     0x00da
convertArr2dAddr              EQU     0x00dc
convertArr3dAddr              EQU     0x00de
realTimeStubAddr              EQU     0x00e0


; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


memIndex0           EQU     register0
memIndex1           EQU     register1
memIndex2           EQU     register2
memValue            EQU     register8
memAddr             EQU     register9


convertArr2d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    STW     memAddr
                    RET


convertArr3d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    DEEK
                    ADDW    memIndex2
                    ADDW    memIndex2
                    STW     memAddr
                    RET


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    ; accumulator = mathX * mathY, (result 16bit)
multiply16bit       LDI     0
                    STW     mathSum
                    LDW     mathX
                    BEQ     multiply16_exit     ; if x=0 then return 0
                    LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathY
                    
multiply16_loop     BEQ     multiply16_exit     ; if y=0 then return
                    ANDI    1
                    BEQ     multiply16_skip
                    LDW     mathSum
                    ADDW    mathX
                    STW     mathSum             ; mathSum += mathX
                    
multiply16_skip     LDW     mathX
                    LSLW
                    STW     mathX               ; mathX = mathX <<1
                    LDW     mathY
                    SYS     48
                    STW     mathY               ; mathY = mathY >>1
                    BRA     multiply16_loop

multiply16_exit     PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSum
                    RET


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET



                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeStubAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


randMod16bit        PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    STW     mathX
                    LDWI    divide16bit
                    CALL    giga_vAC
                    LDW     mathRem
                    POP                    
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeStubAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
    
                    LDWI    SYS_SetMemory_v2_54                 ; setup fill memory SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LD      fgbgColour
                    ST      giga_sysArg1                        ; fill value
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LD      top
                    ST      giga_sysArg3                        ; top line
                    SYS     54                                  ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        ; bottom line
                    SYS     54                                  ; fill memory
                    INC     top                                 ; next top line
                    
                    CALL    realTimeStubAddr
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET

