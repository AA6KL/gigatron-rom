_startAddress_                EQU                               0x0200

; Internal Variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal Buffers
textWorkArea                  EQU                               0x7fa0

; Includes
%includePath                  "../runtime"
%include                      util.i
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_loop                         EQU                               0x0260
_rand                         EQU                               0x02bd
_next_0x022d                  EQU                               0x0232
_else_0x02ec                  EQU                               0x02b9
_end_0x02ee                   EQU                               0x02bb
_end_0x032a                   EQU                               0x02e5

; Global Variables
_seed                         EQU                               0x0030
_i                            EQU                               0x0032
_r                            EQU                               0x0034

; Local Variables

; Arrays
_a_array                      EQU                               0x0680
_a_array                      DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 

; Strings

; Constant Strings

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_                  Initialise                        
                              InitEqOp                        
                              InitRealTimeStub                                                  ; INIT

                              LDWI                              12345
                              STW                               _seed                           ; seed = 12345

                              ClearVertBlinds                                                   ; cls

                              LDI                               0
                              STW                               _i
                              LDW                               0xe8
                              STW                               0xb0
                              LDI                               1
                              STW                               0xb2                            ; for i=0 to max

_next_0x022d                  LDWI                              0x0680
                              ADDW                              _i
                              PEEK                              
                              STW                               0xe8
                              LDI                               127
                              SUBW                              0xe8
                              STW                               0xe8
                              LD                                0xe8
                              ST                                giga_vAC + 1
                              ORI                               0xFF
                              XORI                              0xFF
                              ADDW                              _i
                              STW                               0xec
                              LDI                               63
                              POKE                              0xec                            ; poke (127 - a(i) LSL 8) + i, &h3F

                              ForNextFarVarAdd                  _i _next_0x022d 0xb0 0xb2       ; next i

_loop                         Rand                              
                              ANDI                              127
                              STW                               _r                              ; r = rnd(0) AND max

                              LDWI                              0x0680
                              ADDW                              _r
                              PEEK                              
                              STW                               0xe8
                              LDI                               127
                              SUBW                              0xe8
                              STW                               0xe8
                              LD                                0xe8
                              ST                                giga_vAC + 1
                              ORI                               0xFF
                              XORI                              0xFF
                              ADDW                              _r
                              STW                               0xec
                              LDI                               63
                              POKE                              0xec                            ; poke (127 - a(r) LSL 8) + r, &h3F

                              LDWI                              0x0680
                              ADDW                              _r
                              PEEK                              
                              ADDI                              1
                              STW                               memValue
                              LDWI                              0x0680
                              ADDW                              _r
                              STW                               memAddr
                              LDW                               memValue
                              POKE                              memAddr
                              LDWI                              0x0680
                              ADDW                              _r
                              PEEK                              
                              XORI                              120
                              CALL                              convertEqOpAddr
                              JumpFalse                         _else_0x02ec 0
                              LDWI                              0x0680
                              ADDW                              _r
                              STW                               memAddr
                              LDI                               119
                              POKE                              memAddr                         ; a(r) = a(r) + 1 : if a(r) = 120 then a(r) = 119

_else_0x02ec                  BRA                               _loop                           ; goto &loop

_end_0x02ee                   BRA                               _end_0x02ee                     ; end

_rand                         LDW                               _seed
                              LSLW                              
                              LSLW                              
                              LSLW                              
                              LSLW                              
                              LSLW                              
                              LSLW                              
                              LSLW                              
                              XORW                              _seed
                              STW                               _seed                           ; seed = seed XOR (seed <<7)

                              LD                                _seed + 1
                              STW                               mathShift
                              ShiftRight1bit                    
                              XORW                              _seed
                              STW                               _seed                           ; seed = seed XOR (seed.hi >>1) 'seed = seed XOR (seed >>9)

                              LD                                _seed
                              ST                                giga_vAC + 1
                              ORI                               0xFF
                              XORI                              0xFF
                              XORW                              _seed
                              STW                               _seed                           ; seed = seed XOR (seed <<8)

                              Return                                                            ; return

_end_0x032a                   BRA                               _end_0x032a                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeStub                  EQU     0x7ded
convertEqOp                   EQU     0x7dda
rand16bit                     EQU     0x7dd2
shiftRight1bit                EQU     0x7de3
resetVideoFlags               EQU     0x7ea2
initClearFuncs                EQU     0x7eae
clearVertBlinds               EQU     0x7ec5
convertEqOpAddr               EQU     0x00c2
convertNeOpAddr               EQU     0x00c4
convertLeOpAddr               EQU     0x00c6
convertGeOpAddr               EQU     0x00c8
convertLtOpAddr               EQU     0x00ca
convertGtOpAddr               EQU     0x00cc
convert8Arr2dAddr             EQU     0x00ce
convert8Arr3dAddr             EQU     0x00d0
convert16Arr2dAddr            EQU     0x00d2
convert16Arr3dAddr            EQU     0x00d4
realTimeStubAddr              EQU     0x00d6


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET


shiftRight1bit      LDWI    SYS_LSRW1_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
varAddress          EQU     register13
clrAddress          EQU     register10
clrLines            EQU     register11
clrWidth            EQU     register12
clrStart            EQU     register13
clrEnd              EQU     register14
clrRem              EQU     register15


resetVideoFlags     LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
                    RET



initClearFuncs      PUSH
                    LDWI    resetVideoFlags
                    CALL    giga_vAC
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of bg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeStubAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET

