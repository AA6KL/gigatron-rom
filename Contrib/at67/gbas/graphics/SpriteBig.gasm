_startAddress_      EQU                     0x0200

; Internal variables
serialRawPrev       EQU                     0x0081
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
frameCountPrev      EQU                     register0 + 0x28
miscFlags           EQU                     register0 + 0x2A
highByteMask        EQU                     register0 + 0x2C

; Internal buffers
textWorkArea        EQU                     0x7fa0

; Includes
%includePath        "../runtime"
%include            gigatron.i
%include            macros.i

; Labels
_entryPoint_        EQU                     0x0200
_loop               EQU                     0x08d5
_page_0x0300        EQU                     0x0300
_page_0x0400        EQU                     0x0400
_page_0x0500        EQU                     0x0500
_page_0x08a0        EQU                     0x08a0
_next_0x025a        EQU                     0x08d9
_page_0x09a0        EQU                     0x09a0
_next_0x0297        EQU                     0x09c1
_page_0x0aa0        EQU                     0x0aa0
_end_0x02d7         EQU                     0x0ab7

; Variables
_x                  EQU                     0x0030

; Strings

; Define Bytes

; Define Words

; Define Images

; Define Sprites
def_sprites_0x061b  EQU                     0x061b
def_sprites_0x061b  DB                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 16 37 0 0 0 0 37 16 0 0 0 0 16 37 0 21 0 0 16 16 0 21 21 0 16 16 0 0 21 21 0 16 0 0 32 52 52 52 0 32 52 52 52 48 0 0 16 58 58 63 0 0 37 37 63 63 0 0 16 58 58 63 0 0 37 37 63 63 0 0 16 37 37 63 0 0 16 2 23 2 0 0 0 16 2 2 0 0 0 0 16 16 0 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 0 16 0 0 0 0 0 16 0 0 0 0 16 37 0 0 0 0 16 16 0 0 0 0 16 58 0 0 0 16 2 2 0 0 0 16 16 2 0 0 0 16 37 58 0 0 0 37 37 58 0 0 16 16 58 37 0 0 16 37 37 58 0 0 37 16 58 37 0 16 32 36 52 58 0 16 37 16 36 52 0 16 16 23 3 2 0 0 23 3 2 2 0 0 0 0 0 0 218 
def_sprites_0x051b  EQU                     0x051b
def_sprites_0x051b  DB                      0 0 0 0 0 0 16 63 63 63 37 37 37 37 63 63 63 58 16 37 37 63 16 0 37 16 58 16 16 2 16 58 16 58 32 21 58 16 58 58 37 37 16 16 58 63 63 37 36 32 37 16 58 58 52 52 48 36 16 58 36 37 63 37 37 21 16 63 58 0 0 42 58 0 0 21 42 63 16 21 21 63 63 42 37 0 21 21 42 0 3 2 16 0 16 37 23 63 63 37 58 16 37 63 58 63 58 37 37 37 58 37 37 16 0 0 0 52 16 16 36 16 21 42 63 63 16 58 0 42 42 63 37 37 63 21 63 42 37 63 63 0 21 63 58 63 63 16 0 0 58 63 16 16 0 16 23 3 16 0 0 0 2 23 0 0 0 0 63 16 0 0 0 0 58 16 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 58 0 0 0 0 0 2 0 0 0 0 0 2 2 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 218 
def_sprites_0x0415  EQU                     0x0415
def_sprites_0x0415  DB                      0 0 0 0 0 0 0 0 0 0 0 0 58 0 0 0 0 0 0 58 0 0 0 0 2 16 0 0 0 0 0 36 0 0 0 0 63 63 0 0 21 0 16 16 0 21 21 0 16 0 21 21 0 0 52 52 52 36 21 21 21 21 63 63 63 42 21 42 21 63 42 63 63 63 42 21 21 21 21 63 63 42 16 37 37 16 2 2 58 37 58 63 58 37 16 16 58 58 63 16 0 0 37 58 58 37 0 0 37 32 16 0 0 0 16 16 16 0 0 0 63 16 36 16 0 0 42 21 37 37 0 0 42 63 63 16 16 0 21 63 63 58 16 0 37 37 63 58 58 16 16 37 37 63 63 2 0 16 37 37 2 3 0 0 16 23 2 37 0 0 0 16 37 37 0 0 0 37 37 63 0 0 0 16 58 58 0 0 0 37 37 58 0 0 0 16 58 37 0 0 0 36 32 52 0 0 0 16 58 32 0 0 0 37 37 23 0 0 0 16 23 3 0 0 0 0 0 0 218 
def_sprites_0x0315  EQU                     0x0315
def_sprites_0x0315  DB                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 21 0 21 21 21 42 42 42 21 63 21 63 42 42 37 16 37 42 42 37 37 63 37 21 0 37 63 58 58 0 0 52 37 58 16 0 0 16 36 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 2 0 0 0 0 0 16 0 0 0 0 0 37 16 0 0 0 0 63 37 0 0 0 0 63 16 0 0 0 0 58 58 16 0 0 0 63 63 37 0 0 0 37 63 16 0 0 0 52 3 2 0 0 0 3 2 2 2 0 0 2 2 2 2 2 0 0 0 0 0 0 0 218 
def_sprites_0x0215  EQU                     0x0215
def_sprites_0x0215  DB                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 21 0 0 42 42 42 63 0 0 63 42 63 21 21 0 42 42 42 21 0 0 21 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 218 
def_sprites_0x7ec3  EQU                     0x7ec3
def_sprites_0x7ec3  DB                      0 0 0 0 0 0 0 0 0 0 0 6 0 0 26 26 26 9 0 0 27 10 29 28 0 0 0 4 28 28 0 0 27 9 25 11 0 0 18 19 18 28 0 11 3 19 18 28 0 28 24 24 25 19 0 0 0 0 0 0 246 
def_sprites_0x7dc3  EQU                     0x7dc3
def_sprites_0x7dc3  DB                      0 0 0 0 0 0 6 0 0 0 0 0 25 24 24 21 0 0 0 28 4 0 24 0 0 28 4 0 24 0 24 63 25 24 22 0 28 28 28 28 24 0 63 63 63 63 42 0 19 63 63 63 18 0 0 0 0 0 0 0 246 

; Lookup Tables
_spriteLut_0x7baf   EQU                     0x7baf
_spriteLut_0x7baf   DW                      0x061b 0x0000 0x051b 0x0006 0x0415 0x000c 0x0315 0x0012 0x0215 0x0018 0x0000
_spriteLut_0x7ca5   EQU                     0x7ca5
_spriteLut_0x7ca5   DW                      0x7ec3 0x0000 0x7dc3 0x0006 0x0000
_spritesLut_        EQU                     0x7ea2
_spritesLut_        DW                      0x7baf 0x7ca5 

; Code
_entryPoint_        InitRealTimeProc        
                    InitEqOp                
                    STW                     0xde
                    LDWI                    _page_0x0300
                    CALL                    giga_vAC
_page_0x0300        LDW                     0xde
                    InitNeOp                
                    InitLeOp                
                    STW                     0xde
                    LDWI                    _page_0x0400
                    CALL                    giga_vAC
_page_0x0400        LDW                     0xde
                    InitGeOp                
                    InitLtOp                
                    STW                     0xde
                    LDWI                    _page_0x0500
                    CALL                    giga_vAC
_page_0x0500        LDW                     0xde
                    InitGtOp                
                    STW                     0xde
                    LDWI                    _page_0x08a0
                    CALL                    giga_vAC
_page_0x08a0        LDW                     0xde
                    Initialise                                              ; INIT

                    LDI                     2
                    STW                     graphicsMode
                    ScanlineMode                                            ; mode 2

                    LDI                     0
                    ST                      162                             ; poke 162, &h00

                    LDI                     63
                    ST                      163                             ; poke 163, &h3F

                    LDWI                    clearVertBlinds
                    CALL                    giga_vAC                        ; cls

_loop               LDI                     0
                    STW                     _x                              ; for x=0 to 130

_next_0x025a        WaitVBlank                                              ; wait

                    LDI                     0
                    STW                     spriteId
                    LDW                     _x
                    ST                      spriteXY
                    LDI                     15
                    ADDI                    8
                    ST                      spriteXY + 1
                    LDWI                    drawSprite
                    CALL                    giga_vAC                        ; sprite 0, x, 15

                    LDI                     0
                    STW                     spriteId
                    LDW                     _x
                    STW                     0xde
                    LDWI                    _page_0x09a0
                    CALL                    giga_vAC
_page_0x09a0        LDW                     0xde
                    ST                      spriteXY
                    LDI                     65
                    ADDI                    8
                    ST                      spriteXY + 1
                    LDWI                    drawSprite
                    CALL                    giga_vAC                        ; sprite 0, x, 65

                    ForNextFarInc           _x _next_0x025a 130             ; next x

                    LDI                     129
                    STW                     _x                              ; for x=129 to 1

_next_0x0297        WaitVBlank                                              ; wait

                    LDI                     0
                    STW                     spriteId
                    LDW                     _x
                    ST                      spriteXY
                    LDI                     15
                    ADDI                    8
                    ST                      spriteXY + 1
                    LDWI                    drawSprite
                    CALL                    giga_vAC                        ; sprite 0, x, 15

                    LDI                     0
                    STW                     spriteId
                    LDW                     _x
                    ST                      spriteXY
                    LDI                     65
                    ADDI                    8
                    ST                      spriteXY + 1
                    LDWI                    drawSprite
                    CALL                    giga_vAC                        ; sprite 0, x, 65

                    STW                     0xde
                    LDWI                    _page_0x0aa0
                    CALL                    giga_vAC
_page_0x0aa0        LDW                     0xde
                    ForNextFarDec           _x _next_0x0297 1               ; next x

                    LDWI                    _loop
                    CALL                    giga_vAC                        ; goto loop

_end_0x02d7         BRA                     _end_0x02d7                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

realTimeProc        EQU     0x7eba
convertEqOp         EQU     0x7eb1
convertNeOp         EQU     0x7ea8
convertLeOp         EQU     0x7dba
convertGeOp         EQU     0x7db1
convertLtOp         EQU     0x7da8
convertGtOp         EQU     0x7cf6
scanlineMode        EQU     0x7cbf
waitVBlank          EQU     0x7caf
resetVideoTable     EQU     0x7ab7
initClearFuncs      EQU     0x7cd3
clearVertBlinds     EQU     0x7bc5
drawSprite          EQU     0x7ad6
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI/SPRITE etc routines
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4           ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_addr       EQU     register13
drawLine_tmp        EQU     register14
  
drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_addr       EQU     register15

    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


waitVBlank          LD      giga_frameCount
                    SUBW    frameCountPrev
                    BEQ     waitVBlank
                    LD      giga_frameCount
                    STW     frameCountPrev
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDWI    0x0002                              ; starting cursor position
                    STW     cursorXY
                    LDWI    0x7FFF
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
            
                    LD      fgbgColour
                    ST      giga_sysArg0
                    ST      giga_sysArg0 + 1
                    ST      giga_sysArg2
                    ST      giga_sysArg2 + 1                    ; 4 pixels of fg colour
    
                    LDWI    SYS_Draw4_30                        ; setup 4 pixel SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC

                    LDWI    giga_vram
                    STW     giga_sysArg4
                    LD      giga_sysArg4 + 1
                    ST      top
    
clearVB_loop        CALL    realTimeProcAddr
                    LD      top
                    ST      giga_sysArg4 + 1                    ; top line
                    SYS     30
    
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg4 + 1                    ; bottom line
                    SYS     30
    
                    LD      giga_sysArg4
                    ADDI    0x04
                    ST      giga_sysArg4
                    SUBI    giga_xres
                    BLT     clearVB_loop
    
                    LDI     0
                    ST      giga_sysArg4
                    INC     top                                 ; next top line
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loop
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
spriteId            EQU     register0
spriteXY            EQU     register1
spriteAddrs         EQU     register2

    
drawSprite          LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    LDWI    _spritesLut_
                    ADDW    spriteId
                    ADDW    spriteId
                    DEEK
                    STW     spriteAddrs                     ; get sprite address table
                    
drawSprite_loop     LDW     spriteAddrs
                    DEEK
                    BEQ     drawSprite_exit
                    STW     giga_sysArg0
                    INC     spriteAddrs
                    INC     spriteAddrs
                    LDW     spriteAddrs
                    DEEK
                    ADDW    spriteXY
                    SYS     64
                    INC     spriteAddrs
                    INC     spriteAddrs
                    BRA     drawSprite_loop
                    
drawSprite_exit     RET

