_startAddress_                EQU                               0x0200

; Internal variables
serialRawPrev                 EQU                               0x0081
register0                     EQU                               0x0082
register1                     EQU                               register0 + 0x02
register2                     EQU                               register0 + 0x04
register3                     EQU                               register0 + 0x06
register4                     EQU                               register0 + 0x08
register5                     EQU                               register0 + 0x0A
register6                     EQU                               register0 + 0x0C
register7                     EQU                               register0 + 0x0E
register8                     EQU                               register0 + 0x10
register9                     EQU                               register0 + 0x12
register10                    EQU                               register0 + 0x14
register11                    EQU                               register0 + 0x16
register12                    EQU                               register0 + 0x18
register13                    EQU                               register0 + 0x1A
register14                    EQU                               register0 + 0x1C
register15                    EQU                               register0 + 0x1E
fgbgColour                    EQU                               register0 + 0x20
cursorXY                      EQU                               register0 + 0x22
midiStream                    EQU                               register0 + 0x24
midiDelay                     EQU                               register0 + 0x26
miscFlags                     EQU                               register0 + 0x28
timerTick                     EQU                               register0 + 0x2A
timerPrev                     EQU                               register0 + 0x2C

; Internal Constants
ENABLE_SCROLL_BIT             EQU                               0x0001
ON_BOTTOM_ROW_BIT             EQU                               0x0002
ENABLE_SCROLL_MSK             EQU                               0xfffe
ON_BOTTOM_ROW_MSK             EQU                               0xfffd

; Internal buffers
textWorkArea                  EQU                               0x7fa0

; Includes
%includePath                  "../runtime"
%include                      gigatron.i
%include                      macros.i

; Labels
_entryPoint_                  EQU                               0x0200
_loop                         EQU                               0x08c7
_bullets0                     EQU                               0x0abc
_bullets1                     EQU                               0x0bb6
_page_0x0300                  EQU                               0x0300
_page_0x0400                  EQU                               0x0400
_page_0x0500                  EQU                               0x0500
_page_0x0600                  EQU                               0x0600
_page_0x08a0                  EQU                               0x08a0
_next_0x0267                  EQU                               0x08d3
_page_0x09a0                  EQU                               0x09a0
_next_0x02b7                  EQU                               0x09ca
_page_0x0aa0                  EQU                               0x0aa0
_else_0x0331                  EQU                               0x0ae3
_page_0x0ba0                  EQU                               0x0ba0
_else_0x0360                  EQU                               0x0bb4
_else_0x0392                  EQU                               0x0bde
_page_0x0ca0                  EQU                               0x0ca0
_else_0x03c0                  EQU                               0x0caf
_end_0x03c2                   EQU                               0x0cb1

; Variables
_x0                           EQU                               0x0030
_x1                           EQU                               0x0032
_x                            EQU                               0x0034

; Strings
_timeArray_                   EQU                               0x7da2
_timeArray_                   DB                                00 00 00
_timeString_                  EQU                               0x7ca2
_timeString_                  DB                                8 '00:00:00' 0

; Define Bytes

; Define Words

; Define Images

; Define Sprites
def_sprites_0x061b            EQU                               0x061b
def_sprites_0x061b            DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 16 37 0 0 0 0 37 16 0 0 0 0 16 37 0 21 0 0 16 16 0 21 21 0 16 16 0 0 21 21 0 16 0 0 32 52 52 52 0 32 52 52 52 48 0 0 16 58 58 63 0 0 37 37 63 63 0 0 16 58 58 63 0 0 37 37 63 63 0 0 16 37 37 63 0 0 16 2 23 2 0 0 0 16 2 2 0 0 0 0 16 16 0 0 0 0 0 0 0 0 0 0 0 16 0 0 0 0 0 16 0 0 0 0 0 16 0 0 0 0 16 37 0 0 0 0 16 16 0 0 0 0 16 58 0 0 0 16 2 2 0 0 0 16 16 2 0 0 0 16 37 58 0 0 0 37 37 58 0 0 16 16 58 37 0 0 16 37 37 58 0 0 37 16 58 37 0 16 32 36 52 58 0 16 37 16 36 52 0 16 16 23 3 2 0 0 23 3 2 2 0 0 0 0 0 0 218 
def_sprites_0x051b            EQU                               0x051b
def_sprites_0x051b            DB                                0 0 0 0 0 0 16 63 63 63 37 37 37 37 63 63 63 58 16 37 37 63 16 0 37 16 58 16 16 2 16 58 16 58 32 21 58 16 58 58 37 37 16 16 58 63 63 37 36 32 37 16 58 58 52 52 48 36 16 58 36 37 63 37 37 21 16 63 58 0 0 42 58 0 0 21 42 63 16 21 21 63 63 42 37 0 21 21 42 0 3 2 16 0 16 37 23 63 63 37 58 16 37 63 58 63 58 37 37 37 58 37 37 16 0 0 0 52 16 16 36 16 21 42 63 63 16 58 0 42 42 63 37 37 63 21 63 42 37 63 63 0 21 63 58 63 63 16 0 0 58 63 16 16 0 16 23 3 16 0 0 0 2 23 0 0 0 0 63 16 0 0 0 0 58 16 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 58 0 0 0 0 0 2 0 0 0 0 0 2 2 0 0 0 0 2 2 2 0 0 0 0 0 0 0 0 0 218 
def_sprites_0x0415            EQU                               0x0415
def_sprites_0x0415            DB                                0 0 0 0 0 0 0 0 0 0 0 0 58 0 0 0 0 0 0 58 0 0 0 0 2 16 0 0 0 0 0 36 0 0 0 0 63 63 0 0 21 0 16 16 0 21 21 0 16 0 21 21 0 0 52 52 52 36 21 21 21 21 63 63 63 42 21 42 21 63 42 63 63 63 42 21 21 21 21 63 63 42 16 37 37 16 2 2 58 37 58 63 58 37 16 16 58 58 63 16 0 0 37 58 58 37 0 0 37 32 16 0 0 0 16 16 16 0 0 0 63 16 36 16 0 0 42 21 37 37 0 0 42 63 63 16 16 0 21 63 63 58 16 0 37 37 63 58 58 16 16 37 37 63 63 2 0 16 37 37 2 3 0 0 16 23 2 37 0 0 0 16 37 37 0 0 0 37 37 63 0 0 0 16 58 58 0 0 0 37 37 58 0 0 0 16 58 37 0 0 0 36 32 52 0 0 0 16 58 32 0 0 0 37 37 23 0 0 0 16 23 3 0 0 0 0 0 0 218 
def_sprites_0x0315            EQU                               0x0315
def_sprites_0x0315            DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 21 0 21 21 21 42 42 42 21 63 21 63 42 42 37 16 37 42 42 37 37 63 37 21 0 37 63 58 58 0 0 52 37 58 16 0 0 16 36 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 2 0 0 0 0 0 16 0 0 0 0 0 37 16 0 0 0 0 63 37 0 0 0 0 63 16 0 0 0 0 58 58 16 0 0 0 63 63 37 0 0 0 37 63 16 0 0 0 52 3 2 0 0 0 3 2 2 2 0 0 2 2 2 2 2 0 0 0 0 0 0 0 218 
def_sprites_0x0215            EQU                               0x0215
def_sprites_0x0215            DB                                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 0 21 0 0 42 42 42 63 0 0 63 42 63 21 21 0 42 42 42 21 0 0 21 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 218 
def_sprites_0x7ef3            EQU                               0x7ef3
def_sprites_0x7ef3            DB                                0 0 2 3 7 7 0 0 2 3 7 7 254 
def_sprites_0x7ee6            EQU                               0x7ee6
def_sprites_0x7ee6            DB                                7 11 11 31 0 0 7 11 11 31 0 0 254 

; Define Fonts

; Lookup Tables
_spriteLut_0x7bdc             EQU                               0x7bdc
_spriteLut_0x7bdc             DW                                0x061b 0x0000 0x051b 0x0006 0x0415 0x000c 0x0315 0x0012 0x0215 0x0018 0x0000
_spriteLut_0x7bc6             EQU                               0x7bc6
_spriteLut_0x7bc6             DW                                0x061b 0x0018 0x051b 0x0012 0x0415 0x000c 0x0315 0x0006 0x0215 0x0000 0x0000
_spriteLut_0x7bb0             EQU                               0x7bb0
_spriteLut_0x7bb0             DW                                0x061b 0x2500 0x051b 0x2506 0x0415 0x250c 0x0315 0x2512 0x0215 0x2518 0x0000
_spriteLut_0x7aea             EQU                               0x7aea
_spriteLut_0x7aea             DW                                0x061b 0x2518 0x051b 0x2512 0x0415 0x250c 0x0315 0x2506 0x0215 0x2500 0x0000
_spriteLut_0x7ba6             EQU                               0x7ba6
_spriteLut_0x7ba6             DW                                0x7ef3 0x0000 0x7ee6 0x0006 0x0000
_spriteLut_0x7ae0             EQU                               0x7ae0
_spriteLut_0x7ae0             DW                                0x7ef3 0x0006 0x7ee6 0x0000 0x0000
_spritesLut_                  EQU                               0x7ad4
_spritesLut_                  DW                                0x7bdc 0x7bc6 0x7bb0 0x7aea 0x7ba6 0x7ae0 

; Code
_entryPoint_                  LDI                               0x28
                              STW                               romType
                              RomCheck                          
                              InitEqOp                          
                              STW                               0xe2
                              LDWI                              _page_0x0300
                              CALL                              giga_vAC
_page_0x0300                  LDW                               0xe2
                              InitNeOp                          
                              InitLeOp                          
                              STW                               0xe2
                              LDWI                              _page_0x0400
                              CALL                              giga_vAC
_page_0x0400                  LDW                               0xe2
                              InitGeOp                          
                              InitLtOp                          
                              STW                               0xe2
                              LDWI                              _page_0x0500
                              CALL                              giga_vAC
_page_0x0500                  LDW                               0xe2
                              InitGtOp                          
                              InitArray2d                       
                              InitArray3d                       
                              STW                               0xe2
                              LDWI                              _page_0x0600
                              CALL                              giga_vAC
_page_0x0600                  LDW                               0xe2
                              InitRealTimeAddr                  
                              STW                               0xe2
                              LDWI                              _page_0x08a0
                              CALL                              giga_vAC
_page_0x08a0                  LDW                               0xe2
                              Initialise                                                        ; INIT

                              LDI                               2
                              STW                               graphicsMode
                              ScanlineMode                                                      ; mode 2

                              LDWI                              16128
                              STW                               fgbgColour                      ; set FGBG_COLOUR, &h3F00

                              ClearVertBlinds                                                   ; cls

_loop                         LDI                               28
                              STW                               _x0                             ; x0 = 28

                              LDI                               120
                              STW                               _x1                             ; x1 = 120

                              LDI                               0
                              STW                               _x                              ; for x=0 to 130

_next_0x0267                  WaitVBlank                                                        ; wait

                              LDI                               0
                              STW                               spriteId
                              LDW                               _x
                              ST                                spriteXY
                              LDI                               15
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite noFlip, 0, x, 15

                              LDI                               1
                              STW                               spriteId
                              LDI                               130
                              SUBW                              _x
                              ST                                spriteXY
                              LDI                               65
                              STW                               0xe2
                              LDWI                              _page_0x09a0
                              CALL                              giga_vAC
_page_0x09a0                  LDW                               0xe2
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSpriteX                                                       ; sprite flipX, 1, 130-x, 65

                              LDWI                              _bullets0
                              CALL                              giga_vAC                        ; gosub bullets0

                              ForNextFarInc                     _x _next_0x0267 130             ; next x

                              LDI                               28
                              STW                               _x1                             ; x1 = 28

                              LDI                               120
                              STW                               _x0                             ; x0 = 120

                              LDI                               129
                              STW                               _x                              ; for x=129 downto 1

_next_0x02b7                  WaitVBlank                                                        ; wait

                              LDI                               1
                              STW                               spriteId
                              LDW                               _x
                              ST                                spriteXY
                              LDI                               15
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSpriteX                                                       ; sprite flipX, 1, x, 15

                              LDI                               0
                              STW                               spriteId
                              LDI                               130
                              SUBW                              _x
                              ST                                spriteXY
                              LDI                               65
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite noFlip, 0, 130-x, 65

                              STW                               0xe2
                              LDWI                              _page_0x0aa0
                              CALL                              giga_vAC
_page_0x0aa0                  LDW                               0xe2
                              LDWI                              _bullets1
                              CALL                              giga_vAC                        ; gosub bullets1

                              ForNextFarDec                     _x _next_0x02b7 1               ; next x

                              LDWI                              _loop
                              CALL                              giga_vAC                        ; goto loop

_bullets0                     PUSH                              
                              LDI                               5
                              STW                               spriteId
                              LDW                               _x0
                              ST                                spriteXY
                              LDI                               24
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSpriteX                                                       ; sprite flipX, 5, x0, 24

                              LDW                               _x0
                              ADDI                              2
                              STW                               _x0                             ; x0 = x0 + 2

                              LDW                               _x0
                              SUBI                              159
                              BLE                               _else_0x0331
                              LDW                               _x
                              ADDI                              28
                              STW                               _x0                             ; if x0 &&> 159 then x0 = x + 28

_else_0x0331                  LDI                               4
                              STW                               spriteId
                              LDW                               _x1
                              ST                                spriteXY
                              LDI                               74
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite noFlip, 4, x1, 74

                              LDW                               _x1
                              STW                               0xe2
                              LDWI                              _page_0x0ba0
                              CALL                              giga_vAC
_page_0x0ba0                  LDW                               0xe2
                              SUBI                              2
                              STW                               _x1                             ; x1 = x1 - 2

                              LDWI                              -12
                              SUBW                              _x1
                              BLT                               _else_0x0360
                              LDI                               120
                              SUBW                              _x
                              STW                               _x1                             ; if x1 &&< -12 then x1 = 120-x

_else_0x0360                  Return                                                            ; return

_bullets1                     PUSH                              
                              LDI                               4
                              STW                               spriteId
                              LDW                               _x0
                              ST                                spriteXY
                              LDI                               24
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSprite                                                        ; sprite noFlip, 4, x0, 24

                              LDW                               _x0
                              SUBI                              2
                              STW                               _x0                             ; x0 = x0 - 2

                              LDWI                              -12
                              SUBW                              _x0
                              BLT                               _else_0x0392
                              LDW                               _x
                              SUBI                              10
                              STW                               _x0                             ; if x0 &&< -12 then x0 = x - 10

_else_0x0392                  LDI                               5
                              STW                               spriteId
                              LDW                               _x1
                              ST                                spriteXY
                              LDI                               74
                              ADDI                              8
                              ST                                spriteXY + 1
                              DrawSpriteX                                                       ; sprite flipX, 5, x1, 74

                              LDW                               _x1
                              ADDI                              2
                              STW                               _x1                             ; x1 = x1 + 2

                              STW                               0xe2
                              LDWI                              _page_0x0ca0
                              CALL                              giga_vAC
_page_0x0ca0                  LDW                               0xe2
                              LDW                               _x1
                              SUBI                              159
                              BLE                               _else_0x03c0
                              LDI                               158
                              SUBW                              _x
                              STW                               _x1                             ; if x1 &&> 159 then x1 = 158-x

_else_0x03c0                  Return                                                            ; return

_end_0x03c2                   BRA                               _end_0x03c2                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                      EQU     0x7ecf
convertEqOp                   EQU     0x7ec6
convertNeOp                   EQU     0x7ebd
convertLeOp                   EQU     0x7eb4
convertGeOp                   EQU     0x7eab
convertLtOp                   EQU     0x7ea2
convertGtOp                   EQU     0x7df6
convertArr2d                  EQU     0x7dea
convertArr3d                  EQU     0x7dd9
realTimeStub                  EQU     0x7dc7
scanlineMode                  EQU     0x7da5
waitVBlank                    EQU     0x7cb9
resetVideoTable               EQU     0x7ab5
initClearFuncs                EQU     0x7daf
clearVertBlinds               EQU     0x7cc5
draw_sprite                   EQU     0x79d7
drawSprite                    EQU     0x7cac
drawSpriteX                   EQU     0x7bf2
convertEqOpAddr               EQU     0x00d0
convertNeOpAddr               EQU     0x00d2
convertLeOpAddr               EQU     0x00d4
convertGeOpAddr               EQU     0x00d6
convertLtOpAddr               EQU     0x00d8
convertGtOpAddr               EQU     0x00da
convertArr2dAddr              EQU     0x00dc
convertArr3dAddr              EQU     0x00de
realTimeStubAddr              EQU     0x00e0


; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


memIndex0           EQU     register0
memIndex1           EQU     register1
memIndex2           EQU     register2
memValue            EQU     register8
memAddr             EQU     register9


convertArr2d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    STW     memAddr
                    RET


convertArr3d        ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    ADDW    memIndex1
                    DEEK
                    ADDW    memIndex2
                    ADDW    memIndex2
                    STW     memAddr
                    RET


                    ; runs real time, (time sliced), code at regular intervals
                    ; self modifying code allows for timer, midi and user procs
realTimeStub        RET                                     ; RET gets replaced by PUSH
                    LDWI    0x0000                          ; 0x0000 gets replaced by realTimeProc0 address
                    CALL    giga_vAC
realTimeStub1       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc1 address
                    CALL    giga_vAC
realTimeStub2       POP
                    RET
                    RET                                     ; POP + 2xRET gets replaced by LDWI realTimeProc2 address
                    CALL    giga_vAC
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing if you use realTimeStub
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_addr       EQU     register15

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


waitVBlank          LD      giga_videoY
                    XORI    179
                    BNE     waitVBlank
                    PUSH
                    CALL    realTimeStubAddr
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeStub
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeStubAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDI     giga_CursorX                        ; cursor x start
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
    
                    LDWI    SYS_SetMemory_v2_54                 ; setup fill memory SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LD      fgbgColour
                    ST      giga_sysArg1                        ; fill value
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LD      top
                    ST      giga_sysArg3                        ; top line
                    SYS     54                                  ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        ; bottom line
                    SYS     54                                  ; fill memory
                    INC     top                                 ; next top line
                    
                    CALL    realTimeStubAddr
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing if you use realTimeStub
spriteId            EQU     register0
spriteXY            EQU     register1
spriteAddrs         EQU     register2

    
draw_sprite         PUSH
                    LDWI    _spritesLut_
                    ADDW    spriteId
                    ADDW    spriteId
                    DEEK
                    STW     spriteAddrs                     ; get sprite address table
                    
draw_s_loop         LDW     spriteAddrs
                    DEEK                                    ; get source address
                    BEQ     draw_s_exit
                    STW     giga_sysArg0
                    INC     spriteAddrs
                    INC     spriteAddrs
                    LDW     spriteAddrs
                    DEEK                                    ; get stripe destination offset
                    ADDW    spriteXY
                    SYS     64
                    INC     spriteAddrs
                    INC     spriteAddrs
                    CALL    realTimeStubAddr
                    BRA     draw_s_loop
                    
draw_s_exit         POP
                    RET


drawSprite          PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    LDWI    draw_sprite
                    CALL    giga_vAC
                    POP
                    RET


drawSpriteX         PUSH
                    LDWI    SYS_Sprite6x_v3_64
                    STW     giga_sysFn
                    LDWI    draw_sprite
                    CALL    giga_vAC
                    POP
                    RET

