_startAddress_      EQU                     0x0200

; Internal variables
serialRawPrev       EQU                     0x0081
register0           EQU                     0x0082
register1           EQU                     register0 + 0x02
register2           EQU                     register0 + 0x04
register3           EQU                     register0 + 0x06
register4           EQU                     register0 + 0x08
register5           EQU                     register0 + 0x0A
register6           EQU                     register0 + 0x0C
register7           EQU                     register0 + 0x0E
register8           EQU                     register0 + 0x10
register9           EQU                     register0 + 0x12
register10          EQU                     register0 + 0x14
register11          EQU                     register0 + 0x16
register12          EQU                     register0 + 0x18
register13          EQU                     register0 + 0x1A
register14          EQU                     register0 + 0x1C
register15          EQU                     register0 + 0x1E
fgbgColour          EQU                     register0 + 0x20
cursorXY            EQU                     register0 + 0x22
midiStream          EQU                     register0 + 0x24
midiDelay           EQU                     register0 + 0x26
miscFlags           EQU                     register0 + 0x28
fontLutId           EQU                     0x00e0

; Internal Constants
ENABLE_SCROLL_BIT   EQU                     0x0001
ON_BOTTOM_ROW_BIT   EQU                     0x0002
ENABLE_SCROLL_MSK   EQU                     0xfffe
ON_BOTTOM_ROW_MSK   EQU                     0xfffd

; Internal buffers
textWorkArea        EQU                     0x7fa0

; Includes
%includePath        "../runtime"
%include            gigatron.i
%include            macros.i

; Labels
_entryPoint_        EQU                     0x0200
_loop               EQU                     0x0250
_end_0x02a9         EQU                     0x0287
_end_0x02ab         EQU                     0x0289

; Variables

; Strings

; Define Bytes

; Define Words

; Define Images

; Define Sprites

; Define Fonts

; Lookup Tables

; Code
_entryPoint_        LDI                     0x28
                    STW                     romType
                    RomCheck                
                    InitRealTimeProc        
                    InitEqOp                
                    InitNeOp                
                    InitLeOp                
                    InitGeOp                
                    InitLtOp                
                    InitGtOp                
                    Initialise                                              ; INIT

                    ClearVertBlinds         
                    LDI                     2
                    STW                     graphicsMode
                    ScanlineMode                                            ; cls : mode 2

_loop               Rand                    
                    ANDI                    63
                    ST                      fgbgColour + 1                  ; set FGCOLOUR, rnd(0) AND &h3F

                    LDI                     0x64
                    RandMod                 
                    ADDI                    30
                    STW                     drawCircle_cx
                    LDI                     0x3c
                    RandMod                 
                    ADDI                    38
                    STW                     drawCircle_cy
                    LDI                     0x1e
                    RandMod                 
                    ADDI                    1
                    STW                     drawCircle_r
                    DrawCircle                                              ; circle rnd(100) + (- 50 + 80), rnd(60) + (- 30 + 60), rnd(30) + 1

                    BRA                     _loop                           ; goto &loop

_end_0x02a9         BRA                     _end_0x02a9                     ; end

_end_0x02ab         BRA                     _end_0x02ab                     ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck            EQU     0x7ee8
realTimeProc        EQU     0x7edf
convertEqOp         EQU     0x7ed6
convertNeOp         EQU     0x7ecd
convertLeOp         EQU     0x7ec4
convertGeOp         EQU     0x7ebb
convertLtOp         EQU     0x7eb2
convertGtOp         EQU     0x7ea9
divide16bit         EQU     0x7aa8
rand16bit           EQU     0x7ea1
randMod16bit        EQU     0x7cd8
scanlineMode        EQU     0x7ceb
resetVideoTable     EQU     0x7cb9
initClearFuncs      EQU     0x7de7
clearVertBlinds     EQU     0x7dad
drawCircle          EQU     0x7bb5
drawCircleExt1      EQU     0x79b1
drawCircleExt2      EQU     0x78cd
realTimeProcAddr    EQU     0x00dc
convertEqOpAddr     EQU     0x00d0
convertNeOpAddr     EQU     0x00d2
convertLeOpAddr     EQU     0x00d4
convertGeOpAddr     EQU     0x00d6
convertLtOpAddr     EQU     0x00d8
convertGtOpAddr     EQU     0x00da


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romType             EQU     register0
romErrAddr          EQU     register1
romErrPixel         EQU     register2


romCheck            LD      giga_romType
                    ANDI    0xFC
                    SUBW    romType
                    BGE     romC_return
                    LDWI    giga_vram
                    STW     romErrAddr
                    
romC_loop           LD      romErrPixel
                    POKE    romErrAddr
                    INC     romErrPixel
                    BRA     romC_loop                       ; flash left hand corner pixel indicating rom error
                    
romC_return         RET                    


                    ; runs real time, (time sliced), code at regular intervals
realTimeProc        PUSH
                    LDWI    realTimeStub                    ; realTimeStub gets replaced by MIDI routine
                    CALL    giga_vAC
                    POP
                    RET
                    
realTimeStub        RET


                    ; convert equal to into a boolean
convertEqOp         BEQ     convertEq_1
                    LDI     0
                    RET
convertEq_1         LDI     1
                    RET


                    ; convert not equal to into a boolean
convertNeOp         BNE     convertNe_1
                    LDI     0
                    RET
convertNe_1         LDI     1
                    RET


                    ; convert less than or equal to into a boolean
convertLeOp         BLE     convertLe_1
                    LDI     0
                    RET
convertLe_1         LDI     1
                    RET


                    ; convert greater than or equal to into a boolean
convertGeOp         BGE     convertGe_1
                    LDI     0
                    RET
convertGe_1         LDI     1
                    RET


                    ; convert less than into a boolean
convertLtOp         BLT     convertLt_1
                    LDI     0
                    RET
convertLt_1         LDI     1
                    RET


                    ; convert greater than into boolean
convertGtOp         BGT     convertGt_1
                    LDI     0
                    RET
convertGt_1         LDI     1
                    RET


; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
mathX               EQU     register8
mathY               EQU     register9
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


rand16bit           LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    RET



                    ; accumulator:mathRem = mathX / mathY, (results 16bit)
divide16bit         LDW     mathX
                    XORW    mathY
                    STW     mathSign
                    LDW     mathX
                    BGE     divide16_pos0
                    LDI     0
                    SUBW    mathX
                    STW     mathX
                    
divide16_pos0       LDW     mathY                     
                    BGE     divide16_pos1
                    LDI     0
                    SUBW    mathY
                    STW     mathY
                    
divide16_pos1       LDI     0
                    STW     mathRem
                    LDI     1
    
divide16_loop       STW     mathMask
                    LDW     mathRem
                    LSLW
                    STW     mathRem
                    LDW     mathX
                    BGE     divide16_incr
                    INC     mathRem
                    
divide16_incr       LDW     mathX
                    LSLW
                    STW     mathX
                    LDW     mathRem
                    SUBW    mathY
                    BLT     divide16_incx
                    STW     mathRem
                    INC     mathX
                    
divide16_incx       LDW     mathMask
                    LSLW
                    BNE     divide16_loop
                    PUSH
                    CALL    realTimeProcAddr
                    POP
                    LDW     mathSign
                    BGE     divide16_exit
                    LDI     0
                    SUBW    mathX
                    RET
                    
divide16_exit       LDW     mathX
                    RET


randMod16bit        PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    STW     mathX
                    LDWI    divide16bit
                    CALL    giga_vAC
                    LDW     mathRem
                    POP                    
                    RET


; do *NOT* use register4 to register7 during time slicing if you use realTimeProc
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2
drawHLine_x4        EQU     register3

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2
drawVLine_y8        EQU     register3

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register4                       ; register4 to register7 used for temp values, state will be invalidated during time slicing
drawLine_dy1        EQU     register5
drawLine_dx2        EQU     register6
drawLine_dy2        EQU     register7
drawLine_sx         EQU     register8
drawLine_sy         EQU     register9
drawLine_h          EQU     register10
drawLine_num        EQU     register11
drawLine_count      EQU     register12
drawLine_tmp        EQU     register13

drawPixel_xy        EQU     register15
readPixel_xy        EQU     register15

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register15

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register7

drawPoly_addr       EQU     register15

    
scanlineMode        LDW     giga_romType
                    ANDI    0xF8
                    SUBI    romTypeValue_ROMv2
                    BGE     scanlineM_cont
                    RET
    
scanlineM_cont      LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



; do *NOT* use register4 to register7 during time slicing if you call realTimeProc
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
    
    
                    ; resets video table pointers
resetVideoTable     PUSH
                    LDI     8
                    STW     vramAddr
                    LDWI    giga_videoTable
                    STW     evenAddr
    
resetVT_loop        CALL    realTimeProcAddr
                    LDW     vramAddr
                    DOKE    evenAddr
                    INC     evenAddr
                    INC     evenAddr
                    INC     vramAddr
                    LD      vramAddr
                    SUBI    giga_yres + 8
                    BLT     resetVT_loop
                    POP
                    RET


initClearFuncs      PUSH
                    LDWI    resetVideoTable
                    CALL    giga_vAC
    
                    LDI     0x02                                ; starting cursor position
                    STW     cursorXY
                    LDWI    ON_BOTTOM_ROW_MSK
                    ANDW    miscFlags
                    STW     miscFlags                           ; reset on bottom row flag
    
                    LDWI    SYS_SetMemory_v2_54                 ; setup fill memory SYS routine
                    STW     giga_sysFn
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    LDWI    initClearFuncs
                    CALL    giga_vAC
                    LD      fgbgColour
                    ST      giga_sysArg1                        ; fill value
                    LDI     giga_vram >> 8
                    STW     top  
                    
clearVB_loopy       LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LD      top
                    ST      giga_sysArg3                        ; top line
                    SYS     54                                  ; fill memory
    
                    LDI     giga_xres
                    ST      giga_sysArg0
                    LDI     0
                    ST      giga_sysArg2                        ; low start address
                    LDWI    giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        ; bottom line
                    SYS     54                                  ; fill memory
                    INC     top                                 ; next top line
                    
                    CALL    realTimeProcAddr
                    LD      top
                    SUBI    giga_yres / 2 + 8
                    BLT     clearVB_loopy
                    POP
                    RET



drawCircle          PUSH
                    LDI     0
                    STW     drawCircle_ch0
                    STW     drawCircle_ch1
                    STW     drawCircle_ch2
                    STW     drawCircle_ch3
                    STW     drawCircle_x
                    LDW     drawCircle_r
                    STW     drawCircle_y
                    LDI     1
                    SUBW    drawCircle_r
                    STW     drawCircle_d
                    
drawC_loop          LDWI    drawCircleExt1
                    CALL    giga_vAC
                    
                    LDW     drawCircle_d
                    BGE     drawC_skip
                    LDW     drawCircle_x
                    LSLW
                    LSLW
                    ADDW    drawCircle_d
                    ADDI    3
                    STW     drawCircle_d
                    BRA     drawC_cont
                    
drawC_skip          LDW     drawCircle_x
                    SUBW    drawCircle_y
                    LSLW
                    LSLW
                    ADDW    drawCircle_d
                    ADDI    5
                    STW     drawCircle_d
                    LDW     drawCircle_y
                    SUBI    1
                    STW     drawCircle_y

drawC_cont          INC     drawCircle_x
                    LDW     drawCircle_x
                    SUBW    drawCircle_y
                    BLE     drawC_loop

                    POP
                    RET



drawCircleExt1      PUSH
                    LDW     drawCircle_cy
                    ADDW    drawCircle_y
                    ST      drawCircle_ch0 + 1
                    LDW     drawCircle_cy
                    SUBW    drawCircle_y
                    ST      drawCircle_ch1 + 1
                    LDW     drawCircle_cy
                    ADDW    drawCircle_x
                    ST      drawCircle_ch2 + 1
                    LDW     drawCircle_cy
                    SUBW    drawCircle_x
                    ST      drawCircle_ch3 + 1

                    LDW     drawCircle_cx
                    ADDW    drawCircle_x
                    ADDW    drawCircle_ch0
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a

                    LDW     drawCircle_cx
                    SUBW    drawCircle_x
                    ADDW    drawCircle_ch0
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a
                    
                    LDW     drawCircle_cx
                    ADDW    drawCircle_x
                    ADDW    drawCircle_ch1
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a

                    LDW     drawCircle_cx
                    SUBW    drawCircle_x
                    ADDW    drawCircle_ch1
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a
                    
                    LDWI    drawCircleExt2
                    CALL    giga_vAC                        ;doesn't return to here


drawCircleExt2      LDW     drawCircle_cx
                    ADDW    drawCircle_y
                    ADDW    drawCircle_ch2
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a

                    LDW     drawCircle_cx
                    SUBW    drawCircle_y
                    ADDW    drawCircle_ch2
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a
                    
                    LDW     drawCircle_cx
                    ADDW    drawCircle_y
                    ADDW    drawCircle_ch3
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a

                    LDW     drawCircle_cx
                    SUBW    drawCircle_y
                    ADDW    drawCircle_ch3
                    STW     drawCircle_a
                    LD      fgbgColour + 1
                    POKE    drawCircle_a
                    
                    POP
                    RET

