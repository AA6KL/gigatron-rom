%include macros/gigatron.i

; ===========================================
; BREAKOUT
; ===========================================

vars            EQU     0x30
scratch         EQU     vars + 0x00
x0              EQU     vars + 0x02
y0              EQU     vars + 0x03
xy0             EQU     x0
x1              EQU     vars + 0x04
y1              EQU     vars + 0x05
xy1             EQU     x1

padx            EQU     vars + 0x06
speedpad        EQU     vars + 0x08

ballx           EQU     vars + 0x0A
bally           EQU     vars + 0x0C
speedx          EQU     vars + 0x0E
speedy          EQU     vars + 0x10
nextballx       EQU     vars + 0x12
nextbally       EQU     vars + 0x14

; subroutines args
printT_tt       EQU     vars + 0x20
printT_ii       EQU     vars + 0x21
printT_Chr      EQU     vars + 0x22
textStr         EQU     vars + 0x24
textPos         EQU     vars + 0x26

DrawBrick_xy    EQU     vars + 0x20
DrawBrick_col   EQU     vars + 0x22
DrawBricks_i    EQU     vars + 0x24
DrawBricks_j    EQU     vars + 0x26

BreakBrick_xy   EQU     vars + 0x28
BreakBrick_i    EQU     vars + 0x24
BreakBrick_j    EQU     vars + 0x26

vblank_frameCountPrev  EQU     vars + 0x2A

; 16-bit constants in RAM  (no wordimmediate opcodes)
maxspeedpad     EQU     vars + 0x30
maxpadx         EQU     vars + 0x32             ;127
minpadx         EQU     vars + 0x34             ;34
cst_FFFF        EQU     vars + 0x36

; constants
col_black       EQU     0x00
col_white       EQU     0x3F
col_blue        EQU     0x30

buttonRight     EQU     1
buttonLeft      EQU     2
buttonDown      EQU     4
buttonUp        EQU     8
buttonStart     EQU     16
buttonSelect    EQU     32
buttonB         EQU     64
buttonA         EQU     128


entry_point     EQU     0x0200
subroutines0    EQU     0x0300
subroutines1    EQU     0x0400
subroutines2    EQU     0x0500
subroutines3    EQU     0x0600
; 0x700 --> reserved (sound)
; 5 last bytes of 0x200 x300 x400 --> reserved (sound)

data            EQU     0x10c0                  ; next to vram
string_lives    EQU     data + 0x00
string_score    EQU     data + 0x0B
string_gameover EQU     data + 0x10
string_lives    DB      10 '3         '
string_score    DB      3  '000'
string_gameover DB      10 'Game Over!'

; 14x8 bricks grid
bricksx         EQU     data + 0x0100
bricksy         EQU     data + 0x0110
brickscol       EQU     data + 0x0120
bricksx         DB      32 39 46 53 60 67 74 81 88 95 102 109 116 123
bricksy         DW      0x2000 0x2300 0x2600 0x2900 0x2C00 0x2F00 0x3200 0x3500
brickscol       DB      0x03 0x03 0x0B 0x0B 0x0C 0x0C 0x0F 0x0F

############################################################################################################
################################## PAGE BREAK ##############################################################
############################################################################################################
entry_point     CALL    Init

restart         CALL    ClearBottom
                CALL    ResetScore
                CALL    DrawBricks
                CALL    DrawScore
                LDWI    80*256
                STW     padx
                LDI     0
                STW     speedpad
                CALL    InitBall
                CALL    DrawBall


mainloop        CALL    WaitVBlank

; -- move pad --
                LD      giga_buttonState
                XORI    $FF                     ; NOT
                ANDI    buttonRight + buttonLeft
                BEQ     noinput
                LDW     speedpad
                BNE     skipinit
                LDI     240                     ; initial speed as soon a button pressed
skipinit        ADDI    16                      ; 256/16==16 frames to reach fullspeed
                STW     speedpad
                SUBW    maxspeedpad
                BLE     dobuttons
                LDW     maxspeedpad
                STW     speedpad
dobuttons       LD      giga_buttonState
                ANDI    buttonRight
                BNE     rightdone
                LDW     padx
                ADDW    speedpad
                STW     padx
                SUBW    maxpadx
                BLE     rightdone
                LDW     maxpadx
                STW     padx
rightdone       LD      giga_buttonState
                ANDI    buttonLeft
                BNE     inputdone
                LDW     padx
                SUBW    speedpad
                STW     padx
                SUBW    minpadx
                BGE     inputdone
                LDW     minpadx
                STW     padx
                BRA     inputdone
noinput         LDI     0
                STW     speedpad
inputdone       CALL    DrawBall                ; Erase cur ball
                CALL    DrawPad

; -- update ball --
                LDW     ballx
                ADDW    speedx
                STW     nextballx
                LD      nextballx+1
                ST      BreakBrick_xy
                LD      bally+1
                ST      BreakBrick_xy+1
                LDW     BreakBrick_xy
                PEEK
                BEQ     xbounceskip
                ANDI    0x30                    ; bricks are not blue..
                BNE     notbrickx
                CALL    BreakBrick
notbrickx       LDI     0
                SUBW    speedx
                STW     speedx
                LDW     ballx
                STW     nextballx
xbounceskip     LDW     bally
                ADDW    speedy
                STW     nextbally
                LD      nextballx+1
                ST      BreakBrick_xy
                LD      nextbally+1
                ST      BreakBrick_xy+1
                LDW     BreakBrick_xy
                PEEK
                BEQ     ybounceskip
                ANDI    0x30                    ; bricks are not blue..
                BNE     notbricky
                CALL    BreakBrick
notbricky       LD      nextbally+1
                SUBI    0x08+100
                BLT     notpadbounce
                CALL    BouncePad
notpadbounce    LDI     0
                SUBW    speedy
                STW     speedy
                LDW     bally
                STW     nextbally
ybounceskip     LDW     nextballx
                STW     ballx
                LDW     nextbally
                STW     bally
                CALL    DrawBall

                LD      bally+1
                SUBI    0x08+114
                BLT     mainloop

; ball dropped..
                CALL    WaitVBlank
;               CALL    WaitVBlank
;               CALL    WaitVBlank
                CALL    WaitVBlank
                CALL    DecrementLives
                BLE     gameover
                CALL    InitBall
                CALL    DrawBall
                CALL    ClearBottom
                CALL    DrawPad
                CALL    WaitVBlank
                CALL    WaitVBlank
                BRA     mainloop

gameover        LDWI    string_gameover
                STW     textStr
                LDWI    0x0800+0x0300+ 34
                STW     textPos
                CALL    PrintText

wait            CALL    WaitVBlank
                LD      giga_buttonState
                ANDI    buttonA
                BNE     wait

                BRA     restart

############################################################################################################
################################## PAGE BREAK ##############################################################
############################################################################################################
subroutines0    RET

; ===== DrawBricks ============================================================================
DrawOneBrick    LD      DrawBrick_col
                POKE    DrawBrick_xy
                INC     DrawBrick_xy
                POKE    DrawBrick_xy
                INC     DrawBrick_xy
                POKE    DrawBrick_xy
                INC     DrawBrick_xy
                POKE    DrawBrick_xy
                INC     DrawBrick_xy
                POKE    DrawBrick_xy
                INC     DrawBrick_xy
                POKE    DrawBrick_xy
                INC     DrawBrick_xy
;               ANDI    $15                     ; darken color
;               POKE    DrawBrick_xy            ; fill in borders so that the ball doesn't squeeze in between bricks
                LDWI    0x0100-6                ; next line
                ADDW    DrawBrick_xy
                STW     DrawBrick_xy
                LD      DrawBrick_col
                POKE    DrawBrick_xy
                INC     DrawBrick_xy
                POKE    DrawBrick_xy
                INC     DrawBrick_xy
                POKE    DrawBrick_xy
                INC     DrawBrick_xy
                POKE    DrawBrick_xy
                INC     DrawBrick_xy
                POKE    DrawBrick_xy
                INC     DrawBrick_xy
                POKE    DrawBrick_xy
                INC     DrawBrick_xy
;               ANDI    $15                     ; darken color
;               POKE    DrawBrick_xy            ; fill in borders so that the ball doesn't squeeze in between bricks
                RET

DrawBricks      PUSH
                LDI     7
                STW     DrawBricks_j
DrawBricks_loopj LDI    13
                STW     DrawBricks_i
DrawBricks_loopi LDWI   bricksy
                ADDW    DrawBricks_j
                ADDW    DrawBricks_j
                DEEK
                STW     DrawBrick_xy
                LDWI    bricksx
                ADDW    DrawBricks_i
                PEEK
                ADDW    DrawBrick_xy
                STW     DrawBrick_xy
                LDWI    brickscol
                ADDW    DrawBricks_j
                PEEK
                ST      DrawBrick_col
                CALL    DrawOneBrick
                LD      DrawBricks_i
                SUBI    1
                ST      DrawBricks_i
                BGE     DrawBricks_loopi
                LD      DrawBricks_j
                SUBI    1
                ST      DrawBricks_j
                BGE     DrawBricks_loopj
                POP
                RET


; ===== DrawPad =============================================================================
DrawPad         LDI     0x08+110
                ST      y0
                ADDI    1
                ST      y1
                LD      padx+1
                SUBI    2+4
                ST      x0
                ST      x1
                LDI     col_black
                POKE    xy0
                POKE    xy1
                INC     x0
                INC     x1
                POKE    xy0
                POKE    xy1
                INC     x0
                INC     x1
                LDI     col_blue
                POKE    xy0
                POKE    xy1
                INC     x0
                INC     x1
                POKE    xy0
                POKE    xy1
                INC     x0
                INC     x1
                POKE    xy0
                POKE    xy1
                INC     x0
                INC     x1
                POKE    xy0
                POKE    xy1
                INC     x0
                INC     x1
                POKE    xy0
                POKE    xy1
                INC     x0
                INC     x1
                POKE    xy0
                POKE    xy1
                INC     x0
                INC     x1
                POKE    xy0
                POKE    xy1
                INC     x0
                INC     x1
                POKE    xy0
                POKE    xy1
                INC     x0
                INC     x1
                LDI     col_black
                POKE    xy0
                POKE    xy1
                INC     x0
                INC     x1
                POKE    xy0
                POKE    xy1
                RET


############################################################################################################
################################## PAGE BREAK ##############################################################
############################################################################################################
subroutines1    RET


; Find the brick containing the position BreakBrick_xy, clears it, and increment score
BreakBrick      PUSH
                LD      BreakBrick_xy
                STW     scratch
                LDI     13
                STW     BreakBrick_i
BreakBrick_loopi LDWI   bricksx
                ADDW    BreakBrick_i
                PEEK
                SUBW    scratch
                BGT     BreakBrick_nexti
                ADDI    6
                BLE     BreakBrick_nexti

                ;gprintf("BreakBrick_i = %04x", *BreakBrick_i)

                LDI     7
                STW     BreakBrick_j
BreakBrick_loopj LDWI   bricksy
                ADDW    BreakBrick_j
                ADDW    BreakBrick_j
                DEEK
                STW     DrawBrick_xy
                ;gprintf("DrawBrick_xy = %04x", *DrawBrick_xy)
                SUBW    BreakBrick_xy
                BGT     BreakBrick_nextj
                ADDI    $FF	; +0x200
                ADDI    $FF
                ADDI    2
                BLE     BreakBrick_nextj

                ;gprintf("BreakBrick_j = %04x", *BreakBrick_j)

; good pos
                LDWI    bricksx
                ADDW    BreakBrick_i
                PEEK
                ADDW    DrawBrick_xy
                STW     DrawBrick_xy
                LDI     col_black
                ST      DrawBrick_col
                CALL    DrawOneBrick
                CALL    IncrementScore
                POP
                RET

BreakBrick_nextj LD     BreakBrick_j
                SUBI    1
                ST      BreakBrick_j
                BGE     BreakBrick_loopj
                POP
                RET

BreakBrick_nexti LD     BreakBrick_i
                SUBI    1
                ST      BreakBrick_i
                BGE     BreakBrick_loopi
                POP
                RET


; ===== ClearBottom =============================================================================
ClearBottom     LDI     30
                ST      x0
ClearBottom_loopx LDI   0x08+110
                ST      y0
                LDI     col_black
                DOKE    xy0
                INC     y0
                DOKE    xy0
                INC     y0
                DOKE    xy0
                INC     y0
                DOKE    xy0
                INC     y0
                DOKE    xy0
                INC     y0
                DOKE    xy0
                INC     y0
                DOKE    xy0
                INC     y0
                DOKE    xy0
                INC     y0
                DOKE    xy0
                INC     y0
                DOKE    xy0
                LD      x0
                ADDI    2
                ST      x0
                SUBI    132
                BNE     ClearBottom_loopx
                RET

; ===== Init =============================================================================
Init            PUSH
                CALL    DrawBoard
                LDWI    2*256
                STW     maxspeedpad
                LDWI    127*256
                STW     maxpadx
                LDWI    34*256
                STW     minpadx
                LDWI    $FFFF
                STW     cst_FFFF
                POP
                RET

InitBall        LDWI    80*256
                STW     ballx
                LDWI    (0x08+50)*256
                STW     bally
                LDI     150
                STW     speedy
                LDWI    SYS_Random_34           ; Get random number and update entropy
                STW     giga_sysFn
                SYS     0xFD                    ; 270 - 34/2 = 0xFD
                ST      speedx
                BGT     InitBall_positive
                LDI     $FF
                ST      speedx+1
                RET
InitBall_positive LDI   0
                ST      speedx+1
                RET

############################################################################################################
################################## PAGE BREAK ##############################################################
############################################################################################################
subroutines2    RET

DrawBall        LD      ballx+1
                ST      scratch
                LD      bally+1
                ST      scratch+1
                LDW     scratch
                DEEK
                XORW    cst_FFFF
                DOKE    scratch
                INC     scratch+1
                LDW     scratch
                DEEK
                XORW    cst_FFFF
                DOKE    scratch
                RET

; ===== DrawBoard =============================================================================
DrawBoard       LDI     0x07
                ST      y0
DrawBoard_nextline INC  y0
                LD      y0
                ST      y1
                SUBI    0x08+120
                BEQ     DrawBoard_done
                LD      0x80
                ST      x0

                LD      y0
                SUBI    0x08+0
                ANDI    0xFE                    ;lines 0 + 1
                BEQ     DrawBoard_whitemid
                LD      y0
                SUBI    0x08+16
                ANDI    0xFE                    ;lines 16+17
                BEQ     DrawBoard_whitemid
DrawBoard_blackmid LDI  col_black
                ST      scratch
                BRA     DrawBoard_center
DrawBoard_whitemid LDI  col_white
                ST      scratch
                BRA     DrawBoard_center

DrawBoard_center LDI    160
                SUBW    x0
                ST      x1
                LD      scratch                 ; center color (white on separator lines and black otherwise)
                POKE    xy0
                POKE    xy1
                INC     x0
                LD      x0
                SUBI    80+49
                BNE     DrawBoard_center
DrawBoard_edge  LDI     160
                SUBW    x0
                ST      x1
                LDI     col_white
                POKE    xy0
                POKE    xy1
                INC     x0
                LDI     160
                SUBW    x0
                ST      x1
                LDI     col_white
                POKE    xy0
                POKE    xy1
                INC     x0
DrawBoard_border LDI    160
                SUBW    x0
                ST      x1
                LDI     col_black
                POKE    xy0
                POKE    xy1
                INC     x0
                LD      x0
                SUBI    161
                BNE     DrawBoard_border
                BRA     DrawBoard_nextline
DrawBoard_done  RET


; ===== BouncePad =============================================================================
BouncePad       LDW     speedy
                ADDI    16                      ; speed ball up slightly
                STW     speedy
                RET

############################################################################################################
################################## PAGE BREAK ##############################################################
############################################################################################################
subroutines3    RET

; ===== WaitVBlank =============================================================================
WaitVBlank      LD      giga_frameCount
                SUBW    vblank_frameCountPrev
                BEQ     WaitVBlank
                LD      giga_frameCount
                STW     vblank_frameCountPrev
                RET


; ===== DrawScore =============================================================================
DrawScore       PUSH
                LDWI    string_lives
                STW     textStr
                LDWI    0x0800+0x0300+ 34
                STW     textPos
                CALL    PrintText

                LDWI    string_score
                STW     textStr
                LDWI    0x0800+0x0800 + 100
                STW     textPos
                CALL    PrintText
                POP
                RET

; ===== ResetScore =============================================================================
ResetScore      LDWI    string_lives+1
                STW     scratch
                LDI     48+3	; 48 = '0'
                POKE    scratch
                LDWI    string_score+1
                STW     scratch
                LDI     48+0	; 48 = '0'
                POKE    scratch
                INC     scratch
                POKE    scratch
                INC     scratch
                POKE    scratch
                INC     scratch
                RET

; ===== IncrementScore and draw ================================================================
IncrementScore	LDWI    string_score+3
                STW     scratch
                PEEK
                ADDI    1
                POKE    scratch
                SUBI    48+9                    ; '9'
                BLE     DrawScore
                LDI     48+0                    ; '0'
                POKE    scratch
                LDWI    string_score+2
                STW     scratch
                PEEK
                ADDI    1
                POKE    scratch
                SUBI    48+9                    ;   '9'
                BLE     DrawScore
                LDI     48+0                    ; '0'
                POKE    scratch
                LDWI    string_score+1
                STW     scratch
                PEEK
                ADDI    1
                POKE    scratch
                BRA     DrawScore

; ===== Decrement lives and draw and return gameover ================================================================
DecrementLives  PUSH
                LDWI    string_lives+1
                STW     scratch
                PEEK
                SUBI    1
                POKE    scratch
                CALL    DrawScore
                LDWI    string_lives+1
                STW     scratch
                PEEK
                SUBI    48+0                    ; '0'
                POP
                RET

; ===== PrintText =============================================================================

%MACRO  LoopCounter _counter _label
        LD      _counter
        SUBI    0x01
        ST      _counter
        BNE     _label
%ENDM

; prints text using the inbuilt font and SYS routine
PrintText       LDWI    SYS_VDrawBits_134       ; setup 8 vertical pixel SYS routine
                STW     giga_sysFn

                LDI     0x00                    ; background colour
                ST      giga_sysArg0
                LDI     0x3F                    ; foreground colour
                ST      giga_sysArg1

                LDW     textStr                 ; first byte is length
                PEEK
                ST      printT_tt
                INC     textStr

printT_chr      LDW     textStr
                PEEK
                SUBI    32                      ; (char - 32)*5 + 0x0700
                STW     printT_Chr
                LSLW
                LSLW
                ADDW    printT_Chr
                STW     scratch
                LDWI    giga_text32
                ADDW    scratch
                STW     scratch                 ; text font slice base address for chars 32-81

                LDW     printT_Chr
                SUBI    50
                BLT     printT_draw
                LDW     scratch
                ADDI    0x06
                STW     scratch                 ; text font slice base address for chars 82+

printT_draw     LDI     0x05
                ST      printT_ii
printT_slice    LDW     textPos
                STW     giga_sysArg4            ; xy
                LDW     scratch                 ; text font slice base address
                LUP     0x00                    ; get ROM slice
                ST      giga_sysArg2
                SYS     0xCB                    ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                INC     scratch                 ; next vertical slice
                INC     textPos                 ; next x
                LoopCounter printT_ii printT_slice

                INC     textStr                 ; next char
                INC     textPos                 ; 1 pixel space between chars
                LoopCounter printT_tt printT_chr
                RET



_startAddress_          EQU entry_point
_callTable_             EQU 0x00EE
_singleStepWatch_       EQU giga_frameCount
_cpuUsageAddressA_      EQU subroutines3
_cpuUsageAddressB_      EQU subroutines3+0x10   ; WaitVBlank

