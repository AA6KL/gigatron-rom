From 9f32613e0441ea67e51a0040cc59a0138fc8cc75 Mon Sep 17 00:00:00 2001
From: xopr <xopr@ackspace.nl>
Date: Mon, 26 Aug 2019 21:18:09 +0200
Subject: [PATCH] Added SYS_VDrawWord_137@0xb18 to DEVROM

---
 Core/dev.py    | 231 ++++++++++++++++++++++++++++++++++++++++++++++++-
 interface.json |   1 +
 2 files changed, 228 insertions(+), 4 deletions(-)

diff --git a/Core/dev.py b/Core/dev.py
index 81466e7..ec3c85c 100755
--- a/Core/dev.py
+++ b/Core/dev.py
@@ -2814,6 +2814,23 @@ ld(hi('sys_SpiExchangeBytes'),Y);C('Exchange 1..256 bytes over SPI interface')
 jmp(Y,'sys_SpiExchangeBytes')   #16
 ld([sysArgs+0],X);              C('Fetch byte to send')#17
 
+#-----------------------------------------------------------------------
+# Extension SYS_VDrawWord_137
+#-----------------------------------------------------------------------
+
+# Draw a 3x5 glyph (as tiny font SYS_VDrawBits_134 substitute)
+
+# Variables:
+#       sysArgs[0]      Color 0 (background)
+#       sysArgs[1]      Color 1 (pen)
+#       sysArgs[2:3]    16 bits (word) (destructive)
+#       sysArgs[4:5]    Position on screen
+
+label('SYS_VDrawWord_137')
+ld(hi('sys_VDrawWord'),Y);C('Draw a 3x5 glyph') #15 slot 0xb18
+jmp(Y,'sys_VDrawWord')   #16
+ld([sysArgs+4], X)              #17
+
 #-----------------------------------------------------------------------
 # Some placeholders for future SYS functions. They work as a kind of jump
 # table. This allows implementations to be moved around between ROM
@@ -2825,10 +2842,6 @@ ld([sysArgs+0],X);              C('Fetch byte to send')#17
 # last method doesn't even cost space (initially).
 #-----------------------------------------------------------------------
 
-ld(hi('REENTER'), Y)            #15 slot 0xb18
-jmp(Y,'REENTER')                #16
-ld(-20/2)                       #17
-
 ld(hi('REENTER'), Y)            #15 slot 0xb1b
 jmp(Y,'REENTER')                #16
 ld(-20/2)                       #17
@@ -3450,6 +3463,216 @@ ld(-130/2)                      #127
 
 #-----------------------------------------------------------------------
 
+label('sys_VDrawWord')
+
+# Draw 3x5 glyph from word
+# sysArgs[0]    Color 0 (background)
+# sysArgs[1]    Color 1 (pen)
+# sysArgs[2:3]  16 bits, bit (14, 9, 4),(13, 8, 3),(12, 7, 2),(11, 6, 1),(10, 5, 0)
+#               they are grouped in chunks of 5 bits from top left to bottom right (with special case: MSB=offset)
+#               for example: bit 14 is column 1 row 1, ..., bit 10 is column 1 row 5
+#               bit 9 is column 2 row 1, ..., bit 0 is column 3 row 5
+# sysArgs[4:5]  Position on screen
+
+
+# Line 1
+ld([sysArgs+5], Y)              #18 store arg5 in Y
+
+#TODO: MSB set means empty line (bmi)
+ld([sysArgs+3])                 #19 load (high) byte
+anda(0x40)                      #21 mask bit (r1c1)
+bne('.fgc1')                    #22 branch if bit set (AC not equal 0)
+bra('.drawpxl1')                #23 jump to "draw pixel"
+ld([sysArgs+0])                 #24 select BG color
+label('.fgc1')
+ld([sysArgs+1])                 #24 select FG color
+label('.drawpxl1')
+st([Y,Xpp])                     #25 Draw pixel, increase X
+
+ld([sysArgs+3])                 #26 load (high) byte
+anda(0x02)                      #27 mask bit (r1c2)
+bne('.fgc2')                    #28 branch if bit set (AC not equal 0)
+bra('.drawpxl2')                #29 jump to "draw pixel"
+ld([sysArgs+0])                 #30 select BG color
+label('.fgc2')
+ld([sysArgs+1])                 #30 select FG color
+label('.drawpxl2')
+st([Y,Xpp])                     #31 Draw pixel, increase X
+
+ld([sysArgs+2])                 #32 load (low) byte
+anda(0x10)                      #33 mask bit (r1c3)
+bne('.fgc3')                    #34 branch if bit set (AC not equal 0)
+bra('.drawpxl3')                #35 jump to "draw pixel"
+ld([sysArgs+0])                 #36 select BG color
+label('.fgc3')
+ld([sysArgs+1])                 #36 select FG color
+label('.drawpxl3')
+st([Y,Xpp])                     #37 Draw pixel, increase X
+
+
+ld([sysArgs+5])                 #38 load arg5 (vert)
+adda(1)                         #39 increase by one
+st([sysArgs+5])                 #40 store result (destructive)
+
+
+# Line 2
+ld(AC, Y)                       #41 load (new) Y position
+ld([sysArgs+4], X)              #42 store arg4 in X (reset X)
+
+ld([sysArgs+3])                 #43 load (high) byte
+anda(0x20)                      #44 mask bit (r1c1)
+bne('.fgc4')                    #45 branch if bit set (AC not equal 0)
+bra('.drawpxl4')                #46 jump to "draw pixel"
+ld([sysArgs+0])                 #47 select BG color
+label('.fgc4')
+ld([sysArgs+1])                 #47 select FG color
+label('.drawpxl4')
+st([Y,Xpp])                     #48 Draw pixel, increase X
+
+ld([sysArgs+3])                 #49 load (high) byte
+anda(0x01)                      #50 mask bit (r1c2)
+bne('.fgc5')                    #51 branch if bit set (AC not equal 0)
+bra('.drawpxl5')                #52 jump to "draw pixel"
+ld([sysArgs+0])                 #53 select BG color
+label('.fgc5')
+ld([sysArgs+1])                 #53 select FG color
+label('.drawpxl5')
+st([Y,Xpp])                     #54 Draw pixel, increase X
+
+ld([sysArgs+2])                 #55 load (low) byte
+anda(0x08)                      #56 mask bit (r1c3)
+bne('.fgc6')                    #57 branch if bit set (AC not equal 0)
+bra('.drawpxl6')                #58 jump to "draw pixel"
+ld([sysArgs+0])                 #59 select BG color
+label('.fgc6')
+ld([sysArgs+1])                 #59 select FG color
+label('.drawpxl6')
+st([Y,Xpp])                     #60 Draw pixel, increase X
+
+ld([sysArgs+5])                 #61 load arg5 (vert)
+adda(1)                         #62 increase by one
+st([sysArgs+5])                 #63 store result (destructive)
+
+
+# Line 3
+ld(AC, Y)                       #64 load (new) Y position
+ld([sysArgs+4], X)              #65 store arg4 in X (reset X)
+
+ld([sysArgs+3])                 #66 load (high) byte
+anda(0x10)                      #67 mask bit (r1c1)
+bne('.fgc7')                    #78 branch if bit set (AC not equal 0)
+bra('.drawpxl7')                #69 jump to "draw pixel"
+ld([sysArgs+0])                 #70 select BG color
+label('.fgc7')
+ld([sysArgs+1])                 #70 select FG color
+label('.drawpxl7')
+st([Y,Xpp])                     #71 Draw pixel, increase X
+
+ld([sysArgs+2])                 #72 load (low) byte
+anda(0x80)                      #73 mask bit (r1c2)
+bne('.fgc8')                    #74 branch if bit set (AC not equal 0)
+bra('.drawpxl8')                #75 jump to "draw pixel"
+ld([sysArgs+0])                 #76 select BG color
+label('.fgc8')
+ld([sysArgs+1])                 #76 select FG color
+label('.drawpxl8')
+st([Y,Xpp])                     #77 Draw pixel, increase X
+
+ld([sysArgs+2])                 #78 load (low) byte
+anda(0x04)                      #79 mask bit (r1c3)
+bne('.fgc9')                    #80 branch if bit set (AC not equal 0)
+bra('.drawpxl9')                #81 jump to "draw pixel"
+ld([sysArgs+0])                 #82 select BG color
+label('.fgc9')
+ld([sysArgs+1])                 #83 select FG color
+label('.drawpxl9')
+st([Y,Xpp])                     #83 Draw pixel, increase X
+
+ld([sysArgs+5])                 #84 load arg5 (vert)
+adda(1)                         #85 increase by one
+st([sysArgs+5])                 #86 store result (destructive)
+
+
+# Line 4
+ld(AC, Y)                       #87 load (new) Y position
+ld([sysArgs+4], X)              #88 store arg4 in X (reset X)
+
+ld([sysArgs+3])                 #89 load (high) byte
+anda(0x08)                      #90 mask bit (r1c1)
+bne('.fgc10')                   #91 branch if bit set (AC not equal 0)
+bra('.drawpxl10')               #92 jump to "draw pixel"
+ld([sysArgs+0])                 #93 select BG color
+label('.fgc10')
+ld([sysArgs+1])                 #93 select FG color
+label('.drawpxl10')
+st([Y,Xpp])                     #94 Draw pixel, increase X
+
+ld([sysArgs+2])                 #95 load (low) byte
+anda(0x40)                      #96 mask bit (r1c2)
+bne('.fgc11')                   #97 branch if bit set (AC not equal 0)
+bra('.drawpxl11')               #98 jump to "draw pixel"
+ld([sysArgs+0])                 #99 select BG color
+label('.fgc11')
+ld([sysArgs+1])                 #99 select FG color
+label('.drawpxl11')
+st([Y,Xpp])                     #100 Draw pixel, increase X
+
+ld([sysArgs+2])                 #101 load (low) byte
+anda(0x02)                      #102 mask bit (r1c3)
+bne('.fgc12')                   #103 branch if bit set (AC not equal 0)
+bra('.drawpxl12')               #104 jump to "draw pixel"
+ld([sysArgs+0])                 #105 select BG color
+label('.fgc12')
+ld([sysArgs+1])                 #105 select FG color
+label('.drawpxl12')
+st([Y,Xpp])                     #106 Draw pixel, increase X
+
+ld([sysArgs+5])                 #107 load arg5 (vert)
+adda(1)                         #108 increase by one
+st([sysArgs+5])                 #109 store result (destructive)
+
+
+# Line 5
+ld(AC, Y)                       #110 load (new) Y position
+ld([sysArgs+4], X)              #111 store arg4 in X (reset X)
+
+ld([sysArgs+3])                 #112 load (high) byte
+anda(0x04)                      #113 mask bit (r1c1)
+bne('.fgc13')                   #114 branch if bit set (AC not equal 0)
+bra('.drawpxl13')               #115 jump to "draw pixel"
+ld([sysArgs+0])                 #116 select BG color
+label('.fgc13')
+ld([sysArgs+1])                 #116 select FG color
+label('.drawpxl13')
+st([Y,Xpp])                     #117 Draw pixel, increase X
+
+ld([sysArgs+2])                 #118 load (low) byte
+anda(0x20)                      #119 mask bit (r1c2)
+bne('.fgc14')                   #120 branch if bit set (AC not equal 0)
+bra('.drawpxl14')               #121 jump to "draw pixel"
+ld([sysArgs+0])                 #122 select BG color
+label('.fgc14')
+ld([sysArgs+1])                 #122 select FG color
+label('.drawpxl14')
+st([Y,Xpp])                     #123 Draw pixel, increase X
+
+ld([sysArgs+2])                 #124 load (low) byte
+anda(0x01)                      #125 mask bit (r1c3)
+bne('.fgc15')                   #126 branch if bit set (AC not equal 0)
+bra('.drawpxl15')               #127 jump to "draw pixel"
+ld([sysArgs+0])                 #128 select BG color
+label('.fgc15')
+ld([sysArgs+1])                 #128 select FG color
+label('.drawpxl15')
+st([Y,Xpp])                     #129 Draw pixel, increase X
+
+# Return to interpreter
+ld(hi('REENTER'), Y)            #130
+jmp(Y,'REENTER')                #131
+ld(-138/2)                      #132
+
+#-----------------------------------------------------------------------
+
 label('sys_v6502')
 
 st([vCPUselect],Y);             C('Activate v6502')#18
diff --git a/interface.json b/interface.json
index ae17d19..522c9d2 100644
--- a/interface.json
+++ b/interface.json
@@ -139,6 +139,7 @@
  "SYS_ResetWaveforms_v4_50"   : "0x0b0f",
  "SYS_ShuffleNoise_v4_46"     : "0x0b12",
  "SYS_SpiExchangeBytes_v4_134": "0x0b15",
+ "SYS_VDrawWord_137"    : "0x0b18",
  "SYS_Sprite6_v3_64"    : "0x0c00",
  "SYS_Sprite6x_v3_64"   : "0x0c40",
  "SYS_Sprite6y_v3_64"   : "0x0c80",
-- 
2.17.1

