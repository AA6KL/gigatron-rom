
{-----------------------------------------------------------------------+
|                                                                       |
|       Mandelbrot fractal                                              |
|                                                                       |
+-----------------------------------------------------------------------}

gcl0x

{
  Plot the Mandelbrot set

  - 160x120 pixels and 64 colors
  - Faithful translation of mandelbrot.c pre-study
  - Use 16-bit vCPU math as 7-bit fixed point arithmetic (1.00 -> 128)
  - Implement multiplication in interpreter

  ROM v1:
  XXX Sound for every pixel value [ROMv1]
  XXX Convert into a clock application [ROMv1]

  Later:
  XXX Lookup table for intensity mapping
  XXX Refactor pixel order from what to do with it
  XXX Double vertical resolution by exploiting vertical symmetry
}

{-----------------------------------------------------------------------+
|                       RAM page 3                                      |
+-----------------------------------------------------------------------}
$0300:

{ Pretty accurate multiply-shift ((A*B)>>7), but it can be off by one }
[def
  push

  {Extract sign and absolute values}
  0 sign= C=
 {0}A- [if>0 A= 1 sign=]
  0 B- [if>0 B= sign 1^ sign=]

  {Multiply}
  7 shift= {Pending shift}
  $200
  [do
    bit=
    -$4000 C+ [if<0
      C C+ C=
    else
      {Shift prematurely in an attempt to avoid overflow}
      B ShiftRight! B=
      shift 1- shift=]

    {Add partial product}
    A bit- [if>=0
      A=
      C B+ C=]

    bit ShiftRight! if<>0loop]

  {Shift}
  [do
    C ShiftRight! C=
    shift 1- shift= if>0loop]

  {Apply sign to return value}
  sign [if<>0 0 C- else C]

  pop ret
] MulShift7=

{ Calculate color for (X0,Y0) }
[def {CalcPixel}
  push
  0 X= XX= Y= YY= i=
  [do
    i 1+ i= 64^ if<>0           {Break after completing 63 iterations}

                                {Mandelbrot function: z' := z^2 + c}
    X A= Y Y+ B= MulShift7! Y0+ Y= {Y = 2*X*Y + Y0}
    XX YY- X0+                  X= {X = X^2 - Y^2 + X0}

                                {Calculate squares}
   {X}A= B= MulShift7!          XX=
    Y A= B= MulShift7!          YY=

    -$200 XX+ YY+
    if<=0loop {else} i          {Also break when X^2 + Y^2 > 4}
  ]
  pop ret
] CalcPixel=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 4                                      |
+-----------------------------------------------------------------------}
$0400:

[def {CalcSet}
  push

  $800 p= {Start of video}
  120 Height= 160 Width= len=
  LastPixel= {Anything well-defined}
  0 DY=
  Step DX=

  [do
    {Draw white pixel while busy here}
    63 p.

    LastPixel [if=0
      {Check if we are inside one of the main bulbs for
       a quick bailout (Wikipedia)
       (x+1)^ + y^2 < 1/16}
      Y0 A= B= MulShift7! YY=
      X0 128+ A= B= MulShift7! YY+ 8- [if<0 0
      else

        {q*(q + x - 1/4) < 1/4*y^2, where q = (x - 1/4)^2 + y^2}
        X0 32- A= B= MulShift7! YY+ {q}
        A= X0+ 32- B= MulShift7! tmp=
        tmp+ tmp= tmp+ tmp= {*4} YY- [if<0 0
        else

          {Otherwise run the escape time algorithm}
          CalcPixel!
        ]
      ]
    else
      {No shortcut}
      CalcPixel!
    ]

    LastPixel= p. {Plot pixel}

    len 1- [if<=0
      {Turn right}
      DY tmp= DX DY= 0 tmp- DX=

      {Length of next segment, either horizontal or vertical}
      DX [if<>0 Width 1- Width= else Height 1- Height=]
    ]

    {Break when reaching a zero-length segment}
    len= if>0

    {Step in the fractal plane}
    X0 DX+ X0=
    Y0 DY+ Y0=

    {Matching step in video frame}
    DX [if<0 p 1-     p=]
    DX [if>0 p 1+     p=]
    DY [if<0 -$100 p+ p=]
    DY [if>0  $100 p+ p=]

  loop]

  60 \soundTimer. {For debugging}

  GreyOut!

  pop ret
] CalcSet=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 5                                      |
+-----------------------------------------------------------------------}
$0500:

[def {GreyOut}
  push

  $800 p=
  120 Height= 160 Width= len=
  1 DX= 0 DY=

  [do
    0 Level=
    32 [do
      i=
      p, 63& i- [if>=0 p. i 21& [if<>0 1 else 2] Level+ Level=]
      i ShiftRight!
      if>0loop]
    {Level in 0..9}
    p. {Paint it black}

    Level [if<>0
      {Level in 1..9}

      {Ordered dithering}
      p>, 1& i= i+ i= {2 * bit 0 of y}
      p   1&    i+ i= {+   bit 0 of x}
      [def 0# 2# {Bayer matrix (Wikipedia)}
           3# 1#]
      i+ peek Level+ 1- Level=
      {Level in 0..11}
     
      {Map intensity level to actual grey color (multiple of 1+4+16)}
      [do Level 3- if>=0 Level= p, 21+ p. loop]
    ]

    {Advance to next pixel}
    len 1- [if<=0
      {Turn right}
      DY tmp= DX DY= 0 tmp- DX=

      {Length of next segment, either horizontal or vertical}
      DX [if<>0 Width 1- Width= else Height 1- Height=]
    ]

    {Break when reaching a zero-length segment}
    len= if>0

    {Matching step in video frame}
    DX [if<0 p 1-     p=]
    DX [if>0 p 1+     p=]
    DY [if<0 -$100 p+ p=]
    DY [if>0  $100 p+ p=]

  loop]
  pop ret
] GreyOut=

{ Shift-right function (wrapper for SYS extension) }
[def
  \sysArgs0= \SYS_LSRW_48 48@
  ret
] ShiftRight=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 6                                      |
+-----------------------------------------------------------------------}
$0600:

{ Main }
[do
  -180 Y0= -320 X0= 3 Step= CalcSet!    {Global 1702.513 seconds}
  -148 Y0=  -98 X0= 1 Step= CalcSet!    {Zoom1  3227.751 seconds}
   -60 Y0= -256 X0= 1 Step= CalcSet!    {Zoom2  3108.196 seconds}
  -320 Y0= -360 X0= 9 Step= CalcSet!    {Wide    513.833 seconds}
     0 Y0= -100 X0= 1 Step= CalcSet!    {Zoom3  3571.411 seconds}
   -60 Y0=    0 X0= 1 Step= CalcSet!    {Zoom4  2147.072 seconds}
  loop]

{-----------------------------------------------------------------------+
|       End                                                             |
+-----------------------------------------------------------------------}

