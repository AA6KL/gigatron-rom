-------------------------------
Gigatron Control Language (GCL)
-------------------------------
GCL is an interpreted low-level language for writing simple games for
the Gigatron TTL microcomputer, without bothering with the harsh timing
requirements of the hardware platform.

Technically, "GCL" is the source language or notation, while "vCPU" is the
virtual CPU, or interpreter, that is executing compiled GCL instructions.
The two are closely tied together.

---------------
Example program
---------------

gcl1 {GCL version}
                                        {Approximate BASIC equivalent}
{Function to draw binary value as pixels}

[def                                    {10 GOTO 80}
  $4448 D= {Middle of screen}           {20 D=$4448: REM MIDDLE OF SCREEN}
  [do
    C [if<0 15 else 5] D.               {30 IF C<0 POKE D,15 ELSE POKE D,5}
    C C+ C=                             {40 C=C+C}
    D 1+ D=                             {50 D=D+1}
    -$4458 D+ if<0 loop]                {60 IF D<$4458 THEN 30}
  ret                                   {70 RETURN}
] Plot=

{Compute largest 16-bit Fibonacci number and plot it on screen}

[do
  0 A=                                  {80 A=0}
  1 B=                                  {90 B=1}
  [do
    A B+ C=                             {100 C=A+B}
    B A= C B=                           {110 A=B: B=C}
    if>0 loop]                          {120 IF B>0 THEN 100}
  Plot!                                 {130 GOSUB 20}
  loop]                                 {140 GOTO 80}

-----------------
Programming model
-----------------
GCL draws most of its inspiration from two notable mini-languages: SWEET16
(Apple II) and FALSE (Amiga). There is also a little bit of a FORTH influence.
The GCL programming model is "accumulator oriented": there is no implicit
expression stack. vCPU does have a call stack however, and it is also possible
to hold variables there. GCL programs typically are made from of many small
functions that operate on global variables and that are called from a main loop.

The virtual regisers are 16-bits (except vSP) and reside in the zero page.

vAC  is the virtual accumulator, used by instructions as operand and/or result
vPC  is the virtual program counter. Programs run from RAM. When executing, vPC
     auto-increments just its low byte, so it wraps around on the same RAM page.
     (Code normally doesn't "use" this.) Function calls can go across pages.
vLR  is the link register. It points to the instruction after the most recent
     CALL instruction. This is used to return after making a subroutine
     call. When nesting subroutines, vLR should be pushed on the stack.
vSP  is the stack pointer. The stack lives in the zero page top and grows down.

Program variables are 16-bit words and typically hold a number or a pointer.
Named variables reside in the zero page. Arbitrary memory can be addressed
as bytes using 16-bit pointers.

-----------------
Notes on notation
-----------------
GCL programs are written as a long sequence of "words" without much structure
enforced by the compiler. Most words map directly to a single virtual
instruction and therefore also encode an embedded operand (e.g. 1+). Many words
operate on both vAC and some variable or constant. Sequences can be grouped
with () {} or [], each of which has its own meaning. Spaces and newlines simply
separate words. Use indentation for clarity. There is no need for spaces around
the grouping characters []{}().
Constants are decimal, or hexadecimal when preceded with '$'.
Constants can be preceded by '-' or '+' (note: -$1000, not $-0000).
For convenience, symbols defined by the host system can be referenced by
prefixing a backslash, e.g. '\fontData'. This can be used anywhere where an
integer is expected.
Variable names start with an alphanumeric character and are case sensitive.
The overview below uses the following conventions:
'i' indicates an 8-bit integer constant.
'ii' indicates a 16-bit integer constant.
'X' indicates a named variable, allocated globally on the zero page.

--------------------
Meaning of GCL words
--------------------

Basics
------
{...}                   Comments ignored by machine. Comments can be nested
i ii                    Load integer constant into vAC, e.g. 1, +1972, -$be05
X=                      Store vAC into variable X
X                       Load variable X into vAC
X+ X-                   Add/subtract variable X to/from vAC
i+ i-                   Add/subtract small constant to/from vAC
i<<                     Shift vAC i bits left
i& i| i^                Logical AND/OR/XOR vAC with small constant
X& X| X^                Logical AND/OR/XOR vAC with variable X
X<. X>.                 Store vAC as byte into the low/high byte of variable X
X<, X>,                 Read low/high byte of variable X
X<++ X>++               Increment low/high byte of variable X
i-- i++                 Subtract/add constant value from/to stack pointer
i%                      Load stack variable at relative byte offset i into vAC
i%=                     Store vAC on stack at relative byte offset i

Memory
------
X,                      Read unsigned byte from memory pointed by X into vAC
X.                      Write vAC as byte to memory pointed by variable X
i,                      Read unsigned byte at zero page address i into vAC
i.                      Store vAC as byte into zero page address i
i;                      Read word at zero page address i into vAC
i?                      Table lookup from ROM address vAC+i
peek                    Read byte from memory pointed by vAC (Same as "\vAC,")

Structured programming
----------------------
[...]                   Code block, used with "if", "else", "do", "loop"
if>0                    Continue executing code if vAC>0, otherwise jump to
                        end of the block (or past an optional matching "else")
                        Conditions are "=0" ">0" "<0" "<=0" ">=0" "<>0"
else                    When encountered, skip rest of code until end of block
do                      Mark the start of a loop
loop                    Jump back to matching "do" (May be in an outer block)
if>0loop                Optimization for "if>0 loop" (works with all conditions)
def                     Load next vPC in vAC and jump to end of current block

Subroutines
-----------
X!                      Jump to function pointed by X, store old vPC in vLR
ret                     Jump to vLR, to return from a leaf subroutine. Non-leaf
                        subroutines should use "pop ret" as return sequence
push                    Push vLR onto stack, for entering a non-leaf subroutine
pop                     Remove top of stack and put value in vLR
i!                      Call native code pointed by sysFn, not exceeding i cycles
call                    Jump to function pointed by vAC (Same as "\vAC!")

Data
----
i#                      Raw byte-value i

Versioning
----------
gcl0x gcl1              GCL version. "x" denotes experimental/extended versions

Future extensions
-----------------
deek                    Read word from memory pointed by vAC
<p++ >p++               Notation for p<++ p>++
'A                      Character code?
"Text"                  Text string?
()                      Macros?
$X                      For localized variables
\12                     For raw byte values (better readable than 12#)

----------------------
vCPU instruction table
----------------------
The vCPU interpreter has 34 core instructions. Each opcode is just a jump offset
into the interpreter code page to the code that implements its behavior. Most
instructions take a single byte operand, but some have two and others none.

Mnem. Operands Description
----- -------- -----------
ST    $DD      Store byte in zero page ([D]=vAC)
STW   $DD      Store word into zero page ([D]=vAC&255,[D+1]=vAC>>8)
STLW  $DD      Store word in stack frame (vSP[D],vSP[D+1]=vAC&255,vAC>>8)
LD    $DD      Load byte from zero page (vAC=[D])
LDI   $DD      Load immediate constant (vAC=$DD)
LDWI  $DDDD    Load immediate constant (vAC=$DDDD)
LDW   $DD      Word load from zero page (vAC=[D]+256*[D+1])
LDLW  $DD      Load word from stack frame (vAC=vSP[D]+256*vSP[D+1]
ADDW  $DD      Word addition with zero page (vAC+=[D]+256*[D+1])
SUBW  $DD      Word subtraction with zero page (vAC-=[D]+256*[D+1])
ADDI  $DD      Add small positive constant (vAC+=D)
SUBI  $DD      Subtract small positive constant (vAC+=D)
LSLW  -        Shift left (because 'ADDW vAC' will not work!) (vAC+=vAC)
INC   $DD      Increment zero page byte ([D]++)
ANDI  $DD      Logical-AND with constant (vAC&=D)
ANDW  $DD      Word logical-AND with zero page (vAC&=[D]+256*[D+1])
ORI   $DD      Logical-OR with constant (vAC|=D)
ORW   $DD      Word logical-OR with zero page (vAC|=[D]+256*[D+1])
XORI  $DD      Logical-XOR with constant (vAC^=D)
XORW  $DD      Word logical-XOR with zero page (vAC^=[D]+256*[D+1])
PEEK  -        Read byte from memory (vAC=[vAC])
DEEK  -        Read word from memory (vAC=[vAC]+256*[vAC+1])
POKE  $DD      Write byte in memory ([[D+1],[D]]=vAC&255)
DOKE  $DD      Write word in memory ([[D+1],[D]],[[D+1],[D]+1]=vAC&255,vAC>>8)
LUP   $DD      ROM lookup (vAC=ROM[D,AC])
BRA   $DD      Branch unconditionally (vPC=(vPC&0xff00)+D)
BCC   $CC $DD  Test vAC and branch conditionally. CC can be EQ,NE,LT,GT,LE,GE
CALL  $DD      Goto address but remember vPC (vLR,vPC=vPC+2,[D]+256*[D+1]-2)
RET   -        Leaf return (vPC=vLR-2)
PUSH  -        Push vLR on stack ([--vSP]=vLR&255,[--vSP]=vLR>>8)
POP   -        Pop value from stack (vAC=[vSP]+256*[vSP+1],vSP+=2)
ALLOC $DD      Create or destroy stack frame (vSP+=D)
SYS   $DD      Native function call for at most $DD ticks ($DD*2 cycles)
DEF   $DD      Define data or code (vAC,vPC=vPC+2,D+256*(vPC>>8))

-------------
SYS extension
-------------
SYS_Reset_36                    x
SYS_Exec_88                     x
SYS_Random_34                   x
SYS_LSRW1_48                    x
SYS_LSRW2_52                    x
SYS_LSRW3_52                    x
SYS_LSRW4_50                    x
SYS_LSRW5_50                    x
SYS_LSRW6_48                    x
SYS_LSRW7_30                    x
SYS_LSRW8_24                    x
SYS_LSLW4_46                    x
SYS_LSLW8_24                    x
SYS_VDrawBits_134               x
SYS_Read3_40                    (Pictures)
SYS_Unpack_56                   x
SYS_Draw4_30                    x
SYS_Out_22                      x
SYS_In_24                       x
SYS_NextByteIn_32               x
SYS_PayloadCopy_34              x
SYS_LoaderProcessInput_48       (Loader)
SYS_RacerUpdateVideoX_40        (Racer)
SYS_RacerUpdateVideoY_40        (Racer)

-- End of document --
