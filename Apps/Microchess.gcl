gcl0x
{-----------------------------------------------------------------------+
|                                                                       |
|       Apple-1 mockup                                                  |
|       For testing original Microchess code on v6502                   |
|                                                                       |
+-----------------------------------------------------------------------}

{
Zero page usage:
$30-$31         Pos
$32-$33         PrintChar
$34-$3b         WozMon variables
}

_i=$3c          {2 bytes}
_j=$3e          {2 bytes}
_k=$3a          {1 bytes, share with wozmon YSAV}

{-----------------------------------------------------------------------+
|       ROM type check                                                  |
+-----------------------------------------------------------------------}

*=\userCode

\romType, \romTypeValue_ROMv4-  {Version check >= ROMv4, see Docs/GT1-files.txt}
[if<0 do _frameCount _vPCH:     {https://forum.gigatron.io/viewtopic.php?f=4&t=130}
      loop]

&_Init call

{-----------------------------------------------------------------------+
|       Initialize                                                      |
+-----------------------------------------------------------------------}

{ This code runs once and is then reused as the input buffer for wozmon }

*=$8a0

_Init=*

{ Setup video indirection table such that WozMon can be at $7F00/$FF00 }
\videoTable Pos=                {First GCL variable at $30, later becomes Pos}
120                             {7^127}
[do 127^                        {Loop over 7..126 range}
  Pos: <Pos++ <Pos++            {Y[y]=7+j and dX[y]=0}
  1+ 127^ if<>0loop]            {Next in range}

&_PrintChar PrintChar=          {Forward reference}

&_Apple1 _vLR=                  {Prepare transfer to main loop}
&_FirstStart                    {Start address for 6502 program}
[ret]                           {Jump to Main (the brackets avoid the automatic vLR patch)}

{-----------------------------------------------------------------------+
|       Microchess from $220 (Keeps just 200.21F for wozmon input)      |
+-----------------------------------------------------------------------}

*=$220

_FirstStart=*

 #$d8 #$a2 #$db #$9a #$a2 #$9f #$86 #$f4 #$a9 #$8d #$00 #$a2 #$02 #$b5 #$f9 #$20
 #$dc #$ff #$ca #$10 #$f8 #$a9 #$a0 #$00 #$a9 #$bf #$00 #$a9 #$00 #$00 #$48 #$09
 #$80 #$00 #$68 #$29 #$4f #$c9 #$43 #$d0 #$12 #$a2 #$1f #$bd #$a0 #$07 #$95 #$50
 #$ca #$10 #$f8 #$a2 #$1b #$86 #$dc #$a9 #$cc #$d0 #$12 #$c9 #$45 #$d0 #$07 #$20
 #$ea #$03 #$a9 #$ee #$d0 #$07 #$c9 #$40 #$d0 #$0b #$20 #$dd #$04 #$85 #$fb #$85
 #$fa #$85 #$f9 #$d0 #$ab #$c9 #$0d #$d0 #$06 #$20 #$84 #$04 #$4c #$26 #$03 #$c9
 #$41 #$f0 #$03 #$4c #$1f #$03 #$4c #$00 #$ff #$a6 #$f7 #$30 #$5c #$a5 #$70 #$f0
 #$08 #$e0 #$08 #$d0 #$04 #$c5 #$e6 #$f0 #$2e #$f6 #$e3 #$c9 #$01 #$d0 #$02 #$f6
 #$e3 #$50 #$1e #$a0 #$0f #$a5 #$f3 #$d9 #$60 #$00 #$f0 #$03 #$88 #$10 #$f8 #$b9
 #$d0 #$07 #$d5 #$e4 #$90 #$04 #$94 #$e6 #$95 #$e4 #$18 #$08 #$75 #$e5 #$95 #$e5
 #$28 #$e0 #$04 #$f0 #$03 #$30 #$31 #$60 #$a5 #$e8 #$85 #$dd #$a9 #$00 #$85 #$f7
 #$20 #$84 #$04 #$20 #$ea #$03 #$20 #$38 #$03 #$20 #$ea #$03 #$a9 #$08 #$85 #$f7
 #$20 #$41 #$03 #$20 #$6a #$04 #$4c #$3a #$05 #$e0 #$f9 #$d0 #$0b #$a5 #$60 #$c5
 #$f3 #$d0 #$04 #$a9 #$00 #$85 #$f6 #$60 #$50 #$fd #$a0 #$07 #$a5 #$f3 #$d9 #$60

*=$300

 #$00 #$f0 #$05 #$88 #$f0 #$f1 #$10 #$f6 #$b9 #$d0 #$07 #$d5 #$e2 #$90 #$02 #$95
 #$e2 #$c6 #$f7 #$a9 #$ff #$c5 #$f7 #$f0 #$03 #$20 #$5e #$04 #$e6 #$f7 #$60 #$c9
 #$08 #$b0 #$12 #$20 #$2a #$05 #$a2 #$1f #$b5 #$50 #$c5 #$fa #$f0 #$03 #$ca #$10
 #$f7 #$86 #$fb #$86 #$70 #$4c #$20 #$02 #$a2 #$10 #$a9 #$00 #$95 #$de #$ca #$10
 #$fb #$a9 #$10 #$85 #$70 #$c6 #$70 #$10 #$01 #$60 #$20 #$57 #$04 #$a4 #$70 #$a2
 #$08 #$86 #$f8 #$c0 #$08 #$10 #$41 #$c0 #$06 #$10 #$2e #$c0 #$04 #$10 #$1f #$c0
 #$01 #$f0 #$09 #$10 #$0e #$20 #$c6 #$03 #$d0 #$fb #$f0 #$d9 #$20 #$d4 #$03 #$d0
 #$fb #$f0 #$d2 #$a2 #$04 #$86 #$f8 #$20 #$d4 #$03 #$d0 #$fb #$f0 #$c7 #$20 #$d4
 #$03 #$a5 #$f8 #$c9 #$04 #$d0 #$f7 #$f0 #$bc #$a2 #$10 #$86 #$f8 #$20 #$c6 #$03
 #$a5 #$f8 #$c9 #$08 #$d0 #$f7 #$f0 #$ad #$a2 #$06 #$86 #$f8 #$20 #$02 #$04 #$50
 #$05 #$30 #$03 #$20 #$89 #$02 #$20 #$57 #$04 #$c6 #$f8 #$a5 #$f8 #$c9 #$05 #$f0
 #$eb #$20 #$02 #$04 #$70 #$8f #$30 #$8d #$20 #$89 #$02 #$a5 #$f3 #$29 #$f0 #$c9
 #$20 #$f0 #$ee #$4c #$45 #$03 #$20 #$02 #$04 #$30 #$03 #$20 #$89 #$02 #$20 #$57
 #$04 #$c6 #$f8 #$60 #$20 #$02 #$04 #$90 #$02 #$50 #$f9 #$30 #$07 #$08 #$20 #$89
 #$02 #$28 #$50 #$f0 #$20 #$57 #$04 #$c6 #$f8 #$60 #$a2 #$0f #$38 #$b4 #$60 #$a9
 #$77 #$f5 #$50 #$95 #$60 #$94 #$50 #$38 #$a9 #$77 #$f5 #$50 #$95 #$50 #$ca #$10

*=$400

 #$eb #$60 #$a5 #$f3 #$a6 #$f8 #$18 #$7d #$bf #$07 #$85 #$f3 #$29 #$88 #$d0 #$42
 #$a5 #$f3 #$a2 #$20 #$ca #$30 #$0e #$d5 #$50 #$d0 #$f9 #$e0 #$10 #$30 #$33 #$a9
 #$7f #$69 #$01 #$70 #$01 #$b8 #$a5 #$f7 #$30 #$24 #$c9 #$00 #$10 #$20 #$48 #$08
 #$a9 #$f9 #$85 #$f7 #$85 #$f6 #$20 #$84 #$04 #$20 #$ea #$03 #$20 #$41 #$03 #$20
 #$67 #$04 #$28 #$68 #$85 #$f7 #$a5 #$f6 #$30 #$04 #$38 #$a9 #$ff #$60 #$18 #$a9
 #$00 #$60 #$a9 #$ff #$18 #$b8 #$60 #$a6 #$70 #$b5 #$50 #$85 #$f3 #$60 #$20 #$84
 #$04 #$20 #$ea #$03 #$20 #$41 #$03 #$20 #$ea #$03 #$ba #$86 #$f5 #$a6 #$f4 #$9a
 #$68 #$85 #$f8 #$68 #$85 #$70 #$aa #$68 #$95 #$50 #$68 #$aa #$68 #$85 #$f3 #$95
 #$50 #$4c #$a9 #$04 #$ba #$86 #$f5 #$a6 #$f4 #$9a #$a5 #$f3 #$48 #$a8 #$a2 #$1f
 #$d5 #$50 #$f0 #$03 #$ca #$10 #$f9 #$a9 #$cc #$95 #$50 #$8a #$48 #$a6 #$70 #$b5
 #$50 #$94 #$50 #$48 #$8a #$48 #$a5 #$f8 #$48 #$ba #$86 #$f4 #$a6 #$f5 #$9a #$60
 #$a6 #$e4 #$ec #$d0 #$07 #$d0 #$04 #$a9 #$00 #$f0 #$0a #$a6 #$e3 #$d0 #$06 #$a6
 #$ee #$d0 #$02 #$a9 #$ff #$a2 #$04 #$86 #$f7 #$c5 #$fa #$90 #$0c #$f0 #$0a #$85
 #$fa #$a5 #$70 #$85 #$fb #$a5 #$f3 #$85 #$f9 #$a9 #$ae #$00 #$60 #$a6 #$dc #$30
 #$1c #$a5 #$f9 #$dd #$e0 #$07 #$d0 #$11 #$ca #$bd #$e0 #$07 #$85 #$fb #$ca #$bd
 #$e0 #$07 #$85 #$f9 #$ca #$86 #$dc #$d0 #$1c #$a9 #$ff #$85 #$dc #$a2 #$0c #$86

*=$500

 #$f7 #$86 #$fa #$a2 #$14 #$20 #$3a #$03 #$a2 #$04 #$86 #$f7 #$20 #$38 #$03 #$a6
 #$fa #$e0 #$0f #$90 #$12 #$a6 #$fb #$b5 #$50 #$85 #$fa #$86 #$70 #$a5 #$f9 #$85
 #$f3 #$20 #$84 #$04 #$4c #$20 #$02 #$a9 #$ff #$60 #$a2 #$04 #$06 #$f9 #$26 #$fa
 #$ca #$d0 #$f9 #$05 #$f9 #$85 #$f9 #$85 #$f3 #$60 #$18 #$a9 #$80 #$65 #$eb #$65
 #$ec #$65 #$ed #$65 #$e1 #$65 #$df #$38 #$e5 #$f0 #$e5 #$f1 #$e5 #$e2 #$e5 #$e0
 #$e5 #$de #$e5 #$ef #$e5 #$e3 #$b0 #$02 #$a9 #$00 #$4a #$18 #$69 #$40 #$65 #$ec
 #$65 #$ed #$38 #$e5 #$e4 #$4a #$18 #$69 #$90 #$65 #$dd #$65 #$dd #$65 #$dd #$65
 #$dd #$65 #$e1 #$38 #$e5 #$e4 #$e5 #$e4 #$e5 #$e5 #$e5 #$e5 #$e5 #$e0 #$a6 #$f3
 #$e0 #$33 #$f0 #$16 #$e0 #$34 #$f0 #$12 #$e0 #$22 #$f0 #$0e #$e0 #$25 #$f0 #$0a
 #$a6 #$70 #$f0 #$09 #$b4 #$50 #$c0 #$10 #$10 #$03 #$18 #$69 #$02 #$4c #$b0 #$04

*=$7a0

 #$03 #$04 #$00 #$07 #$02 #$05 #$01 #$06 #$10 #$17 #$11 #$16 #$12 #$15 #$14 #$13
 #$73 #$74 #$70 #$77 #$72 #$75 #$71 #$76 #$60 #$67 #$61 #$66 #$62 #$65 #$64 #$63
 #$f0 #$ff #$01 #$10 #$11 #$0f #$ef #$f1 #$df #$e1 #$ee #$f2 #$12 #$0e #$1f #$21
 #$0b #$0a #$06 #$06 #$04 #$04 #$04 #$04 #$02 #$02 #$02 #$02 #$02 #$02 #$02 #$02
 #$99 #$25 #$0b #$25 #$01 #$00 #$33 #$25 #$07 #$36 #$34 #$0d #$34 #$34 #$0e #$52
 #$25 #$0d #$45 #$35 #$04 #$55 #$22 #$06 #$43 #$33 #$0f #$cc

{-----------------------------------------------------------------------+
|       Main loop                                                       |
+-----------------------------------------------------------------------}

*=$600

_Apple1=*

_vLR=                           {Reset v6502 PC}
[do
  \SYS_Run6502_DEVROM_80 _sysFn=
  \k,                           {ASCII code in A}
  80!                           {Run 6502 code until BRK}
  push                          {Save v6502 PC}
  [if=0                         {A=0 reads from keyboard}
    [do
      \serialRaw, 255^          {Wait for idle keyboard}
      if<>0loop]
    [do
      \frameCount, 15& [if=0    {4 Hz cursor redraw rate}
        \frameCount, 48&        {Flash at 1 Hz with 75% duty cycle}
        [if=0 $a0 else $c0]     {Select space or '@'}
        PrintChar! Pos=]        {Display cursor and move back}
      \serialRaw, \k. 128&      {Key ready?}
      if<>0loop]                {Loop until ready}
    $a0 PrintChar! Pos=         {Overwrite '@' with a space}
    \k, $60- [if>=0 $40+ \k.]   {Map to upper case, and DEL to rubout}
    \k, 10^  [if=0  13   \k.]   {Map LF to CR}
  else                          {A<>0 for echo}
    \k.
    PrintChar!
  ]
  pop                           {Restore v6502 PC}
  loop]                         {Back to wozmon}

{-----------------------------------------------------------------------+
|       Character output with automatic scrolling                       |
+-----------------------------------------------------------------------}

_PrintChar=*
[
  {Minimalistic terminal output, with bit 7 set by WozMon}

  %-2=                          {Park character in stack area}
  \SYS_VDrawBits_134 _sysFn=    {Prepare SYS calls}
  $800 \sysArgs0:               {Green on black}

  %-2                           {Get character back}
  $8d^ [if<>0                   {Test for CR...}
    <Pos, 155- if>0 0]          {...or line wrap}

  [if=0

    {-------------------------------------------------------------------+
    |       Newline                                                     |
    +-------------------------------------------------------------------}

    {Clear new line first}

    $100 <Pos. peek >Pos. Pos   {Go to start of next line}
    \sysArgs4:                  {Set screen position}
    \sysArgs2.                  {Set all-zero output pattern}
    [do
      134!                      {SYS call to draw 8 pixels vertically}
      <\sysArgs4++              {Step 1 pixel right}
      \sysArgs4, 160^           {Test for end of line}
      if<>0loop]

    {Then scroll up by modifying videoTable}

    $01ee _i=                   {Last entry in video table}
    [do
      _i, 119- [if<0 127+
                else 7+] _i.    {Rotate by 8 in 7..126 range}
      _i 2- _i=                 {Move to previous entry in video table}
      $fe^ if<>0loop]           {Until all done}
  ]

  %-2 $a0-                      {WozMon sends ASCII with bit 7 set}
  [if>=0                        {If printable}

    {-------------------------------------------------------------------+
    |       PrintChar                                                   |
    +-------------------------------------------------------------------}

    { Draw ASCII character (32..127) on screen in 5x8 pixels }
    { and advance cursor position }

    50-                         {Map ASCII code to offset in font table}
    [if<0 50+ _i= \font32up     {ASCII 32..81}
     else     _i= \font82up]    {ASCII 82..127}
    _j= _i 2<< _i+              {Multiply char code by 5}
    _j+ _j=                     {Add to page address to reach bitmap data}

    Pos \sysArgs4:              {Screen position for character}
    %-2=                        {Remember this position}
    6+ Pos=                     {Advance by 6 pixels}

    5 [do _i=                   {Draw character as 5 vertical bit slices}
      _j 0? \sysArgs2.          {Get bit slice as byte from ROM table}
      134!                      {SYS call to draw 8 pixels vertically}
      <_j++ <\sysArgs4++        {Advance to next byte}
      _i 1- if>0loop]           {Looping}

    %-2                         {Return position for backspace}
  ]

  ret
]

{-----------------------------------------------------------------------+
|       WozMon                                                          |
+-----------------------------------------------------------------------}

*=$ff00

        { Original ZP usage is 24.2B, but that's taken by Gigatron }

   _XAML=$34        _XAML_MINUS1=$33
   _XAMH=$35
    _STL=$36         _STL_MINUS1=$35
    _STH=$37
      _L=$38           _L_MINUS1=$37
      _H=$39
   _YSAV=$3A
   _MODE=$3B

       { Patches with respect to original are marked [Gigatron] }

     _IN=$200

    _KBD=$D010
  _KBDCR=$D011
    _DSP=$D012
  _DSPCR=$D013

_RESET=*        #_CLD_                  { Clear decimal arithmetic mode.          }
                #_CLI_
                #_LDYIM_ #$7F           { Mask for DSP data direction register.   }
                #_STY_   ##_DSP
                #_LDAIM_ #$A7           { KBD and DSP control register mask.      }
                #_STA_   ##_KBDCR
                #_STA_   ##_DSPCR
_NOTCR=*        #_CMPIM_ #$DF           { "<-"?                                   }
                #_BEQ_   #@_BACKSPACE   { Yes.                                    }
                #_CMPIM_ #$9B           { ESC?                                    }
                #_BEQ_   #@_ESCAPE      { Yes.                                    }
                #_INY_                  { Advance text index.                     }
                #_BPL_   #@_NEXTCHAR    { Auto ESC if > 127.                      }
_ESCAPE=*       #_LDAIM_ #$DC           { "\".                                    }
                #_JSR_   ##_ECHO        { Output it.                              }
_GETLINE=*      #_LDAIM_ #$8D           { CR.                                     }
                #_JSR_   ##_ECHO        { Output it.                              }
                #_LDYIM_ #$01           { Initiallize text index.                 }
_BACKSPACE=*    #_DEY_                  { Back up text index.                     }
                #_BMI_   #@_GETLINE     { Beyond start of line, reinitialize.     }
_NEXTCHAR=*     #_LDAIM_ #$00           { [Gigatron] A=0 to read keyboard.        }
                #_BRK_                  { [Gigatron] Transfer to vCPU for input.  }
                #_ORAIM_ #$80           { [Gigatron] B7 should be '1'.            }
                #_BIT_   ##_KBD         { [Gigatron] Was: LDA                     }
                #_STAAY_ ##_IN          { Add to text buffer.                     }
                #_JSR_   ##_ECHO        { Display character.                      }
                #_CMPIM_ #$8D           { CR?                                     }
                #_BNE_   #@_NOTCR       { No.                                     }
                #_LDYIM_ #$FF           { Reset text index.                       }
                #_LDAIM_ #$00           { For XAM mode.                           }
                #_TAX_                  { 0->X.                                   }
_SETSTOR=*      #_ASLA_                 { Leaves $7B if setting STOR mode.        }
_SETMODE=*      #_STAZ_  #_MODE         { $00 = XAM, $7B= STOR,$AE= BLOK XAM      }
_BLSKIP=*       #_INY_                  { Advance text index.                     }
_NEXTITEM=*     #_LDAAY_ ##_IN          { Get character.                          }
                #_CMPIM_ #$8D           { CR?                                     }
                #_BEQ_   #@_GETLINE     { Yes, done this line.                    }
                #_CMPIM_ #$AE           { "."?                                    }
                #_BCC_   #@_BLSKIP      { Skip delimiter.                         }
                #_BEQ_   #@_SETMODE     { Yes, BLOCK XAM mode.                    }
                #_CMPIM_ #$BA           { ":"?                                    }
                #_BEQ_   #@_SETSTOR     { Yes, set STOR mode.                     }
                #_CMPIM_ #$D2           { "R"?                                    }
                #_BEQ_   #@_RUN         { Yes, run user program.                  }
                #_STXZ_  #_L            { $00->L.                                 }
                #_STXZ_  #_H            {  and H.                                 }
                #_STYZ_  #_YSAV         { Save Y for comparison.                  }
_NEXTHEX=*      #_LDAAY_ ##_IN          { Get character for hex test.             }
                #_EORIM_ #$B0           { Map digits to $0-9.                     }
                #_CMPIM_ #$0A           { Digit?                                  }
                #_BCC_   #@_DIG         { Yes.                                    }
                #_ADCIM_ #$88           { Map letter "A"-"F" to $FA-FF.           }
                #_CMPIM_ #$FA           { Hex letter?                             }
                #_BCC_   #@_NOTHEX      { No, character not hex.                  }
_DIG=*          #_ASLA_                 {                                         }
                #_ASLA_                 { Hex digit to MSD of A.                  }
                #_ASLA_                 {                                         }
                #_ASLA_                 {                                         }
                #_LDXIM_ #$04           { Shift count.                            }
_HEXSHIFT=*     #_ASLA_                 { Hex digit left, MSB to carry.           }
                #_ROLZ_  #_L            { Rotate into LSD.                        }
                #_ROLZ_  #_H            { Rotate into MSD's.                      }
                #_DEX_                  { Done 4 shifts?                          }
                #_BNE_   #@_HEXSHIFT    { No, loop.                               }
                #_INY_                  { Advance text index.                     }
                #_BNE_   #@_NEXTHEX     { Always taken. Check next character for hex.}
_NOTHEX=*       #_CPYZ_  #_YSAV         { Check if L, H empty (no hex digits).    }
                #_BEQ_   #@_ESCAPE      { Yes, generate  ESC sequence.            }
                #_BITZ_  #_MODE         { Test MODE byte.                         }
                #_BVC_   #@_NOTSTOR     { B6 = 0 for STOR, 1 for XAM and BLOCK XAM}
                #_LDAZ_  #_L            { LSD's of hex data.                      }
                #_STAIX_ #_STL          { Store at current 'store index'.         }
                #_INCZ_  #_STL          { Increment store index.                  }
                #_BNE_   #@_NEXTITEM    { Get next item. (no carry).              }
                #_INCZ_  #_STH          { Add carry to 'store index' high order.  }
_TONEXTITEM=*   #_JMP_   ##_NEXTITEM    { Get next command item.                  }
_RUN=*          #_JMI_   ##_XAML        { Run at current XAM index.               }
_NOTSTOR=*      #_BMI_   #@_XAMNEXT     { B7 = 0 for XAM, 1 for BLOCK XAM.        }
                #_LDXIM_ #$02           { Byte count.                             }
_SETADR=*       #_LDAZX_ #_L_MINUS1     { Copy hex data to                        }
                #_STAZX_ #_STL_MINUS1   {   'store index'.                        }
                #_STAZX_ #_XAML_MINUS1  { And to 'XAM index'.                     }
                #_DEX_                  { Next of 2 bytes.                        }
                #_BNE_   #@_SETADR      { Loop unless X = 0.                      }
_NXTPRNT=*      #_BNE_   #@_PRDATA      { NE means no address to print.           }
                #_LDAIM_ #$8D           { CR.                                     }
                #_JSR_   ##_ECHO        { Output it.                              }
                #_LDAZ_  #_XAMH         { 'Examine index' high-order byte.        }
                #_JSR_   ##_PRBYTE      { Output it in hex format.                }
                #_LDAZ_  #_XAML         { Low-order 'examine index' byte.         }
                #_JSR_   ##_PRBYTE      { Output it in hex format.                }
                #_LDAIM_ #$BA           { ":".                                    }
                #_JSR_   ##_ECHO        { Output it.                              }
_PRDATA=*       #_LDAIM_ #$04           { [Gigatron] 4 pixels wide blank.         }
                #_JSR_   ##_BLANK       { [Gigatron] Output it.                   }
                #_LDAIX_ #_XAML         { Get data byte at 'examine index'.       }
                #_JSR_   ##_PRBYTE      { Output it in hex format.                }
_XAMNEXT=*      #_STXZ_  #_MODE         { 0->MODE (XAM mode).                     }
                #_LDAZ_  #_XAML         {                                         }
                #_CMPZ_  #_L            { Compare 'examine index' to hex data.    }
                #_LDAZ_  #_XAMH         {                                         }
                #_SBCZ_  #_H            {                                         }
                #_BCS_   #@_TONEXTITEM  { Not less, so no more data to output.    }
                #_INCZ_  #_XAML         {                                         }
                #_BNE_   #@_MOD8CHK     { Increment 'examine index'.              }
                #_INCZ_  #_XAMH         {                                         }
_MOD8CHK=*      #_LDAZ_  #_XAML         { Check low-order 'examine index' byte    }
                #_ANDIM_ #$07           {   For MOD 8= 0                          }
                #_BPL_   #@_NXTPRNT     { Always taken.                           }
_PRBYTE=*       #_PHA_                  { Save A for LSD.                         }
                #_LSRA_                 {                                         }
                #_LSRA_                 {                                         }
                #_LSRA_                 { MSD to LSD position.                    }
                #_LSRA_                 {                                         }
                #_JSR_   ##_PRHEX       { Output hex digit.                       }
                #_PLA_                  { Restore A.                              }
_PRHEX=*        #_ANDIM_ #$0F           { Mask LSD for hex print.                 }
                #_ORAIM_ #$B0           { Add "0".                                }
                #_CMPIM_ #$BA           { Digit?                                  }
                #_BCC_   #@_ECHO        { Yes, output it.                         }
                #_ADCIM_ #$06           { Add offset for letter.                  }
_CHAROUT=*
_ECHO=*         #_PHA_                  { [Gigatron]                              }
                #_BRK_                  { [Gigatron] Transfer to vCPU for display.}
                #_PLA_                  { [Gigatron]                              }
                #_RTS_                  { [Gigatron] Return.                      }
_BLANK=*        #_CLC_                  { [Gigatron] Advance few pixels so BLOCK  }
                #_ADCZ_  #<Pos          { [Gigatron]   XAM doesn't wrap around    }
                #_STAZ_  #<Pos          { [Gigatron]   the 160 pixel wide screen. }
                #_RTS_                  { [Gigatron]                              }
                #$00                    { (unused)                                }
{FFFA}          ##$0000                 { (NMI)                                   }
{FFFC}          ##_RESET                { (RESET)                                 }
{FFFE}          ##$0000                 { (IRQ)                                   }

{-----------------------------------------------------------------------+
|                                                                       |
+-----------------------------------------------------------------------}

