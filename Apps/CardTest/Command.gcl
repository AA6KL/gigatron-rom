
{-----------------------------------------------------------------------+
|                                                                       |
|       Command.gcl                                                     |
|                                                                       |
|       !!! Work in progress !!!                                        |
|                                                                       |
|       - Command line editing                                          |
|       - Find command                                                  |
|       - Load command                                                  |
|       - Run command                                                   |
|       - Error reporting                                               |
|                                                                       |
+-----------------------------------------------------------------------}
gcl0x

{-----------------------------------------------------------------------+
|                                                                       |
|       Variables                                                       |
|                                                                       |
+-----------------------------------------------------------------------}

_r0=$30                         {First 16 bytes act as register set}
_r1=$32
_r2=$34
_r3=$36
_r4=$38
_r5=$3a
_r6=$3c
_r7=$3e

zpReset=$40                     {Start GCL vars from $40 instead of $30}

{-----------------------------------------------------------------------+
|                       RAM page 5                                      |
+-----------------------------------------------------------------------}

*=$503

{ XXX: Check for being loaded by System.gcl }

{-----------------------------------------------------------------------+
|} >_vLR++ [ret] {      RAM page $68                                    |
+-----------------------------------------------------------------------}
*=$68a0

{ PrintResult }
[def
  {
    Print OK or FAILED
  }
  push
  k=                            {Preserve vAC for caller}
  [if=0
    [def ``OK #10 #0]
  else
    [def ``FAILED #10 #0]
  ] PrintText!
  k
  pop ret
] PrintResult=

{-----------------------------------------------------------------------+
|} >_vLR++ [ret] {      RAM page $69                                    |
+-----------------------------------------------------------------------}
*=$69a0

{ PrintText -- writes q }
[def
  {
    Print text string, may include newline characters (#10)
    Returns 0
  }
  push                          {Save vLR because this is not a leaf subroutine}
  q=
  [do                           {Loop over characters}
    q, if<>0                    {Next character to be printed, unless 0}
    10^ [if<>0 10^ PrintChar!   {Print the character and advance cursor}
         else      Newline!]    {Or go to next line}
    <q++ loop]                  {Advance text pointer and loop}
  pop ret
] PrintText=

{-----------------------------------------------------------------------+
|} >_vLR++ [ret] {      RAM page $6b                                    |
+-----------------------------------------------------------------------}
*=$6ba0

{ PrintName }
[def
  {
    Print 8.3 filename
  }
  push
  p q=                          {Read pointer}
  11 [do k=                     {Loop over 11 positions}
    3^ [if=0
      q, 32^ if<>0              {If there is an extension}
      $2e PrintChar!]           {Period '.' before extension}
    q, <q++
    32^ [if<>0 32^              {Skip spaces (padding)}
      SafePrintChar!]           {Print the next character}
    k 1- if>0loop]
  pop ret
] PrintName=

{-----------------------------------------------------------------------+
|} >_vLR++ [ret] {      RAM page $72                                    |
+-----------------------------------------------------------------------}
*=$72a0

[def `---------- #0] Buffer=    {String space for 32-bit unsigned decimal}

{-----------------------------------------------------------------------+
|                                                                       |
|       File reading section                                            |
|                                                                       |
+-----------------------------------------------------------------------}

{-----------------------------------------------------------------------+
|} >_vLR++ [ret] {      RAM page $73                                    |
+-----------------------------------------------------------------------}
*=$73a0

{ LoadGt1 }
[def
  {
    Load GT1 file into RAM and store start address in Address.
    See Docs/GT1-files.txt for details on GT1
    XXX Support loading into audio channels
  }
  push

  [def `Loading` #0] PrintText!
  PrintName!

  OpenFile!                     {Prepare for reading}

  { Read file contents byte by byte }
  LoadByte!                     {Fetch first byte}

  [do                           {Chunk copy loop}
    >Address.                   {High-address comes first}
    LoadByte! <Address.         {Then the low address}
    LoadByte!                   {Byte count (0 means 256)}
    [do                         {Byte copy loop}
      \sysArgs5.                {Implicitly chops counter to 8 bits}
      LoadByte! Address.        {Poke next byte into memory}
      <Address++                {Advance write pointer in page}
      \sysArgs5, 1-             {Decrement counter}
      if<>0loop]
    LoadByte!                   {Go to next block}
    if<>0loop]
  LoadByte! >Address.           {Load execution address}
  LoadByte! <Address.

  LoadByte! [if>=0 0 Address=]  {Expect EOF, clear Address when missing}

  512 [do i=                    {Read tail of sector}
    SendOnesToCard!
    i 1- if>0loop]

  DisableCard!

  pop ret
] LoadGt1=

{-----------------------------------------------------------------------+
|} >_vLR++ [ret] {      RAM page $74                                    |
+-----------------------------------------------------------------------}
*=$74a0

{ Execute }
[def

  120 [do i=                    {Restore video table}
    i+ $fe+ p=
    i 7+ p. 8- if>0loop]

  Address
  [do if=0loop]                 {Stop if not executable}
  call                          {Run...}
] Execute=

{-----------------------------------------------------------------------+
|} >_vLR++ [ret] {      RAM page $78                                    |
+-----------------------------------------------------------------------}
*=$78a0

{-----------------------------------------------------------------------+
|                                                                       |
|       Main program                                                    |
|                                                                       |
+-----------------------------------------------------------------------}

[def #10 `Command #10 #0] PrintText!
0 \frameCount.                  {Reset timer}
InitCard!


{-----------------------------------------------------------------------+
|                       RAM page $7f                                    |
+-----------------------------------------------------------------------}

{-----------------------------------------------------------------------+
|                                                                       |
+-----------------------------------------------------------------------}
