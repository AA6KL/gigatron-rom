I want to set a standard for precompiled vCPU programs.
There are many emulators getting born, and Loader.ino will need to adopt something as well.
Both users of real Gigatrons and emulators benefit from a single standard.

Here is my proposal (made while very tired, but please feedback and I want to consolidate
this in a few days from now. So please shoot):

Marcel

=== DRAFT ===

My proposal is to use the same byte sequence that the ROM-to-RAM routine “sees”.
That is essentially the ROM sequence, but skipping the “trampolines” in the top 5 bytes of every
ROM page. Those bytes are not part of the program but part of the mechanism for accessing the data.

Something like this (from the top of my head):

n * [ <hiAddres> + <loAddress> + <segmentSize&255> + ( segmentSize * <dataByte> ) ] + 0

Programs are fragmented into RAM, in n>0 segments of 1 to 256 bytes each.
A segment don't cross a page boundaries. Segments may be in any order in the file.
They are loaded sequentially. So in case of overlap, the later one overwrites
the earlier one. (We can make movies with that!)

This will means that there is a translation to do in Loader.ino when loading such files,
but I think that is ok: The limitations on the Loader packets are influenced by what
the video signal looks like, I suggest we keep that kind of entanglement out of the
file format.

The ROM sequence ends with a terminating zero. This acts as an EOF for the “ROM file".
But I don’t have a strong argument in favour of it or against.
I feel it helps files readers to know when to expect the real EOF.
So my idea is to keep it in the file format:
hiAddress=0 indicates the end of the program stream.
And about loading code/data into zero page with such a file: do so in the first segment.

File name extension: .gt1 (For gigatron-1)

I feel that .vcpu is the lesser choice because it is a generic abbreviation for virtual CPU.
For example, the MyCPU uses the same abbreviation.
And retro-extensions should be 3 characters of course….
