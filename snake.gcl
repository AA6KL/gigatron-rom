
{-----------------------------------------------------------------------+
|                                                                       |
|       Snake game                                                      |
|                                                                       |
+-----------------------------------------------------------------------}

{
XXX Controller play
XXX 2x2 cell size
XXX Increasing speed and rising tones
XXX Less food
XXX Score and high score
XXX More points for getting to food faster
}

{-----------------------------------------------------------------------+
|                       RAM page 3                                      |
+-----------------------------------------------------------------------}
$0300:

{-
  First setup all subroutine definitions and variables, without making
  calls. This way allows use of vRET to hop from page to page during setup,
  with minimal overhead. At the end, run the main loop.
-}

[def
{-
  DrawChar(Char)

  Draw a 5x8 character on screen with the built-in font.
  `Char' must be in the 32-127 range (this is not checked)
-}
  {Map ASCII code to offset in font table}
  Char 82- [if<0 50+ i= \font32up
            else     i= \font82up] fontData= {Select low or high page}
  i i+ tmp= tmp+ i+    {Multiply by 5}
  fontData+ fontData=  {Add to page address to reach bitmap data for Char}
  $800 Pos+ q=         {Where to stop the inner drawing loop}

  {Draw 6 vertical slices: 5 using font data, the last with all-zeros}
  5 i= [do
    [if<>0 fontData 0; fontData<++ else 0] bits=
    Pos p=
    {Draw vertical slice}
    [do
      bits 128& [if=0 0 {Black} else Color] p!
      bits bits+ bits=
      p>++
      p q- if<0loop]
    Pos<++
    i 1- i= if>=0loop]
  ret
] DrawChar=

[def
{-
  DrawText(Text,Pos)

  Draw a zero-terminated text string to the screen.
  Character 10 acts as newline.
  There is no check for running off screen.
-}
  push
  [do
    Text? Char= {Next character to be printed}
    if<>0       {Zero termination}
      Text<++   {Advance text pointer}
      Char 10^ [if=0 Pos<! $800 Pos+ Pos=
                else DrawChar call]
      loop]
  pop call
] DrawText=

[def
{-
  Startup message
-}
  {XXX move this to a ROM table}
  {XXX display the counted memory}
  {XXX Make ROM version readable by applications}
  {XXX display number of free bytes}
  {   *** Gigatron 32K ***    }
  $20. $20. $20. $2a. $2a. $2a. $20. $47. $69. $67. $61. $74. $72. $6f. $6e.
  $20. $33. $32. $4b. $20. $2a. $2a. $2a. $20. $20. $20. $20. 10.
  {TTL color computer ROM v0  }
  $54. $54. $4c. $20. $63. $6f. $6c. $6f. $72. $20. $63. $6f. $6d. $70. $75.
  $74. $65. $72. $20. $52. $4f. $4d. $20. $76. $30. $20. $20. 10. 0.
] Welcome=

[def
{-
  DrawLine -- Draw line
-}
  Count i=
  [do if>0
    Color Pos!
    Pos Step+ Pos=
    i 1- i=
    loop]
  ret
] DrawLine=

{-----------------------------------------------------------------------+
|}ret{                  RAM page 4                                      |
+-----------------------------------------------------------------------}
$0400:

[def
{-
  Wait -- Wait Delay number of frames (range 1..255)
-}
  \frameCount? Delay+ 255& tmp=
  [do \frameCount? tmp- if<>0loop]
  ret
] Wait=

[def
{-
  Intro
-}
  push

  {Display welcome tekst}
  8 {Green} Color=
  $800 Pos=
  ClearScreen call
  Welcome Text=
  DrawText call
  60 Delay= Wait call

  pop call
] Intro=

[def
{-
  ClearScreen -- Clear screen from current position to bottom right
-}
  Pos p=
  Pos 255| 255-         {XXX Is there a better way to clear the low byte?}
  i= $8001 i+ i=        {Offset to move to next stripe}
  [do
    {Clear one stripe}
    p [do
      {p} \sysArgs0= \SYS_38_VCLEAR8 38@ {Clears 8 pixels vertically}
      $800 p+ p= if>0loop]
    {Next stripe}
    i+ p=
    255& 160^ if<>0loop]
  ret
] ClearScreen=

[def
{-
  Setup game
-}
  push

  {ClearScreen}
  $1000 Pos= ClearScreen call

  {Draw bounding box}
  4 {Dark Green} Color=
  $1000 Pos=
     +1 Step= 159 Count= DrawLine call
   $100 Step= 111 Count= DrawLine call
     -1 Step= 159 Count= DrawLine call
  -$100 Step= 111 Count= DrawLine call

  {Place snake}
  $4450 Head= Tail=
  0 Grow=
  3 {Yellow} Color=
  $0001 stepU=
  $0100 stepV=
  1 Delay= {Game speed}

  pop call
] SetupGame=

[def
{-
  Game over
-}
  push
  $4435 Pos=
  [def
    $47. $41. $4d. $45. $20. $4f. $56. $45. $52. 0. {GAME OVER}
  ] Text=
  DrawText call
  pop call
] GameOver=

{-----------------------------------------------------------------------+
|}\vRET>++ ret{         RAM page 5                                      |
+-----------------------------------------------------------------------}
$0500:

[def
{-
  RunGame --
-}
  push

  [do
    {Auto snake control}

    TurnL p=
    TurnR q=
    {Look left}  Head stepV- peek [if<>0 32- if<>0 0 p=]
    {Look right} Head stepV+ peek [if<>0 32- if<>0 0 q=]
    {Look ahead} Head stepU+ peek [if=0 \entropy? $7f& 3- [if<0 1 else 0]]
    [if<>0 32- if<>0
      {Wall or random direction change: must go left or right.
       Pick randomly, without bias, but don't crash into a wall when not needed}
      p [if=0 q else
        q [if=0 p else
         \entropy? 1& [if=0 p else q]
        ]
      ]
      [if<>0 call]
    ]

    {Leave a trace behind in the pixels two high bits}
    {Bit 15 and bit 0 of stepU identify the direction}
    stepU>? 128& tmp=
    stepU     1& [if<>0 64] tmp+
    10+ {Yellow} Head!

    {Make step}
    Head stepU+ Head=
    Head? [if<>0
      32- [if<>0 pop call] {Hit something}
      {Eat food}
      Grow 1+ Grow=
      2 \soundTimer!
    ]
    15 {Bright Yellow} Head!

    {Update tail}
    Grow [if>0
      1- Grow= {Do nothing while growing}
    else
      Tail? tmp=
      0 {Black} Tail!

      [def $0100 $0001 $ff00 $ffff]
      tmp 64& [if=0 $0100 else $0001] x=
      tmp 128& [if=0 x else 0 x-] Tail+ Tail=
    ]

    AddFood call

    Wait call
    loop]

] RunGame=

{-----------------------------------------------------------------------+
|}\vRET>++ ret{         RAM page 6                                      |
+-----------------------------------------------------------------------}
$0600:

[def
  0 stepV- tmp=
  stepU stepV=
  tmp   stepU=
  ret
] TurnL=

[def
  0 stepU- tmp=
  stepV stepU=
  tmp   stepV=
  ret
] TurnR=

[def
  [do
    \SYS_34_RANDOM 34@ Pos=

    Pos<?      128- [if<0 158+] 1+   {1..158}   Pos<!
    Pos>? 127& 64-  [if<0 110+] $11+ {$11..$fe} Pos>!

    Pos? if<>0loop]

  32 {Blue} Pos!
  ret
] AddFood=

{--- Run ---}

Intro call

[do
  SetupGame call

  RunGame call

  3 {Bright Red} Color= Head!
  GameOver call
  120 \soundTimer!

  240 Delay= Wait call

  loop]

{-----------------------------------------------------------------------+
|       End                                                             |
+-----------------------------------------------------------------------}

