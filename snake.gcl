
{-----------------------------------------------------------------------+
|                                                                       |
|       Snake game                                                      |
|                                                                       |
+-----------------------------------------------------------------------}

{
XXX Non-black playfield
XXX Smarter border drawing
XXX Leave poison at tail, to prevent killing player (brown?)
XXX Increasing speed and rising tones
XXX Score and high score
XXX Better title bar
XXX Accelerated text drawing
XXX More points for getting to food faster
}

{-----------------------------------------------------------------------+
|                       RAM page 3                                      |
+-----------------------------------------------------------------------}
$0300:

{-
  First setup all subroutine definitions and variables, without making
  calls. This way allows use of vRET to hop from page to page during setup,
  with minimal overhead. At the end, run the main loop.
-}

[def
{-
  DrawChar(Char)

  Draw a 5x8 character on screen with the built-in font.
  `Char' must be in the 32-127 range (this is not checked)
-}
  {Map ASCII code to offset in font table}
  Char 82- [if<0 50+ i= \font32up
            else     i= \font82up] fontData= {Select low or high page}
  i i+ tmp= tmp+ i+    {Multiply by 5}
  fontData+ fontData=  {Add to page address to reach bitmap data for Char}
  $800 Pos+ q=         {Where to stop the inner drawing loop}

  {Draw 6 vertical slices: 5 using font data, the last with all-zeros}
  5 i= [do
    [if<>0 fontData 0; fontData<++ else 0] bits=
    Pos p=
    {Draw vertical slice}
    [do
      bits 128& [if=0 0 {Black} else Color] p!
      bits bits+ bits=
      p>++
      p q- if<0loop]
    Pos<++
    i 1- i= if>=0loop]
  ret
] DrawChar=

[def
{-
  DrawText(Text,Pos)

  Draw a zero-terminated text string to the screen.
  Character 10 acts as newline.
  There is no check for running off screen.
-}
  push
  [do
    Text? Char= {Next character to be printed}
    if<>0       {Zero termination}
      Text<++   {Advance text pointer}
      Char 10^ [if=0 Pos<! $800 Pos+ Pos=
                else DrawChar call]
      loop]
  pop call
] DrawText=

[def
{-
  Startup message
-}
  {XXX move this to a ROM table}
  {XXX display the counted memory}
  {XXX Make ROM version readable by applications}
  {XXX display number of free bytes}
  {   *** Gigatron 32K ***    }
  $20. $20. $20. $2a. $2a. $2a. $20. $47. $69. $67. $61. $74. $72. $6f. $6e.
  $20. $33. $32. $4b. $20. $2a. $2a. $2a. $20. $20. $20. $20. 10.
  {TTL color computer ROM v0  }
  $54. $54. $4c. $20. $63. $6f. $6c. $6f. $72. $20. $63. $6f. $6d. $70. $75.
  $74. $65. $72. $20. $52. $4f. $4d. $20. $76. $30. $20. $20. 10. 0.
] Welcome=

[def
{-
  DrawLine -- Draw line
-}
  Count i=
  [do if>0
    Color Pos!
    Pos Step+ Pos=
    i 1- i=
    loop]
  ret
] DrawLine=

{-----------------------------------------------------------------------+
|}ret{                  RAM page 4                                      |
+-----------------------------------------------------------------------}
$0400:

[def
{-
  Game over
-}
  push
  $4435 Pos=
  [def
    $47. $41. $4d. $45. $20. $4f. $56. $45. $52. 0. {GAME OVER}
  ] Text=
  DrawText call
  pop call
] GameOver=

[def
{-
  Wait -- Wait Delay number of frames (range 1..255)
-}
  \frameCount? Delay+ 255& tmp=
  [do \frameCount? tmp- if<>0loop]
  ret
] Wait=

[def
{-
  Intro
-}
  push

  {Display welcome tekst}
  12 {Bright Green} Color=
  $800 Pos= ClearScreen call
  Welcome Text= DrawText call
  60 Delay= Wait call

  pop call
] Intro=

[def
{-
  ClearScreen -- Clear screen from current position to bottom right
-}
  Pos p=
  Pos 255| 255-         {XXX Is there a better way to clear the low byte?}
  i= $8001 i+ i=        {Offset to move to next stripe}
  [do
    {Clear one stripe}
    p [do
      {p} \sysArgs0= \SYS_38_VCLEAR8 38@ {Clears 8 pixels vertically}
      $800 p+ p= if>0loop]
    {Next stripe}
    i+ p=
    255& 160^ if<>0loop]
  ret
] ClearScreen=

[def
  0 stepV- tmp=
  stepU stepV=
  tmp   stepU=
  ret
] TurnL=

[def
  0 stepU- tmp=
  stepV stepU=
  tmp   stepV=
  ret
] TurnR=

[def
  Pos    p=
  Color  Pos!
  Pos<++ Pos!
  Pos>++ Pos!
  p>++ p!
  ret
] DrawBlock=

{-----------------------------------------------------------------------+
|}\vRET>++ ret{         RAM page 5                                      |
+-----------------------------------------------------------------------}
$0500:

[def
{-
  RunGame --
-}
  push

  [do
    {Control is one of LaunchControl, PlayerControl or AutoControl}
    Control call

    {Leave a trace behind in the pixels two high bits}
    {Bit 15 and bit 0 of stepU identify the direction}
    stepU>? 128& tmp=
    stepU     1& [if<>0 64] tmp+

    11+ {Orange} Color= Head Pos= DrawBlock call {Tail color and trace}

    {Make step}
    Head stepU+ stepU+ Head=

    Head? [if<>0
      8^ [if<>0 {Hit wall or poison} pop call]
      {Eat food}
      Grow 1+ Grow= {XXX More at higher difficulty level}
      2 \soundTimer!
    ]
    63 {White} Color= Head Pos= DrawBlock call

    {Update tail}
    Grow [if>0
      1- Grow= {Do nothing while growing}
      8 {Green} Color= AddFood call {Food}
      60 {Bright Cyan} Color= AddFood call {Poison}
    else
      Tail? tmp=
      0 {Black} Color= Tail Pos= DrawBlock call

      tmp 64&  [if=0 $0100 else $0001] x=
      tmp 128& [if=0 x else 0 x-]
      {XXX Tail+ Tail=}
      tmp= Tail tmp+ tmp+ Tail=
    ]

    Wait call
    loop]
] RunGame=

[def
  push
  [do
    \SYS_34_RANDOM 34@ Pos=
    Pos<?      128- [if<0 157+] 1+   {1..157}   $fe& Pos<!
    Pos>? 127& 64-  [if<0 109+] $11+ {$11..$fd} $fe& Pos>!
    Pos? if<>0loop]
  DrawBlock call
  pop call
] AddFood=

{-----------------------------------------------------------------------+
|}\vRET>++ ret{         RAM page 6                                      |
+-----------------------------------------------------------------------}
$0600:

[def
  push
  {If a key is pressed, start restart the game}
  \serialRaw? $3f& $3f^ [if<>0 SetupGame call pop call]

  {Auto snake control}
  TurnL p=
  TurnR q=
  {Look ahead} Head stepU+ stepU+ peek tmp=
  {Look left}  Head stepV- stepV- peek [if<>0 8^ [if<>0 0 p= else 0 q= 1 tmp=]]
  {Look right} Head stepV+ stepV+ peek [if<>0 8^ [if<>0 0 q= else 0 p= 1 tmp=]]
                                  tmp  [if=0 \entropy? $7f& 6- [if<0 1 else 0]]
  [if<>0 8^ if<>0
    {Wall or random direction change: must go left or right.
     Pick randomly, without bias, but don't crash into a wall when not needed}
    p [if=0 q else
      q [if=0 p else
       \entropy? 1& [if=0 p else q]
      ]
    ]
    [if<>0 call {TurnL or TurnR}]
  ]
  pop call
] AutoControl=

[def
  \serialRaw? $fe^ {~buttonRight} [if=0 $0001 stepU=]
  \serialRaw? $fd^ {~buttonLeft}  [if=0 $ffff stepU=]
  \serialRaw? $fb^ {~buttonDown}  [if=0 $0100 stepU=]
  \serialRaw? $f7^ {~buttonUpp}   [if=0 $ff00 stepU=]
  {Note: `stepV' is not used once under player control}
  ret
] PlayerControl=

{-----------------------------------------------------------------------+
|}\vRET>++ ret{         RAM page 7                                      |
+-----------------------------------------------------------------------}
$0700:

[def
{-
  Setup game
-}
  push

  {Remove any 'AUTO' text}
  12 {Green} Color= $0800 Pos=
  [def $20. $20. $20. $2a. 10. 0.] Text= DrawText call

  {ClearScreen}
  ClearScreen call

  {Draw bounding box}
  32 {Blue} Color=
  $1000 Pos=
     +1 Step= 159 Count= DrawLine call
   $100 Step= 111 Count= DrawLine call
     -1 Step= 159 Count= DrawLine call
  -$100 Step= 110 Count= DrawLine call
     +1 Step= 158 Count= DrawLine call
   $100 Step= 109 Count= DrawLine call
     -1 Step= 157 Count= DrawLine call
  -$100 Step= 109 Count= DrawLine call

  {Get ready message}
  $4432 Pos= 3 {Red} Color=
  [def
    $47. $45. $54. $20. $52. $45. $41. $44. $59. $21. 0. {GET READY!}
  ] Text= DrawText call
  60 Delay= Wait call
  $4432 Pos=
  [def
    $20. $20. $20. $20. $20. $20. $20. $20. $20. $20. 0.
  ] Text= DrawText call

  {Place snake}
  $4430 Head= Tail=
  0 Grow=
  $0001 stepU= $0100 stepV= {Start right}

  LaunchControl Control=

  8 {Green} Color=
  25 i=
  [do
    AddFood call
    i 1- i=
  if>0loop]

  2 Delay= {Game speed}

  pop call
] SetupGame=

{-----------------------------------------------------------------------+
|}$08a0 call{           RAM page 8                                      |
+-----------------------------------------------------------------------}
$08a0:

[def
{-
  After game started, 
-}
  push
  $449c Head- [if=0
    {Switch to autopilot when reaching this position}
    11 {Orange} Color=
    $0800 Pos=
    [def $41. $55. $54. $4f. 0.{AUTO}] Text= DrawText call
    AutoControl Control= call
  else
    {Disable launch control once a button is pressed}
    \serialRaw? 255^ [if<>0 PlayerControl Control= call]
  ]
  pop call
] LaunchControl=

{--- Run ---}

Intro call

[do
  SetupGame call
  RunGame call

  3 {Bright Red} Color= Head Pos= DrawBlock call
  GameOver call
  120 \soundTimer!

  240 Delay= Wait call

  loop]

{-----------------------------------------------------------------------+
|       End                                                             |
+-----------------------------------------------------------------------}

