
{-----------------------------------------------------------------------+
|                                                                       |
|       Reset Gigatron (pseudo) hardware                                |
|                                                                       |
+-----------------------------------------------------------------------}

gcl0x

{ Setup video indirection table }
[def
  $100 p= {videoTable}
  $800 q= {frame}
  [do
    q>,  p. p<++          { Y[i] = 8..127}
    0    p. p<++          {dX[i] = 0}
    q>++ q  if>0loop]
  ret
] SetupVideo=

[def
 i=
 Channel $fa| p= 1| q=
 \notesTable i+ 0? p.
 \notesTable i+ 1? q.
 Channel>++
 ret
] PlayNote=

{
  Play a G-major chord with 4 channels
}
[def
  push
  $100 Channel=
   88 {G-3} PlayNote!
  112 {G-4} PlayNote!
  120 {B-4} PlayNote!
  126 {D-5} PlayNote!
  120 \soundTimer.
  pop ret
] PlayChord=

{
  +--------------------------+
  |   *** Gigatron ??K ***   |
  |TTL microcomputer ROM v0x |
}
[def
  {Line 1}
  $2a# $2a# $2a# $20# $47# $69# $67# $61#
  $74# $72# $6f# $6e# $20# $3f# $3f# $4b#
  $20# $2a# $2a# $2a# 10#
  {Line 2}
  $54# $54# $4c# $20# $6d# $69# $63# $72#
  $6f# $63# $6f# $6d# $70# $75# $74# $65#
  $72# $20# $52# $4f# $4d# $20# $76# $30#
  $78# 0#
] StartupMessage=

{ Convert memory size into decimal text }
{StartupMessage} 13+ p=         {Position within StartupMessage for memory size}
$2f2f Char=                     {Two ASCII counters, both starting at '0'-1}
\memSize, 1- 255& 1+            {Number of pages as counted at boot}
[do Char>++ 40- if>=0loop] 40+  {Count number of 10K chunks}
[do Char<++  4- if>=0loop]      {Count number of 1K chunks}
Char>, p. p<++ Char p.          {Put decimals into StartupMessage}

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 4                                      |
+-----------------------------------------------------------------------}
$0400:

[def {DrawChar}
{
  Draw a 5x8 character on screen with the built-in font.
  `Char' must be in the 32-127 range (this is not checked)
}
  {Map ASCII code to offset in font table}
  Char 82- [if<0 50+ i= \font32up
            else     i= \font82up] fontData= {Select low or high page}
  i i+ tmp= tmp+ i+    {Multiply by 5}
  fontData+ fontData=  {Add to page address to reach bitmap data for Char}
  $800 Pos+ q=         {Where to stop the inner drawing loop}

  {Draw 6 vertical slices: 5 using font data, the last with all-zeros}
  5 i= [do
    [if<>0 fontData 0? fontData<++ else 0] bits=
    Pos p=
    {Draw vertical slice}
    [do
      bits 128& [if=0 0 {Black} else 8 {Green}] p.
      bits bits+ bits= {Shift left}
      p>++
      p q- if<0loop]
    Pos<++
    i 1- i= if>=0loop]
  ret
] DrawChar=

[def {ClearScreen}
  $800 p= $8801 i=
  [do
    p [do
      \sysArgs0= \SYS_38_VClear8 38@ {Clears 8 pixels vertically}
      $800 p+ p= if>0loop]
    i+ p=
    255& 160^ if<>0loop]
  ret
] ClearScreen=

[def {DrawText}
  push
  [do
    Text, if<>0 Char= Text<++ {while((Char=*Text++)!=0)...}
    10^ [if=0 Pos<. Pos>, 8+ Pos>. else DrawChar!]
    loop]
  pop ret
] DrawText=

SetupVideo!
ClearScreen!
$812 Pos= StartupMessage Text= DrawText!
PlayChord!

[do loop]

{-----------------------------------------------------------------------+
|                                                                       |
+-----------------------------------------------------------------------}

