I want to set a standard for precompiled vCPU programs.  There are
many emulators getting born, and Loader.ino will need to adopt
something as well.  Both users of real Gigatrons and users of
emulators benefit from a single standard.

Format
======

The format is is based on the same byte sequence that the ROM-to-RAM
routine sees in ROM v1 (SYS_Exec_88).  That is essentially the
in-ROM sequence of operand bytes, but skipping the trampolines in
the top 5 words of every ROM page.  Those instructions are not part
of the program but part of the mechanism for accessing the data.
Two extra bytes are added for a start address.

vCPU programs are fragmented in RAM because the RAM organisation
is fragmented.  Both Snake and Racer protrude into the unused bytes
of the video area.  In essence, the file format is a list of n>0
segments of 1 to 256 bytes each. A segment isn't allowed to cross
a page boundary.

Gt1File :=
        n * ( <hiAddress>
            + <loAddress>
            + <segmentSize & 255>
            + segmentSize * <dataByte> )
        + <0>
        + <hiStart>
        + <loStart>
        EOF

<..> represents a single byte. The rest is meta. Hope the idea is
clear. To be specific: The number "n" itself will not appear at the
start of the file.

The first two bytes are the RAM address of the first byte to be
loaded, in big-endian order.  (I'm a little-endian guy, but this
order is useful in the ROM-to-RAM loader). Segments may be in any
order in the file, with one exception described below.  Segments
are loaded sequentially.  In case of overlap, the later one overwrites
the earlier one.  (We can make movies with that!) The end of the
segment list is implied by the terminating zero-byte as high address.

This format implies that there is a translation to do in Loader.ino
when loading such files into a Gigatron, but I think that is ok:
the limitations on the Loader packets (60 bytes) are influenced by
what the video signal looks like. I suggest we keep that kind of
entanglement out of the file format.

Starting address
================

Additionally, 2 bytes are always appended that indicate the start
address for execution. The bytes must be present and zero ($0000)
means "no execution". Although the Gigagron ROM is little-endian
where possible, all addresses in this format are stored as big-endian.

The original in-ROM format doesn't have these bytes. This is an
extension of the layout as used in ROM v1.

Zero-page data
==============

Segments may be in any order in the file, except when data has to
go into the zero-page: if you have that, it MUST be the first in
the sequence. So there can be no more than one of those segments.
This is an extension of the layout as used in ROM v1, which can't
load data into the zero-page. But it is useful for initializing
variables.

Also there is no encoding for a zero-length program.  Use an
zero-length file for that use case, for all I care...  or encode a
known constant, such as [0]=0 as follows: 00 00 01 00 00 00

Extension
=========

File name extension: .gt1 (For Gigatron-1)

I feel that .vcpu is the lesser choice because it is a generic
abbreviation for virtual CPU.  For example, the MyCPU uses the same
abbreviation for something similar.  And ... retro-extensions should
be 3 characters of course...

ROM bindings
============

GT1 files contain vCPU instructions and rely on things that are
defined by the ROM on the target platform. The ROM bindings (ABI)
for ROM v1 are listed in interface.json.  If your program depends on
some extension of this, then it is nice not to crash other people's
machines. ROMs with different bindings should use a different romType
value in address $0021. GT1 programs can then check this value and
not continue when seeing an unexpected value.

The romType is in RAM, so it is always possible for the user to
modify its value prior before loading an unwilling GT1 file.

BUT: If your program requires a custom ROM, then GT1 is probably not
the right format. Just publish it as a ROM dump instead.

On using romType
================
ROM v1  0x1c    Initial Gigatron kit release
ROM v2  0x20    ledState_v2 (write-only, settable to 0 for run and 1 for stop)
                SYS_SetMemory_v2_54
                SYS_SetVideoMode_v2_80

Purpose of romType variable
---------------------------
The intent is that GT1 applications can detect the presense of ROM
features by inspecting only this memory location.  There are two
types of ROM features: those listed in interface.json, and those
not listed there. Features might still be described elsewhere, but
just by being documented doesn't make a feature part of the intended
interface.  The goal of interface.json is to provide a STABLE
interface between GT1 files and ROM versions that can load such
files. We only add new things to interface.json, never(*) remove,
rename or change bindings once they are defined.  This should help
with future compatibility of GT1 files. Things that are not in
interface.json can and will disappear or change at any time and
should not be relied on. (For example: some zero-page variables
used by the video loop, SYS functions, entry points in code pages,
location of application ROM images, built-in pictures, the shape
of the font, etc...).

Value increases with ROM releases
---------------------------------
romType is an unsigned 8-bit value that strictly goes up with each
"official" ROM release, no matter how small the delta. So if you
want to test for the presence of a feature, compare the magnitude
of this value to that of the first ROM that introduced it. For
historic reasons, the first romType value was 0x1c for ROMv1. Don't
rely on the meaning of individual bits. Also, the value can go up
by an arbitrary number with each release, so there no way to
"calculate" the displayed version name as will be know by the user.
(We could do such a thing in case we decide in the future to give
special meaning to bits anyway.)

With this it is not possible that two "official" ROM releases have
the same romType value. However, third-party ROMs with compatible
GT1 loading capability are adviced to use the same romType value
as the ROM version they were derived from.

End user is in control
----------------------
The romType value is in RAM, not ROM! This is on purpose, so that
the end user always has an escape hatch and can put a value in there
that a troublesome GT1 file expects to see. The user has the final
say on what happens on the system, not the file... So please don't
try to second-guess the romType value as a programmer.

Don't crash
-----------
GT1 files that need a certain interface feature that is not present
in earlier ROMs should degrade in performance or functionality, or
fail gracefully, but definitely NOT crash. By publishng a file as
GT1 you're signaling that you expect the file can be loaded with
any past, present or future ROM version. To help remind the programmer
which features were intruduced later, and therefore required a
romType check before use, we add a ROM version number to new
functions.

32K vs. 64K
-----------
It is understood that a program that really requires an extended
64K memory crashes while loading on a 32K system. In that case
please end the filename with "_64K.gt1".  The main idea is still
that a user doesn't get unexpected surprises.

Hack files
----------
Of course the Gigatron is an open system, so there will be plenty
of methods to detect what kind of ROM you're running on. If you
make a GT1 file that you know depends on undocumented features (or
better phrased: features not listed in interface.json), it is adviced
to give it a different extension.  For example 'Demo3_ROMv1only.gt1x'
I always append a 'x' to such experimental files with no expectation
of compatibility.

Evolution and process
---------------------
We should be pragmatic about these rules. A list of simple numbers
won't ever fully describe the exact boundary of the INTENDED
interface: there will always be some assumptions that remain implicit,
such as the meaning of certain values or the exact sequence of
certain events. It is also possible that some feature wasn't declared
as a stable interface, but that there are good reasons to make it
so retro-actively. Please feel free to discuss in GitHub or in the
user forum. Basically you're then asking "I'm using this implicit
feature now and I would like it to keep working in future ROMs, can
we fixate it and document it?".

Incompatible ROM upgrades
-------------------------
If we ever decide to make a truly incompatible step in ROM versions,
one that that would break many GT1 files out there, we should start
using a different extension for object files for the new platform
(GT2 comes to mind). This is possible if we change something big
about the architecture, such as the memory map or vCPU instruction
set

(*) Have said that, we retro-actively removed 'SYS_Reset_36' and
'SYS_NextByteIn_32' from the interface files. Their inclusion turned
out to be a bit premature and they had to change after ROM v1.
There is no alternative for SYS_ReadNextInput_32 in interface.json
yet: it is part of Loader, but that is logically not a GT1 file.
'SYS_Reset_36' was just an intermediate in the soft reset sequence.
The proper way to initiate that is by redirectng the vCPU vReset
(0x1f0). So we have retro-actively added vReset to the JSON files
instead.

-- End of document --
