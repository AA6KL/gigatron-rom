
{-----------------------------------------------------------------------+
|                                                                       |
|       Racer game                                                      |
|                                                                       |
+-----------------------------------------------------------------------}

gcl0x

{
Todo:
XXX Randomized trajectory
XXX Add more interesting camera behavior (DX0)
XXX Fix horizon movement
XXX Remove curve debugging (or change it into an obstacle)
XXX Engine sound
XXX Slower acceleration
XXX Breaking and automatic slow-down to cruising speed
XXX Improve track indicator

Maybe:
XXX Freeze time display for the first 2 seconds after completing a lap
XXX Increase minimum speed when completing a lap
XXX Obstacles? Other cars / bicycles?
XXX Car crash sequence when hitting curb? Easy to make it scatter...
XXX Add breaking sound
XXX Add tire screech sound
XXX Move car forward when going faster
XXX Finish line?
XXX Background music score?
XXX Crash sound effect?
XXX Sprite acceleration?
XXX Image compression?

 Many ideas here come from Lou's Pseudo 3d page at
 http://www.extentofthejam.com/pseudo/
}

{-----------------------------------------------------------------------+
|                       RAM page 3                                      |
+-----------------------------------------------------------------------}

[def {QDrawChar -- Pos Color Char

  Draw a 5x8 character on screen with the built-in font.
  `Char' must be in the 32-127 range (this is not checked)
}
  {Map ASCII code to offset in font table}
  Char 82- [if<0 50+ i= \font32up
            else     i= \font82up] fontData= {Select low or high page}
  i i+ tmp= tmp+ i+    {Multiply by 5}
  fontData+ fontData=  {Add to page address to reach bitmap data for Char}

  {Draw 6 vertical slices: 5 using font data, the last with all-zeros}
  BgColor \sysArgs0.
  Color   \sysArgs1.
  Pos     \sysPos=
  $fb i= [do
    fontData 0? fontData<++ \sysArgs2. \SYS_134_VDrawBits 134@
    \sysPos<++
    i<++ i if<>0loop]
  Pos ret
] QDrawChar=

[def {
  DrawText(Text,Pos)

  Draw a zero-terminated text string to the screen.
  There is no check for running off screen.
}
  push
  [do
    Text, Char= {Next character to be printed}
    if<>0       {Zero termination}
      Text<++   {Advance text pointer}
      QDrawChar! 6+ Pos=
      loop]
  pop ret
] DrawText=

[def {ControlRaceCar}
  {Update time with actual elapsed frames}
  \frameCount, LastFrame- 255& \sysArgs7. Time+ [if<0 $7fff] Time=
  \frameCount, LastFrame=

  {Car drift and horizon shift are proportional to speed}
  Speed [do i=
    CarX DriftX- CarX=
    HorizonX HorizonDX+ HorizonX=
    i 1- if>0loop]

  {Steering}
  0 Steer=
  \serialRaw, $01& {~buttonRight} [if=0  $200 CarX+ CarX= +1 Steer=]
  \serialRaw, $02& {~buttonLeft}  [if=0 -$200 CarX+ CarX= -1 Steer=]
  \serialRaw, $40& {~buttonA}     [if=0 Speed 5- [if<0 Speed<++]]
  \serialRaw, $80& {~buttonB}     [if=0 Speed 1- [if>0 Speed=]]
  ret
] ControlRaceCar=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 4                                      |
+-----------------------------------------------------------------------}
$0400:

[def $47# $69# $67# $61# $74# $72# $6f# $6e# 0# ] GigatronText=

[def {
  Wait -- Wait Delay number of frames (range 1..255)
}
  \frameCount, Delay+ 255& tmp=
  [do \frameCount, tmp- if<>0loop]
  ret
] Wait=

[def {ExtractDigit -- Value Radix}
  $30 Char=
  Value Radix- [if>=0
    [do
      Value=
      Char<++
      Radix-
      if>=0loop]
  ]
  ret
] ExtractDigit=

[def {
  DrawPixels -- Write a single line of pixels on two correspinding
                road scanlines (light and dark). Remove previous
                pixels, if any.
                XXX This is probably better done as a SYS call
}
  {Setup page reference for write pointers}
  Video, 254&  p>. 1| q>. Video<++

  {Find segment to clear from position p[0] to position q[0]}
  0 p<. q<.
  p, i= q, i- i=        {i = q[0] - p[0]}
  p, p<. q<.            {p,q = p+p[0], q+p[0]}

  {Clear previous object}
  {XXX Only clear pixels outside new area?}
  [do
    21 p. q.            {Clear pixel on both lines}
    p<++ q<++
    i 1- i=
    if>0loop]

  {Set low bytes of p and q, to turn them into pixel write pointers}
  Sprite s=             {Pixel read pointer}
  0 p<.                 {First let p point to start of page}
  Video, X+ X= s, X+    {First byte in pixel data is offset}
  p.                    {Remember starting point}
  p<. q<.               {Set low bytes}

  {Draw actual pixels}
  s<++
  [do
     p, 21^ Collision+ Collision=
     s,
     p. p<++
     q. q<++
     s<++ s, if<>0loop]

  {Remember end point for later removal}
  0 q<. p<, q.

  Video 3+ Video=
  ret
] DrawPixels=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 5                                      |
+-----------------------------------------------------------------------}
$0500:

[def
  push
  $2080 Pos=

  0 Width= {(Half) road width}
  [do
    Width 1+ Width=

    {Even lines are dark}
    63 {White}        CurbColor=
    12 {Bright Green} GrassColor=
    SetupSegment!
    Pos>++

    {Odd lines are bright}
    3 {Bright Red}    CurbColor=
    8 {Green}         GrassColor=
    SetupSegment!
    Pos>++

    Pos if>=0loop]

  {Setup undo infomation for last lines (for car sprite)}
  $7400 [do \POKE# \vAC# \vAC>++ if>0loop]

  pop ret
] SetupRoad=

[def
  {Draw road segment}
  Pos p=
  Width [do tmp=
    21 p. p<++
    tmp 1- if>0loop]

  {Draw curb}
  p q=
  Width [do 8- [if>0 tmp=
      q 1- q=
      CurbColor q.
      tmp loop]]

  {Draw grass}
  [do
    GrassColor p. p<++
    p<, if<>0loop]

  {Draw mirror image}
  [do
    p 255^ peek p. p<++
    p<, 128^ if<>0loop]

  ret
] SetupSegment=

[def {
  DrawTime -- Render elapsed time (in frams) as M:SS.s -- Value Radix
              Skip unchanged digits
}
  push
  {Note we have 3599 instead of 3600. Assuming a 6.25MHz clock, 200 cycles per
   scanline and 521 scanlines per frame, the Gigatron runs at 59.98 frames per
   second and that is ~3599 frames per minute. With this single correction the
   overall timekeeping error is within the tolerances of the crystal itself.}
  3599 Radix= ExtractDigit!
       {\sysArgs7, $30+ Char= {Show frame speed for debugging}}
       Prev3 Char- [if<>0 Char Prev3= QDrawChar! else Pos] 12+ Pos=
   600 Radix= ExtractDigit!
       Prev2 Char- [if<>0 Char Prev2= QDrawChar! else Pos]  6+ Pos=
    60 Radix= ExtractDigit!
       Prev1 Char- [if<>0 Char Prev1= QDrawChar! else Pos] 12+ Pos=
     6 Radix= ExtractDigit! QDrawChar!
  pop ret
] DrawTime=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 6                                      |
+-----------------------------------------------------------------------}
$0600:

[def {DrawRoad}
  $74d0 p=                      {array[48], in display memory but out of view}
  0 X= DX=

  NextTurn Distance- tmp=
  tmp+ tmp=
  \invTable tmp+ 53? tmp=       {59 .. 11}

  {Debug marker}
  tmp+ 10+ z>. 192 z<. NextDDX z. z>++ z.

  {Road curvature for bottom segment}
  197 tmp+ i=                   {(byte)-47 .. (byte)-1}
  [do
    X>, p. p<++
    DX DDX+ DX=
    X+ X=
    i<++ i if<>0loop]

  {Road curvature for top segment}
  [do
    X>, p. p<++
    DX NextDDX+ DX=
    X+ X=
    p<, if<>0loop]

  {Update video table low bytes for road}

  {Prepare SYS call}
  $01ed      \sysArgs0= {"p"}
  $74d1      \sysArgs2= {"q"}
  $74d0 peek \sysArgs4= {"X"}

  HorizonX>, tmp=                    {Pivot 12px from bottom (front of car)}
  $74d5 peek 48+ tmp- tmp=

  $0111 s=                           {Video table: start of sky}

  {Sync with video loop}
  [do \vBlank, if=0loop]

  {Set top of horizon}
  HorizonX>, s.

  {Copy to video table. This is most timing-critical for a smooth road update}
  \SYS_40_Racer_UpdateVideoX 40@
  {This SYS call self-repeats for a total of 47 times and is equivalent to:
    [do
      q, X- p. p 4- p=
      q, X= q<++
      q<, if<>0loop]
  }
  \sysArgs0; s= {$0131 bottom of sky (horizon)}
  \sysArgs4; X=

  {Set bottom of sky}
  tmp X- s.

  ret
] DrawRoad=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 7                                      |
+-----------------------------------------------------------------------}
$0700:

[def {
  Play a single game until the end
}
  push

  {Run game loop}
  0 Collision=
  [do
    AdvanceCar!

    {See if we have reached the finish}
    Distance
    [if<0
      Time BestTime- [if<0 Time BestTime=]

      {XXX Too complex. Just don't use DrawTime here}
      4 Prev1= Prev2= Prev3=
      [do j=
        BestTime Value= $87c Pos= DrawTime!
        j 1- if>0loop]

      {New lap}
      0 Time=
      $fc00 NextTurn+ NextTurn=
      $fc00 Distance+ Distance=
    ]

    {See if we have reached the next turn}
    {Distance} NextTurn-
    [if>0
      NextDDX DDX=                                      {Shift to next segment}
      \entropy, 31& 40+ NextTurn+ NextTurn=             {NextTurn < 100}
      \entropy, 32& [if<>0 24] NextDDX=                 {Turn right}
      \entropy, 64& [if<>0 24] NextDDX- NextDDX=        {... and/or left}
    ]

    {Draw bending of the road}
    DrawRoad!

    {Drift and horizon movement}
    DDX     DriftX=
    DriftX+ DriftX=
    DriftX+ DriftX=
    DriftX+ DriftX= HorizonDX=

    {Car "physics" and driver input}
    ControlRaceCar!

    {Draw race car}
    DrawRaceCar!

    {Update the perspective illusion}
    DrawGrass!

    {Draw current time}
    Time Value= $801 Pos= 63 Color= DrawTime!

    Collision if=0loop]
  pop ret
] PlayGame=

[def $2d# $3a# $2d# $2d# $2e# $2d# 0#] EmptyTimeText=

{
  Car sprite. Black is 0 but also the teminator, therfore use 64 for black.
  XXX Reduce footprint by bringing all lines under one 'def'
}
[def 2#         64# 64# 64# 40# 60# 60# 40# 64# 64# 64#         0#] Car0=
[def 3#             40# 20# 20# 63# 63# 20# 20# 40#             0#] Car1=
[def 2#         40# 20# 20# 20# 40# 40# 20# 20# 20# 40#         0#] Car2=

{-----------------------------------------------------------------------+
|}$08a0 \vLR= ret{      RAM page 8                                      |
+-----------------------------------------------------------------------}
$08a0:

[def 0# 64# 64# 64# 64# 40# 20# 20# 20# 20# 40# 64# 64# 64# 64# 0#] Car3=
[def 0# 64# 64# 64# 64# 21# 21# 21# 21# 21# 21# 64# 64# 64# 64# 0#] Car4=

[def
  {Update video table high bytes for road width and color scheme}
  {We do this part last because any timing delays here don't really
   cause visible problems.}

  {Original version}
{
  $0130 p=              {Video table top of road, at horizon}
  $20 SegmentY=         {Start with smallest segment}
  \invTable q=
  [do
    q 21?               {Y to Z depth mapping for perspective. The offset
                         of 21 reduces aliasing effects near the horizon.}
    Distance+ 4&        {Vertical scrolling Distance}
    [if<>0 1] tmp=
    SegmentY 254& tmp+ p.
    p<++ p<++
    SegmentY<++
    q<++
    p<, 240^ if<>0loop]
}

  {Accelerated version}
  $012e \sysArgs0= {"p"}
  $20   \sysArgs2. {"SegmentY"}
  \invTable q=
  [do
    q 8?
    Distance+ \sysArgs3.
    \SYS_40_Racer_UpdateVideoY 40@
    q<++
    if<>0loop]

  ret
] DrawGrass=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 9                                      |
+-----------------------------------------------------------------------}
$09a0:

[def
  {Advance car along track}
  Speed Distance+ Distance=

  {Update progress indicator}
  $0ef4 p= Distance>, p+ p= 21 p. p<++ 60 p.

  ret
] AdvanceCar=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 10                                     |
+-----------------------------------------------------------------------}
$0aa0:

[def
  push
  $01d9 peek 255^ X=
  CarX>, X+ X=
  $01d8 Video=
  Car0 Sprite= DrawPixels!
  Car1 Sprite= DrawPixels!
  X Steer- X=
  Car2 Sprite= DrawPixels!
  Car3 Sprite= DrawPixels!
  Car4 Sprite= DrawPixels!
  pop ret
] DrawRaceCar=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 12                                     |
+-----------------------------------------------------------------------}
$0ba0:

[def {
  Intro
}
  push

  {Display welcome tekst}
  48 BgColor=

  BgColor \sysArgs0. \sysArgs1.
  $800    \sysPos=
  [do
    \SYS_134_VDrawBits 134@
    \sysPos<++
    \sysPos, 160^ if<>0loop]

  63 Color=
  $801 Pos= EmptyTimeText Text= DrawText!
  $87c Pos= EmptyTimeText Text= DrawText!
  $838 Pos= GigatronText  Text= DrawText!
  60 Delay= Wait!

  pop ret
] Intro=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 13                                     |
+-----------------------------------------------------------------------}
$0ca0:

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 14                                     |
+-----------------------------------------------------------------------}
$0da0:

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 15                                     |
+-----------------------------------------------------------------------}
$0ea0:

[def {SetupHorizon}
  push

  \zippedRacerHorizon p= $1000 q=
  [def p<, 250^ [if<>0 1 else 6] p+ p= ret] tmp= {"next p"}
  [do
    p 0? \sysArgs0. tmp!
      0? \sysArgs1. tmp!
      0? \sysArgs2. tmp!
                     \SYS_56_Unpack 56@
    q \sysPos= 4+ q= \SYS_30_Draw4  30@
    q>, $20^ if<>0loop]

  pop ret
] SetupHorizon=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 16                                     |
+-----------------------------------------------------------------------}
$0fa0:

{--- Run ---}
Intro!

{--- Main loop ---}
[do
  {Setup new game}
  $7400 Distance= NextTurn=

  0 DDX= NextDDX= DrawRoad!
  DrawGrass!
  SetupHorizon!
  SetupRoad!

  $7fff BestTime=
  0 Time= Value= HorizonX= DriftX=
  $7900 CarX=
  1 Speed=

  {XXX "Get ready" message}

  {Play game until finished}
  \frameCount, LastFrame=
  PlayGame!

  {"Game over" message}
  $1435 Pos= {XXX Adjust for horizon position}
  [def
    $47# $41# $4d# $45# $20# $4f# $56# $45# $52# 0# {GAME OVER}
  ] Text=
  15 Color=
  DrawText!

  240 Delay= Wait!

 loop]

{-----------------------------------------------------------------------+
|       End                                                             |
+-----------------------------------------------------------------------}

