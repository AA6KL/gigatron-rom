
{-----------------------------------------------------------------------+
|                                                                       |
|       Racer game                                                      |
|                                                                       |
+-----------------------------------------------------------------------}

gcl0x

{
XXX Steering
XXX Collision detection
XXX Bending road
XXX Curb size, also at horizon
XXX Engine sound
XXX Scoring system
XXX Draw skyline
XXX Scroll skyline
XXX Flash skyscraper light?
XXX Hills?
}

{-----------------------------------------------------------------------+
|                       RAM page 3                                      |
+-----------------------------------------------------------------------}

[def {
  DrawChar -- Pos Color Char

  Draw a 5x8 character on screen with the built-in font.
  `Char' must be in the 32-127 range (this is not checked)
}
  {Map ASCII code to offset in font table}
  Char 82- [if<0 50+ i= \font32up
            else     i= \font82up] fontData= {Select low or high page}
  i i+ tmp= tmp+ i+    {Multiply by 5}
  fontData+ fontData=  {Add to page address to reach bitmap data for Char}
  $800 Pos+ q=         {Where to stop the inner drawing loop}

  {Draw 6 vertical slices: 5 using font data, the last with all-zeros}
  5 i= [do
    [if<>0 fontData 0; fontData<++ else 0] bits=
    Pos p=
    {Draw vertical slice}
    [do
      bits 128& [if=0 BgColor else Color] p!
      bits bits+ bits=
      p>++
      p q- if<0loop]
    Pos<++
    i 1- i= if>=0loop]
  ret
] DrawChar=

[def {
  DrawText(Text,Pos)

  Draw a zero-terminated text string to the screen.
  Character 10 acts as newline.
  There is no check for running off screen.
}
  push
  [do
    Text? Char= {Next character to be printed}
    if<>0       {Zero termination}
      Text<++   {Advance text pointer}
      Char 10^ [if=0 Pos<! $800 Pos+ Pos=
                else DrawChar call]
      loop]
  pop call
] DrawText=

[def
   $47. $69. $67. $61. $74. $72. $6f. $6e. 0. {Gigatron}
] Title=

[def {
  DrawLine -- Draw line
}
  Count i=
  [do if>0
    Color Pos!
    Pos Step+ Pos=
    i 1- i=
    loop]
  ret
] DrawLine=

[def {
  Wait -- Wait Delay number of frames (range 1..255)
}
  \frameCount? Delay+ 255& tmp=
  [do \frameCount? tmp- if<>0loop]
  ret
] Wait=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 4                                      |
+-----------------------------------------------------------------------}
$0400:

[def {
  Intro
}
  push

  {Display welcome tekst}
  8 {Green} Color=
  48 BgColor=
  $800 Pos= ClearScreen call
  63 Color=
  $838 Pos= Title Text= DrawText call
  60 Delay= Wait call

  pop call
] Intro=

[def {
  ClearScreen -- Clear screen from current position to bottom right
}
  Pos p=
  Pos 255| 255-         {XXX Is there a better way to clear the low byte?}
  i= $8001 i+ i=        {Offset to move to next stripe}
  [do
    {Clear one stripe}
    p [do BgColor p! $100 p+ p= if>=0loop]
    {Next stripe}
    i+ p=
    255& {Entire width} if<>0loop]
  ret
] ClearScreen=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 5                                      |
+-----------------------------------------------------------------------}
$0500:

[def
  {Calculate CurbLeft}
  Width Width+ tmp= {x2}
          tmp+ tmp= {x4}
          tmp+ tmp= {x8}
          tmp+ tmp= {x16}
  tmp>? CurbLeft=   {CurbLeft = Width/16}
  Width CurbLeft- CurbRight=

  0 W=

  {Draw road segment}
  Width i= [do
    21{Dark Grey} Color=
    W CurbLeft-  [if<0  CurbColor Color=]
    W CurbRight- [if>=0 CurbColor Color=]
    Color p!
    W<++
    p<++
    i 1- i= if>0loop]

  {Draw grass}
  [do
    GrassColor p!
    p<++
    p<? if<>0loop]

  ret
] SetupSegment=

[def
  push

  $2000 Pos=
  3 {Bright Red} CurbColor=
  8 {Green} GrassColor=

  2 Width=
  [do
    Pos p=
    SetupSegment call Width 2+ Width=
    Pos>++
    Width 98^ if<>0loop]

  63 {White} CurbColor=
  12 {Bright Green} GrassColor=

  2 Width=
  [do
    Pos p=
    SetupSegment call Width 2+ Width=
    Pos>++
    Width 98^ if<>0loop]

  pop call
] SetupRoad=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 6                                      |
+-----------------------------------------------------------------------}
$0600:

[def
  {Step 1: Calculate road curvature}

  0 X=
  $0fd0 p= {array of 48 bytes: $0fd0-$0fff}
  [do
    X>? p! p<++
    X DX+ X=
    p<? if<>0loop]

  {Step 2: Update video table low bytes for road}
  {This step is most timing-sensitive wrt. the video loop}

  $0ff8 peek 40+ LastX= {Pivot 16px above bottom of screen / road width 80}
  $0131 p=              {Video table start of road}

  $0fd0 q=
  [do
    q? LastX- p!
    p<++ p<++ p<++ p<++
    {p 4+ p=}

    q? LastX=
    q<++
    q<? if<>0loop]

  {Step 3: Update video table high bytes for road width and color scheme}
  {Do this part last because timing doesn't really cause visible problems}

  $2000 SegmentY=   {Start with smallest segment}
  $0130 p=          {Video table start of road}

  \invTable z=
  [do
    z 12;            {Y to Z depth mapping for perspective}
    phase+ 8&        {Vertical scrolling phase}
    [if<>0 $30] Hue= {To get $2000 or $5000}
    SegmentY>? Hue+ p! p<++
    p<++
    SegmentY $80+ SegmentY=
    z<++

    p<? 240^ if<>0loop]

  ret
] DrawRoad=

[def 21. 21. 21. 64. 64. 64. 40. 60. 60. 40. 64. 64. 64. 21. 21. 21. 0.] Car0=
[def 21. 21. 21. 21. 40. 20. 20. 63. 63. 20. 20. 40. 21. 21. 21. 21. 0.] Car1=
[def 21. 21. 21. 40. 20. 20. 20. 40. 40. 20. 20. 20. 40. 21. 21. 21. 0.] Car2=
[def 21. 64. 64. 64. 64. 40. 20. 20. 20. 20. 40. 64. 64. 64. 64. 21. 0.] Car3=
[def 21. 64. 64. 64. 64. 21. 21. 21. 21. 21. 21. 64. 64. 64. 64. 21. 0.] Car4=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 7                                      |
+-----------------------------------------------------------------------}
$0700:

[def
  v?       p>! v<++
  v? X+ X= p<! v<++
  Sprite q= 21 [do p! p<++ q? q<++ if<>0loop] 21 p!

  v?       p>! v<++
     X     p<! v<++
  Sprite q= 21 [do p! p<++ q? q<++ if<>0loop] 21 p!

  ret
] DrawPixels=

[def
  push

  $01d9 peek 255^ CarX+ X=

  $01d8 v=

  Car0 Sprite= DrawPixels call
  Car1 Sprite= DrawPixels call
  Car2 Sprite= DrawPixels call
  Car3 Sprite= DrawPixels call
  Car4 Sprite= DrawPixels call

  pop call
] DrawCar=

{--- Run ---}

Intro call
SetupRoad call

20 CarX=
1 Delay=
0 phase=
[do
  phase 128& [if=0 phase else phase 255^] 48- DX=
  DX+ DX= DX+ DX= DX+ DX= DX+ DX= {Shift 4}
  Wait call
  DrawRoad call
  DrawCar call
  phase<++
  loop]

{-----------------------------------------------------------------------+
|       End                                                             |
+-----------------------------------------------------------------------}

