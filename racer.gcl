
{-----------------------------------------------------------------------+
|                                                                       |
|       Racer game                                                      |
|                                                                       |
+-----------------------------------------------------------------------}

gcl0x

{
XXX Engine sound
XXX Scoring system
XXX Draw skyline
XXX Scroll skyline
XXX Bending road
XXX Sprite acceleration
XXX Checkerboard grass
}

{-----------------------------------------------------------------------+
|                       RAM page 3                                      |
+-----------------------------------------------------------------------}

[def {
  DrawChar -- Pos Color Char

  Draw a 5x8 character on screen with the built-in font.
  `Char' must be in the 32-127 range (this is not checked)
}
  {Map ASCII code to offset in font table}
  Char 82- [if<0 50+ i= \font32up
            else     i= \font82up] fontData= {Select low or high page}
  i i+ tmp= tmp+ i+    {Multiply by 5}
  fontData+ fontData=  {Add to page address to reach bitmap data for Char}
  $800 Pos+ q=         {Where to stop the inner drawing loop}

  {Draw 6 vertical slices: 5 using font data, the last with all-zeros}
  5 i= [do
    [if<>0 fontData 0; fontData<++ else 0] bits=
    Pos p=
    {Draw vertical slice}
    [do
      bits 128& [if=0 BgColor else Color] p!
      bits bits+ bits=
      p>++
      p q- if<0loop]
    Pos<++
    i 1- i= if>=0loop]
  ret
] DrawChar=

[def {
  DrawText(Text,Pos)

  Draw a zero-terminated text string to the screen.
  Character 10 acts as newline.
  There is no check for running off screen.
}
  push
  [do
    Text? Char= {Next character to be printed}
    if<>0       {Zero termination}
      Text<++   {Advance text pointer}
      Char 10^ [if=0 Pos<! $800 Pos+ Pos=
                else DrawChar call]
      loop]
  pop call
] DrawText=

[def
   $47. $69. $67. $61. $74. $72. $6f. $6e. 0. {Gigatron}
] Title=

[def {
  DrawLine -- Draw line
}
  Count i=
  [do if>0
    Color Pos!
    Pos Step+ Pos=
    i 1- i=
    loop]
  ret
] DrawLine=

[def {
  Wait -- Wait Delay number of frames (range 1..255)
}
  \frameCount? Delay+ 255& tmp=
  [do \frameCount? tmp- if<>0loop]
  ret
] Wait=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 4                                      |
+-----------------------------------------------------------------------}
$0400:

[def {
  Intro
}
  push

  {Display welcome tekst}
  8 {Green} Color=
  48 BgColor=
  $800 Pos= ClearScreen call
  63 Color=
  $838 Pos= Title Text= DrawText call
  60 Delay= Wait call

  pop call
] Intro=

[def {
  ClearScreen -- Clear screen from current position to bottom right
}
  Pos p=
  Pos 255| 255-         {XXX Is there a better way to clear the low byte?}
  i= $8001 i+ i=        {Offset to move to next stripe}
  [do
    {Clear one stripe}
    p [do BgColor p! $100 p+ p= if>=0loop]
    {Next stripe}
    i+ p=
    255& {Entire width} if<>0loop]
  ret
] ClearScreen=

[def {
  DrawPixels -- Write a single line of pixels on two correspinding
                road scanlines (light and dark). Remove previous
                pixels, if any.
                XXX This is probably better done as a SYS call
}
  { Setup page reference for write pointers }
  Video? 254&  p>! 1| q>! Video<++

  {Find segment to clear from position p[0] to position q[0]}
  0 p<! q<!
  p? i= q? i- i=        {i = q[0] - p[0]}
  p? p<! q<!            {p,q = p+p[0], q+p[0]}

  {Clear previous object}
  {XXX Only clear pixels outside new area?}
  [do
    21 p! q!            {Clear pixel on both lines}
    p<++ q<++
    i 1- i=
    if>0loop]

  {Set low bytes of p and q, to turn them into pixel write pointers}
  Sprite s=             {Pixel read pointer}
  0 p<!                 {First let p point to start of page}
  Video? X+ X= s? X+    {First byte in pixel data is offset}
  p!                    {Remember starting point}
  p<! q<!               {Set low bytes}

  {Draw actual pixels}
  s<++
  [do
     p? 21^ Collision+ Collision=
     s?
     p! p<++
     q! q<++
     s<++ s? if<>0loop]

  {Remember end point for later removal}
  0 q<! p<? q!

  Video 3+ Video=
  ret
] DrawPixels=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 5                                      |
+-----------------------------------------------------------------------}
$0500:

[def
  push
  $2080 Pos=

  1 Width=
  [do
    3 {Bright Red} CurbColor=
    8 {Green} GrassColor=
    SetupSegment call
    Pos>++

    63 {White} CurbColor=
    12 {Bright Green} GrassColor=
    SetupSegment call
    Pos>++

    Width 1+ Width=
    Pos if>=0loop]

  {Setup undo infomation for last lines (for car sprite)}
  $7400 [do \POKE. \vAC. \vAC>++ if>0loop]

  pop call
] SetupRoad=

[def
  {Calculate CurbLeft}
  {XXX Simplify}
  Width Width+ tmp= {x2}
          tmp+ tmp= {x4}
          tmp+ tmp= {x8}
          tmp+ tmp= {x16}
          tmp+ tmp= {x32}
  tmp>? CurbLeft=   {CurbLeft = Width/16}
  Width CurbLeft- CurbRight=

  Pos p=

  0 CurbRight- W=
  {Draw road segment}
  Width i= [do
    W 1+ W= [if<=0 21 {Dark Grey} else CurbColor] p!
    p<++
    i 1- i= if>0loop]

  {Draw grass}
  [do
    GrassColor p!
    p<++
    p<? if<>0loop]

  {Draw mirror image}
  [do
    p 255^ peek p!
    p<++
    p<? 128^ if<>0loop]

  ret
] SetupSegment=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 6                                      |
+-----------------------------------------------------------------------}
$0600:

[def
  {Step 1: Calculate road curvature}

  0 X=
  $0fd0 p= {array of 48 bytes: $0fd0-$0fff}
  [do
    X>? p! p<++
    X DX+ X=
    p<? if<>0loop]

  {Step 2: Update video table low bytes for road}
  {This step is most timing-sensitive wrt. the video loop}

  $0ffa peek 48- LastX= {Pivot 12px from bottom / front of car}
  $0131 p=              {Video table start of road}

  $0fd0 q=
  [do
    q? LastX- p!
    p<++ p<++ p<++ p<++
    {p 4+ p=}

    q? LastX=
    q<++
    q<? if<>0loop]
  ret
] DrawCurvature=

[def
  {Step 3: Update video table high bytes for road width and color scheme}
  {Do this part last because timing doesn't really cause visible problems}

  $20 SegmentY=      {Start with smallest segment}
  $0130 p=           {Video table top of road, at horizon}

  \invTable z=
  [do
    z 20;            {Y to Z depth mapping for perspective.
                      Offset of 20 reduces aliasing near horizon}
    phase+ 4&        {Vertical scrolling phase}
    [if<>0 1] Hue=
    SegmentY 254& Hue+ p!
    p<++ p<++
    SegmentY<++
    z<++

    p<? 240^ if<>0loop]

  ret
] DrawPerspective=

{
  Car sprite. Black is 0 but also the teminator, therfore use 64 for black.
  XXX Reduce footprint by bringing all lines under one 'def'
}

[def 2.         64. 64. 64. 40. 60. 60. 40. 64. 64. 64.         0.] Car0=
[def 3.             40. 20. 20. 63. 63. 20. 20. 40.             0.] Car1=
[def 2.         40. 20. 20. 20. 40. 40. 20. 20. 20. 40.         0.] Car2=
[def 0. 64. 64. 64. 64. 40. 20. 20. 20. 20. 40. 64. 64. 64. 64. 0.] Car3=
[def 0. 64. 64. 64. 64. 21. 21. 21. 21. 21. 21. 64. 64. 64. 64. 0.] Car4=

{-----------------------------------------------------------------------+
|}\vLR>++ ret{          RAM page 7                                      |
+-----------------------------------------------------------------------}
$0700:

 PlayGame=

{--- Run ---}

Intro call

[def
  push

  $01d9 peek 255^ X=
  CarX>? X+ X=
  $01d8 Video=

  Car0 Sprite= DrawPixels call
  Car1 Sprite= DrawPixels call X Steer- X=
  Car2 Sprite= DrawPixels call
  Car3 Sprite= DrawPixels call
  Car4 Sprite= DrawPixels call

  pop call
] DrawCar=

[do {
  Main loop
}

  {Setup game}
  $1000 Pos= ClearScreen call
  0 DX= DrawCurvature call
  63 phase=
  DrawPerspective call
  SetupRoad call
  $7900 CarX=
  1 Delay=

  {Run game loop}
  [do
    Wait call

    phase<++
    phase 128& [if=0 phase else phase 255^] 64- DX=
    DX+ DX= DriftX= DX+ DX= DX+ DX= DX+ DX= {Shift 4}

    DrawCurvature call

    CarX DriftX- CarX=
    0 Steer=
    \serialRaw? $fe^ {~buttonRight} [if=0  $200 CarX+ CarX= +1 Steer=]
    \serialRaw? $fd^ {~buttonLeft}  [if=0 -$200 CarX+ CarX= -1 Steer=]

    0 Collision=
    DrawCar call

    DrawPerspective call

    Collision if=0loop]

  {Game Over text}
  $1435 Pos=
  [def
    $47. $41. $4d. $45. $20. $4f. $56. $45. $52. 0. {GAME OVER}
  ] Text=
  15 Color=
  DrawText call

  240 Delay= Wait call

  loop]

{-----------------------------------------------------------------------+
|       End                                                             |
+-----------------------------------------------------------------------}

