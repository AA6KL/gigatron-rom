ST    $DD       5e    Store byte in zero page ([D]=vAC)
STW   $DD       2b    Store word into zero page ([D]=vAC&255,[D+1]=vAC>>8)
STLW  $DD       ec    Store word in stack frame (vSP[D],vSP[D+1]=vAC&255,vAC>>8)
LD    $DD       1a    Load byte from zero page (vAC=[D])
LDI   $DD       59    Load immediate constant (vAC=$DD)
LDWI  $DDDD     11    Load immediate constant (vAC=$DDDD)
LDW   $DD       21    Word load from zero page (vAC=[D]+256*[D+1])
LDLW  $DD       ee    Load word from stack frame (vAC=vSP[D]+256*vSP[D+1]
ADDW  $DD       99    Word addition with zero page (vAC+=[D]+256*[D+1])
SUBW  $DD       b8    Word subtraction with zero page (vAC-=[D]+256*[D+1])
ADDI  $DD       e3    Add small positive constant (vAC+=D)
SUBI  $DD       e6    Subtract small positive constant (vAC+=D)
LSLW  -         e9    Shift left (because 'ADDW vAC' will not work!) (vAC+=vAC)
INC   $DD       93    Increment zero page byte ([D]++)
ANDI  $DD       82    Logical-AND with constant (vAC&=D)
ANDW  $DD       f8    Word logical-AND with zero page (vAC&=[D]+256*[D+1])
ORI   $DD       88    Logical-OR with constant (vAC|=D)
ORW   $DD       fa    Word logical-OR with zero page (vAC|=[D]+256*[D+1])
XORI  $DD       8c    Logical-XOR with constant (vAC^=D)
XORW  $DD       fc    Word logical-XOR with zero page (vAC^=[D]+256*[D+1])
PEEK  -         ad    Read byte from memory (vAC=[vAC])
DEEK  -         f6    Read word from memory (vAC=[vAC]+256*[vAC+1])
POKE  $DD       f0    Write byte in memory ([[D+1],[D]]=vAC&255)
DOKE  $DD       f3    Write word in memory ([[D+1],[D]],[[D+1],[D]+1]=vAC&255,vAC>>8)
LUP   $DD       7f    ROM lookup (vAC=ROM[D,AC])
BRA   $DD       90    Branch unconditionally (vPC=(vPC&0xff00)+D)
BCC   $CC $DD   35    Test vAC and branch conditionally. CC can be EQ,NE,LT,GT,LE,GE
CALL  $DD       cf    Goto address but remember vPC (vLR,vPC=vPC+2,[D]+256*[D+1]-2)
RET   -         ff    Leaf return (vPC=vLR-2)
PUSH  -         75    Push vLR on stack ([--vSP]=vLR&255,[--vSP]=vLR>>8)
POP   -         63    Pop value from stack (vAC=[vSP]+256*[vSP+1],vSP+=2)
ALLOC $DD       df    Create or destroy stack frame (vSP+=D)
SYS   $DD       b4    Native function call for at most $DD ticks ($DD*2 cycles)
DEF   $DD       cd    Define data or code (vAC,vPC=vPC+2,D+256*(vPC>>8))

EQ              3f
NE              72
LT              50
GT              4d
LE              56
GE              53

// Clear screen test
0x59, 0x00,       // 0200 LDI  0x00     ' Clear screen colour
0x5e, 0x34,       // 0202 ST   't'

0x59, 0x08,       // 0204 LDI  0x08     ' Load screen address 0x0800 high 0x08  
0x5e, 0x31,       // 0206 ST   'q'
0x59, 0x78,       // 0208 LDI  0x78     ' Load screen Y dimension, (120)       
0x5e, 0x33,       // 020a ST   's'

0x59, 0x00,       // 020c LDI  0x00     ' Load screen address 0x0800 low 0x00
0x5e, 0x30,       // 020e ST   'p'
0x59, 0x9f,       // 0210 LDI  0x9f     ' Load screen X dimension, (160)       
0x5e, 0x32,       // 0212 ST   'r'

0x1a, 0x34,       // 0214 LD   't'
0x8c, 0xff,       // 0216 XORI 0xff     ; Toggle colour
0x5e, 0x34,       // 0218 ST   't'
0xf0, 0x30,       // 021a POKE 'p'      ; Write low byte of accumulator there

0x93, 0x30,       // 021c INC  'p'      ; X loop
0x1a, 0x32,       // 021e LD   'r'
0xe6, 0x01,       // 0220 SUBI 1
0x35, 0x72, 0x10  // 0222 BNE $0212     ; Branch (address & 0x00FF) - 2

0x93, 0x31,       // 0225 INC  'q'      ; Y loop
0x1a, 0x33,       // 0227 LD   's'
0xe6, 0x01,       // 0229 SUBI 1
0x35, 0x72, 0x08  // 022b BNE $020a     ; Branch (address & 0x00FF) - 2

0x90, 0x2c        // 022e BRA $022e     ; Branch (address & 0x00FF) - 2
